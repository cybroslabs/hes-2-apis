syntax = "proto3";
package io.clbs.openhes.pbdeviceregistry;

option go_package = "github.com/cybroslabs/hes-2-apis/protobuf/pbdeviceregistry";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "pbdriver.proto";

// The Deviceregistry service definition.
service DeviceRegistryService {
    // The method called by the RestAPI to register a new communication unit. The parameter contains the communication unit specification.
    rpc CreateCommunicationUnit(CreateCommunicationUnitRequest) returns (google.protobuf.Empty);
    // The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
    rpc GetCommunicationUnits(GetCommunicationUnitRequest) returns (GetCommunicationUnitResponse);
    
    // The method called by the RestAPI to register a new device. The parameter contains the device specification.
    rpc CreateDevice(CreateDeviceRequest) returns (google.protobuf.Empty);
    // The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.    
    rpc GetDevices(GetDeviceRequest) returns (GetDeviceResponse);
    // The method called by the RestAPI to replace ordered set of linked communication units.
    rpc SetDeviceCommunicationUnits(SetDeviceCommunicationUnitsRequest) returns (google.protobuf.Empty);
    
    // The method called by the RestAPI to create a new device group. The parameter contains the device group specification.
    rpc CreateDeviceGroup(CreateDeviceGroupRequest) returns (google.protobuf.Empty);
    // The method called by the RestAPI to get the information about the device group. The parameter contains the search criteria.
    rpc GetDeviceGroups(GetDeviceGroupRequest) returns (GetDeviceGroupResponse);
    // The method called by the RestAPI to add a new device to the device group. The parameter contains the device group specification.
    rpc AddDevicesToGroup(AddDevicesToGroupRequest) returns (google.protobuf.Empty);
    // The method called by the RestAPI to remove a device from the device group. The parameter contains the device group specification.
    rpc RemoveDevicesFromGroup(RemoveDevicesFromGroupRequest) returns (google.protobuf.Empty);
}

// RestApi -> DriverRegistry - The communication unit specification.
message CreateCommunicationUnitRequest {
    CommunicationUnitSpec spec = 1 [json_name = "s"]; // The communication unit specification.
}

// RestApi -> DriverRegistry - the request message to get the information about the communication unit.
message GetCommunicationUnitRequest {
    optional string id = 1 [json_name="i"]; // The UUID of the communication unit.
    optional string external_id = 2 [json_name="e"]; // The external identifier of the communication unit.
    optional string name = 3 [json_name="n"]; // The name of the communication unit.
}

// DriverRegistry -> RestApi - the message holds the information about the communication unit.
message GetCommunicationUnitResponse {
    repeated CommunicationUnitSpec spec = 1 [json_name = "s"]; // The communication unit specification.
}

// Sub-message - the communication unit specification.
message CommunicationUnitSpec {
    string id = 1 [json_name="i"]; // The UUID of the communication unit.
    optional string external_id = 2 [json_name="e"]; // The external identifier of the communication unit.
    string name = 3 [json_name="n"]; // The name of the communication unit.
    oneof connection_type {
        pbdriver.ConnectionTypeTcp tcp = 4 [json_name="t"]; // The TCP connection type.
        pbdriver.ConnectionTypePhone phone = 5 [json_name="p"]; // The phone connection type.
        pbdriver.ConnectionTypeSerial serial = 6 [json_name="s"]; // The serial connection type.
    }
}

// RestApi -> DriverRegistry - the request message to create a new device.
message CreateDeviceRequest {
    DeviceSpec spec = 1 [json_name = "s"]; // The device specification.
}

// RestApi -> DriverRegistry - the request message to get the information about the device.
message GetDeviceRequest {
    optional string id = 1 [json_name="i"]; // The UUID of the device.
    optional string external_id = 2 [json_name="e"]; // The external identifier of the device.
    optional string name = 3 [json_name="n"]; // The name of the device.
}

// DriverRegistry -> RestApi - the message holds the information about the device.
message GetDeviceResponse {
    repeated DeviceSpec spec = 1 [json_name = "s"]; // The device specification.
    // TODO: Add status
}

// Sub-message - the device specification.
message DeviceSpec {
    string id = 1 [json_name="i"]; // The UUID of the device.
    optional string external_id = 2 [json_name="e"]; // The external identifier of the device.
    string name = 3 [json_name="n"]; // The name of the device.
    map<string,pbdriver.AttributeValue> attributes = 4 [json_name="a"]; // The template of the action attributes. It is represented as a list of attribute definitions.
    repeated string communication_unit_id = 5 [json_name="c"]; // The list of communication unit identifiers that allows to communicate with the device. It's an ordered set where the first element is the primary communication unit with the highest priority.
}

// Sub-message that represents the device group.
message DeviceGroupSpec {
    string id = 1 [json_name="i"]; // The UUID of the device group.
    optional string external_id = 2 [json_name="e"]; // The external identifier of the communication unit.
    string name = 3 [json_name="n"]; // The name of the device group.
    repeated string device_id = 4 [json_name="d"]; // The list of device identifiers that are part of the group.
}

// RestApi -> DriverRegistry - the request message to get the information about the device group.
message CreateDeviceGroupRequest {
    DeviceGroupSpec spec = 1 [json_name = "s"]; // The device group specification.
}

// RestApi -> DriverRegistry - the request message to get the information about the device group.
message GetDeviceGroupRequest {
    optional string id = 1 [json_name="i"]; // The UUID of the device group.
    optional string name = 2 [json_name="n"]; // The name of the device group.
}

// DriverRegistry -> RestApi - the message holds the information about the device group.
message GetDeviceGroupResponse {
    repeated DeviceGroupSpec spec = 1 [json_name = "s"]; // The device group specification.
    // TODO: Add status
}

// RestApi -> DriverRegistry - the request message to add a new device to the device group.
message AddDevicesToGroupRequest {
    string group_id = 1 [json_name="g"]; // The unique identifier of the device group.
    repeated string device_id = 2 [json_name="d"]; // The unique identifier of the device.
}

// RestApi -> DriverRegistry - the request message to remove a device from the device group.
message RemoveDevicesFromGroupRequest {
    string group_id = 1 [json_name="g"]; // The unique identifier of the device group.
    repeated string device_id = 2 [json_name="d"]; // The unique identifier of the device.
}

// RestApi -> DriverRegistry - the request message to add a new device to the communication unit.
message SetDeviceCommunicationUnitsRequest {
    string device_id = 1 [json_name="d"]; // The unique identifier of the device.
    repeated string communication_unit_id = 2 [json_name="c"]; // The unique identifier of the communication unit.
}
