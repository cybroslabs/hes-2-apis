syntax = "proto3";
package io.clbs.openhes.pbdeviceregistry;

option go_package = "github.com/cybroslabs/hes-2-apis/protobuf/pbdeviceregistry";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "pbdriver.proto";

// The Deviceregistry service definition.
service DeviceRegistryService {
    // The method called by the Driver Operator to set the driver templates. The parameter contains the driver templates.
    rpc SetDriverTemplates(pbdriver.NegotiateRequest) returns (google.protobuf.Empty);

    // The method called by the RestAPI to register a new communication unit. The parameter contains the communication unit specification.
    rpc CreateCommunicationUnit(CreateCommunicationUnitRequest) returns (google.protobuf.Empty);
    // The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
    rpc GetCommunicationUnits(GetCommunicationUnitsRequest) returns (GetCommunicationUnitsResponse);

    // The method called by the RestAPI to register a new device. The parameter contains the device specification.
    rpc CreateDevice(CreateDeviceRequest) returns (google.protobuf.Empty);
    // The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
    rpc GetDevices(GetDevicesRequest) returns (GetDevicesResponse);
    // The method called by the RestAPI to replace ordered set of linked communication units.
    rpc SetDeviceCommunicationUnits(SetDeviceCommunicationUnitsRequest) returns (google.protobuf.Empty);
    // The method called by the RestAPI to get communication units definitions linked to the device(s).
    rpc GetDevicesCommunicationUnits(GetDevicesCommunicationUnitsRequest) returns (GetDevicesCommunicationUnitsResponse);

    // The method called by the RestAPI to create a new device group. The parameter contains the device group specification.
    rpc CreateDeviceGroup(CreateDeviceGroupRequest) returns (google.protobuf.Empty);
    // The method called by the RestAPI to get the information about the device group. The parameter contains the search criteria.
    rpc GetDeviceGroups(google.protobuf.StringValue) returns (GetDeviceGroupsResponse);
    // The method called by the RestAPI to add a new device to the device group. The parameter contains the device group specification.
    rpc AddDevicesToGroup(AddDevicesToGroupRequest) returns (google.protobuf.Empty);
    // The method called by the RestAPI to remove a device from the device group. The parameter contains the device group specification.
    rpc RemoveDevicesFromGroup(RemoveDevicesFromGroupRequest) returns (google.protobuf.Empty);

    // The method to get list of the modem pools.
    rpc GetModemPools(google.protobuf.Empty) returns (GetModemPoolsResponse);
    // The method to get the information about the modem pool. The method returns the modem pool information.
    rpc GetModemPool(google.protobuf.StringValue) returns (GetModemPoolResponse);
    // The method to create a new modem pool.
    rpc CreateModemPool(SetModemPoolRequest) returns (google.protobuf.Empty);
    // The method to update the modem pool.
    rpc UpdateModemPool(SetModemPoolRequest) returns (google.protobuf.Empty);
    // The method to delete the modem pool.
    rpc DeleteModemPool(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // The method to create a new modem within the pool.
    rpc CreateModem(SetModemRequest) returns (google.protobuf.Empty);
    // The method to update the modem within the pool.
    rpc UpdateModem(SetModemRequest) returns (google.protobuf.Empty);
    // The method to delete the modem within the pool.
    rpc DeleteModem(google.protobuf.StringValue) returns (google.protobuf.Empty);
}

// RestApi -> DriverRegistry - The communication unit specification.
message CreateCommunicationUnitRequest {
    CommunicationUnitSpec spec = 1;  // The communication unit specification.
}

// RestApi -> DriverRegistry - the request message to get the information about the communication unit.
message GetCommunicationUnitsRequest {
    optional string id          = 1;  // The UUID of the communication unit.
    optional string external_id = 2;  // The external identifier of the communication unit.
    optional string name        = 3;  // The name of the communication unit.
}

// DriverRegistry -> RestApi - the message holds the information about the communication unit.
message GetCommunicationUnitsResponse {
    repeated CommunicationUnitSpec spec = 1;  // The communication unit specification.
}

// Sub-message - the communication unit specification.
message CommunicationUnitSpec {
    string id                               = 1;  // The UUID of the communication unit.
    optional string external_id             = 2;  // The external identifier of the communication unit.
    string name                             = 3;  // The name of the communication unit.
    pbdriver.ConnectionInfo connection_info = 4;  // The connection info.
}

// RestApi -> DriverRegistry - the request message to create a new device.
message CreateDeviceRequest {
    DeviceSpec spec = 1;  // The device specification.
}

// RestApi -> DriverRegistry - the request message to get the information about the device.
message GetDevicesRequest {
    optional string id          = 1;  // The UUID of the device.
    optional string external_id = 2;  // The external identifier of the device.
    optional string name        = 3;  // The name of the device.
}

// DriverRegistry -> RestApi - the message holds the information about the device.
message GetDevicesResponse {
    repeated DeviceSpec spec = 1;  // The device specification.
    // TODO: Add status
}

// Sub-message - the device specification.
message DeviceSpec {
    string id                                       = 1;  // The UUID of the device.
    optional string external_id                     = 2;  // The external identifier of the device.
    string name                                     = 3;  // The name of the device.
    map<string, pbdriver.AttributeValue> attributes = 4;  // The template of the action attributes. It is represented as a list of attribute definitions.
    repeated string communication_unit_id           = 5;  // The list of communication unit identifiers that allows to communicate with the device. It's an ordered set where the first element is the primary communication unit with the highest priority.
    optional string timezone                        = 6;  // The timezone related to the device, e.g. "America/New_York", "Europe/Prague", "CET", "GMT", "Etc/GMT+2".
}

// Sub-message that represents the device group.
message DeviceGroupSpec {
    string id                   = 1;  // The UUID of the device group.
    optional string external_id = 2;  // The external identifier of the communication unit.
    string name                 = 3;  // The name of the device group.
    repeated string device_id   = 4;  // The list of device identifiers that are part of the group.
}

// RestApi -> DriverRegistry - the request message to get the information about the device group.
message CreateDeviceGroupRequest {
    DeviceGroupSpec spec = 1;  // The device group specification.
}

// DriverRegistry -> RestApi - the message holds the information about the device group.
message GetDeviceGroupsResponse {
    repeated DeviceGroupSpec spec = 1;  // The device group specification.
    // TODO: Add status
}

// RestApi -> DriverRegistry - the request message to add a new device to the device group.
message AddDevicesToGroupRequest {
    string group_id           = 1;  // The unique identifier of the device group.
    repeated string device_id = 2;  // The unique identifier of the device.
}

// RestApi -> DriverRegistry - the request message to remove a device from the device group.
message RemoveDevicesFromGroupRequest {
    string group_id           = 1;  // The unique identifier of the device group.
    repeated string device_id = 2;  // The unique identifier of the device.
}

// RestApi -> DriverRegistry - the request message to add a new device to the communication unit.
message SetDeviceCommunicationUnitsRequest {
    string device_id                      = 1;  // The unique identifier of the device.
    repeated string communication_unit_id = 2;  // The unique identifier of the communication unit.
}

// RestApi -> DriverRegistry - the request message to get
message GetDevicesCommunicationUnitsRequest {
    repeated string device_id = 1;  // The unique identifier of the device.
}

// DriverRegistry -> RestApi - the message holds the information about the communication units linked to the device.
message GetDevicesCommunicationUnitsResponse {
    map<string, DeviceCommunicationUnits> devices = 1;  // The list of devices with their communication units.
}

// Sub-message that represents the communication units linked to the device.
message DeviceCommunicationUnits {
    repeated pbdriver.ConnectionInfo communication_units = 1;  // The list of communication units linked to the device.
}

// Sub-message that represents the modem pool.
message ModemPoolSpec {
    string pool_id = 1;  // The modem pool identifier.
    string name    = 2;  // The name of the modem pool.
}

// RestApi -> DriverRegistry - the request message to get the modem pools.
message GetModemPoolsResponse {
    repeated ModemPoolSpec pools = 1;  // The list of modem pools.
}

// RestApi -> DriverRegistry - the request message to get the modem pool info.
message GetModemPoolRequest {
    string pool_id = 1;  // The modem pool identifier.
}

// DriverRegistry -> RestApi - the message holds the information about the modem pool.
message GetModemPoolResponse {
    repeated pbdriver.ModemInfo modems = 1;  // The modems registered within the pool.
    string name                        = 2;  // The name of the modem pool.
}

message SetModemPoolRequest {
    string pool_id = 1;  // The modem pool identifier. It must be unique within the system.
    string name    = 2;  // The name of the modem pool to be created. It must be unique within the system.
}

message SetModemRequest {
    string pool_id           = 1;  // The modem pool identifier, required for update operation.
    pbdriver.ModemInfo modem = 2;  // The modem specification.
}
