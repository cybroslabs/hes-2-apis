syntax = "proto3";
package io.clbs.openhes.pbdeviceregistry;

option go_package = "github.com/cybroslabs/hes-2-apis/protobuf/pbdeviceregistry";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "pbdriver.proto";

// The Deviceregistry service definition.
service DeviceRegistryService {
    // The method called by the RestAPI to register a new device. The parameter contains the device specification.
    rpc CreateDevice(CreateDeviceRequest) returns (DeviceSpec);
    // The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
    rpc GetDevices(GetDeviceRequest) returns (GetDeviceResponse);
    // The method called by the RestAPI to create a new device group. The parameter contains the device group specification.
    rpc CreateDeviceGroup(CreateDeviceGroupRequest) returns (DeviceGroupSpec);
    // The method called by the RestAPI to get the information about the device group. The parameter contains the search criteria.
    rpc GetDeviceGroups(GetDeviceGroupRequest) returns (GetDeviceGroupResponse);
}

// RestApi -> DriverRegistry - the request message to create a new device.
message CreateDeviceRequest {
    DeviceSpec spec = 1 [json_name = "s"]; // The device specification.
}

// RestApi -> DriverRegistry - the request message to get the information about the device.
message GetDeviceRequest {
    optional int64 id = 1 [json_name="i"]; // The unique identifier of the device.
    optional string public_id = 2 [json_name="p"]; // The UUID of the device.
    optional string external_id = 3 [json_name="e"]; // The external identifier of the device.
    optional string name = 4 [json_name="n"]; // The name of the device.
}

// DriverRegistry -> RestApi - the message holds the information about the device.
message GetDeviceResponse {
    repeated DeviceSpec spec = 1 [json_name = "s"]; // The device specification.
    // TODO: Add status
}

message DeviceSpec {
    int64 id = 1 [json_name="i"]; // The unique identifier of the device.
    string public_id = 2 [json_name="p"]; // The UUID of the device.
    string external_id = 3 [json_name="e"]; // The external identifier of the device.
    string name = 4 [json_name="n"]; // The name of the device.
    repeated pbdriver.AttributeDefinition attributes = 5 [json_name="a"]; // The template of the action attributes. It is represented as a list of attribute definitions.
}

// Sub-message that represents the device group.
message DeviceGroupSpec {
    int64 id = 1 [json_name="i"]; // The unique identifier of the device group.
    string public_id = 2 [json_name="p"]; // The UUID of the device group.
    string name = 3 [json_name="n"]; // The name of the device group.
    repeated int64 devices = 4 [json_name="d"]; // The list of device identifiers that are part of the group.
}

// RestApi -> DriverRegistry - the request message to get the information about the device group.
message CreateDeviceGroupRequest {
    DeviceGroupSpec spec = 1 [json_name = "s"]; // The device group specification.
}

// RestApi -> DriverRegistry - the request message to get the information about the device group.
message GetDeviceGroupRequest {
    optional int64 id = 1 [json_name="i"]; // The unique identifier of the device group.
    optional string public_id = 2 [json_name="p"]; // The UUID of the device group.
    optional string name = 3 [json_name="n"]; // The name of the device group.
}

// DriverRegistry -> RestApi - the message holds the information about the device group.
message GetDeviceGroupResponse {
    repeated DeviceGroupSpec spec = 1 [json_name = "s"]; // The device group specification.
    // TODO: Add status
}
