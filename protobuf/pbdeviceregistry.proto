syntax = "proto3";
package io.clbs.openhes.pbdeviceregistry;

option go_package = "github.com/cybroslabs/hes-2-apis/protobuf/pbdeviceregistry";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "pbdriver.proto";

// The Deviceregistry service definition.
service DeviceRegistryService {
    // The method called by the Driver Operator to set the driver templates. The parameter contains the driver templates.
    rpc SetDriverTemplates(pbdriver.NegotiateRequest) returns (google.protobuf.Empty);

    // The method called by the RestAPI to register a new communication unit. The parameter contains the communication unit specification.
    rpc CreateCommunicationUnit(CreateCommunicationUnitRequest) returns (google.protobuf.Empty);
    // The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
    rpc GetCommunicationUnits(GetCommunicationUnitsRequest) returns (GetCommunicationUnitsResponse);

    // The method called by the RestAPI to register a new device. The parameter contains the device specification.
    rpc CreateDevice(CreateDeviceRequest) returns (google.protobuf.Empty);
    // The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
    rpc GetDevices(GetDevicesRequest) returns (GetDevicesResponse);
    // The method called by the RestAPI to replace ordered set of linked communication units.
    rpc SetDeviceCommunicationUnits(SetDeviceCommunicationUnitsRequest) returns (google.protobuf.Empty);

    // The method called by the RestAPI to create a new device group. The parameter contains the device group specification.
    rpc CreateDeviceGroup(CreateDeviceGroupRequest) returns (google.protobuf.Empty);
    // The method called by the RestAPI to get the information about the device group. The parameter contains the search criteria.
    rpc GetDeviceGroups(google.protobuf.StringValue) returns (GetDeviceGroupsResponse);
    // The method called by the RestAPI to add a new device to the device group. The parameter contains the device group specification.
    rpc AddDevicesToGroup(AddDevicesToGroupRequest) returns (google.protobuf.Empty);
    // The method called by the RestAPI to remove a device from the device group. The parameter contains the device group specification.
    rpc RemoveDevicesFromGroup(RemoveDevicesFromGroupRequest) returns (google.protobuf.Empty);

    // The method to get the information about the modem pool. The method returns the modem pool information.
    rpc GetModemByPool(google.protobuf.StringValue) returns (GetModemPoolResponse);
    // The method to create a new modem pool.
    rpc CreateModemPool(SetModemPoolRequest) returns (google.protobuf.Empty);
    // The method to update the modem pool.
    rpc UpdateModemPool(SetModemPoolRequest) returns (google.protobuf.Empty);
    // The method to delete the modem pool.
    rpc DeleteModemPool(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // The method to create a new modem within the pool.
    rpc CreateModem(SetModemRequest) returns (google.protobuf.Empty);
    // The method to update the modem within the pool.
    rpc UpdateModem(SetModemRequest) returns (google.protobuf.Empty);
    // The method to delete the modem within the pool.
    rpc DeleteModem(google.protobuf.StringValue) returns (google.protobuf.Empty);
}

// RestApi -> DriverRegistry - The communication unit specification.
message CreateCommunicationUnitRequest {
    CommunicationUnitSpec spec = 1;  // The communication unit specification.
}

// RestApi -> DriverRegistry - the request message to get the information about the communication unit.
message GetCommunicationUnitsRequest {
    optional string id          = 1;  // The UUID of the communication unit.
    optional string external_id = 2;  // The external identifier of the communication unit.
    optional string name        = 3;  // The name of the communication unit.
}

// DriverRegistry -> RestApi - the message holds the information about the communication unit.
message GetCommunicationUnitsResponse {
    repeated CommunicationUnitSpec spec = 1;  // The communication unit specification.
}

// Sub-message - the communication unit specification.
message CommunicationUnitSpec {
    string id                      = 1;  // The UUID of the communication unit.
    optional string external_id    = 2;  // The external identifier of the communication unit.
    string name                    = 3;  // The name of the communication unit.
    ConnectionType connection_type = 4;  // The connection type.
}

message ConnectionType {
    oneof type {
        pbdriver.ConnectionTypeDirectTcpIp tcpip            = 1;  // The TCP/IP connection type.
        pbdriver.ConnectionTypeModemPool modem_pool         = 2;  // The phone line connection type.
        pbdriver.ConnectionTypeControlledSerial serial_moxa = 3;  // The controlled serial line (Moxa) connection type.
    }
}

// RestApi -> DriverRegistry - the request message to create a new device.
message CreateDeviceRequest {
    DeviceSpec spec = 1;  // The device specification.
}

// RestApi -> DriverRegistry - the request message to get the information about the device.
message GetDevicesRequest {
    optional string id          = 1;  // The UUID of the device.
    optional string external_id = 2;  // The external identifier of the device.
    optional string name        = 3;  // The name of the device.
}

// DriverRegistry -> RestApi - the message holds the information about the device.
message GetDevicesResponse {
    repeated DeviceSpec spec = 1;  // The device specification.
    // TODO: Add status
}

// Sub-message - the device specification.
message DeviceSpec {
    string id                             = 1;  // The UUID of the device.
    optional string external_id           = 2;  // The external identifier of the device.
    string name                           = 3;  // The name of the device.
    KeyValue attributes                   = 4;  // The template of the action attributes. It is represented as a list of attribute definitions.
    repeated string communication_unit_id = 5;  // The list of communication unit identifiers that allows to communicate with the device. It's an ordered set where the first element is the primary communication unit with the highest priority.
}

// Sub-message - holds the key-value pair(s).
message KeyValue {
    map<string, pbdriver.AttributeValue> kv = 1;  // The key-value pair(s) representation.
}

// Sub-message that represents the device group.
message DeviceGroupSpec {
    string id                   = 1;  // The UUID of the device group.
    optional string external_id = 2;  // The external identifier of the communication unit.
    string name                 = 3;  // The name of the device group.
    repeated string device_id   = 4;  // The list of device identifiers that are part of the group.
}

// RestApi -> DriverRegistry - the request message to get the information about the device group.
message CreateDeviceGroupRequest {
    DeviceGroupSpec spec = 1;  // The device group specification.
}

// DriverRegistry -> RestApi - the message holds the information about the device group.
message GetDeviceGroupsResponse {
    repeated DeviceGroupSpec spec = 1;  // The device group specification.
    // TODO: Add status
}

// RestApi -> DriverRegistry - the request message to add a new device to the device group.
message AddDevicesToGroupRequest {
    string group_id           = 1;  // The unique identifier of the device group.
    repeated string device_id = 2;  // The unique identifier of the device.
}

// RestApi -> DriverRegistry - the request message to remove a device from the device group.
message RemoveDevicesFromGroupRequest {
    string group_id           = 1;  // The unique identifier of the device group.
    repeated string device_id = 2;  // The unique identifier of the device.
}

// RestApi -> DriverRegistry - the request message to add a new device to the communication unit.
message SetDeviceCommunicationUnitsRequest {
    string device_id                      = 1;  // The unique identifier of the device.
    repeated string communication_unit_id = 2;  // The unique identifier of the communication unit.
}

message GetModemPoolRequest {
    string pool_id = 1;  // The modem pool identifier.
}

message GetModemPoolResponse {
    repeated pbdriver.ModemInfo modems = 1;  // The modems registered within the pool.
    string name                        = 2;  // The name of the modem pool.
}

message SetModemPoolRequest {
    string pool_id = 1;  // The modem pool identifier. It must be unique within the system.
    string name    = 2;  // The name of the modem pool to be created. It must be unique within the system.
}

message SetModemRequest {
    string pool_id           = 1;  // The modem pool identifier, required for update operation.
    pbdriver.ModemInfo modem = 2;  // The modem specification.
}
