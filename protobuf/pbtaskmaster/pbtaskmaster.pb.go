// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: pbtaskmaster.proto

package pbtaskmaster

import (
	pbdriver "github.com/cybroslabs/hes-2-apis/protobuf/pbdriver"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Job statuses
type JobStatusCode int32

const (
	// The job is waiting in the queue
	JobStatusCode_JOB_STATUS_QUEUED JobStatusCode = 0
	// The job is running
	JobStatusCode_JOB_STATUS_RUNNING JobStatusCode = 1
	// The job is completed
	JobStatusCode_JOB_STATUS_COMPLETED JobStatusCode = 2
	// The job is failed
	JobStatusCode_JOB_STATUS_FAILED JobStatusCode = 3
	// The job is cancelled
	JobStatusCode_JOB_STATUS_CANCELLED JobStatusCode = 4
	// The job has expired
	JobStatusCode_JOB_STATUS_EXPIRED JobStatusCode = 5
)

// Enum value maps for JobStatusCode.
var (
	JobStatusCode_name = map[int32]string{
		0: "JOB_STATUS_QUEUED",
		1: "JOB_STATUS_RUNNING",
		2: "JOB_STATUS_COMPLETED",
		3: "JOB_STATUS_FAILED",
		4: "JOB_STATUS_CANCELLED",
		5: "JOB_STATUS_EXPIRED",
	}
	JobStatusCode_value = map[string]int32{
		"JOB_STATUS_QUEUED":    0,
		"JOB_STATUS_RUNNING":   1,
		"JOB_STATUS_COMPLETED": 2,
		"JOB_STATUS_FAILED":    3,
		"JOB_STATUS_CANCELLED": 4,
		"JOB_STATUS_EXPIRED":   5,
	}
)

func (x JobStatusCode) Enum() *JobStatusCode {
	p := new(JobStatusCode)
	*p = x
	return p
}

func (x JobStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbtaskmaster_proto_enumTypes[0].Descriptor()
}

func (JobStatusCode) Type() protoreflect.EnumType {
	return &file_pbtaskmaster_proto_enumTypes[0]
}

func (x JobStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatusCode.Descriptor instead.
func (JobStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{0}
}

// Taskmaster -> Dataproxy event message
type StreamEventsData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*StreamEventsData_JobDone
	Data          isStreamEventsData_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamEventsData) Reset() {
	*x = StreamEventsData{}
	mi := &file_pbtaskmaster_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamEventsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsData) ProtoMessage() {}

func (x *StreamEventsData) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsData.ProtoReflect.Descriptor instead.
func (*StreamEventsData) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{0}
}

func (x *StreamEventsData) GetData() isStreamEventsData_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StreamEventsData) GetJobDone() *StreamEventsDataJobFinished {
	if x != nil {
		if x, ok := x.Data.(*StreamEventsData_JobDone); ok {
			return x.JobDone
		}
	}
	return nil
}

type isStreamEventsData_Data interface {
	isStreamEventsData_Data()
}

type StreamEventsData_JobDone struct {
	JobDone *StreamEventsDataJobFinished `protobuf:"bytes,1,opt,name=job_done,json=jobDone,proto3,oneof"`
}

func (*StreamEventsData_JobDone) isStreamEventsData_Data() {}

// Sub-message - job-finished event data
type StreamEventsDataJobFinished struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamEventsDataJobFinished) Reset() {
	*x = StreamEventsDataJobFinished{}
	mi := &file_pbtaskmaster_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamEventsDataJobFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsDataJobFinished) ProtoMessage() {}

func (x *StreamEventsDataJobFinished) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsDataJobFinished.ProtoReflect.Descriptor instead.
func (*StreamEventsDataJobFinished) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{1}
}

func (x *StreamEventsDataJobFinished) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// Driver -> Taskmaster cache set request message
type CacheSetRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Key           string                   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`     // The key of the cache entry. The key is unique within the driver type.
	Value         *pbdriver.AttributeValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // The value of the cache entry.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CacheSetRequest) Reset() {
	*x = CacheSetRequest{}
	mi := &file_pbtaskmaster_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheSetRequest) ProtoMessage() {}

func (x *CacheSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheSetRequest.ProtoReflect.Descriptor instead.
func (*CacheSetRequest) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{2}
}

func (x *CacheSetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CacheSetRequest) GetValue() *pbdriver.AttributeValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// Driver -> Taskmaster cache get request message
type CacheGetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // The key of the cache entry. The key is unique within the driver type.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CacheGetRequest) Reset() {
	*x = CacheGetRequest{}
	mi := &file_pbtaskmaster_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheGetRequest) ProtoMessage() {}

func (x *CacheGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheGetRequest.ProtoReflect.Descriptor instead.
func (*CacheGetRequest) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{3}
}

func (x *CacheGetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Taskmaster -> Driver cache get response message
type CacheGetResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Result        pbdriver.ErrorCode       `protobuf:"varint,1,opt,name=result,proto3,enum=io.clbs.openhes.pbdriver.ErrorCode" json:"result,omitempty"` // The result of the cache get operation.
	Value         *pbdriver.AttributeValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`                                            // The value of the cache entry.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CacheGetResponse) Reset() {
	*x = CacheGetResponse{}
	mi := &file_pbtaskmaster_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheGetResponse) ProtoMessage() {}

func (x *CacheGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheGetResponse.ProtoReflect.Descriptor instead.
func (*CacheGetResponse) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{4}
}

func (x *CacheGetResponse) GetResult() pbdriver.ErrorCode {
	if x != nil {
		return x.Result
	}
	return pbdriver.ErrorCode(0)
}

func (x *CacheGetResponse) GetValue() *pbdriver.AttributeValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// API -> Taskmaster cancel job request message
type CancelJobsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         []string               `protobuf:"bytes,1,rep,name=job_id,json=jobId,proto3" json:"job_id,omitempty"` // The job identifier.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelJobsRequest) Reset() {
	*x = CancelJobsRequest{}
	mi := &file_pbtaskmaster_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobsRequest) ProtoMessage() {}

func (x *CancelJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobsRequest.ProtoReflect.Descriptor instead.
func (*CancelJobsRequest) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{5}
}

func (x *CancelJobsRequest) GetJobId() []string {
	if x != nil {
		return x.JobId
	}
	return nil
}

// API -> Taskmaster queue jobs request message
type QueueJobsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Spec          []*JobSpec             `protobuf:"bytes,1,rep,name=spec,proto3" json:"spec,omitempty"` // The list of jobs to be queued.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueueJobsRequest) Reset() {
	*x = QueueJobsRequest{}
	mi := &file_pbtaskmaster_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueJobsRequest) ProtoMessage() {}

func (x *QueueJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueJobsRequest.ProtoReflect.Descriptor instead.
func (*QueueJobsRequest) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{6}
}

func (x *QueueJobsRequest) GetSpec() []*JobSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Sub-message - job specification
type JobSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`                   // The job identifier.
	Device        *JobDevice             `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`                              // The device info.
	JobSettings   *pbdriver.JobSettings  `protobuf:"bytes,3,opt,name=job_settings,json=jobSettings,proto3" json:"job_settings,omitempty"` // The job parameters.
	DriverType    string                 `protobuf:"bytes,4,opt,name=driver_type,json=driverType,proto3" json:"driver_type,omitempty"`    // The device (driver) type.
	JobActions    []*pbdriver.JobAction  `protobuf:"bytes,5,rep,name=job_actions,json=jobActions,proto3" json:"job_actions,omitempty"`    // The list actions to be executed.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobSpec) Reset() {
	*x = JobSpec{}
	mi := &file_pbtaskmaster_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSpec) ProtoMessage() {}

func (x *JobSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSpec.ProtoReflect.Descriptor instead.
func (*JobSpec) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{7}
}

func (x *JobSpec) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobSpec) GetDevice() *JobDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *JobSpec) GetJobSettings() *pbdriver.JobSettings {
	if x != nil {
		return x.JobSettings
	}
	return nil
}

func (x *JobSpec) GetDriverType() string {
	if x != nil {
		return x.DriverType
	}
	return ""
}

func (x *JobSpec) GetJobActions() []*pbdriver.JobAction {
	if x != nil {
		return x.JobActions
	}
	return nil
}

// Sub-message representing a single device info.
type JobDevice struct {
	state            protoimpl.MessageState              `protogen:"open.v1"`
	Id               string                              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                                               // The device (job) identifier.
	ExternalId       *string                             `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3,oneof" json:"external_id,omitempty"`                                                                                       // The external identifier.
	DeviceAttributes map[string]*pbdriver.AttributeValue `protobuf:"bytes,3,rep,name=device_attributes,json=deviceAttributes,proto3" json:"device_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // The connection attributes to the device.
	ConnectionInfo   []*pbdriver.ConnectionInfo          `protobuf:"bytes,4,rep,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"`                                                                                 // The conenction (device) parameters.
	Timezone         *string                             `protobuf:"bytes,5,opt,name=timezone,proto3,oneof" json:"timezone,omitempty"`                                                                                                             // The timezone related to the device, e.g. "America/New_York", "Europe/Prague", "CET", "GMT", "Etc/GMT+2".
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *JobDevice) Reset() {
	*x = JobDevice{}
	mi := &file_pbtaskmaster_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDevice) ProtoMessage() {}

func (x *JobDevice) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDevice.ProtoReflect.Descriptor instead.
func (*JobDevice) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{8}
}

func (x *JobDevice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobDevice) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *JobDevice) GetDeviceAttributes() map[string]*pbdriver.AttributeValue {
	if x != nil {
		return x.DeviceAttributes
	}
	return nil
}

func (x *JobDevice) GetConnectionInfo() []*pbdriver.ConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *JobDevice) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

// Dataproxy -> Taskmaster get job request message
type GetJobRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"` // The job identifier.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetJobRequest) Reset() {
	*x = GetJobRequest{}
	mi := &file_pbtaskmaster_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRequest) ProtoMessage() {}

func (x *GetJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRequest.ProtoReflect.Descriptor instead.
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{9}
}

func (x *GetJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// Taskmaster -> API get job response message
type GetJobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *JobStatus             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // The status of the job
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetJobResponse) Reset() {
	*x = GetJobResponse{}
	mi := &file_pbtaskmaster_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobResponse) ProtoMessage() {}

func (x *GetJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobResponse.ProtoReflect.Descriptor instead.
func (*GetJobResponse) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{10}
}

func (x *GetJobResponse) GetStatus() *JobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Sub-message containing job status info
type JobStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        JobStatusCode          `protobuf:"varint,1,opt,name=status,proto3,enum=io.clbs.openhes.pbtaskmaster.JobStatusCode" json:"status,omitempty"` // The status of the job.
	Code          *pbdriver.JobErrorCode `protobuf:"varint,2,opt,name=code,proto3,enum=io.clbs.openhes.pbdriver.JobErrorCode,oneof" json:"code,omitempty"`    // The error code of the job.
	Results       []*ActionResult        `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`                                                // The result data for all job actions.
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                           // The creation timestamp of the job.
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=started_at,json=startedAt,proto3,oneof" json:"started_at,omitempty"`                     // The start timestamp of the job.
	FinishedAt    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=finished_at,json=finishedAt,proto3,oneof" json:"finished_at,omitempty"`                  // The finish timestamp of the job.
	AttemptsDone  int32                  `protobuf:"varint,7,opt,name=attempts_done,json=attemptsDone,proto3" json:"attempts_done,omitempty"`                 // The number of attempts already done.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobStatus) Reset() {
	*x = JobStatus{}
	mi := &file_pbtaskmaster_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatus) ProtoMessage() {}

func (x *JobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatus.ProtoReflect.Descriptor instead.
func (*JobStatus) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{11}
}

func (x *JobStatus) GetStatus() JobStatusCode {
	if x != nil {
		return x.Status
	}
	return JobStatusCode_JOB_STATUS_QUEUED
}

func (x *JobStatus) GetCode() pbdriver.JobErrorCode {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return pbdriver.JobErrorCode(0)
}

func (x *JobStatus) GetResults() []*ActionResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *JobStatus) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *JobStatus) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *JobStatus) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *JobStatus) GetAttemptsDone() int32 {
	if x != nil {
		return x.AttemptsDone
	}
	return 0
}

// Sub-message containing action result for a single action.
type ActionResult struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	ActionId      string                    `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`                             // The action identifier.
	Status        pbdriver.ActionResultCode `protobuf:"varint,2,opt,name=status,proto3,enum=io.clbs.openhes.pbdriver.ActionResultCode" json:"status,omitempty"` // The status of the action.
	Data          *pbdriver.ActionData      `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                                                     // The action result data.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionResult) Reset() {
	*x = ActionResult{}
	mi := &file_pbtaskmaster_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResult) ProtoMessage() {}

func (x *ActionResult) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResult.ProtoReflect.Descriptor instead.
func (*ActionResult) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{12}
}

func (x *ActionResult) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *ActionResult) GetStatus() pbdriver.ActionResultCode {
	if x != nil {
		return x.Status
	}
	return pbdriver.ActionResultCode(0)
}

func (x *ActionResult) GetData() *pbdriver.ActionData {
	if x != nil {
		return x.Data
	}
	return nil
}

// API <-> Taskmaster request/response for system configuration
type SystemConfig struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	MaxReplicas           int32                  `protobuf:"varint,1,opt,name=max_replicas,json=maxReplicas,proto3" json:"max_replicas,omitempty"`                                   // The maximum number of replicas for the driver.
	MaxCascadeDeviceCount int32                  `protobuf:"varint,2,opt,name=max_cascade_device_count,json=maxCascadeDeviceCount,proto3" json:"max_cascade_device_count,omitempty"` // The maximum number of cascade devices for the driver.
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SystemConfig) Reset() {
	*x = SystemConfig{}
	mi := &file_pbtaskmaster_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemConfig) ProtoMessage() {}

func (x *SystemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemConfig.ProtoReflect.Descriptor instead.
func (*SystemConfig) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{13}
}

func (x *SystemConfig) GetMaxReplicas() int32 {
	if x != nil {
		return x.MaxReplicas
	}
	return 0
}

func (x *SystemConfig) GetMaxCascadeDeviceCount() int32 {
	if x != nil {
		return x.MaxCascadeDeviceCount
	}
	return 0
}

// API <-> Taskmaster request/response for system configuration
type SystemConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *SystemConfig          `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"` // The maximum number of replicas for the driver.
	Status        *SystemConfigStatus    `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // The system status.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemConfigResponse) Reset() {
	*x = SystemConfigResponse{}
	mi := &file_pbtaskmaster_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemConfigResponse) ProtoMessage() {}

func (x *SystemConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemConfigResponse.ProtoReflect.Descriptor instead.
func (*SystemConfigResponse) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{14}
}

func (x *SystemConfigResponse) GetConfig() *SystemConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SystemConfigResponse) GetStatus() *SystemConfigStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Sub-message containing system status
type SystemConfigStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueueLength   int64                  `protobuf:"varint,1,opt,name=queue_length,json=queueLength,proto3" json:"queue_length,omitempty"` // The length of the job queue.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemConfigStatus) Reset() {
	*x = SystemConfigStatus{}
	mi := &file_pbtaskmaster_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemConfigStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemConfigStatus) ProtoMessage() {}

func (x *SystemConfigStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemConfigStatus.ProtoReflect.Descriptor instead.
func (*SystemConfigStatus) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{15}
}

func (x *SystemConfigStatus) GetQueueLength() int64 {
	if x != nil {
		return x.QueueLength
	}
	return 0
}

// Taskmaster -> Dataproxy job/action progress update message
type JobEventData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         []byte                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"` // The job identifier.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobEventData) Reset() {
	*x = JobEventData{}
	mi := &file_pbtaskmaster_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobEventData) ProtoMessage() {}

func (x *JobEventData) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobEventData.ProtoReflect.Descriptor instead.
func (*JobEventData) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{16}
}

func (x *JobEventData) GetJobId() []byte {
	if x != nil {
		return x.JobId
	}
	return nil
}

var File_pbtaskmaster_proto protoreflect.FileDescriptor

var file_pbtaskmaster_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x72, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x64, 0x6f, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x34, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x0f, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x23, 0x0a, 0x0f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x22, 0x4d, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x22, 0x92, 0x02, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x12, 0x15, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x44, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xad, 0x03, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x11, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x6d, 0x0a, 0x15, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x26, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x51,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xe1, 0x03, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f,
	0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x6a, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x73, 0x63,
	0x61, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x73, 0x63, 0x61,
	0x64, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa4, 0x01,
	0x0a, 0x14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x37, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x25, 0x0a,
	0x0c, 0x4a, 0x6f, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x2a, 0xa1, 0x01, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x32, 0x88, 0x07, 0x0a, 0x11, 0x54, 0x61, 0x73,
	0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53,
	0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x2e, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x2b, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x50, 0x75, 0x72, 0x67,
	0x65, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a,
	0x6f, 0x62, 0x73, 0x12, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x09,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x0e, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x69,
	0x0a, 0x08, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61,
	0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x32,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x79, 0x62, 0x72, 0x6f, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x68, 0x65, 0x73,
	0x2d, 0x32, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbtaskmaster_proto_rawDescOnce sync.Once
	file_pbtaskmaster_proto_rawDescData = file_pbtaskmaster_proto_rawDesc
)

func file_pbtaskmaster_proto_rawDescGZIP() []byte {
	file_pbtaskmaster_proto_rawDescOnce.Do(func() {
		file_pbtaskmaster_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbtaskmaster_proto_rawDescData)
	})
	return file_pbtaskmaster_proto_rawDescData
}

var file_pbtaskmaster_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pbtaskmaster_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_pbtaskmaster_proto_goTypes = []any{
	(JobStatusCode)(0),                  // 0: io.clbs.openhes.pbtaskmaster.JobStatusCode
	(*StreamEventsData)(nil),            // 1: io.clbs.openhes.pbtaskmaster.StreamEventsData
	(*StreamEventsDataJobFinished)(nil), // 2: io.clbs.openhes.pbtaskmaster.StreamEventsDataJobFinished
	(*CacheSetRequest)(nil),             // 3: io.clbs.openhes.pbtaskmaster.CacheSetRequest
	(*CacheGetRequest)(nil),             // 4: io.clbs.openhes.pbtaskmaster.CacheGetRequest
	(*CacheGetResponse)(nil),            // 5: io.clbs.openhes.pbtaskmaster.CacheGetResponse
	(*CancelJobsRequest)(nil),           // 6: io.clbs.openhes.pbtaskmaster.CancelJobsRequest
	(*QueueJobsRequest)(nil),            // 7: io.clbs.openhes.pbtaskmaster.QueueJobsRequest
	(*JobSpec)(nil),                     // 8: io.clbs.openhes.pbtaskmaster.JobSpec
	(*JobDevice)(nil),                   // 9: io.clbs.openhes.pbtaskmaster.JobDevice
	(*GetJobRequest)(nil),               // 10: io.clbs.openhes.pbtaskmaster.GetJobRequest
	(*GetJobResponse)(nil),              // 11: io.clbs.openhes.pbtaskmaster.GetJobResponse
	(*JobStatus)(nil),                   // 12: io.clbs.openhes.pbtaskmaster.JobStatus
	(*ActionResult)(nil),                // 13: io.clbs.openhes.pbtaskmaster.ActionResult
	(*SystemConfig)(nil),                // 14: io.clbs.openhes.pbtaskmaster.SystemConfig
	(*SystemConfigResponse)(nil),        // 15: io.clbs.openhes.pbtaskmaster.SystemConfigResponse
	(*SystemConfigStatus)(nil),          // 16: io.clbs.openhes.pbtaskmaster.SystemConfigStatus
	(*JobEventData)(nil),                // 17: io.clbs.openhes.pbtaskmaster.JobEventData
	nil,                                 // 18: io.clbs.openhes.pbtaskmaster.JobDevice.DeviceAttributesEntry
	(*pbdriver.AttributeValue)(nil),     // 19: io.clbs.openhes.pbdriver.AttributeValue
	(pbdriver.ErrorCode)(0),             // 20: io.clbs.openhes.pbdriver.ErrorCode
	(*pbdriver.JobSettings)(nil),        // 21: io.clbs.openhes.pbdriver.JobSettings
	(*pbdriver.JobAction)(nil),          // 22: io.clbs.openhes.pbdriver.JobAction
	(*pbdriver.ConnectionInfo)(nil),     // 23: io.clbs.openhes.pbdriver.ConnectionInfo
	(pbdriver.JobErrorCode)(0),          // 24: io.clbs.openhes.pbdriver.JobErrorCode
	(*timestamppb.Timestamp)(nil),       // 25: google.protobuf.Timestamp
	(pbdriver.ActionResultCode)(0),      // 26: io.clbs.openhes.pbdriver.ActionResultCode
	(*pbdriver.ActionData)(nil),         // 27: io.clbs.openhes.pbdriver.ActionData
	(*emptypb.Empty)(nil),               // 28: google.protobuf.Empty
	(*pbdriver.NegotiateRequest)(nil),   // 29: io.clbs.openhes.pbdriver.NegotiateRequest
	(*pbdriver.CommonResponse)(nil),     // 30: io.clbs.openhes.pbdriver.CommonResponse
}
var file_pbtaskmaster_proto_depIdxs = []int32{
	2,  // 0: io.clbs.openhes.pbtaskmaster.StreamEventsData.job_done:type_name -> io.clbs.openhes.pbtaskmaster.StreamEventsDataJobFinished
	19, // 1: io.clbs.openhes.pbtaskmaster.CacheSetRequest.value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	20, // 2: io.clbs.openhes.pbtaskmaster.CacheGetResponse.result:type_name -> io.clbs.openhes.pbdriver.ErrorCode
	19, // 3: io.clbs.openhes.pbtaskmaster.CacheGetResponse.value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	8,  // 4: io.clbs.openhes.pbtaskmaster.QueueJobsRequest.spec:type_name -> io.clbs.openhes.pbtaskmaster.JobSpec
	9,  // 5: io.clbs.openhes.pbtaskmaster.JobSpec.device:type_name -> io.clbs.openhes.pbtaskmaster.JobDevice
	21, // 6: io.clbs.openhes.pbtaskmaster.JobSpec.job_settings:type_name -> io.clbs.openhes.pbdriver.JobSettings
	22, // 7: io.clbs.openhes.pbtaskmaster.JobSpec.job_actions:type_name -> io.clbs.openhes.pbdriver.JobAction
	18, // 8: io.clbs.openhes.pbtaskmaster.JobDevice.device_attributes:type_name -> io.clbs.openhes.pbtaskmaster.JobDevice.DeviceAttributesEntry
	23, // 9: io.clbs.openhes.pbtaskmaster.JobDevice.connection_info:type_name -> io.clbs.openhes.pbdriver.ConnectionInfo
	12, // 10: io.clbs.openhes.pbtaskmaster.GetJobResponse.status:type_name -> io.clbs.openhes.pbtaskmaster.JobStatus
	0,  // 11: io.clbs.openhes.pbtaskmaster.JobStatus.status:type_name -> io.clbs.openhes.pbtaskmaster.JobStatusCode
	24, // 12: io.clbs.openhes.pbtaskmaster.JobStatus.code:type_name -> io.clbs.openhes.pbdriver.JobErrorCode
	13, // 13: io.clbs.openhes.pbtaskmaster.JobStatus.results:type_name -> io.clbs.openhes.pbtaskmaster.ActionResult
	25, // 14: io.clbs.openhes.pbtaskmaster.JobStatus.created_at:type_name -> google.protobuf.Timestamp
	25, // 15: io.clbs.openhes.pbtaskmaster.JobStatus.started_at:type_name -> google.protobuf.Timestamp
	25, // 16: io.clbs.openhes.pbtaskmaster.JobStatus.finished_at:type_name -> google.protobuf.Timestamp
	26, // 17: io.clbs.openhes.pbtaskmaster.ActionResult.status:type_name -> io.clbs.openhes.pbdriver.ActionResultCode
	27, // 18: io.clbs.openhes.pbtaskmaster.ActionResult.data:type_name -> io.clbs.openhes.pbdriver.ActionData
	14, // 19: io.clbs.openhes.pbtaskmaster.SystemConfigResponse.config:type_name -> io.clbs.openhes.pbtaskmaster.SystemConfig
	16, // 20: io.clbs.openhes.pbtaskmaster.SystemConfigResponse.status:type_name -> io.clbs.openhes.pbtaskmaster.SystemConfigStatus
	19, // 21: io.clbs.openhes.pbtaskmaster.JobDevice.DeviceAttributesEntry.value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	7,  // 22: io.clbs.openhes.pbtaskmaster.TaskmasterService.QueueJobs:input_type -> io.clbs.openhes.pbtaskmaster.QueueJobsRequest
	10, // 23: io.clbs.openhes.pbtaskmaster.TaskmasterService.GetJob:input_type -> io.clbs.openhes.pbtaskmaster.GetJobRequest
	28, // 24: io.clbs.openhes.pbtaskmaster.TaskmasterService.PurgeJobs:input_type -> google.protobuf.Empty
	6,  // 25: io.clbs.openhes.pbtaskmaster.TaskmasterService.CancelJobs:input_type -> io.clbs.openhes.pbtaskmaster.CancelJobsRequest
	28, // 26: io.clbs.openhes.pbtaskmaster.TaskmasterService.Subscribe:input_type -> google.protobuf.Empty
	29, // 27: io.clbs.openhes.pbtaskmaster.TaskmasterService.NegotiateStart:input_type -> io.clbs.openhes.pbdriver.NegotiateRequest
	3,  // 28: io.clbs.openhes.pbtaskmaster.TaskmasterService.CacheSet:input_type -> io.clbs.openhes.pbtaskmaster.CacheSetRequest
	4,  // 29: io.clbs.openhes.pbtaskmaster.TaskmasterService.CacheGet:input_type -> io.clbs.openhes.pbtaskmaster.CacheGetRequest
	28, // 30: io.clbs.openhes.pbtaskmaster.TaskmasterService.GetConfig:input_type -> google.protobuf.Empty
	14, // 31: io.clbs.openhes.pbtaskmaster.TaskmasterService.SetConfig:input_type -> io.clbs.openhes.pbtaskmaster.SystemConfig
	28, // 32: io.clbs.openhes.pbtaskmaster.TaskmasterService.QueueJobs:output_type -> google.protobuf.Empty
	11, // 33: io.clbs.openhes.pbtaskmaster.TaskmasterService.GetJob:output_type -> io.clbs.openhes.pbtaskmaster.GetJobResponse
	28, // 34: io.clbs.openhes.pbtaskmaster.TaskmasterService.PurgeJobs:output_type -> google.protobuf.Empty
	28, // 35: io.clbs.openhes.pbtaskmaster.TaskmasterService.CancelJobs:output_type -> google.protobuf.Empty
	1,  // 36: io.clbs.openhes.pbtaskmaster.TaskmasterService.Subscribe:output_type -> io.clbs.openhes.pbtaskmaster.StreamEventsData
	30, // 37: io.clbs.openhes.pbtaskmaster.TaskmasterService.NegotiateStart:output_type -> io.clbs.openhes.pbdriver.CommonResponse
	28, // 38: io.clbs.openhes.pbtaskmaster.TaskmasterService.CacheSet:output_type -> google.protobuf.Empty
	5,  // 39: io.clbs.openhes.pbtaskmaster.TaskmasterService.CacheGet:output_type -> io.clbs.openhes.pbtaskmaster.CacheGetResponse
	15, // 40: io.clbs.openhes.pbtaskmaster.TaskmasterService.GetConfig:output_type -> io.clbs.openhes.pbtaskmaster.SystemConfigResponse
	28, // 41: io.clbs.openhes.pbtaskmaster.TaskmasterService.SetConfig:output_type -> google.protobuf.Empty
	32, // [32:42] is the sub-list for method output_type
	22, // [22:32] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_pbtaskmaster_proto_init() }
func file_pbtaskmaster_proto_init() {
	if File_pbtaskmaster_proto != nil {
		return
	}
	file_pbtaskmaster_proto_msgTypes[0].OneofWrappers = []any{
		(*StreamEventsData_JobDone)(nil),
	}
	file_pbtaskmaster_proto_msgTypes[8].OneofWrappers = []any{}
	file_pbtaskmaster_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbtaskmaster_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pbtaskmaster_proto_goTypes,
		DependencyIndexes: file_pbtaskmaster_proto_depIdxs,
		EnumInfos:         file_pbtaskmaster_proto_enumTypes,
		MessageInfos:      file_pbtaskmaster_proto_msgTypes,
	}.Build()
	File_pbtaskmaster_proto = out.File
	file_pbtaskmaster_proto_rawDesc = nil
	file_pbtaskmaster_proto_goTypes = nil
	file_pbtaskmaster_proto_depIdxs = nil
}
