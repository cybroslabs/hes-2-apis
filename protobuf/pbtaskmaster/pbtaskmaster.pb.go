// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: pbtaskmaster.proto

package pbtaskmaster

import (
	pbdriver "github.com/cybroslabs/hes-2-apis/protobuf/pbdriver"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Job statuses
type JobStatusCode int32

const (
	// The job is waiting in the queue
	JobStatusCode_JOB_STATUS_QUEUED JobStatusCode = 0
	// The job is running
	JobStatusCode_JOB_STATUS_RUNNING JobStatusCode = 1
	// The job is completed
	JobStatusCode_JOB_STATUS_COMPLETED JobStatusCode = 2
	// The job is failed
	JobStatusCode_JOB_STATUS_FAILED JobStatusCode = 3
	// The job is cancelled
	JobStatusCode_JOB_STATUS_CANCELLED JobStatusCode = 4
	// The job has expired
	JobStatusCode_JOB_STATUS_EXPIRED JobStatusCode = 5
)

// Enum value maps for JobStatusCode.
var (
	JobStatusCode_name = map[int32]string{
		0: "JOB_STATUS_QUEUED",
		1: "JOB_STATUS_RUNNING",
		2: "JOB_STATUS_COMPLETED",
		3: "JOB_STATUS_FAILED",
		4: "JOB_STATUS_CANCELLED",
		5: "JOB_STATUS_EXPIRED",
	}
	JobStatusCode_value = map[string]int32{
		"JOB_STATUS_QUEUED":    0,
		"JOB_STATUS_RUNNING":   1,
		"JOB_STATUS_COMPLETED": 2,
		"JOB_STATUS_FAILED":    3,
		"JOB_STATUS_CANCELLED": 4,
		"JOB_STATUS_EXPIRED":   5,
	}
)

func (x JobStatusCode) Enum() *JobStatusCode {
	p := new(JobStatusCode)
	*p = x
	return p
}

func (x JobStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbtaskmaster_proto_enumTypes[0].Descriptor()
}

func (JobStatusCode) Type() protoreflect.EnumType {
	return &file_pbtaskmaster_proto_enumTypes[0]
}

func (x JobStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatusCode.Descriptor instead.
func (JobStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{0}
}

// Driver -> Taskmaster cache set request message
type CacheSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string                   `protobuf:"bytes,1,opt,name=key,json=k,proto3" json:"key,omitempty"`     // The key of the cache entry. The key is unique within the driver type.
	Value *pbdriver.AttributeValue `protobuf:"bytes,2,opt,name=value,json=v,proto3" json:"value,omitempty"` // The value of the cache entry.
}

func (x *CacheSetRequest) Reset() {
	*x = CacheSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheSetRequest) ProtoMessage() {}

func (x *CacheSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheSetRequest.ProtoReflect.Descriptor instead.
func (*CacheSetRequest) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{0}
}

func (x *CacheSetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CacheSetRequest) GetValue() *pbdriver.AttributeValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// Driver -> Taskmaster cache get request message
type CacheGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,json=k,proto3" json:"key,omitempty"` // The key of the cache entry. The key is unique within the driver type.
}

func (x *CacheGetRequest) Reset() {
	*x = CacheGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheGetRequest) ProtoMessage() {}

func (x *CacheGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheGetRequest.ProtoReflect.Descriptor instead.
func (*CacheGetRequest) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{1}
}

func (x *CacheGetRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Taskmaster -> Driver cache get response message
type CacheGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result pbdriver.ErrorCode       `protobuf:"varint,1,opt,name=result,json=r,proto3,enum=io.clbs.openhes.pbdriver.ErrorCode" json:"result,omitempty"` // The result of the cache get operation.
	Value  *pbdriver.AttributeValue `protobuf:"bytes,2,opt,name=value,json=v,proto3" json:"value,omitempty"`                                            // The value of the cache entry.
}

func (x *CacheGetResponse) Reset() {
	*x = CacheGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheGetResponse) ProtoMessage() {}

func (x *CacheGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheGetResponse.ProtoReflect.Descriptor instead.
func (*CacheGetResponse) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{2}
}

func (x *CacheGetResponse) GetResult() pbdriver.ErrorCode {
	if x != nil {
		return x.Result
	}
	return pbdriver.ErrorCode(0)
}

func (x *CacheGetResponse) GetValue() *pbdriver.AttributeValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// API -> Taskmaster cancel job request message
type CancelJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId []string `protobuf:"bytes,1,rep,name=job_id,json=id,proto3" json:"job_id,omitempty"` // The job identifier.
}

func (x *CancelJobsRequest) Reset() {
	*x = CancelJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobsRequest) ProtoMessage() {}

func (x *CancelJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobsRequest.ProtoReflect.Descriptor instead.
func (*CancelJobsRequest) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{3}
}

func (x *CancelJobsRequest) GetJobId() []string {
	if x != nil {
		return x.JobId
	}
	return nil
}

// API -> Taskmaster new job request message
type QueueJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId          string                   `protobuf:"bytes,1,opt,name=job_id,json=id,proto3" json:"job_id,omitempty"`                   // The job identifier.
	ConnectionInfo *pbdriver.ConnectionInfo `protobuf:"bytes,2,opt,name=connection_info,json=ci,proto3" json:"connection_info,omitempty"` // The connection info for the job.
	JobSettings    *pbdriver.JobSettings    `protobuf:"bytes,3,opt,name=job_settings,json=js,proto3" json:"job_settings,omitempty"`       // The job parameters.
	DriverType     string                   `protobuf:"bytes,4,opt,name=driver_type,json=t,proto3" json:"driver_type,omitempty"`          // The driver type.
	JobActions     []*pbdriver.JobAction    `protobuf:"bytes,5,rep,name=job_actions,json=a,proto3" json:"job_actions,omitempty"`          // The list actions to be executed.
	WebhookUrl     *string                  `protobuf:"bytes,6,opt,name=webhook_url,json=h,proto3,oneof" json:"webhook_url,omitempty"`    // The webhook URL to call when the job is completed.
}

func (x *QueueJobRequest) Reset() {
	*x = QueueJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueJobRequest) ProtoMessage() {}

func (x *QueueJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueJobRequest.ProtoReflect.Descriptor instead.
func (*QueueJobRequest) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{4}
}

func (x *QueueJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *QueueJobRequest) GetConnectionInfo() *pbdriver.ConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *QueueJobRequest) GetJobSettings() *pbdriver.JobSettings {
	if x != nil {
		return x.JobSettings
	}
	return nil
}

func (x *QueueJobRequest) GetDriverType() string {
	if x != nil {
		return x.DriverType
	}
	return ""
}

func (x *QueueJobRequest) GetJobActions() []*pbdriver.JobAction {
	if x != nil {
		return x.JobActions
	}
	return nil
}

func (x *QueueJobRequest) GetWebhookUrl() string {
	if x != nil && x.WebhookUrl != nil {
		return *x.WebhookUrl
	}
	return ""
}

// API -> Taskmaster get job request message
type GetJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=id,proto3" json:"job_id,omitempty"` // The job identifier.
}

func (x *GetJobRequest) Reset() {
	*x = GetJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRequest) ProtoMessage() {}

func (x *GetJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRequest.ProtoReflect.Descriptor instead.
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{5}
}

func (x *GetJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// Taskmaster -> API get job response message
type GetJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec   *QueueJobRequest `protobuf:"bytes,1,opt,name=spec,json=j,proto3" json:"spec,omitempty"`     // The original job specification
	Status *JobStatus       `protobuf:"bytes,2,opt,name=status,json=s,proto3" json:"status,omitempty"` // The status of the job
}

func (x *GetJobResponse) Reset() {
	*x = GetJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobResponse) ProtoMessage() {}

func (x *GetJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobResponse.ProtoReflect.Descriptor instead.
func (*GetJobResponse) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{6}
}

func (x *GetJobResponse) GetSpec() *QueueJobRequest {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *GetJobResponse) GetStatus() *JobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Sub-message containing job status info
type JobStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       JobStatusCode          `protobuf:"varint,1,opt,name=status,json=s,proto3,enum=io.clbs.openhes.pbtaskmaster.JobStatusCode" json:"status,omitempty"` // The status of the job.
	Code         *pbdriver.JobErrorCode `protobuf:"varint,2,opt,name=code,json=c,proto3,enum=io.clbs.openhes.pbdriver.JobErrorCode,oneof" json:"code,omitempty"`    // The error code of the job.
	Results      []*ActionResult        `protobuf:"bytes,3,rep,name=results,json=r,proto3" json:"results,omitempty"`                                                // The result data for all job actions.
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=tc,proto3" json:"created_at,omitempty"`                                         // The creation timestamp of the job.
	StartedAt    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=started_at,json=ts,proto3,oneof" json:"started_at,omitempty"`                                   // The start timestamp of the job.
	FinishedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=finished_at,json=tf,proto3,oneof" json:"finished_at,omitempty"`                                 // The finish timestamp of the job.
	AttemptsDone int32                  `protobuf:"varint,7,opt,name=attempts_done,json=ad,proto3" json:"attempts_done,omitempty"`                                  // The number of attempts already done.
}

func (x *JobStatus) Reset() {
	*x = JobStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatus) ProtoMessage() {}

func (x *JobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatus.ProtoReflect.Descriptor instead.
func (*JobStatus) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{7}
}

func (x *JobStatus) GetStatus() JobStatusCode {
	if x != nil {
		return x.Status
	}
	return JobStatusCode_JOB_STATUS_QUEUED
}

func (x *JobStatus) GetCode() pbdriver.JobErrorCode {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return pbdriver.JobErrorCode(0)
}

func (x *JobStatus) GetResults() []*ActionResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *JobStatus) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *JobStatus) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *JobStatus) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *JobStatus) GetAttemptsDone() int32 {
	if x != nil {
		return x.AttemptsDone
	}
	return 0
}

// Sub-message containing action result for a single action.
type ActionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId string                    `protobuf:"bytes,1,opt,name=action_id,json=id,proto3" json:"action_id,omitempty"`                                          // The action identifier.
	Status   pbdriver.ActionResultCode `protobuf:"varint,2,opt,name=status,json=s,proto3,enum=io.clbs.openhes.pbdriver.ActionResultCode" json:"status,omitempty"` // The status of the action.
	Data     *pbdriver.ActionData      `protobuf:"bytes,3,opt,name=data,json=d,proto3" json:"data,omitempty"`                                                     // The action result data.
}

func (x *ActionResult) Reset() {
	*x = ActionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResult) ProtoMessage() {}

func (x *ActionResult) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResult.ProtoReflect.Descriptor instead.
func (*ActionResult) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{8}
}

func (x *ActionResult) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *ActionResult) GetStatus() pbdriver.ActionResultCode {
	if x != nil {
		return x.Status
	}
	return pbdriver.ActionResultCode(0)
}

func (x *ActionResult) GetData() *pbdriver.ActionData {
	if x != nil {
		return x.Data
	}
	return nil
}

// API -> Taskmaster register (install/update) driver request message
type RegisterDriverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverType string                `protobuf:"bytes,1,opt,name=driver_type,json=driverType,proto3" json:"driver_type,omitempty"` // The driver unique identifier.
	Image      string                `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`                             // The docker image of the driver.
	Resources  *ContainerResourceSet `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`                     // The resource requirements of the driver.
}

func (x *RegisterDriverRequest) Reset() {
	*x = RegisterDriverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterDriverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDriverRequest) ProtoMessage() {}

func (x *RegisterDriverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDriverRequest.ProtoReflect.Descriptor instead.
func (*RegisterDriverRequest) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterDriverRequest) GetDriverType() string {
	if x != nil {
		return x.DriverType
	}
	return ""
}

func (x *RegisterDriverRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *RegisterDriverRequest) GetResources() *ContainerResourceSet {
	if x != nil {
		return x.Resources
	}
	return nil
}

// Taskmaster -> API get drivers response message
type GetDriversResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  pbdriver.ErrorCode `protobuf:"varint,1,opt,name=result,proto3,enum=io.clbs.openhes.pbdriver.ErrorCode" json:"result,omitempty"` // The result of the operation.
	Drivers []*DriverInfo      `protobuf:"bytes,2,rep,name=drivers,proto3" json:"drivers,omitempty"`                                        // The list of drivers.
}

func (x *GetDriversResponse) Reset() {
	*x = GetDriversResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDriversResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDriversResponse) ProtoMessage() {}

func (x *GetDriversResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDriversResponse.ProtoReflect.Descriptor instead.
func (*GetDriversResponse) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{10}
}

func (x *GetDriversResponse) GetResult() pbdriver.ErrorCode {
	if x != nil {
		return x.Result
	}
	return pbdriver.ErrorCode(0)
}

func (x *GetDriversResponse) GetDrivers() []*DriverInfo {
	if x != nil {
		return x.Drivers
	}
	return nil
}

// Sub-message containing driver info
type DriverInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverType string                `protobuf:"bytes,1,opt,name=driver_type,json=driverType,proto3" json:"driver_type,omitempty"` // The driver unique identifier.
	Image      string                `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`                             // The docker image of the driver.
	Resources  *ContainerResourceSet `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`                     // The resource requirements of the driver.
}

func (x *DriverInfo) Reset() {
	*x = DriverInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverInfo) ProtoMessage() {}

func (x *DriverInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverInfo.ProtoReflect.Descriptor instead.
func (*DriverInfo) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{11}
}

func (x *DriverInfo) GetDriverType() string {
	if x != nil {
		return x.DriverType
	}
	return ""
}

func (x *DriverInfo) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *DriverInfo) GetResources() *ContainerResourceSet {
	if x != nil {
		return x.Resources
	}
	return nil
}

// Sub-message containing container resource limits and requests
type ContainerResourceSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limits   *ContainerResources `protobuf:"bytes,1,opt,name=limits,json=l,proto3" json:"limits,omitempty"`           // The resource limits.
	Requests *ContainerResources `protobuf:"bytes,2,opt,name=requests,json=r,proto3,oneof" json:"requests,omitempty"` // The resource requests.
}

func (x *ContainerResourceSet) Reset() {
	*x = ContainerResourceSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerResourceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerResourceSet) ProtoMessage() {}

func (x *ContainerResourceSet) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerResourceSet.ProtoReflect.Descriptor instead.
func (*ContainerResourceSet) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{12}
}

func (x *ContainerResourceSet) GetLimits() *ContainerResources {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *ContainerResourceSet) GetRequests() *ContainerResources {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Sub-message containing container resource requirements
type ContainerResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu    string `protobuf:"bytes,1,opt,name=cpu,json=c,proto3" json:"cpu,omitempty"`       // The CPU resources.
	Memory string `protobuf:"bytes,2,opt,name=memory,json=m,proto3" json:"memory,omitempty"` // The memory resources.
}

func (x *ContainerResources) Reset() {
	*x = ContainerResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerResources) ProtoMessage() {}

func (x *ContainerResources) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerResources.ProtoReflect.Descriptor instead.
func (*ContainerResources) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{13}
}

func (x *ContainerResources) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *ContainerResources) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

// API -> Taskmaster request to unregister driver
type UnregisterDriverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverType string `protobuf:"bytes,1,opt,name=driver_type,json=driverType,proto3" json:"driver_type,omitempty"` // The driver unique identifier.
}

func (x *UnregisterDriverRequest) Reset() {
	*x = UnregisterDriverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterDriverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterDriverRequest) ProtoMessage() {}

func (x *UnregisterDriverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterDriverRequest.ProtoReflect.Descriptor instead.
func (*UnregisterDriverRequest) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{14}
}

func (x *UnregisterDriverRequest) GetDriverType() string {
	if x != nil {
		return x.DriverType
	}
	return ""
}

// API <-> Taskmaster request/response for system configuration
type SystemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxReplicas int32 `protobuf:"varint,1,opt,name=max_replicas,json=maxReplicas,proto3" json:"max_replicas,omitempty"` // The maximum number of replicas for the driver.
}

func (x *SystemConfig) Reset() {
	*x = SystemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemConfig) ProtoMessage() {}

func (x *SystemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemConfig.ProtoReflect.Descriptor instead.
func (*SystemConfig) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{15}
}

func (x *SystemConfig) GetMaxReplicas() int32 {
	if x != nil {
		return x.MaxReplicas
	}
	return 0
}

// API <-> Taskmaster request/response for system configuration
type SystemConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *SystemConfig       `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"` // The maximum number of replicas for the driver.
	Status *SystemConfigStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"` // The system status.
}

func (x *SystemConfigResponse) Reset() {
	*x = SystemConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemConfigResponse) ProtoMessage() {}

func (x *SystemConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemConfigResponse.ProtoReflect.Descriptor instead.
func (*SystemConfigResponse) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{16}
}

func (x *SystemConfigResponse) GetConfig() *SystemConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SystemConfigResponse) GetStatus() *SystemConfigStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Sub-message containing system status
type SystemConfigStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueLength int64 `protobuf:"varint,1,opt,name=queue_length,json=queueLength,proto3" json:"queue_length,omitempty"` // The length of the job queue.
}

func (x *SystemConfigStatus) Reset() {
	*x = SystemConfigStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemConfigStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemConfigStatus) ProtoMessage() {}

func (x *SystemConfigStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemConfigStatus.ProtoReflect.Descriptor instead.
func (*SystemConfigStatus) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{17}
}

func (x *SystemConfigStatus) GetQueueLength() int64 {
	if x != nil {
		return x.QueueLength
	}
	return 0
}

// API -> Taskmaster request to get driver templates
type GetDriverTemplatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverType string `protobuf:"bytes,1,opt,name=driver_type,json=driverType,proto3" json:"driver_type,omitempty"` // The driver unique identifier.
}

func (x *GetDriverTemplatesRequest) Reset() {
	*x = GetDriverTemplatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDriverTemplatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDriverTemplatesRequest) ProtoMessage() {}

func (x *GetDriverTemplatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDriverTemplatesRequest.ProtoReflect.Descriptor instead.
func (*GetDriverTemplatesRequest) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{18}
}

func (x *GetDriverTemplatesRequest) GetDriverType() string {
	if x != nil {
		return x.DriverType
	}
	return ""
}

// Taskmaster -> Dataproxy job/action progress update message
type BulkJobEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId []byte `protobuf:"bytes,1,opt,name=job_id,json=i,proto3" json:"job_id,omitempty"` // The job identifier.
}

func (x *BulkJobEventData) Reset() {
	*x = BulkJobEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkJobEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkJobEventData) ProtoMessage() {}

func (x *BulkJobEventData) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkJobEventData.ProtoReflect.Descriptor instead.
func (*BulkJobEventData) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{19}
}

func (x *BulkJobEventData) GetJobId() []byte {
	if x != nil {
		return x.JobId
	}
	return nil
}

// RestApi -> DataProxy
type CreateBulksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec *BulkSpec `protobuf:"bytes,1,opt,name=spec,json=s,proto3" json:"spec,omitempty"` // The bulk-job spec.
}

func (x *CreateBulksRequest) Reset() {
	*x = CreateBulksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBulksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBulksRequest) ProtoMessage() {}

func (x *CreateBulksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBulksRequest.ProtoReflect.Descriptor instead.
func (*CreateBulksRequest) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{20}
}

func (x *CreateBulksRequest) GetSpec() *BulkSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Sub-message - holds the bulk job specification.
type BulkSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BulkId           string                `protobuf:"bytes,1,opt,name=bulk_id,json=i,proto3" json:"bulk_id,omitempty"`                       // The bulk identifier.
	CorrelationId    string                `protobuf:"bytes,2,opt,name=correlation_id,json=c,proto3" json:"correlation_id,omitempty"`         // The correlation identifier, e.g. to define relation to non-homogenous group.
	OrgId            string                `protobuf:"bytes,3,opt,name=org_id,json=o,proto3" json:"org_id,omitempty"`                         // The organization identifier.
	DeviceDriverType string                `protobuf:"bytes,4,opt,name=device_driver_type,json=t,proto3" json:"device_driver_type,omitempty"` // The device driver type.
	Devices          []*JobDevice          `protobuf:"bytes,5,rep,name=devices,json=d,proto3" json:"devices,omitempty"`                       // The list of devices in the bulk.
	Settings         *pbdriver.JobSettings `protobuf:"bytes,6,opt,name=settings,json=s,proto3" json:"settings,omitempty"`                     // The bulk-shared job settings.
	JobActions       []*pbdriver.JobAction `protobuf:"bytes,7,rep,name=job_actions,json=a,proto3" json:"job_actions,omitempty"`               // The list actions to be executed.
}

func (x *BulkSpec) Reset() {
	*x = BulkSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkSpec) ProtoMessage() {}

func (x *BulkSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkSpec.ProtoReflect.Descriptor instead.
func (*BulkSpec) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{21}
}

func (x *BulkSpec) GetBulkId() string {
	if x != nil {
		return x.BulkId
	}
	return ""
}

func (x *BulkSpec) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *BulkSpec) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *BulkSpec) GetDeviceDriverType() string {
	if x != nil {
		return x.DeviceDriverType
	}
	return ""
}

func (x *BulkSpec) GetDevices() []*JobDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *BulkSpec) GetSettings() *pbdriver.JobSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *BulkSpec) GetJobActions() []*pbdriver.JobAction {
	if x != nil {
		return x.JobActions
	}
	return nil
}

// DataProxy -> RestApi - the message holds the bulk info and it's status.
type GetBulkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec   *BulkSpec  `protobuf:"bytes,1,opt,name=spec,json=s,proto3" json:"spec,omitempty"`     // The bulk-job spec.
	Status *JobStatus `protobuf:"bytes,2,opt,name=status,json=t,proto3" json:"status,omitempty"` // The bulk-job status/data.
}

func (x *GetBulkResponse) Reset() {
	*x = GetBulkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkResponse) ProtoMessage() {}

func (x *GetBulkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkResponse.ProtoReflect.Descriptor instead.
func (*GetBulkResponse) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{22}
}

func (x *GetBulkResponse) GetSpec() *BulkSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *GetBulkResponse) GetStatus() *JobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Sub-message representing a single device in a bulk.
type JobDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                   `protobuf:"bytes,1,opt,name=id,json=i,proto3" json:"id,omitempty"`                           // The device (job) identifier.
	ExternalId     string                   `protobuf:"bytes,3,opt,name=external_id,json=e,proto3" json:"external_id,omitempty"`         // The external identifier.
	ConnectionInfo *pbdriver.ConnectionInfo `protobuf:"bytes,4,opt,name=connection_info,json=c,proto3" json:"connection_info,omitempty"` // The conenction (device) parameters.
}

func (x *JobDevice) Reset() {
	*x = JobDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDevice) ProtoMessage() {}

func (x *JobDevice) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDevice.ProtoReflect.Descriptor instead.
func (*JobDevice) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{23}
}

func (x *JobDevice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobDevice) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *JobDevice) GetConnectionInfo() *pbdriver.ConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

// RestApi -> DataProxy - the message holds data for bulk listing request.
type GetBulksReuqest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tfrom       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=tfrom,json=tf,proto3,oneof" json:"tfrom,omitempty"`               // The time range filter - left limit. Optional.
	Tto         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=tto,json=tt,proto3,oneof" json:"tto,omitempty"`                   // The time range filter - right limit. Optional.
	IncludeData *bool                  `protobuf:"varint,3,opt,name=include_data,json=d,proto3,oneof" json:"include_data,omitempty"` // The result content filter - if true then data are included in the response.
	// FIXME: Should not not be optional!
	OrgId *string `protobuf:"bytes,4,opt,name=org_id,json=o,proto3,oneof" json:"org_id,omitempty"` // The organization identifier filter.
}

func (x *GetBulksReuqest) Reset() {
	*x = GetBulksReuqest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulksReuqest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulksReuqest) ProtoMessage() {}

func (x *GetBulksReuqest) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulksReuqest.ProtoReflect.Descriptor instead.
func (*GetBulksReuqest) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{24}
}

func (x *GetBulksReuqest) GetTfrom() *timestamppb.Timestamp {
	if x != nil {
		return x.Tfrom
	}
	return nil
}

func (x *GetBulksReuqest) GetTto() *timestamppb.Timestamp {
	if x != nil {
		return x.Tto
	}
	return nil
}

func (x *GetBulksReuqest) GetIncludeData() bool {
	if x != nil && x.IncludeData != nil {
		return *x.IncludeData
	}
	return false
}

func (x *GetBulksReuqest) GetOrgId() string {
	if x != nil && x.OrgId != nil {
		return *x.OrgId
	}
	return ""
}

// DataProxy -> RestApi - the message holds list of bulks.
type GetBulksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bulks []*GetBulkResponse `protobuf:"bytes,1,rep,name=bulks,json=b,proto3" json:"bulks,omitempty"` // The list of bulk jobs related to the original request.
}

func (x *GetBulksResponse) Reset() {
	*x = GetBulksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulksResponse) ProtoMessage() {}

func (x *GetBulksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulksResponse.ProtoReflect.Descriptor instead.
func (*GetBulksResponse) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{25}
}

func (x *GetBulksResponse) GetBulks() []*GetBulkResponse {
	if x != nil {
		return x.Bulks
	}
	return nil
}

// RestApi -> DataProxt - the message holds single bulk request.
type GetBulkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BulkId string `protobuf:"bytes,1,opt,name=bulk_id,json=i,proto3" json:"bulk_id,omitempty"` // The bulk identifier to be retrieved.
}

func (x *GetBulkRequest) Reset() {
	*x = GetBulkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbtaskmaster_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBulkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBulkRequest) ProtoMessage() {}

func (x *GetBulkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbtaskmaster_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBulkRequest.ProtoReflect.Descriptor instead.
func (*GetBulkRequest) Descriptor() ([]byte, []int) {
	return file_pbtaskmaster_proto_rawDescGZIP(), []int{26}
}

func (x *GetBulkRequest) GetBulkId() string {
	if x != nil {
		return x.BulkId
	}
	return ""
}

var File_pbtaskmaster_proto protoreflect.FileDescriptor

var file_pbtaskmaster_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x5d, 0x0a, 0x0f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x6b, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x76, 0x22,
	0x21, 0x0a, 0x0f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x6b, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x01, 0x72, 0x12,
	0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x76, 0x22, 0x27, 0x0a, 0x11, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x02, 0x63, 0x69, 0x12, 0x3f, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x02, 0x6a, 0x73, 0x12, 0x16, 0x0a, 0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x01, 0x61, 0x12, 0x1b, 0x0a, 0x0b, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x01, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x23, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x01, 0x6a, 0x12, 0x3a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x01, 0x73, 0x22, 0xb3, 0x03, 0x0a, 0x09, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73,
	0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x01, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x01, 0x63, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x01, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x63, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x02, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x02, 0x74, 0x66, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x0d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x61, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x15, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x01, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x01, 0x64, 0x22, 0xa0,
	0x01, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x50, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x22, 0x95, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0a, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x50, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x22, 0xb4, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x01, 0x6c, 0x12,
	0x4a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x01, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x37, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x0e,
	0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x63, 0x12, 0x11,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x6d, 0x22, 0x3a, 0x0a, 0x17, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x31, 0x0a,
	0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x22, 0xa4, 0x01, 0x0a, 0x14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61,
	0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x37, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x22, 0x3c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x25,
	0x0a, 0x10, 0x42, 0x75, 0x6c, 0x6b, 0x4a, 0x6f, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x11, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x01, 0x69, 0x22, 0x4d, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61,
	0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x01, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x08, 0x42, 0x75, 0x6c, 0x6b, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x12, 0x0a, 0x07, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x69, 0x12, 0x19, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x63,
	0x12, 0x11, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x6f, 0x12, 0x1d, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x01, 0x64, 0x12,
	0x3a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x01, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x6a,
	0x6f, 0x62, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x01, 0x61, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x01, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x01,
	0x74, 0x22, 0x78, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0d,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x69, 0x12, 0x16, 0x0a,
	0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x01, 0x63, 0x22, 0xdb, 0x01, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x75, 0x71, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x05, 0x74, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x02, 0x74, 0x66,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x03, 0x74, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x02,
	0x74, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x01, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x01, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x74, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x74, 0x6f, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x05, 0x62, 0x75, 0x6c, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x01, 0x62, 0x22, 0x24,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x07, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x01, 0x69, 0x2a, 0xa1, 0x01, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x32, 0x9a, 0x0b, 0x0a, 0x11, 0x54, 0x61, 0x73,
	0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x30, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x69, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c,
	0x6b, 0x73, 0x12, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x75, 0x71, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x66, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x2c, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6c,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x12, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x09, 0x50, 0x75, 0x72, 0x67, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x09, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73,
	0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x66, 0x0a, 0x0e, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x69, 0x0a, 0x08,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73,
	0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61,
	0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61,
	0x0a, 0x10, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x78, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x79, 0x62, 0x72, 0x6f, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x68,
	0x65, 0x73, 0x2d, 0x32, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbtaskmaster_proto_rawDescOnce sync.Once
	file_pbtaskmaster_proto_rawDescData = file_pbtaskmaster_proto_rawDesc
)

func file_pbtaskmaster_proto_rawDescGZIP() []byte {
	file_pbtaskmaster_proto_rawDescOnce.Do(func() {
		file_pbtaskmaster_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbtaskmaster_proto_rawDescData)
	})
	return file_pbtaskmaster_proto_rawDescData
}

var file_pbtaskmaster_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pbtaskmaster_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_pbtaskmaster_proto_goTypes = []interface{}{
	(JobStatusCode)(0),                // 0: io.clbs.openhes.pbtaskmaster.JobStatusCode
	(*CacheSetRequest)(nil),           // 1: io.clbs.openhes.pbtaskmaster.CacheSetRequest
	(*CacheGetRequest)(nil),           // 2: io.clbs.openhes.pbtaskmaster.CacheGetRequest
	(*CacheGetResponse)(nil),          // 3: io.clbs.openhes.pbtaskmaster.CacheGetResponse
	(*CancelJobsRequest)(nil),         // 4: io.clbs.openhes.pbtaskmaster.CancelJobsRequest
	(*QueueJobRequest)(nil),           // 5: io.clbs.openhes.pbtaskmaster.QueueJobRequest
	(*GetJobRequest)(nil),             // 6: io.clbs.openhes.pbtaskmaster.GetJobRequest
	(*GetJobResponse)(nil),            // 7: io.clbs.openhes.pbtaskmaster.GetJobResponse
	(*JobStatus)(nil),                 // 8: io.clbs.openhes.pbtaskmaster.JobStatus
	(*ActionResult)(nil),              // 9: io.clbs.openhes.pbtaskmaster.ActionResult
	(*RegisterDriverRequest)(nil),     // 10: io.clbs.openhes.pbtaskmaster.RegisterDriverRequest
	(*GetDriversResponse)(nil),        // 11: io.clbs.openhes.pbtaskmaster.GetDriversResponse
	(*DriverInfo)(nil),                // 12: io.clbs.openhes.pbtaskmaster.DriverInfo
	(*ContainerResourceSet)(nil),      // 13: io.clbs.openhes.pbtaskmaster.ContainerResourceSet
	(*ContainerResources)(nil),        // 14: io.clbs.openhes.pbtaskmaster.ContainerResources
	(*UnregisterDriverRequest)(nil),   // 15: io.clbs.openhes.pbtaskmaster.UnregisterDriverRequest
	(*SystemConfig)(nil),              // 16: io.clbs.openhes.pbtaskmaster.SystemConfig
	(*SystemConfigResponse)(nil),      // 17: io.clbs.openhes.pbtaskmaster.SystemConfigResponse
	(*SystemConfigStatus)(nil),        // 18: io.clbs.openhes.pbtaskmaster.SystemConfigStatus
	(*GetDriverTemplatesRequest)(nil), // 19: io.clbs.openhes.pbtaskmaster.GetDriverTemplatesRequest
	(*BulkJobEventData)(nil),          // 20: io.clbs.openhes.pbtaskmaster.BulkJobEventData
	(*CreateBulksRequest)(nil),        // 21: io.clbs.openhes.pbtaskmaster.CreateBulksRequest
	(*BulkSpec)(nil),                  // 22: io.clbs.openhes.pbtaskmaster.BulkSpec
	(*GetBulkResponse)(nil),           // 23: io.clbs.openhes.pbtaskmaster.GetBulkResponse
	(*JobDevice)(nil),                 // 24: io.clbs.openhes.pbtaskmaster.JobDevice
	(*GetBulksReuqest)(nil),           // 25: io.clbs.openhes.pbtaskmaster.GetBulksReuqest
	(*GetBulksResponse)(nil),          // 26: io.clbs.openhes.pbtaskmaster.GetBulksResponse
	(*GetBulkRequest)(nil),            // 27: io.clbs.openhes.pbtaskmaster.GetBulkRequest
	(*pbdriver.AttributeValue)(nil),   // 28: io.clbs.openhes.pbdriver.AttributeValue
	(pbdriver.ErrorCode)(0),           // 29: io.clbs.openhes.pbdriver.ErrorCode
	(*pbdriver.ConnectionInfo)(nil),   // 30: io.clbs.openhes.pbdriver.ConnectionInfo
	(*pbdriver.JobSettings)(nil),      // 31: io.clbs.openhes.pbdriver.JobSettings
	(*pbdriver.JobAction)(nil),        // 32: io.clbs.openhes.pbdriver.JobAction
	(pbdriver.JobErrorCode)(0),        // 33: io.clbs.openhes.pbdriver.JobErrorCode
	(*timestamppb.Timestamp)(nil),     // 34: google.protobuf.Timestamp
	(pbdriver.ActionResultCode)(0),    // 35: io.clbs.openhes.pbdriver.ActionResultCode
	(*pbdriver.ActionData)(nil),       // 36: io.clbs.openhes.pbdriver.ActionData
	(*emptypb.Empty)(nil),             // 37: google.protobuf.Empty
	(*pbdriver.NegotiateRequest)(nil), // 38: io.clbs.openhes.pbdriver.NegotiateRequest
	(*pbdriver.CommonResponse)(nil),   // 39: io.clbs.openhes.pbdriver.CommonResponse
	(*pbdriver.DriverTemplates)(nil),  // 40: io.clbs.openhes.pbdriver.DriverTemplates
}
var file_pbtaskmaster_proto_depIdxs = []int32{
	28, // 0: io.clbs.openhes.pbtaskmaster.CacheSetRequest.value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	29, // 1: io.clbs.openhes.pbtaskmaster.CacheGetResponse.result:type_name -> io.clbs.openhes.pbdriver.ErrorCode
	28, // 2: io.clbs.openhes.pbtaskmaster.CacheGetResponse.value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	30, // 3: io.clbs.openhes.pbtaskmaster.QueueJobRequest.connection_info:type_name -> io.clbs.openhes.pbdriver.ConnectionInfo
	31, // 4: io.clbs.openhes.pbtaskmaster.QueueJobRequest.job_settings:type_name -> io.clbs.openhes.pbdriver.JobSettings
	32, // 5: io.clbs.openhes.pbtaskmaster.QueueJobRequest.job_actions:type_name -> io.clbs.openhes.pbdriver.JobAction
	5,  // 6: io.clbs.openhes.pbtaskmaster.GetJobResponse.spec:type_name -> io.clbs.openhes.pbtaskmaster.QueueJobRequest
	8,  // 7: io.clbs.openhes.pbtaskmaster.GetJobResponse.status:type_name -> io.clbs.openhes.pbtaskmaster.JobStatus
	0,  // 8: io.clbs.openhes.pbtaskmaster.JobStatus.status:type_name -> io.clbs.openhes.pbtaskmaster.JobStatusCode
	33, // 9: io.clbs.openhes.pbtaskmaster.JobStatus.code:type_name -> io.clbs.openhes.pbdriver.JobErrorCode
	9,  // 10: io.clbs.openhes.pbtaskmaster.JobStatus.results:type_name -> io.clbs.openhes.pbtaskmaster.ActionResult
	34, // 11: io.clbs.openhes.pbtaskmaster.JobStatus.created_at:type_name -> google.protobuf.Timestamp
	34, // 12: io.clbs.openhes.pbtaskmaster.JobStatus.started_at:type_name -> google.protobuf.Timestamp
	34, // 13: io.clbs.openhes.pbtaskmaster.JobStatus.finished_at:type_name -> google.protobuf.Timestamp
	35, // 14: io.clbs.openhes.pbtaskmaster.ActionResult.status:type_name -> io.clbs.openhes.pbdriver.ActionResultCode
	36, // 15: io.clbs.openhes.pbtaskmaster.ActionResult.data:type_name -> io.clbs.openhes.pbdriver.ActionData
	13, // 16: io.clbs.openhes.pbtaskmaster.RegisterDriverRequest.resources:type_name -> io.clbs.openhes.pbtaskmaster.ContainerResourceSet
	29, // 17: io.clbs.openhes.pbtaskmaster.GetDriversResponse.result:type_name -> io.clbs.openhes.pbdriver.ErrorCode
	12, // 18: io.clbs.openhes.pbtaskmaster.GetDriversResponse.drivers:type_name -> io.clbs.openhes.pbtaskmaster.DriverInfo
	13, // 19: io.clbs.openhes.pbtaskmaster.DriverInfo.resources:type_name -> io.clbs.openhes.pbtaskmaster.ContainerResourceSet
	14, // 20: io.clbs.openhes.pbtaskmaster.ContainerResourceSet.limits:type_name -> io.clbs.openhes.pbtaskmaster.ContainerResources
	14, // 21: io.clbs.openhes.pbtaskmaster.ContainerResourceSet.requests:type_name -> io.clbs.openhes.pbtaskmaster.ContainerResources
	16, // 22: io.clbs.openhes.pbtaskmaster.SystemConfigResponse.config:type_name -> io.clbs.openhes.pbtaskmaster.SystemConfig
	18, // 23: io.clbs.openhes.pbtaskmaster.SystemConfigResponse.status:type_name -> io.clbs.openhes.pbtaskmaster.SystemConfigStatus
	22, // 24: io.clbs.openhes.pbtaskmaster.CreateBulksRequest.spec:type_name -> io.clbs.openhes.pbtaskmaster.BulkSpec
	24, // 25: io.clbs.openhes.pbtaskmaster.BulkSpec.devices:type_name -> io.clbs.openhes.pbtaskmaster.JobDevice
	31, // 26: io.clbs.openhes.pbtaskmaster.BulkSpec.settings:type_name -> io.clbs.openhes.pbdriver.JobSettings
	32, // 27: io.clbs.openhes.pbtaskmaster.BulkSpec.job_actions:type_name -> io.clbs.openhes.pbdriver.JobAction
	22, // 28: io.clbs.openhes.pbtaskmaster.GetBulkResponse.spec:type_name -> io.clbs.openhes.pbtaskmaster.BulkSpec
	8,  // 29: io.clbs.openhes.pbtaskmaster.GetBulkResponse.status:type_name -> io.clbs.openhes.pbtaskmaster.JobStatus
	30, // 30: io.clbs.openhes.pbtaskmaster.JobDevice.connection_info:type_name -> io.clbs.openhes.pbdriver.ConnectionInfo
	34, // 31: io.clbs.openhes.pbtaskmaster.GetBulksReuqest.tfrom:type_name -> google.protobuf.Timestamp
	34, // 32: io.clbs.openhes.pbtaskmaster.GetBulksReuqest.tto:type_name -> google.protobuf.Timestamp
	23, // 33: io.clbs.openhes.pbtaskmaster.GetBulksResponse.bulks:type_name -> io.clbs.openhes.pbtaskmaster.GetBulkResponse
	21, // 34: io.clbs.openhes.pbtaskmaster.TaskmasterService.CreateBulk:input_type -> io.clbs.openhes.pbtaskmaster.CreateBulksRequest
	25, // 35: io.clbs.openhes.pbtaskmaster.TaskmasterService.GetBulks:input_type -> io.clbs.openhes.pbtaskmaster.GetBulksReuqest
	27, // 36: io.clbs.openhes.pbtaskmaster.TaskmasterService.GetBulk:input_type -> io.clbs.openhes.pbtaskmaster.GetBulkRequest
	6,  // 37: io.clbs.openhes.pbtaskmaster.TaskmasterService.GetJob:input_type -> io.clbs.openhes.pbtaskmaster.GetJobRequest
	37, // 38: io.clbs.openhes.pbtaskmaster.TaskmasterService.PurgeJobs:input_type -> google.protobuf.Empty
	4,  // 39: io.clbs.openhes.pbtaskmaster.TaskmasterService.CancelJob:input_type -> io.clbs.openhes.pbtaskmaster.CancelJobsRequest
	38, // 40: io.clbs.openhes.pbtaskmaster.TaskmasterService.NegotiateStart:input_type -> io.clbs.openhes.pbdriver.NegotiateRequest
	1,  // 41: io.clbs.openhes.pbtaskmaster.TaskmasterService.CacheSet:input_type -> io.clbs.openhes.pbtaskmaster.CacheSetRequest
	2,  // 42: io.clbs.openhes.pbtaskmaster.TaskmasterService.CacheGet:input_type -> io.clbs.openhes.pbtaskmaster.CacheGetRequest
	10, // 43: io.clbs.openhes.pbtaskmaster.TaskmasterService.RegisterDriver:input_type -> io.clbs.openhes.pbtaskmaster.RegisterDriverRequest
	37, // 44: io.clbs.openhes.pbtaskmaster.TaskmasterService.GetDrivers:input_type -> google.protobuf.Empty
	15, // 45: io.clbs.openhes.pbtaskmaster.TaskmasterService.UnregisterDriver:input_type -> io.clbs.openhes.pbtaskmaster.UnregisterDriverRequest
	19, // 46: io.clbs.openhes.pbtaskmaster.TaskmasterService.GetDriverTemplates:input_type -> io.clbs.openhes.pbtaskmaster.GetDriverTemplatesRequest
	37, // 47: io.clbs.openhes.pbtaskmaster.TaskmasterService.GetConfig:input_type -> google.protobuf.Empty
	16, // 48: io.clbs.openhes.pbtaskmaster.TaskmasterService.SetConfig:input_type -> io.clbs.openhes.pbtaskmaster.SystemConfig
	37, // 49: io.clbs.openhes.pbtaskmaster.TaskmasterService.CreateBulk:output_type -> google.protobuf.Empty
	26, // 50: io.clbs.openhes.pbtaskmaster.TaskmasterService.GetBulks:output_type -> io.clbs.openhes.pbtaskmaster.GetBulksResponse
	23, // 51: io.clbs.openhes.pbtaskmaster.TaskmasterService.GetBulk:output_type -> io.clbs.openhes.pbtaskmaster.GetBulkResponse
	7,  // 52: io.clbs.openhes.pbtaskmaster.TaskmasterService.GetJob:output_type -> io.clbs.openhes.pbtaskmaster.GetJobResponse
	37, // 53: io.clbs.openhes.pbtaskmaster.TaskmasterService.PurgeJobs:output_type -> google.protobuf.Empty
	37, // 54: io.clbs.openhes.pbtaskmaster.TaskmasterService.CancelJob:output_type -> google.protobuf.Empty
	39, // 55: io.clbs.openhes.pbtaskmaster.TaskmasterService.NegotiateStart:output_type -> io.clbs.openhes.pbdriver.CommonResponse
	37, // 56: io.clbs.openhes.pbtaskmaster.TaskmasterService.CacheSet:output_type -> google.protobuf.Empty
	3,  // 57: io.clbs.openhes.pbtaskmaster.TaskmasterService.CacheGet:output_type -> io.clbs.openhes.pbtaskmaster.CacheGetResponse
	37, // 58: io.clbs.openhes.pbtaskmaster.TaskmasterService.RegisterDriver:output_type -> google.protobuf.Empty
	11, // 59: io.clbs.openhes.pbtaskmaster.TaskmasterService.GetDrivers:output_type -> io.clbs.openhes.pbtaskmaster.GetDriversResponse
	37, // 60: io.clbs.openhes.pbtaskmaster.TaskmasterService.UnregisterDriver:output_type -> google.protobuf.Empty
	40, // 61: io.clbs.openhes.pbtaskmaster.TaskmasterService.GetDriverTemplates:output_type -> io.clbs.openhes.pbdriver.DriverTemplates
	17, // 62: io.clbs.openhes.pbtaskmaster.TaskmasterService.GetConfig:output_type -> io.clbs.openhes.pbtaskmaster.SystemConfigResponse
	37, // 63: io.clbs.openhes.pbtaskmaster.TaskmasterService.SetConfig:output_type -> google.protobuf.Empty
	49, // [49:64] is the sub-list for method output_type
	34, // [34:49] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_pbtaskmaster_proto_init() }
func file_pbtaskmaster_proto_init() {
	if File_pbtaskmaster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbtaskmaster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterDriverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDriversResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerResourceSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterDriverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemConfigStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDriverTemplatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkJobEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBulksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulksReuqest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbtaskmaster_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBulkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pbtaskmaster_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_pbtaskmaster_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_pbtaskmaster_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_pbtaskmaster_proto_msgTypes[24].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbtaskmaster_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pbtaskmaster_proto_goTypes,
		DependencyIndexes: file_pbtaskmaster_proto_depIdxs,
		EnumInfos:         file_pbtaskmaster_proto_enumTypes,
		MessageInfos:      file_pbtaskmaster_proto_msgTypes,
	}.Build()
	File_pbtaskmaster_proto = out.File
	file_pbtaskmaster_proto_rawDesc = nil
	file_pbtaskmaster_proto_goTypes = nil
	file_pbtaskmaster_proto_depIdxs = nil
}
