// Editions version of proto3 file

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pbdeviceregistry.proto

package pbdeviceregistry

import (
	context "context"
	models "github.com/cybroslabs/hes-2-apis/protobuf/models"
	pbdeviceregistrymodels "github.com/cybroslabs/hes-2-apis/protobuf/pbdeviceregistrymodels"
	pbdrivermodels "github.com/cybroslabs/hes-2-apis/protobuf/pbdrivermodels"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeviceRegistryService_SetDriverTemplates_FullMethodName           = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/SetDriverTemplates"
	DeviceRegistryService_CreateCommunicationUnit_FullMethodName      = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/CreateCommunicationUnit"
	DeviceRegistryService_ListCommunicationUnit_FullMethodName        = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/ListCommunicationUnit"
	DeviceRegistryService_GetCommunicationUnit_FullMethodName         = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/GetCommunicationUnit"
	DeviceRegistryService_CreateDevice_FullMethodName                 = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/CreateDevice"
	DeviceRegistryService_ListDevices_FullMethodName                  = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/ListDevices"
	DeviceRegistryService_GetDevice_FullMethodName                    = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/GetDevice"
	DeviceRegistryService_SetDeviceCommunicationUnits_FullMethodName  = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/SetDeviceCommunicationUnits"
	DeviceRegistryService_GetDevicesCommunicationUnits_FullMethodName = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/GetDevicesCommunicationUnits"
	DeviceRegistryService_CreateDeviceGroup_FullMethodName            = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/CreateDeviceGroup"
	DeviceRegistryService_GetDeviceGroups_FullMethodName              = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/GetDeviceGroups"
	DeviceRegistryService_GetDeviceGroup_FullMethodName               = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/GetDeviceGroup"
	DeviceRegistryService_AddDevicesToGroup_FullMethodName            = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/AddDevicesToGroup"
	DeviceRegistryService_RemoveDevicesFromGroup_FullMethodName       = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/RemoveDevicesFromGroup"
	DeviceRegistryService_GetModemPools_FullMethodName                = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/GetModemPools"
	DeviceRegistryService_GetModemPool_FullMethodName                 = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/GetModemPool"
	DeviceRegistryService_CreateModemPool_FullMethodName              = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/CreateModemPool"
	DeviceRegistryService_UpdateModemPool_FullMethodName              = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/UpdateModemPool"
	DeviceRegistryService_DeleteModemPool_FullMethodName              = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/DeleteModemPool"
	DeviceRegistryService_CreateModem_FullMethodName                  = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/CreateModem"
	DeviceRegistryService_UpdateModem_FullMethodName                  = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/UpdateModem"
	DeviceRegistryService_DeleteModem_FullMethodName                  = "/io.clbs.openhes.pbdeviceregistry.DeviceRegistryService/DeleteModem"
)

// DeviceRegistryServiceClient is the client API for DeviceRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Deviceregistry service definition.
type DeviceRegistryServiceClient interface {
	// The method called by the Driver Operator to set the driver templates. The parameter contains the driver templates.
	SetDriverTemplates(ctx context.Context, in *pbdrivermodels.NegotiateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// The method called by the RestAPI to register a new communication unit. The parameter contains the communication unit specification.
	CreateCommunicationUnit(ctx context.Context, in *pbdeviceregistrymodels.CreateCommunicationUnitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	ListCommunicationUnit(ctx context.Context, in *models.ListSelector, opts ...grpc.CallOption) (*pbdeviceregistrymodels.ArrayOfCommunicationUnitSpec, error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	GetCommunicationUnit(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*pbdeviceregistrymodels.CommunicationUnitSpec, error)
	// The method called by the RestAPI to register a new device. The parameter contains the device specification.
	CreateDevice(ctx context.Context, in *pbdeviceregistrymodels.CreateDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	ListDevices(ctx context.Context, in *models.ListSelector, opts ...grpc.CallOption) (*pbdeviceregistrymodels.ArrayOfDevice, error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	GetDevice(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*pbdeviceregistrymodels.Device, error)
	// The method called by the RestAPI to replace ordered set of linked communication units.
	SetDeviceCommunicationUnits(ctx context.Context, in *pbdeviceregistrymodels.SetDeviceCommunicationUnitsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// The method called by the RestAPI to get communication units definitions linked to the device(s).
	GetDevicesCommunicationUnits(ctx context.Context, in *pbdeviceregistrymodels.GetDevicesCommunicationUnitsRequest, opts ...grpc.CallOption) (*pbdeviceregistrymodels.GetDevicesCommunicationUnitsResponse, error)
	// The method called by the RestAPI to create a new device group. The parameter contains the device group specification.
	CreateDeviceGroup(ctx context.Context, in *pbdeviceregistrymodels.CreateDeviceGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// The method returns a list of device groups.
	GetDeviceGroups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pbdeviceregistrymodels.GetDeviceGroupsResponse, error)
	// The method returns single device group.
	// @param The device group identifier.
	// @return The device group specification.
	GetDeviceGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*pbdeviceregistrymodels.GetDeviceGroupResponse, error)
	// The method called by the RestAPI to add a new device to the device group. The parameter contains the device group specification.
	AddDevicesToGroup(ctx context.Context, in *pbdeviceregistrymodels.AddDevicesToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// The method called by the RestAPI to remove a device from the device group. The parameter contains the device group specification.
	RemoveDevicesFromGroup(ctx context.Context, in *pbdeviceregistrymodels.RemoveDevicesFromGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// The method to get list of the modem pools.
	GetModemPools(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pbdeviceregistrymodels.GetModemPoolsResponse, error)
	// The method to get the information about the modem pool. The method returns the modem pool information.
	GetModemPool(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*pbdeviceregistrymodels.GetModemPoolResponse, error)
	// The method to create a new modem pool.
	CreateModemPool(ctx context.Context, in *pbdeviceregistrymodels.SetModemPoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// The method to update the modem pool.
	UpdateModemPool(ctx context.Context, in *pbdeviceregistrymodels.SetModemPoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// The method to delete the modem pool.
	DeleteModemPool(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// The method to create a new modem within the pool.
	CreateModem(ctx context.Context, in *pbdeviceregistrymodels.SetModemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// The method to update the modem within the pool.
	UpdateModem(ctx context.Context, in *pbdeviceregistrymodels.SetModemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// The method to delete the modem within the pool.
	DeleteModem(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deviceRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceRegistryServiceClient(cc grpc.ClientConnInterface) DeviceRegistryServiceClient {
	return &deviceRegistryServiceClient{cc}
}

func (c *deviceRegistryServiceClient) SetDriverTemplates(ctx context.Context, in *pbdrivermodels.NegotiateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_SetDriverTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) CreateCommunicationUnit(ctx context.Context, in *pbdeviceregistrymodels.CreateCommunicationUnitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateCommunicationUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) ListCommunicationUnit(ctx context.Context, in *models.ListSelector, opts ...grpc.CallOption) (*pbdeviceregistrymodels.ArrayOfCommunicationUnitSpec, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pbdeviceregistrymodels.ArrayOfCommunicationUnitSpec)
	err := c.cc.Invoke(ctx, DeviceRegistryService_ListCommunicationUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetCommunicationUnit(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*pbdeviceregistrymodels.CommunicationUnitSpec, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pbdeviceregistrymodels.CommunicationUnitSpec)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetCommunicationUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) CreateDevice(ctx context.Context, in *pbdeviceregistrymodels.CreateDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) ListDevices(ctx context.Context, in *models.ListSelector, opts ...grpc.CallOption) (*pbdeviceregistrymodels.ArrayOfDevice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pbdeviceregistrymodels.ArrayOfDevice)
	err := c.cc.Invoke(ctx, DeviceRegistryService_ListDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetDevice(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*pbdeviceregistrymodels.Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pbdeviceregistrymodels.Device)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) SetDeviceCommunicationUnits(ctx context.Context, in *pbdeviceregistrymodels.SetDeviceCommunicationUnitsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_SetDeviceCommunicationUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetDevicesCommunicationUnits(ctx context.Context, in *pbdeviceregistrymodels.GetDevicesCommunicationUnitsRequest, opts ...grpc.CallOption) (*pbdeviceregistrymodels.GetDevicesCommunicationUnitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pbdeviceregistrymodels.GetDevicesCommunicationUnitsResponse)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetDevicesCommunicationUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) CreateDeviceGroup(ctx context.Context, in *pbdeviceregistrymodels.CreateDeviceGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateDeviceGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetDeviceGroups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pbdeviceregistrymodels.GetDeviceGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pbdeviceregistrymodels.GetDeviceGroupsResponse)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetDeviceGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetDeviceGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*pbdeviceregistrymodels.GetDeviceGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pbdeviceregistrymodels.GetDeviceGroupResponse)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetDeviceGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) AddDevicesToGroup(ctx context.Context, in *pbdeviceregistrymodels.AddDevicesToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_AddDevicesToGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) RemoveDevicesFromGroup(ctx context.Context, in *pbdeviceregistrymodels.RemoveDevicesFromGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_RemoveDevicesFromGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetModemPools(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pbdeviceregistrymodels.GetModemPoolsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pbdeviceregistrymodels.GetModemPoolsResponse)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetModemPools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetModemPool(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*pbdeviceregistrymodels.GetModemPoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pbdeviceregistrymodels.GetModemPoolResponse)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetModemPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) CreateModemPool(ctx context.Context, in *pbdeviceregistrymodels.SetModemPoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateModemPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) UpdateModemPool(ctx context.Context, in *pbdeviceregistrymodels.SetModemPoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_UpdateModemPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) DeleteModemPool(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_DeleteModemPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) CreateModem(ctx context.Context, in *pbdeviceregistrymodels.SetModemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateModem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) UpdateModem(ctx context.Context, in *pbdeviceregistrymodels.SetModemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_UpdateModem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) DeleteModem(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_DeleteModem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceRegistryServiceServer is the server API for DeviceRegistryService service.
// All implementations must embed UnimplementedDeviceRegistryServiceServer
// for forward compatibility.
//
// The Deviceregistry service definition.
type DeviceRegistryServiceServer interface {
	// The method called by the Driver Operator to set the driver templates. The parameter contains the driver templates.
	SetDriverTemplates(context.Context, *pbdrivermodels.NegotiateRequest) (*emptypb.Empty, error)
	// The method called by the RestAPI to register a new communication unit. The parameter contains the communication unit specification.
	CreateCommunicationUnit(context.Context, *pbdeviceregistrymodels.CreateCommunicationUnitRequest) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	ListCommunicationUnit(context.Context, *models.ListSelector) (*pbdeviceregistrymodels.ArrayOfCommunicationUnitSpec, error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	GetCommunicationUnit(context.Context, *wrapperspb.StringValue) (*pbdeviceregistrymodels.CommunicationUnitSpec, error)
	// The method called by the RestAPI to register a new device. The parameter contains the device specification.
	CreateDevice(context.Context, *pbdeviceregistrymodels.CreateDeviceRequest) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	ListDevices(context.Context, *models.ListSelector) (*pbdeviceregistrymodels.ArrayOfDevice, error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	GetDevice(context.Context, *wrapperspb.StringValue) (*pbdeviceregistrymodels.Device, error)
	// The method called by the RestAPI to replace ordered set of linked communication units.
	SetDeviceCommunicationUnits(context.Context, *pbdeviceregistrymodels.SetDeviceCommunicationUnitsRequest) (*emptypb.Empty, error)
	// The method called by the RestAPI to get communication units definitions linked to the device(s).
	GetDevicesCommunicationUnits(context.Context, *pbdeviceregistrymodels.GetDevicesCommunicationUnitsRequest) (*pbdeviceregistrymodels.GetDevicesCommunicationUnitsResponse, error)
	// The method called by the RestAPI to create a new device group. The parameter contains the device group specification.
	CreateDeviceGroup(context.Context, *pbdeviceregistrymodels.CreateDeviceGroupRequest) (*emptypb.Empty, error)
	// The method returns a list of device groups.
	GetDeviceGroups(context.Context, *emptypb.Empty) (*pbdeviceregistrymodels.GetDeviceGroupsResponse, error)
	// The method returns single device group.
	// @param The device group identifier.
	// @return The device group specification.
	GetDeviceGroup(context.Context, *wrapperspb.StringValue) (*pbdeviceregistrymodels.GetDeviceGroupResponse, error)
	// The method called by the RestAPI to add a new device to the device group. The parameter contains the device group specification.
	AddDevicesToGroup(context.Context, *pbdeviceregistrymodels.AddDevicesToGroupRequest) (*emptypb.Empty, error)
	// The method called by the RestAPI to remove a device from the device group. The parameter contains the device group specification.
	RemoveDevicesFromGroup(context.Context, *pbdeviceregistrymodels.RemoveDevicesFromGroupRequest) (*emptypb.Empty, error)
	// The method to get list of the modem pools.
	GetModemPools(context.Context, *emptypb.Empty) (*pbdeviceregistrymodels.GetModemPoolsResponse, error)
	// The method to get the information about the modem pool. The method returns the modem pool information.
	GetModemPool(context.Context, *wrapperspb.StringValue) (*pbdeviceregistrymodels.GetModemPoolResponse, error)
	// The method to create a new modem pool.
	CreateModemPool(context.Context, *pbdeviceregistrymodels.SetModemPoolRequest) (*emptypb.Empty, error)
	// The method to update the modem pool.
	UpdateModemPool(context.Context, *pbdeviceregistrymodels.SetModemPoolRequest) (*emptypb.Empty, error)
	// The method to delete the modem pool.
	DeleteModemPool(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// The method to create a new modem within the pool.
	CreateModem(context.Context, *pbdeviceregistrymodels.SetModemRequest) (*emptypb.Empty, error)
	// The method to update the modem within the pool.
	UpdateModem(context.Context, *pbdeviceregistrymodels.SetModemRequest) (*emptypb.Empty, error)
	// The method to delete the modem within the pool.
	DeleteModem(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	mustEmbedUnimplementedDeviceRegistryServiceServer()
}

// UnimplementedDeviceRegistryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceRegistryServiceServer struct{}

func (UnimplementedDeviceRegistryServiceServer) SetDriverTemplates(context.Context, *pbdrivermodels.NegotiateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDriverTemplates not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) CreateCommunicationUnit(context.Context, *pbdeviceregistrymodels.CreateCommunicationUnitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunicationUnit not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) ListCommunicationUnit(context.Context, *models.ListSelector) (*pbdeviceregistrymodels.ArrayOfCommunicationUnitSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommunicationUnit not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetCommunicationUnit(context.Context, *wrapperspb.StringValue) (*pbdeviceregistrymodels.CommunicationUnitSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunicationUnit not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) CreateDevice(context.Context, *pbdeviceregistrymodels.CreateDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) ListDevices(context.Context, *models.ListSelector) (*pbdeviceregistrymodels.ArrayOfDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetDevice(context.Context, *wrapperspb.StringValue) (*pbdeviceregistrymodels.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) SetDeviceCommunicationUnits(context.Context, *pbdeviceregistrymodels.SetDeviceCommunicationUnitsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceCommunicationUnits not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetDevicesCommunicationUnits(context.Context, *pbdeviceregistrymodels.GetDevicesCommunicationUnitsRequest) (*pbdeviceregistrymodels.GetDevicesCommunicationUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicesCommunicationUnits not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) CreateDeviceGroup(context.Context, *pbdeviceregistrymodels.CreateDeviceGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceGroup not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetDeviceGroups(context.Context, *emptypb.Empty) (*pbdeviceregistrymodels.GetDeviceGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceGroups not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetDeviceGroup(context.Context, *wrapperspb.StringValue) (*pbdeviceregistrymodels.GetDeviceGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceGroup not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) AddDevicesToGroup(context.Context, *pbdeviceregistrymodels.AddDevicesToGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevicesToGroup not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) RemoveDevicesFromGroup(context.Context, *pbdeviceregistrymodels.RemoveDevicesFromGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDevicesFromGroup not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetModemPools(context.Context, *emptypb.Empty) (*pbdeviceregistrymodels.GetModemPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModemPools not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetModemPool(context.Context, *wrapperspb.StringValue) (*pbdeviceregistrymodels.GetModemPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModemPool not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) CreateModemPool(context.Context, *pbdeviceregistrymodels.SetModemPoolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModemPool not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) UpdateModemPool(context.Context, *pbdeviceregistrymodels.SetModemPoolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModemPool not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) DeleteModemPool(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModemPool not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) CreateModem(context.Context, *pbdeviceregistrymodels.SetModemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModem not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) UpdateModem(context.Context, *pbdeviceregistrymodels.SetModemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModem not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) DeleteModem(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModem not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) mustEmbedUnimplementedDeviceRegistryServiceServer() {}
func (UnimplementedDeviceRegistryServiceServer) testEmbeddedByValue()                               {}

// UnsafeDeviceRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceRegistryServiceServer will
// result in compilation errors.
type UnsafeDeviceRegistryServiceServer interface {
	mustEmbedUnimplementedDeviceRegistryServiceServer()
}

func RegisterDeviceRegistryServiceServer(s grpc.ServiceRegistrar, srv DeviceRegistryServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeviceRegistryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceRegistryService_ServiceDesc, srv)
}

func _DeviceRegistryService_SetDriverTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbdrivermodels.NegotiateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).SetDriverTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_SetDriverTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).SetDriverTemplates(ctx, req.(*pbdrivermodels.NegotiateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_CreateCommunicationUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbdeviceregistrymodels.CreateCommunicationUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateCommunicationUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateCommunicationUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateCommunicationUnit(ctx, req.(*pbdeviceregistrymodels.CreateCommunicationUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_ListCommunicationUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).ListCommunicationUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_ListCommunicationUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).ListCommunicationUnit(ctx, req.(*models.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetCommunicationUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetCommunicationUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetCommunicationUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetCommunicationUnit(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbdeviceregistrymodels.CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateDevice(ctx, req.(*pbdeviceregistrymodels.CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).ListDevices(ctx, req.(*models.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetDevice(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_SetDeviceCommunicationUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbdeviceregistrymodels.SetDeviceCommunicationUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).SetDeviceCommunicationUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_SetDeviceCommunicationUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).SetDeviceCommunicationUnits(ctx, req.(*pbdeviceregistrymodels.SetDeviceCommunicationUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetDevicesCommunicationUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbdeviceregistrymodels.GetDevicesCommunicationUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetDevicesCommunicationUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetDevicesCommunicationUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetDevicesCommunicationUnits(ctx, req.(*pbdeviceregistrymodels.GetDevicesCommunicationUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_CreateDeviceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbdeviceregistrymodels.CreateDeviceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateDeviceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateDeviceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateDeviceGroup(ctx, req.(*pbdeviceregistrymodels.CreateDeviceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetDeviceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetDeviceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetDeviceGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetDeviceGroups(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetDeviceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetDeviceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetDeviceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetDeviceGroup(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_AddDevicesToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbdeviceregistrymodels.AddDevicesToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).AddDevicesToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_AddDevicesToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).AddDevicesToGroup(ctx, req.(*pbdeviceregistrymodels.AddDevicesToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_RemoveDevicesFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbdeviceregistrymodels.RemoveDevicesFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).RemoveDevicesFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_RemoveDevicesFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).RemoveDevicesFromGroup(ctx, req.(*pbdeviceregistrymodels.RemoveDevicesFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetModemPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetModemPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetModemPools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetModemPools(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetModemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetModemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetModemPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetModemPool(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_CreateModemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbdeviceregistrymodels.SetModemPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateModemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateModemPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateModemPool(ctx, req.(*pbdeviceregistrymodels.SetModemPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_UpdateModemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbdeviceregistrymodels.SetModemPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).UpdateModemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_UpdateModemPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).UpdateModemPool(ctx, req.(*pbdeviceregistrymodels.SetModemPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_DeleteModemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).DeleteModemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_DeleteModemPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).DeleteModemPool(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_CreateModem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbdeviceregistrymodels.SetModemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateModem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateModem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateModem(ctx, req.(*pbdeviceregistrymodels.SetModemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_UpdateModem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbdeviceregistrymodels.SetModemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).UpdateModem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_UpdateModem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).UpdateModem(ctx, req.(*pbdeviceregistrymodels.SetModemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_DeleteModem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).DeleteModem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_DeleteModem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).DeleteModem(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceRegistryService_ServiceDesc is the grpc.ServiceDesc for DeviceRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.clbs.openhes.pbdeviceregistry.DeviceRegistryService",
	HandlerType: (*DeviceRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDriverTemplates",
			Handler:    _DeviceRegistryService_SetDriverTemplates_Handler,
		},
		{
			MethodName: "CreateCommunicationUnit",
			Handler:    _DeviceRegistryService_CreateCommunicationUnit_Handler,
		},
		{
			MethodName: "ListCommunicationUnit",
			Handler:    _DeviceRegistryService_ListCommunicationUnit_Handler,
		},
		{
			MethodName: "GetCommunicationUnit",
			Handler:    _DeviceRegistryService_GetCommunicationUnit_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _DeviceRegistryService_CreateDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _DeviceRegistryService_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _DeviceRegistryService_GetDevice_Handler,
		},
		{
			MethodName: "SetDeviceCommunicationUnits",
			Handler:    _DeviceRegistryService_SetDeviceCommunicationUnits_Handler,
		},
		{
			MethodName: "GetDevicesCommunicationUnits",
			Handler:    _DeviceRegistryService_GetDevicesCommunicationUnits_Handler,
		},
		{
			MethodName: "CreateDeviceGroup",
			Handler:    _DeviceRegistryService_CreateDeviceGroup_Handler,
		},
		{
			MethodName: "GetDeviceGroups",
			Handler:    _DeviceRegistryService_GetDeviceGroups_Handler,
		},
		{
			MethodName: "GetDeviceGroup",
			Handler:    _DeviceRegistryService_GetDeviceGroup_Handler,
		},
		{
			MethodName: "AddDevicesToGroup",
			Handler:    _DeviceRegistryService_AddDevicesToGroup_Handler,
		},
		{
			MethodName: "RemoveDevicesFromGroup",
			Handler:    _DeviceRegistryService_RemoveDevicesFromGroup_Handler,
		},
		{
			MethodName: "GetModemPools",
			Handler:    _DeviceRegistryService_GetModemPools_Handler,
		},
		{
			MethodName: "GetModemPool",
			Handler:    _DeviceRegistryService_GetModemPool_Handler,
		},
		{
			MethodName: "CreateModemPool",
			Handler:    _DeviceRegistryService_CreateModemPool_Handler,
		},
		{
			MethodName: "UpdateModemPool",
			Handler:    _DeviceRegistryService_UpdateModemPool_Handler,
		},
		{
			MethodName: "DeleteModemPool",
			Handler:    _DeviceRegistryService_DeleteModemPool_Handler,
		},
		{
			MethodName: "CreateModem",
			Handler:    _DeviceRegistryService_CreateModem_Handler,
		},
		{
			MethodName: "UpdateModem",
			Handler:    _DeviceRegistryService_UpdateModem_Handler,
		},
		{
			MethodName: "DeleteModem",
			Handler:    _DeviceRegistryService_DeleteModem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pbdeviceregistry.proto",
}
