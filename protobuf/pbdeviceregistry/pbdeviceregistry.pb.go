// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: pbdeviceregistry.proto

package pbdeviceregistry

import (
	pbdriver "github.com/cybroslabs/hes-2-apis/protobuf/pbdriver"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RestApi -> DriverRegistry - the request message to create a new device.
type CreateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec *DeviceSpec `protobuf:"bytes,1,opt,name=spec,json=s,proto3" json:"spec,omitempty"` // The device specification.
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDeviceRequest) GetSpec() *DeviceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to get the information about the device.
type GetDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *int64  `protobuf:"varint,1,opt,name=id,json=i,proto3,oneof" json:"id,omitempty"`                  // The unique identifier of the device.
	PublicId   *string `protobuf:"bytes,2,opt,name=public_id,json=p,proto3,oneof" json:"public_id,omitempty"`     // The UUID of the device.
	ExternalId *string `protobuf:"bytes,3,opt,name=external_id,json=e,proto3,oneof" json:"external_id,omitempty"` // The external identifier of the device.
	Name       *string `protobuf:"bytes,4,opt,name=name,json=n,proto3,oneof" json:"name,omitempty"`               // The name of the device.
}

func (x *GetDeviceRequest) Reset() {
	*x = GetDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceRequest) ProtoMessage() {}

func (x *GetDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{1}
}

func (x *GetDeviceRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GetDeviceRequest) GetPublicId() string {
	if x != nil && x.PublicId != nil {
		return *x.PublicId
	}
	return ""
}

func (x *GetDeviceRequest) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *GetDeviceRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// DriverRegistry -> RestApi - the message holds the information about the device.
type GetDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec []*DeviceSpec `protobuf:"bytes,1,rep,name=spec,json=s,proto3" json:"spec,omitempty"` // The device specification.
}

func (x *GetDeviceResponse) Reset() {
	*x = GetDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceResponse) ProtoMessage() {}

func (x *GetDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceResponse) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{2}
}

func (x *GetDeviceResponse) GetSpec() []*DeviceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type DeviceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64                           `protobuf:"varint,1,opt,name=id,json=i,proto3" json:"id,omitempty"`                  // The unique identifier of the device.
	PublicId   string                          `protobuf:"bytes,2,opt,name=public_id,json=p,proto3" json:"public_id,omitempty"`     // The UUID of the device.
	ExternalId string                          `protobuf:"bytes,3,opt,name=external_id,json=e,proto3" json:"external_id,omitempty"` // The external identifier of the device.
	Name       string                          `protobuf:"bytes,4,opt,name=name,json=n,proto3" json:"name,omitempty"`               // The name of the device.
	Attributes []*pbdriver.AttributeDefinition `protobuf:"bytes,5,rep,name=attributes,json=a,proto3" json:"attributes,omitempty"`   // The template of the action attributes. It is represented as a list of attribute definitions.
}

func (x *DeviceSpec) Reset() {
	*x = DeviceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSpec) ProtoMessage() {}

func (x *DeviceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSpec.ProtoReflect.Descriptor instead.
func (*DeviceSpec) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceSpec) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceSpec) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

func (x *DeviceSpec) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *DeviceSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceSpec) GetAttributes() []*pbdriver.AttributeDefinition {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Sub-message that represents the device group.
type DeviceGroupSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64   `protobuf:"varint,1,opt,name=id,json=i,proto3" json:"id,omitempty"`                  // The unique identifier of the device group.
	PublicId string  `protobuf:"bytes,2,opt,name=public_id,json=p,proto3" json:"public_id,omitempty"`     // The UUID of the device group.
	Name     string  `protobuf:"bytes,3,opt,name=name,json=n,proto3" json:"name,omitempty"`               // The name of the device group.
	Devices  []int64 `protobuf:"varint,4,rep,packed,name=devices,json=d,proto3" json:"devices,omitempty"` // The list of device identifiers that are part of the group.
}

func (x *DeviceGroupSpec) Reset() {
	*x = DeviceGroupSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGroupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGroupSpec) ProtoMessage() {}

func (x *DeviceGroupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGroupSpec.ProtoReflect.Descriptor instead.
func (*DeviceGroupSpec) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceGroupSpec) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceGroupSpec) GetPublicId() string {
	if x != nil {
		return x.PublicId
	}
	return ""
}

func (x *DeviceGroupSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceGroupSpec) GetDevices() []int64 {
	if x != nil {
		return x.Devices
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to get the information about the device group.
type CreateDeviceGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec *DeviceGroupSpec `protobuf:"bytes,1,opt,name=spec,json=s,proto3" json:"spec,omitempty"` // The device group specification.
}

func (x *CreateDeviceGroupRequest) Reset() {
	*x = CreateDeviceGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceGroupRequest) ProtoMessage() {}

func (x *CreateDeviceGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceGroupRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{5}
}

func (x *CreateDeviceGroupRequest) GetSpec() *DeviceGroupSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to get the information about the device group.
type GetDeviceGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *int64  `protobuf:"varint,1,opt,name=id,json=i,proto3,oneof" json:"id,omitempty"`              // The unique identifier of the device group.
	PublicId *string `protobuf:"bytes,2,opt,name=public_id,json=p,proto3,oneof" json:"public_id,omitempty"` // The UUID of the device group.
	Name     *string `protobuf:"bytes,3,opt,name=name,json=n,proto3,oneof" json:"name,omitempty"`           // The name of the device group.
}

func (x *GetDeviceGroupRequest) Reset() {
	*x = GetDeviceGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceGroupRequest) ProtoMessage() {}

func (x *GetDeviceGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceGroupRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceGroupRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{6}
}

func (x *GetDeviceGroupRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GetDeviceGroupRequest) GetPublicId() string {
	if x != nil && x.PublicId != nil {
		return *x.PublicId
	}
	return ""
}

func (x *GetDeviceGroupRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// DriverRegistry -> RestApi - the message holds the information about the device group.
type GetDeviceGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec []*DeviceGroupSpec `protobuf:"bytes,1,rep,name=spec,json=s,proto3" json:"spec,omitempty"` // The device group specification.
}

func (x *GetDeviceGroupResponse) Reset() {
	*x = GetDeviceGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceGroupResponse) ProtoMessage() {}

func (x *GetDeviceGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceGroupResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceGroupResponse) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{7}
}

func (x *GetDeviceGroupResponse) GetSpec() []*DeviceGroupSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

var File_pbdeviceregistry_proto protoreflect.FileDescriptor

var file_pbdeviceregistry_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x01, 0x73, 0x22, 0xa2,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x01, 0x69, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x01, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x01, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x01, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x01, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x01, 0x69, 0x12, 0x14, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x70, 0x12, 0x16, 0x0a, 0x0b, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x65, 0x12, 0x0f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x01, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x01, 0x61, 0x22, 0x5b, 0x0a, 0x0f, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0d, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x69, 0x12, 0x14, 0x0a, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x70, 0x12, 0x0f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x6e, 0x12, 0x12, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x01, 0x64, 0x22, 0x5e, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x01, 0x73, 0x22, 0x7a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x01,
	0x69, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x01, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x01, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x52, 0x01,
	0x73, 0x32, 0x8f, 0x04, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x75, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x32,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3a, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x84, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x79, 0x62, 0x72, 0x6f, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x68, 0x65, 0x73,
	0x2d, 0x32, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbdeviceregistry_proto_rawDescOnce sync.Once
	file_pbdeviceregistry_proto_rawDescData = file_pbdeviceregistry_proto_rawDesc
)

func file_pbdeviceregistry_proto_rawDescGZIP() []byte {
	file_pbdeviceregistry_proto_rawDescOnce.Do(func() {
		file_pbdeviceregistry_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbdeviceregistry_proto_rawDescData)
	})
	return file_pbdeviceregistry_proto_rawDescData
}

var file_pbdeviceregistry_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_pbdeviceregistry_proto_goTypes = []interface{}{
	(*CreateDeviceRequest)(nil),          // 0: io.clbs.openhes.pbdeviceregistry.CreateDeviceRequest
	(*GetDeviceRequest)(nil),             // 1: io.clbs.openhes.pbdeviceregistry.GetDeviceRequest
	(*GetDeviceResponse)(nil),            // 2: io.clbs.openhes.pbdeviceregistry.GetDeviceResponse
	(*DeviceSpec)(nil),                   // 3: io.clbs.openhes.pbdeviceregistry.DeviceSpec
	(*DeviceGroupSpec)(nil),              // 4: io.clbs.openhes.pbdeviceregistry.DeviceGroupSpec
	(*CreateDeviceGroupRequest)(nil),     // 5: io.clbs.openhes.pbdeviceregistry.CreateDeviceGroupRequest
	(*GetDeviceGroupRequest)(nil),        // 6: io.clbs.openhes.pbdeviceregistry.GetDeviceGroupRequest
	(*GetDeviceGroupResponse)(nil),       // 7: io.clbs.openhes.pbdeviceregistry.GetDeviceGroupResponse
	(*pbdriver.AttributeDefinition)(nil), // 8: io.clbs.openhes.pbdriver.AttributeDefinition
}
var file_pbdeviceregistry_proto_depIdxs = []int32{
	3, // 0: io.clbs.openhes.pbdeviceregistry.CreateDeviceRequest.spec:type_name -> io.clbs.openhes.pbdeviceregistry.DeviceSpec
	3, // 1: io.clbs.openhes.pbdeviceregistry.GetDeviceResponse.spec:type_name -> io.clbs.openhes.pbdeviceregistry.DeviceSpec
	8, // 2: io.clbs.openhes.pbdeviceregistry.DeviceSpec.attributes:type_name -> io.clbs.openhes.pbdriver.AttributeDefinition
	4, // 3: io.clbs.openhes.pbdeviceregistry.CreateDeviceGroupRequest.spec:type_name -> io.clbs.openhes.pbdeviceregistry.DeviceGroupSpec
	4, // 4: io.clbs.openhes.pbdeviceregistry.GetDeviceGroupResponse.spec:type_name -> io.clbs.openhes.pbdeviceregistry.DeviceGroupSpec
	0, // 5: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateDevice:input_type -> io.clbs.openhes.pbdeviceregistry.CreateDeviceRequest
	1, // 6: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetDevices:input_type -> io.clbs.openhes.pbdeviceregistry.GetDeviceRequest
	5, // 7: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateDeviceGroup:input_type -> io.clbs.openhes.pbdeviceregistry.CreateDeviceGroupRequest
	6, // 8: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetDeviceGroups:input_type -> io.clbs.openhes.pbdeviceregistry.GetDeviceGroupRequest
	3, // 9: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateDevice:output_type -> io.clbs.openhes.pbdeviceregistry.DeviceSpec
	2, // 10: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetDevices:output_type -> io.clbs.openhes.pbdeviceregistry.GetDeviceResponse
	4, // 11: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateDeviceGroup:output_type -> io.clbs.openhes.pbdeviceregistry.DeviceGroupSpec
	7, // 12: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetDeviceGroups:output_type -> io.clbs.openhes.pbdeviceregistry.GetDeviceGroupResponse
	9, // [9:13] is the sub-list for method output_type
	5, // [5:9] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_pbdeviceregistry_proto_init() }
func file_pbdeviceregistry_proto_init() {
	if File_pbdeviceregistry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbdeviceregistry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGroupSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pbdeviceregistry_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_pbdeviceregistry_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbdeviceregistry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pbdeviceregistry_proto_goTypes,
		DependencyIndexes: file_pbdeviceregistry_proto_depIdxs,
		MessageInfos:      file_pbdeviceregistry_proto_msgTypes,
	}.Build()
	File_pbdeviceregistry_proto = out.File
	file_pbdeviceregistry_proto_rawDesc = nil
	file_pbdeviceregistry_proto_goTypes = nil
	file_pbdeviceregistry_proto_depIdxs = nil
}
