// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: pbdeviceregistry.proto

package pbdeviceregistry

import (
	pbdriver "github.com/cybroslabs/hes-2-apis/protobuf/pbdriver"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RestApi -> DriverRegistry - The communication unit specification.
type CreateCommunicationUnitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Spec          *CommunicationUnitSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"` // The communication unit specification.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCommunicationUnitRequest) Reset() {
	*x = CreateCommunicationUnitRequest{}
	mi := &file_pbdeviceregistry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCommunicationUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommunicationUnitRequest) ProtoMessage() {}

func (x *CreateCommunicationUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommunicationUnitRequest.ProtoReflect.Descriptor instead.
func (*CreateCommunicationUnitRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCommunicationUnitRequest) GetSpec() *CommunicationUnitSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to get the information about the communication unit.
type GetCommunicationUnitsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`                                   // The UUID of the communication unit.
	ExternalId    *string                `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3,oneof" json:"external_id,omitempty"` // The external identifier of the communication unit.
	Name          *string                `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`                               // The name of the communication unit.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommunicationUnitsRequest) Reset() {
	*x = GetCommunicationUnitsRequest{}
	mi := &file_pbdeviceregistry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommunicationUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommunicationUnitsRequest) ProtoMessage() {}

func (x *GetCommunicationUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommunicationUnitsRequest.ProtoReflect.Descriptor instead.
func (*GetCommunicationUnitsRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{1}
}

func (x *GetCommunicationUnitsRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *GetCommunicationUnitsRequest) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *GetCommunicationUnitsRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// DriverRegistry -> RestApi - the message holds the information about the communication unit.
type GetCommunicationUnitsResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Spec          []*CommunicationUnitSpec `protobuf:"bytes,1,rep,name=spec,proto3" json:"spec,omitempty"` // The communication unit specification.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommunicationUnitsResponse) Reset() {
	*x = GetCommunicationUnitsResponse{}
	mi := &file_pbdeviceregistry_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommunicationUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommunicationUnitsResponse) ProtoMessage() {}

func (x *GetCommunicationUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommunicationUnitsResponse.ProtoReflect.Descriptor instead.
func (*GetCommunicationUnitsResponse) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{2}
}

func (x *GetCommunicationUnitsResponse) GetSpec() []*CommunicationUnitSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Sub-message - the communication unit specification.
type CommunicationUnitSpec struct {
	state          protoimpl.MessageState   `protogen:"open.v1"`
	Id             string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                               // The UUID of the communication unit.
	ExternalId     *string                  `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3,oneof" json:"external_id,omitempty"`       // The external identifier of the communication unit.
	Name           string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                           // The name of the communication unit.
	ConnectionInfo *pbdriver.ConnectionInfo `protobuf:"bytes,4,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"` // The connection info.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CommunicationUnitSpec) Reset() {
	*x = CommunicationUnitSpec{}
	mi := &file_pbdeviceregistry_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommunicationUnitSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationUnitSpec) ProtoMessage() {}

func (x *CommunicationUnitSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationUnitSpec.ProtoReflect.Descriptor instead.
func (*CommunicationUnitSpec) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{3}
}

func (x *CommunicationUnitSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommunicationUnitSpec) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *CommunicationUnitSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommunicationUnitSpec) GetConnectionInfo() *pbdriver.ConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to create a new device.
type CreateDeviceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Spec          *DeviceSpec            `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"` // The device specification.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	mi := &file_pbdeviceregistry_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDeviceRequest) GetSpec() *DeviceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to get the information about the device.
type GetDevicesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`                                   // The UUID of the device.
	ExternalId    *string                `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3,oneof" json:"external_id,omitempty"` // The external identifier of the device.
	Name          *string                `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`                               // The name of the device.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDevicesRequest) Reset() {
	*x = GetDevicesRequest{}
	mi := &file_pbdeviceregistry_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevicesRequest) ProtoMessage() {}

func (x *GetDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevicesRequest.ProtoReflect.Descriptor instead.
func (*GetDevicesRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{5}
}

func (x *GetDevicesRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *GetDevicesRequest) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *GetDevicesRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// DriverRegistry -> RestApi - the message holds the information about the device.
type GetDevicesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Spec          []*DeviceSpec          `protobuf:"bytes,1,rep,name=spec,proto3" json:"spec,omitempty"` // The device specification.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDevicesResponse) Reset() {
	*x = GetDevicesResponse{}
	mi := &file_pbdeviceregistry_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevicesResponse) ProtoMessage() {}

func (x *GetDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevicesResponse.ProtoReflect.Descriptor instead.
func (*GetDevicesResponse) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{6}
}

func (x *GetDevicesResponse) GetSpec() []*DeviceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Sub-message - the device specification.
type DeviceSpec struct {
	state               protoimpl.MessageState              `protogen:"open.v1"`
	Id                  string                              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                           // The UUID of the device.
	ExternalId          *string                             `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3,oneof" json:"external_id,omitempty"`                                                   // The external identifier of the device.
	Name                string                              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                                       // The name of the device.
	Attributes          map[string]*pbdriver.AttributeValue `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // The template of the action attributes. It is represented as a list of attribute definitions.
	CommunicationUnitId []string                            `protobuf:"bytes,5,rep,name=communication_unit_id,json=communicationUnitId,proto3" json:"communication_unit_id,omitempty"`                            // The list of communication unit identifiers that allows to communicate with the device. It's an ordered set where the first element is the primary communication unit with the highest priority.
	Timezone            *string                             `protobuf:"bytes,6,opt,name=timezone,proto3,oneof" json:"timezone,omitempty"`                                                                         // The timezone related to the device, e.g. "America/New_York", "Europe/Prague", "CET", "GMT", "Etc/GMT+2".
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DeviceSpec) Reset() {
	*x = DeviceSpec{}
	mi := &file_pbdeviceregistry_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSpec) ProtoMessage() {}

func (x *DeviceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSpec.ProtoReflect.Descriptor instead.
func (*DeviceSpec) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{7}
}

func (x *DeviceSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceSpec) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *DeviceSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceSpec) GetAttributes() map[string]*pbdriver.AttributeValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *DeviceSpec) GetCommunicationUnitId() []string {
	if x != nil {
		return x.CommunicationUnitId
	}
	return nil
}

func (x *DeviceSpec) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

// Sub-message that represents the device group.
type DeviceGroupSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                         // The UUID of the device group.
	ExternalId    *string                `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3,oneof" json:"external_id,omitempty"` // The external identifier of the communication unit.
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                     // The name of the device group.
	DeviceId      []string               `protobuf:"bytes,4,rep,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`             // The list of device identifiers that are part of the group.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceGroupSpec) Reset() {
	*x = DeviceGroupSpec{}
	mi := &file_pbdeviceregistry_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceGroupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGroupSpec) ProtoMessage() {}

func (x *DeviceGroupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGroupSpec.ProtoReflect.Descriptor instead.
func (*DeviceGroupSpec) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceGroupSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceGroupSpec) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *DeviceGroupSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceGroupSpec) GetDeviceId() []string {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to get the information about the device group.
type CreateDeviceGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Spec          *DeviceGroupSpec       `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"` // The device group specification.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDeviceGroupRequest) Reset() {
	*x = CreateDeviceGroupRequest{}
	mi := &file_pbdeviceregistry_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDeviceGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceGroupRequest) ProtoMessage() {}

func (x *CreateDeviceGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceGroupRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{9}
}

func (x *CreateDeviceGroupRequest) GetSpec() *DeviceGroupSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// DriverRegistry -> RestApi - the message holds the information about the device group.
type GetDeviceGroupsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Spec          []*DeviceGroupSpec     `protobuf:"bytes,1,rep,name=spec,proto3" json:"spec,omitempty"` // The device group specification.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDeviceGroupsResponse) Reset() {
	*x = GetDeviceGroupsResponse{}
	mi := &file_pbdeviceregistry_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDeviceGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceGroupsResponse) ProtoMessage() {}

func (x *GetDeviceGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceGroupsResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceGroupsResponse) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{10}
}

func (x *GetDeviceGroupsResponse) GetSpec() []*DeviceGroupSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to add a new device to the device group.
type AddDevicesToGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupId       string                 `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`    // The unique identifier of the device group.
	DeviceId      []string               `protobuf:"bytes,2,rep,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"` // The unique identifier of the device.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddDevicesToGroupRequest) Reset() {
	*x = AddDevicesToGroupRequest{}
	mi := &file_pbdeviceregistry_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDevicesToGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDevicesToGroupRequest) ProtoMessage() {}

func (x *AddDevicesToGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDevicesToGroupRequest.ProtoReflect.Descriptor instead.
func (*AddDevicesToGroupRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{11}
}

func (x *AddDevicesToGroupRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AddDevicesToGroupRequest) GetDeviceId() []string {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to remove a device from the device group.
type RemoveDevicesFromGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupId       string                 `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`    // The unique identifier of the device group.
	DeviceId      []string               `protobuf:"bytes,2,rep,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"` // The unique identifier of the device.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveDevicesFromGroupRequest) Reset() {
	*x = RemoveDevicesFromGroupRequest{}
	mi := &file_pbdeviceregistry_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveDevicesFromGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDevicesFromGroupRequest) ProtoMessage() {}

func (x *RemoveDevicesFromGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDevicesFromGroupRequest.ProtoReflect.Descriptor instead.
func (*RemoveDevicesFromGroupRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{12}
}

func (x *RemoveDevicesFromGroupRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *RemoveDevicesFromGroupRequest) GetDeviceId() []string {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to add a new device to the communication unit.
type SetDeviceCommunicationUnitsRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	DeviceId            string                 `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`                                    // The unique identifier of the device.
	CommunicationUnitId []string               `protobuf:"bytes,2,rep,name=communication_unit_id,json=communicationUnitId,proto3" json:"communication_unit_id,omitempty"` // The unique identifier of the communication unit.
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SetDeviceCommunicationUnitsRequest) Reset() {
	*x = SetDeviceCommunicationUnitsRequest{}
	mi := &file_pbdeviceregistry_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDeviceCommunicationUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceCommunicationUnitsRequest) ProtoMessage() {}

func (x *SetDeviceCommunicationUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceCommunicationUnitsRequest.ProtoReflect.Descriptor instead.
func (*SetDeviceCommunicationUnitsRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{13}
}

func (x *SetDeviceCommunicationUnitsRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *SetDeviceCommunicationUnitsRequest) GetCommunicationUnitId() []string {
	if x != nil {
		return x.CommunicationUnitId
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to get
type GetDevicesCommunicationUnitsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceId      []string               `protobuf:"bytes,1,rep,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"` // The unique identifier of the device.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDevicesCommunicationUnitsRequest) Reset() {
	*x = GetDevicesCommunicationUnitsRequest{}
	mi := &file_pbdeviceregistry_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDevicesCommunicationUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevicesCommunicationUnitsRequest) ProtoMessage() {}

func (x *GetDevicesCommunicationUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevicesCommunicationUnitsRequest.ProtoReflect.Descriptor instead.
func (*GetDevicesCommunicationUnitsRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{14}
}

func (x *GetDevicesCommunicationUnitsRequest) GetDeviceId() []string {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

// DriverRegistry -> RestApi - the message holds the information about the communication units linked to the device.
type GetDevicesCommunicationUnitsResponse struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Devices       map[string]*DeviceCommunicationUnits `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // The list of devices with their communication units.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDevicesCommunicationUnitsResponse) Reset() {
	*x = GetDevicesCommunicationUnitsResponse{}
	mi := &file_pbdeviceregistry_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDevicesCommunicationUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevicesCommunicationUnitsResponse) ProtoMessage() {}

func (x *GetDevicesCommunicationUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevicesCommunicationUnitsResponse.ProtoReflect.Descriptor instead.
func (*GetDevicesCommunicationUnitsResponse) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{15}
}

func (x *GetDevicesCommunicationUnitsResponse) GetDevices() map[string]*DeviceCommunicationUnits {
	if x != nil {
		return x.Devices
	}
	return nil
}

// Sub-message that represents the communication units linked to the device.
type DeviceCommunicationUnits struct {
	state              protoimpl.MessageState     `protogen:"open.v1"`
	CommunicationUnits []*pbdriver.ConnectionInfo `protobuf:"bytes,1,rep,name=communication_units,json=communicationUnits,proto3" json:"communication_units,omitempty"` // The list of communication units linked to the device.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DeviceCommunicationUnits) Reset() {
	*x = DeviceCommunicationUnits{}
	mi := &file_pbdeviceregistry_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceCommunicationUnits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCommunicationUnits) ProtoMessage() {}

func (x *DeviceCommunicationUnits) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCommunicationUnits.ProtoReflect.Descriptor instead.
func (*DeviceCommunicationUnits) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{16}
}

func (x *DeviceCommunicationUnits) GetCommunicationUnits() []*pbdriver.ConnectionInfo {
	if x != nil {
		return x.CommunicationUnits
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to get the modem pool info.
type GetModemPoolRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PoolId        string                 `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"` // The modem pool identifier.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetModemPoolRequest) Reset() {
	*x = GetModemPoolRequest{}
	mi := &file_pbdeviceregistry_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModemPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModemPoolRequest) ProtoMessage() {}

func (x *GetModemPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModemPoolRequest.ProtoReflect.Descriptor instead.
func (*GetModemPoolRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{17}
}

func (x *GetModemPoolRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

// DriverRegistry -> RestApi - the message holds the information about the modem pool.
type GetModemPoolResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Modems        []*pbdriver.ModemInfo  `protobuf:"bytes,1,rep,name=modems,proto3" json:"modems,omitempty"` // The modems registered within the pool.
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`     // The name of the modem pool.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetModemPoolResponse) Reset() {
	*x = GetModemPoolResponse{}
	mi := &file_pbdeviceregistry_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModemPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModemPoolResponse) ProtoMessage() {}

func (x *GetModemPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModemPoolResponse.ProtoReflect.Descriptor instead.
func (*GetModemPoolResponse) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{18}
}

func (x *GetModemPoolResponse) GetModems() []*pbdriver.ModemInfo {
	if x != nil {
		return x.Modems
	}
	return nil
}

func (x *GetModemPoolResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SetModemPoolRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PoolId        string                 `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"` // The modem pool identifier. It must be unique within the system.
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                   // The name of the modem pool to be created. It must be unique within the system.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetModemPoolRequest) Reset() {
	*x = SetModemPoolRequest{}
	mi := &file_pbdeviceregistry_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetModemPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetModemPoolRequest) ProtoMessage() {}

func (x *SetModemPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetModemPoolRequest.ProtoReflect.Descriptor instead.
func (*SetModemPoolRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{19}
}

func (x *SetModemPoolRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *SetModemPoolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SetModemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PoolId        string                 `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"` // The modem pool identifier, required for update operation.
	Modem         *pbdriver.ModemInfo    `protobuf:"bytes,2,opt,name=modem,proto3" json:"modem,omitempty"`                 // The modem specification.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetModemRequest) Reset() {
	*x = SetModemRequest{}
	mi := &file_pbdeviceregistry_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetModemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetModemRequest) ProtoMessage() {}

func (x *SetModemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetModemRequest.ProtoReflect.Descriptor instead.
func (*SetModemRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{20}
}

func (x *SetModemRequest) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *SetModemRequest) GetModem() *pbdriver.ModemInfo {
	if x != nil {
		return x.Modem
	}
	return nil
}

var File_pbdeviceregistry_proto protoreflect.FileDescriptor

var file_pbdeviceregistry_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x92, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xc4, 0x01, 0x0a, 0x15, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x22, 0x57, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x8f, 0x03, 0x0a, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x67, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x88, 0x01,
	0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x60, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x52, 0x0a,
	0x18, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x57, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x22, 0x53, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x64, 0x22, 0x42, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x8d, 0x02, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d,
	0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x53, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x76, 0x0a,
	0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x75, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x59, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x2e, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6d,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x0f, 0x53, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6d,
	0x32, 0xa3, 0x0f, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x12, 0x53, 0x65,
	0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x73, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x98, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x77, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x1b,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x44, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xad, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x45, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x46, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3a,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x6a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67,
	0x0a, 0x11, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x71, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x60, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x60, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x12, 0x31, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x12, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x43, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d,
	0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x79, 0x62, 0x72, 0x6f, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f,
	0x68, 0x65, 0x73, 0x2d, 0x32, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbdeviceregistry_proto_rawDescOnce sync.Once
	file_pbdeviceregistry_proto_rawDescData = file_pbdeviceregistry_proto_rawDesc
)

func file_pbdeviceregistry_proto_rawDescGZIP() []byte {
	file_pbdeviceregistry_proto_rawDescOnce.Do(func() {
		file_pbdeviceregistry_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbdeviceregistry_proto_rawDescData)
	})
	return file_pbdeviceregistry_proto_rawDescData
}

var file_pbdeviceregistry_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_pbdeviceregistry_proto_goTypes = []any{
	(*CreateCommunicationUnitRequest)(nil),       // 0: io.clbs.openhes.pbdeviceregistry.CreateCommunicationUnitRequest
	(*GetCommunicationUnitsRequest)(nil),         // 1: io.clbs.openhes.pbdeviceregistry.GetCommunicationUnitsRequest
	(*GetCommunicationUnitsResponse)(nil),        // 2: io.clbs.openhes.pbdeviceregistry.GetCommunicationUnitsResponse
	(*CommunicationUnitSpec)(nil),                // 3: io.clbs.openhes.pbdeviceregistry.CommunicationUnitSpec
	(*CreateDeviceRequest)(nil),                  // 4: io.clbs.openhes.pbdeviceregistry.CreateDeviceRequest
	(*GetDevicesRequest)(nil),                    // 5: io.clbs.openhes.pbdeviceregistry.GetDevicesRequest
	(*GetDevicesResponse)(nil),                   // 6: io.clbs.openhes.pbdeviceregistry.GetDevicesResponse
	(*DeviceSpec)(nil),                           // 7: io.clbs.openhes.pbdeviceregistry.DeviceSpec
	(*DeviceGroupSpec)(nil),                      // 8: io.clbs.openhes.pbdeviceregistry.DeviceGroupSpec
	(*CreateDeviceGroupRequest)(nil),             // 9: io.clbs.openhes.pbdeviceregistry.CreateDeviceGroupRequest
	(*GetDeviceGroupsResponse)(nil),              // 10: io.clbs.openhes.pbdeviceregistry.GetDeviceGroupsResponse
	(*AddDevicesToGroupRequest)(nil),             // 11: io.clbs.openhes.pbdeviceregistry.AddDevicesToGroupRequest
	(*RemoveDevicesFromGroupRequest)(nil),        // 12: io.clbs.openhes.pbdeviceregistry.RemoveDevicesFromGroupRequest
	(*SetDeviceCommunicationUnitsRequest)(nil),   // 13: io.clbs.openhes.pbdeviceregistry.SetDeviceCommunicationUnitsRequest
	(*GetDevicesCommunicationUnitsRequest)(nil),  // 14: io.clbs.openhes.pbdeviceregistry.GetDevicesCommunicationUnitsRequest
	(*GetDevicesCommunicationUnitsResponse)(nil), // 15: io.clbs.openhes.pbdeviceregistry.GetDevicesCommunicationUnitsResponse
	(*DeviceCommunicationUnits)(nil),             // 16: io.clbs.openhes.pbdeviceregistry.DeviceCommunicationUnits
	(*GetModemPoolRequest)(nil),                  // 17: io.clbs.openhes.pbdeviceregistry.GetModemPoolRequest
	(*GetModemPoolResponse)(nil),                 // 18: io.clbs.openhes.pbdeviceregistry.GetModemPoolResponse
	(*SetModemPoolRequest)(nil),                  // 19: io.clbs.openhes.pbdeviceregistry.SetModemPoolRequest
	(*SetModemRequest)(nil),                      // 20: io.clbs.openhes.pbdeviceregistry.SetModemRequest
	nil,                                          // 21: io.clbs.openhes.pbdeviceregistry.DeviceSpec.AttributesEntry
	nil,                                          // 22: io.clbs.openhes.pbdeviceregistry.GetDevicesCommunicationUnitsResponse.DevicesEntry
	(*pbdriver.ConnectionInfo)(nil),              // 23: io.clbs.openhes.pbdriver.ConnectionInfo
	(*pbdriver.ModemInfo)(nil),                   // 24: io.clbs.openhes.pbdriver.ModemInfo
	(*pbdriver.AttributeValue)(nil),              // 25: io.clbs.openhes.pbdriver.AttributeValue
	(*pbdriver.NegotiateRequest)(nil),            // 26: io.clbs.openhes.pbdriver.NegotiateRequest
	(*wrapperspb.StringValue)(nil),               // 27: google.protobuf.StringValue
	(*emptypb.Empty)(nil),                        // 28: google.protobuf.Empty
}
var file_pbdeviceregistry_proto_depIdxs = []int32{
	3,  // 0: io.clbs.openhes.pbdeviceregistry.CreateCommunicationUnitRequest.spec:type_name -> io.clbs.openhes.pbdeviceregistry.CommunicationUnitSpec
	3,  // 1: io.clbs.openhes.pbdeviceregistry.GetCommunicationUnitsResponse.spec:type_name -> io.clbs.openhes.pbdeviceregistry.CommunicationUnitSpec
	23, // 2: io.clbs.openhes.pbdeviceregistry.CommunicationUnitSpec.connection_info:type_name -> io.clbs.openhes.pbdriver.ConnectionInfo
	7,  // 3: io.clbs.openhes.pbdeviceregistry.CreateDeviceRequest.spec:type_name -> io.clbs.openhes.pbdeviceregistry.DeviceSpec
	7,  // 4: io.clbs.openhes.pbdeviceregistry.GetDevicesResponse.spec:type_name -> io.clbs.openhes.pbdeviceregistry.DeviceSpec
	21, // 5: io.clbs.openhes.pbdeviceregistry.DeviceSpec.attributes:type_name -> io.clbs.openhes.pbdeviceregistry.DeviceSpec.AttributesEntry
	8,  // 6: io.clbs.openhes.pbdeviceregistry.CreateDeviceGroupRequest.spec:type_name -> io.clbs.openhes.pbdeviceregistry.DeviceGroupSpec
	8,  // 7: io.clbs.openhes.pbdeviceregistry.GetDeviceGroupsResponse.spec:type_name -> io.clbs.openhes.pbdeviceregistry.DeviceGroupSpec
	22, // 8: io.clbs.openhes.pbdeviceregistry.GetDevicesCommunicationUnitsResponse.devices:type_name -> io.clbs.openhes.pbdeviceregistry.GetDevicesCommunicationUnitsResponse.DevicesEntry
	23, // 9: io.clbs.openhes.pbdeviceregistry.DeviceCommunicationUnits.communication_units:type_name -> io.clbs.openhes.pbdriver.ConnectionInfo
	24, // 10: io.clbs.openhes.pbdeviceregistry.GetModemPoolResponse.modems:type_name -> io.clbs.openhes.pbdriver.ModemInfo
	24, // 11: io.clbs.openhes.pbdeviceregistry.SetModemRequest.modem:type_name -> io.clbs.openhes.pbdriver.ModemInfo
	25, // 12: io.clbs.openhes.pbdeviceregistry.DeviceSpec.AttributesEntry.value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	16, // 13: io.clbs.openhes.pbdeviceregistry.GetDevicesCommunicationUnitsResponse.DevicesEntry.value:type_name -> io.clbs.openhes.pbdeviceregistry.DeviceCommunicationUnits
	26, // 14: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.SetDriverTemplates:input_type -> io.clbs.openhes.pbdriver.NegotiateRequest
	0,  // 15: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateCommunicationUnit:input_type -> io.clbs.openhes.pbdeviceregistry.CreateCommunicationUnitRequest
	1,  // 16: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetCommunicationUnits:input_type -> io.clbs.openhes.pbdeviceregistry.GetCommunicationUnitsRequest
	4,  // 17: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateDevice:input_type -> io.clbs.openhes.pbdeviceregistry.CreateDeviceRequest
	5,  // 18: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetDevices:input_type -> io.clbs.openhes.pbdeviceregistry.GetDevicesRequest
	13, // 19: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.SetDeviceCommunicationUnits:input_type -> io.clbs.openhes.pbdeviceregistry.SetDeviceCommunicationUnitsRequest
	14, // 20: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetDevicesCommunicationUnits:input_type -> io.clbs.openhes.pbdeviceregistry.GetDevicesCommunicationUnitsRequest
	9,  // 21: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateDeviceGroup:input_type -> io.clbs.openhes.pbdeviceregistry.CreateDeviceGroupRequest
	27, // 22: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetDeviceGroups:input_type -> google.protobuf.StringValue
	11, // 23: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.AddDevicesToGroup:input_type -> io.clbs.openhes.pbdeviceregistry.AddDevicesToGroupRequest
	12, // 24: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.RemoveDevicesFromGroup:input_type -> io.clbs.openhes.pbdeviceregistry.RemoveDevicesFromGroupRequest
	27, // 25: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetModemPool:input_type -> google.protobuf.StringValue
	19, // 26: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateModemPool:input_type -> io.clbs.openhes.pbdeviceregistry.SetModemPoolRequest
	19, // 27: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.UpdateModemPool:input_type -> io.clbs.openhes.pbdeviceregistry.SetModemPoolRequest
	27, // 28: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.DeleteModemPool:input_type -> google.protobuf.StringValue
	20, // 29: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateModem:input_type -> io.clbs.openhes.pbdeviceregistry.SetModemRequest
	20, // 30: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.UpdateModem:input_type -> io.clbs.openhes.pbdeviceregistry.SetModemRequest
	27, // 31: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.DeleteModem:input_type -> google.protobuf.StringValue
	28, // 32: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.SetDriverTemplates:output_type -> google.protobuf.Empty
	28, // 33: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateCommunicationUnit:output_type -> google.protobuf.Empty
	2,  // 34: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetCommunicationUnits:output_type -> io.clbs.openhes.pbdeviceregistry.GetCommunicationUnitsResponse
	28, // 35: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateDevice:output_type -> google.protobuf.Empty
	6,  // 36: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetDevices:output_type -> io.clbs.openhes.pbdeviceregistry.GetDevicesResponse
	28, // 37: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.SetDeviceCommunicationUnits:output_type -> google.protobuf.Empty
	15, // 38: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetDevicesCommunicationUnits:output_type -> io.clbs.openhes.pbdeviceregistry.GetDevicesCommunicationUnitsResponse
	28, // 39: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateDeviceGroup:output_type -> google.protobuf.Empty
	10, // 40: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetDeviceGroups:output_type -> io.clbs.openhes.pbdeviceregistry.GetDeviceGroupsResponse
	28, // 41: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.AddDevicesToGroup:output_type -> google.protobuf.Empty
	28, // 42: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.RemoveDevicesFromGroup:output_type -> google.protobuf.Empty
	18, // 43: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetModemPool:output_type -> io.clbs.openhes.pbdeviceregistry.GetModemPoolResponse
	28, // 44: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateModemPool:output_type -> google.protobuf.Empty
	28, // 45: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.UpdateModemPool:output_type -> google.protobuf.Empty
	28, // 46: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.DeleteModemPool:output_type -> google.protobuf.Empty
	28, // 47: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateModem:output_type -> google.protobuf.Empty
	28, // 48: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.UpdateModem:output_type -> google.protobuf.Empty
	28, // 49: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.DeleteModem:output_type -> google.protobuf.Empty
	32, // [32:50] is the sub-list for method output_type
	14, // [14:32] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_pbdeviceregistry_proto_init() }
func file_pbdeviceregistry_proto_init() {
	if File_pbdeviceregistry_proto != nil {
		return
	}
	file_pbdeviceregistry_proto_msgTypes[1].OneofWrappers = []any{}
	file_pbdeviceregistry_proto_msgTypes[3].OneofWrappers = []any{}
	file_pbdeviceregistry_proto_msgTypes[5].OneofWrappers = []any{}
	file_pbdeviceregistry_proto_msgTypes[7].OneofWrappers = []any{}
	file_pbdeviceregistry_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbdeviceregistry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pbdeviceregistry_proto_goTypes,
		DependencyIndexes: file_pbdeviceregistry_proto_depIdxs,
		MessageInfos:      file_pbdeviceregistry_proto_msgTypes,
	}.Build()
	File_pbdeviceregistry_proto = out.File
	file_pbdeviceregistry_proto_rawDesc = nil
	file_pbdeviceregistry_proto_goTypes = nil
	file_pbdeviceregistry_proto_depIdxs = nil
}
