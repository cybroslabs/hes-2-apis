// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: pbdeviceregistry.proto

package pbdeviceregistry

import (
	pbdriver "github.com/cybroslabs/hes-2-apis/protobuf/pbdriver"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RestApi -> DriverRegistry - The communication unit specification.
type CreateCommunicationUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec *CommunicationUnitSpec `protobuf:"bytes,1,opt,name=spec,json=s,proto3" json:"spec,omitempty"` // The communication unit specification.
}

func (x *CreateCommunicationUnitRequest) Reset() {
	*x = CreateCommunicationUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommunicationUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommunicationUnitRequest) ProtoMessage() {}

func (x *CreateCommunicationUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommunicationUnitRequest.ProtoReflect.Descriptor instead.
func (*CreateCommunicationUnitRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCommunicationUnitRequest) GetSpec() *CommunicationUnitSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to get the information about the communication unit.
type GetCommunicationUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *string `protobuf:"bytes,1,opt,name=id,json=p,proto3,oneof" json:"id,omitempty"`                   // The UUID of the communication unit.
	ExternalId *string `protobuf:"bytes,2,opt,name=external_id,json=e,proto3,oneof" json:"external_id,omitempty"` // The external identifier of the communication unit.
	Name       *string `protobuf:"bytes,3,opt,name=name,json=n,proto3,oneof" json:"name,omitempty"`               // The name of the communication unit.
}

func (x *GetCommunicationUnitRequest) Reset() {
	*x = GetCommunicationUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommunicationUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommunicationUnitRequest) ProtoMessage() {}

func (x *GetCommunicationUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommunicationUnitRequest.ProtoReflect.Descriptor instead.
func (*GetCommunicationUnitRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{1}
}

func (x *GetCommunicationUnitRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *GetCommunicationUnitRequest) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *GetCommunicationUnitRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// DriverRegistry -> RestApi - the message holds the information about the communication unit.
type GetCommunicationUnitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec []*CommunicationUnitSpec `protobuf:"bytes,1,rep,name=spec,json=s,proto3" json:"spec,omitempty"` // The communication unit specification.
}

func (x *GetCommunicationUnitResponse) Reset() {
	*x = GetCommunicationUnitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommunicationUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommunicationUnitResponse) ProtoMessage() {}

func (x *GetCommunicationUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommunicationUnitResponse.ProtoReflect.Descriptor instead.
func (*GetCommunicationUnitResponse) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{2}
}

func (x *GetCommunicationUnitResponse) GetSpec() []*CommunicationUnitSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Sub-message - the communication unit specification.
type CommunicationUnitSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string  `protobuf:"bytes,1,opt,name=id,json=i,proto3" json:"id,omitempty"`                         // The UUID of the communication unit.
	ExternalId *string `protobuf:"bytes,2,opt,name=external_id,json=e,proto3,oneof" json:"external_id,omitempty"` // The external identifier of the communication unit.
	Name       string  `protobuf:"bytes,3,opt,name=name,json=n,proto3" json:"name,omitempty"`                     // The name of the communication unit.
	// Types that are assignable to ConnectionType:
	//
	//	*CommunicationUnitSpec_Tcp
	//	*CommunicationUnitSpec_Phone
	//	*CommunicationUnitSpec_Serial
	ConnectionType isCommunicationUnitSpec_ConnectionType `protobuf_oneof:"connection_type"`
}

func (x *CommunicationUnitSpec) Reset() {
	*x = CommunicationUnitSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationUnitSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationUnitSpec) ProtoMessage() {}

func (x *CommunicationUnitSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationUnitSpec.ProtoReflect.Descriptor instead.
func (*CommunicationUnitSpec) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{3}
}

func (x *CommunicationUnitSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CommunicationUnitSpec) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *CommunicationUnitSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *CommunicationUnitSpec) GetConnectionType() isCommunicationUnitSpec_ConnectionType {
	if m != nil {
		return m.ConnectionType
	}
	return nil
}

func (x *CommunicationUnitSpec) GetTcp() *pbdriver.ConnectionTypeTcp {
	if x, ok := x.GetConnectionType().(*CommunicationUnitSpec_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *CommunicationUnitSpec) GetPhone() *pbdriver.ConnectionTypePhone {
	if x, ok := x.GetConnectionType().(*CommunicationUnitSpec_Phone); ok {
		return x.Phone
	}
	return nil
}

func (x *CommunicationUnitSpec) GetSerial() *pbdriver.ConnectionTypeSerial {
	if x, ok := x.GetConnectionType().(*CommunicationUnitSpec_Serial); ok {
		return x.Serial
	}
	return nil
}

type isCommunicationUnitSpec_ConnectionType interface {
	isCommunicationUnitSpec_ConnectionType()
}

type CommunicationUnitSpec_Tcp struct {
	Tcp *pbdriver.ConnectionTypeTcp `protobuf:"bytes,4,opt,name=tcp,json=t,proto3,oneof"` // The TCP connection type.
}

type CommunicationUnitSpec_Phone struct {
	Phone *pbdriver.ConnectionTypePhone `protobuf:"bytes,5,opt,name=phone,json=p,proto3,oneof"` // The phone connection type.
}

type CommunicationUnitSpec_Serial struct {
	Serial *pbdriver.ConnectionTypeSerial `protobuf:"bytes,6,opt,name=serial,json=s,proto3,oneof"` // The serial connection type.
}

func (*CommunicationUnitSpec_Tcp) isCommunicationUnitSpec_ConnectionType() {}

func (*CommunicationUnitSpec_Phone) isCommunicationUnitSpec_ConnectionType() {}

func (*CommunicationUnitSpec_Serial) isCommunicationUnitSpec_ConnectionType() {}

// RestApi -> DriverRegistry - the request message to create a new device.
type CreateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec *DeviceSpec `protobuf:"bytes,1,opt,name=spec,json=s,proto3" json:"spec,omitempty"` // The device specification.
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDeviceRequest) GetSpec() *DeviceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to get the information about the device.
type GetDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *string `protobuf:"bytes,1,opt,name=id,json=p,proto3,oneof" json:"id,omitempty"`                   // The UUID of the device.
	ExternalId *string `protobuf:"bytes,2,opt,name=external_id,json=e,proto3,oneof" json:"external_id,omitempty"` // The external identifier of the device.
	Name       *string `protobuf:"bytes,3,opt,name=name,json=n,proto3,oneof" json:"name,omitempty"`               // The name of the device.
}

func (x *GetDeviceRequest) Reset() {
	*x = GetDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceRequest) ProtoMessage() {}

func (x *GetDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{5}
}

func (x *GetDeviceRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *GetDeviceRequest) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *GetDeviceRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// DriverRegistry -> RestApi - the message holds the information about the device.
type GetDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec []*DeviceSpec `protobuf:"bytes,1,rep,name=spec,json=s,proto3" json:"spec,omitempty"` // The device specification.
}

func (x *GetDeviceResponse) Reset() {
	*x = GetDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceResponse) ProtoMessage() {}

func (x *GetDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceResponse) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{6}
}

func (x *GetDeviceResponse) GetSpec() []*DeviceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Sub-message - the device specification.
type DeviceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string                              `protobuf:"bytes,1,opt,name=id,json=p,proto3" json:"id,omitempty"`                                                                                                         // The UUID of the device.
	ExternalId          *string                             `protobuf:"bytes,2,opt,name=external_id,json=e,proto3,oneof" json:"external_id,omitempty"`                                                                                 // The external identifier of the device.
	Name                string                              `protobuf:"bytes,3,opt,name=name,json=n,proto3" json:"name,omitempty"`                                                                                                     // The name of the device.
	Attributes          map[string]*pbdriver.AttributeValue `protobuf:"bytes,4,rep,name=attributes,json=a,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // The template of the action attributes. It is represented as a list of attribute definitions.
	CommunicationUnitId []string                            `protobuf:"bytes,5,rep,name=communication_unit_id,json=d,proto3" json:"communication_unit_id,omitempty"`                                                                   // The list of communication unit identifiers that allows to communicate with the device. It's an ordered set where the first element is the primary communication unit with the highest priority.
}

func (x *DeviceSpec) Reset() {
	*x = DeviceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSpec) ProtoMessage() {}

func (x *DeviceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSpec.ProtoReflect.Descriptor instead.
func (*DeviceSpec) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{7}
}

func (x *DeviceSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceSpec) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *DeviceSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceSpec) GetAttributes() map[string]*pbdriver.AttributeValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *DeviceSpec) GetCommunicationUnitId() []string {
	if x != nil {
		return x.CommunicationUnitId
	}
	return nil
}

// Sub-message that represents the device group.
type DeviceGroupSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string   `protobuf:"bytes,1,opt,name=id,json=p,proto3" json:"id,omitempty"`                         // The UUID of the device group.
	ExternalId *string  `protobuf:"bytes,2,opt,name=external_id,json=e,proto3,oneof" json:"external_id,omitempty"` // The external identifier of the communication unit.
	Name       string   `protobuf:"bytes,3,opt,name=name,json=n,proto3" json:"name,omitempty"`                     // The name of the device group.
	DeviceId   []string `protobuf:"bytes,4,rep,name=device_id,json=d,proto3" json:"device_id,omitempty"`           // The list of device identifiers that are part of the group.
}

func (x *DeviceGroupSpec) Reset() {
	*x = DeviceGroupSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGroupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGroupSpec) ProtoMessage() {}

func (x *DeviceGroupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGroupSpec.ProtoReflect.Descriptor instead.
func (*DeviceGroupSpec) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceGroupSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceGroupSpec) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *DeviceGroupSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceGroupSpec) GetDeviceId() []string {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to get the information about the device group.
type CreateDeviceGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec *DeviceGroupSpec `protobuf:"bytes,1,opt,name=spec,json=s,proto3" json:"spec,omitempty"` // The device group specification.
}

func (x *CreateDeviceGroupRequest) Reset() {
	*x = CreateDeviceGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceGroupRequest) ProtoMessage() {}

func (x *CreateDeviceGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceGroupRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{9}
}

func (x *CreateDeviceGroupRequest) GetSpec() *DeviceGroupSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to get the information about the device group.
type GetDeviceGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *string `protobuf:"bytes,1,opt,name=id,json=p,proto3,oneof" json:"id,omitempty"`     // The UUID of the device group.
	Name *string `protobuf:"bytes,2,opt,name=name,json=n,proto3,oneof" json:"name,omitempty"` // The name of the device group.
}

func (x *GetDeviceGroupRequest) Reset() {
	*x = GetDeviceGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceGroupRequest) ProtoMessage() {}

func (x *GetDeviceGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceGroupRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceGroupRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{10}
}

func (x *GetDeviceGroupRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *GetDeviceGroupRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// DriverRegistry -> RestApi - the message holds the information about the device group.
type GetDeviceGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec []*DeviceGroupSpec `protobuf:"bytes,1,rep,name=spec,json=s,proto3" json:"spec,omitempty"` // The device group specification.
}

func (x *GetDeviceGroupResponse) Reset() {
	*x = GetDeviceGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceGroupResponse) ProtoMessage() {}

func (x *GetDeviceGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceGroupResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceGroupResponse) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{11}
}

func (x *GetDeviceGroupResponse) GetSpec() []*DeviceGroupSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to add a new device to the device group.
type AddDevicesToGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  string   `protobuf:"bytes,1,opt,name=group_id,json=g,proto3" json:"group_id,omitempty"`   // The unique identifier of the device group.
	DeviceId []string `protobuf:"bytes,2,rep,name=device_id,json=d,proto3" json:"device_id,omitempty"` // The unique identifier of the device.
}

func (x *AddDevicesToGroupRequest) Reset() {
	*x = AddDevicesToGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDevicesToGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDevicesToGroupRequest) ProtoMessage() {}

func (x *AddDevicesToGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDevicesToGroupRequest.ProtoReflect.Descriptor instead.
func (*AddDevicesToGroupRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{12}
}

func (x *AddDevicesToGroupRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *AddDevicesToGroupRequest) GetDeviceId() []string {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to remove a device from the device group.
type RemoveDevicesFromGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId  string   `protobuf:"bytes,1,opt,name=group_id,json=g,proto3" json:"group_id,omitempty"`   // The unique identifier of the device group.
	DeviceId []string `protobuf:"bytes,2,rep,name=device_id,json=d,proto3" json:"device_id,omitempty"` // The unique identifier of the device.
}

func (x *RemoveDevicesFromGroupRequest) Reset() {
	*x = RemoveDevicesFromGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDevicesFromGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDevicesFromGroupRequest) ProtoMessage() {}

func (x *RemoveDevicesFromGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDevicesFromGroupRequest.ProtoReflect.Descriptor instead.
func (*RemoveDevicesFromGroupRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{13}
}

func (x *RemoveDevicesFromGroupRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *RemoveDevicesFromGroupRequest) GetDeviceId() []string {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to add a new device to the communication unit.
type AddDevicesToCommunicationUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunicationUnitId string   `protobuf:"bytes,1,opt,name=communication_unit_id,json=c,proto3" json:"communication_unit_id,omitempty"` // The unique identifier of the communication unit.
	DeviceId            []string `protobuf:"bytes,2,rep,name=device_id,json=d,proto3" json:"device_id,omitempty"`                         // The unique identifier of the device.
}

func (x *AddDevicesToCommunicationUnitRequest) Reset() {
	*x = AddDevicesToCommunicationUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDevicesToCommunicationUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDevicesToCommunicationUnitRequest) ProtoMessage() {}

func (x *AddDevicesToCommunicationUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDevicesToCommunicationUnitRequest.ProtoReflect.Descriptor instead.
func (*AddDevicesToCommunicationUnitRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{14}
}

func (x *AddDevicesToCommunicationUnitRequest) GetCommunicationUnitId() string {
	if x != nil {
		return x.CommunicationUnitId
	}
	return ""
}

func (x *AddDevicesToCommunicationUnitRequest) GetDeviceId() []string {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

// RestApi -> DriverRegistry - the request message to remove a device from the communication unit.
type RemoveDevicesFromCommunicationUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunicationUnitId string   `protobuf:"bytes,1,opt,name=communication_unit_id,json=c,proto3" json:"communication_unit_id,omitempty"` // The unique identifier of the communication unit.
	DeviceId            []string `protobuf:"bytes,2,rep,name=device_id,json=d,proto3" json:"device_id,omitempty"`                         // The unique identifier of the device.
}

func (x *RemoveDevicesFromCommunicationUnitRequest) Reset() {
	*x = RemoveDevicesFromCommunicationUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdeviceregistry_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDevicesFromCommunicationUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDevicesFromCommunicationUnitRequest) ProtoMessage() {}

func (x *RemoveDevicesFromCommunicationUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdeviceregistry_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDevicesFromCommunicationUnitRequest.ProtoReflect.Descriptor instead.
func (*RemoveDevicesFromCommunicationUnitRequest) Descriptor() ([]byte, []int) {
	return file_pbdeviceregistry_proto_rawDescGZIP(), []int{15}
}

func (x *RemoveDevicesFromCommunicationUnitRequest) GetCommunicationUnitId() string {
	if x != nil {
		return x.CommunicationUnitId
	}
	return ""
}

func (x *RemoveDevicesFromCommunicationUnitRequest) GetDeviceId() []string {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

var File_pbdeviceregistry_proto protoreflect.FileDescriptor

var file_pbdeviceregistry_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6a, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x01, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x01, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x01, 0x65, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x01, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x01, 0x73, 0x22, 0xbe, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x0d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x69, 0x12, 0x1b,
	0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x01, 0x65, 0x88, 0x01, 0x01, 0x12, 0x0f, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6e, 0x12, 0x3d, 0x0a, 0x03,
	0x74, 0x63, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x63, 0x70, 0x48, 0x00, 0x52, 0x01, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x01, 0x70, 0x12, 0x43,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x01, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x01, 0x73, 0x22, 0x79, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x01,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x01, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x01, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x01, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0d, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x70, 0x12, 0x1b, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x01, 0x65, 0x88, 0x01, 0x01, 0x12, 0x0f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6e, 0x12, 0x53, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x61, 0x12, 0x20, 0x0a, 0x15,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x01, 0x64, 0x1a, 0x67,
	0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0d, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x70, 0x12, 0x1b, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x01, 0x65, 0x88, 0x01, 0x01, 0x12, 0x0f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6e, 0x12, 0x14, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x01, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x5e, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x52, 0x01, 0x73, 0x22, 0x51, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x01, 0x70, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x01, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x5c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x52, 0x01, 0x73, 0x22, 0x45,
	0x0a, 0x18, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x67, 0x12,
	0x14, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x01, 0x64, 0x22, 0x4a, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x67, 0x12, 0x14, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x01,
	0x64, 0x22, 0x5e, 0x0a, 0x24, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x15, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x63, 0x12, 0x14, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x01,
	0x64, 0x22, 0x63, 0x0a, 0x29, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x63,
	0x12, 0x14, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x01, 0x64, 0x32, 0x9f, 0x0b, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x94, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x40, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x96, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x9f, 0x01, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x46, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x12, 0xa9, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x4b, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x73,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x75, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x84, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3a, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x41,
	0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x8b, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x79, 0x62, 0x72, 0x6f, 0x73, 0x6c, 0x61, 0x62,
	0x73, 0x2f, 0x68, 0x65, 0x73, 0x2d, 0x32, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbdeviceregistry_proto_rawDescOnce sync.Once
	file_pbdeviceregistry_proto_rawDescData = file_pbdeviceregistry_proto_rawDesc
)

func file_pbdeviceregistry_proto_rawDescGZIP() []byte {
	file_pbdeviceregistry_proto_rawDescOnce.Do(func() {
		file_pbdeviceregistry_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbdeviceregistry_proto_rawDescData)
	})
	return file_pbdeviceregistry_proto_rawDescData
}

var file_pbdeviceregistry_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_pbdeviceregistry_proto_goTypes = []interface{}{
	(*CreateCommunicationUnitRequest)(nil),            // 0: io.clbs.openhes.pbdeviceregistry.CreateCommunicationUnitRequest
	(*GetCommunicationUnitRequest)(nil),               // 1: io.clbs.openhes.pbdeviceregistry.GetCommunicationUnitRequest
	(*GetCommunicationUnitResponse)(nil),              // 2: io.clbs.openhes.pbdeviceregistry.GetCommunicationUnitResponse
	(*CommunicationUnitSpec)(nil),                     // 3: io.clbs.openhes.pbdeviceregistry.CommunicationUnitSpec
	(*CreateDeviceRequest)(nil),                       // 4: io.clbs.openhes.pbdeviceregistry.CreateDeviceRequest
	(*GetDeviceRequest)(nil),                          // 5: io.clbs.openhes.pbdeviceregistry.GetDeviceRequest
	(*GetDeviceResponse)(nil),                         // 6: io.clbs.openhes.pbdeviceregistry.GetDeviceResponse
	(*DeviceSpec)(nil),                                // 7: io.clbs.openhes.pbdeviceregistry.DeviceSpec
	(*DeviceGroupSpec)(nil),                           // 8: io.clbs.openhes.pbdeviceregistry.DeviceGroupSpec
	(*CreateDeviceGroupRequest)(nil),                  // 9: io.clbs.openhes.pbdeviceregistry.CreateDeviceGroupRequest
	(*GetDeviceGroupRequest)(nil),                     // 10: io.clbs.openhes.pbdeviceregistry.GetDeviceGroupRequest
	(*GetDeviceGroupResponse)(nil),                    // 11: io.clbs.openhes.pbdeviceregistry.GetDeviceGroupResponse
	(*AddDevicesToGroupRequest)(nil),                  // 12: io.clbs.openhes.pbdeviceregistry.AddDevicesToGroupRequest
	(*RemoveDevicesFromGroupRequest)(nil),             // 13: io.clbs.openhes.pbdeviceregistry.RemoveDevicesFromGroupRequest
	(*AddDevicesToCommunicationUnitRequest)(nil),      // 14: io.clbs.openhes.pbdeviceregistry.AddDevicesToCommunicationUnitRequest
	(*RemoveDevicesFromCommunicationUnitRequest)(nil), // 15: io.clbs.openhes.pbdeviceregistry.RemoveDevicesFromCommunicationUnitRequest
	nil,                                   // 16: io.clbs.openhes.pbdeviceregistry.DeviceSpec.AttributesEntry
	(*pbdriver.ConnectionTypeTcp)(nil),    // 17: io.clbs.openhes.pbdriver.ConnectionTypeTcp
	(*pbdriver.ConnectionTypePhone)(nil),  // 18: io.clbs.openhes.pbdriver.ConnectionTypePhone
	(*pbdriver.ConnectionTypeSerial)(nil), // 19: io.clbs.openhes.pbdriver.ConnectionTypeSerial
	(*pbdriver.AttributeValue)(nil),       // 20: io.clbs.openhes.pbdriver.AttributeValue
}
var file_pbdeviceregistry_proto_depIdxs = []int32{
	3,  // 0: io.clbs.openhes.pbdeviceregistry.CreateCommunicationUnitRequest.spec:type_name -> io.clbs.openhes.pbdeviceregistry.CommunicationUnitSpec
	3,  // 1: io.clbs.openhes.pbdeviceregistry.GetCommunicationUnitResponse.spec:type_name -> io.clbs.openhes.pbdeviceregistry.CommunicationUnitSpec
	17, // 2: io.clbs.openhes.pbdeviceregistry.CommunicationUnitSpec.tcp:type_name -> io.clbs.openhes.pbdriver.ConnectionTypeTcp
	18, // 3: io.clbs.openhes.pbdeviceregistry.CommunicationUnitSpec.phone:type_name -> io.clbs.openhes.pbdriver.ConnectionTypePhone
	19, // 4: io.clbs.openhes.pbdeviceregistry.CommunicationUnitSpec.serial:type_name -> io.clbs.openhes.pbdriver.ConnectionTypeSerial
	7,  // 5: io.clbs.openhes.pbdeviceregistry.CreateDeviceRequest.spec:type_name -> io.clbs.openhes.pbdeviceregistry.DeviceSpec
	7,  // 6: io.clbs.openhes.pbdeviceregistry.GetDeviceResponse.spec:type_name -> io.clbs.openhes.pbdeviceregistry.DeviceSpec
	16, // 7: io.clbs.openhes.pbdeviceregistry.DeviceSpec.attributes:type_name -> io.clbs.openhes.pbdeviceregistry.DeviceSpec.AttributesEntry
	8,  // 8: io.clbs.openhes.pbdeviceregistry.CreateDeviceGroupRequest.spec:type_name -> io.clbs.openhes.pbdeviceregistry.DeviceGroupSpec
	8,  // 9: io.clbs.openhes.pbdeviceregistry.GetDeviceGroupResponse.spec:type_name -> io.clbs.openhes.pbdeviceregistry.DeviceGroupSpec
	20, // 10: io.clbs.openhes.pbdeviceregistry.DeviceSpec.AttributesEntry.value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	0,  // 11: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateCommunicationUnit:input_type -> io.clbs.openhes.pbdeviceregistry.CreateCommunicationUnitRequest
	1,  // 12: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetCommunicationUnits:input_type -> io.clbs.openhes.pbdeviceregistry.GetCommunicationUnitRequest
	14, // 13: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.AddDeviceToCommunicationUnit:input_type -> io.clbs.openhes.pbdeviceregistry.AddDevicesToCommunicationUnitRequest
	15, // 14: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.RemoveDeviceFromCommunicationUnit:input_type -> io.clbs.openhes.pbdeviceregistry.RemoveDevicesFromCommunicationUnitRequest
	4,  // 15: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateDevice:input_type -> io.clbs.openhes.pbdeviceregistry.CreateDeviceRequest
	5,  // 16: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetDevices:input_type -> io.clbs.openhes.pbdeviceregistry.GetDeviceRequest
	9,  // 17: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateDeviceGroup:input_type -> io.clbs.openhes.pbdeviceregistry.CreateDeviceGroupRequest
	10, // 18: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetDeviceGroups:input_type -> io.clbs.openhes.pbdeviceregistry.GetDeviceGroupRequest
	12, // 19: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.AddDeviceToGroup:input_type -> io.clbs.openhes.pbdeviceregistry.AddDevicesToGroupRequest
	13, // 20: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.RemoveDeviceFromGroup:input_type -> io.clbs.openhes.pbdeviceregistry.RemoveDevicesFromGroupRequest
	3,  // 21: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateCommunicationUnit:output_type -> io.clbs.openhes.pbdeviceregistry.CommunicationUnitSpec
	2,  // 22: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetCommunicationUnits:output_type -> io.clbs.openhes.pbdeviceregistry.GetCommunicationUnitResponse
	3,  // 23: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.AddDeviceToCommunicationUnit:output_type -> io.clbs.openhes.pbdeviceregistry.CommunicationUnitSpec
	3,  // 24: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.RemoveDeviceFromCommunicationUnit:output_type -> io.clbs.openhes.pbdeviceregistry.CommunicationUnitSpec
	7,  // 25: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateDevice:output_type -> io.clbs.openhes.pbdeviceregistry.DeviceSpec
	6,  // 26: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetDevices:output_type -> io.clbs.openhes.pbdeviceregistry.GetDeviceResponse
	8,  // 27: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.CreateDeviceGroup:output_type -> io.clbs.openhes.pbdeviceregistry.DeviceGroupSpec
	11, // 28: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.GetDeviceGroups:output_type -> io.clbs.openhes.pbdeviceregistry.GetDeviceGroupResponse
	8,  // 29: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.AddDeviceToGroup:output_type -> io.clbs.openhes.pbdeviceregistry.DeviceGroupSpec
	8,  // 30: io.clbs.openhes.pbdeviceregistry.DeviceRegistryService.RemoveDeviceFromGroup:output_type -> io.clbs.openhes.pbdeviceregistry.DeviceGroupSpec
	21, // [21:31] is the sub-list for method output_type
	11, // [11:21] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_pbdeviceregistry_proto_init() }
func file_pbdeviceregistry_proto_init() {
	if File_pbdeviceregistry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbdeviceregistry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommunicationUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommunicationUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommunicationUnitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationUnitSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGroupSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDevicesToGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDevicesFromGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDevicesToCommunicationUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdeviceregistry_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDevicesFromCommunicationUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pbdeviceregistry_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_pbdeviceregistry_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CommunicationUnitSpec_Tcp)(nil),
		(*CommunicationUnitSpec_Phone)(nil),
		(*CommunicationUnitSpec_Serial)(nil),
	}
	file_pbdeviceregistry_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_pbdeviceregistry_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_pbdeviceregistry_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_pbdeviceregistry_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbdeviceregistry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pbdeviceregistry_proto_goTypes,
		DependencyIndexes: file_pbdeviceregistry_proto_depIdxs,
		MessageInfos:      file_pbdeviceregistry_proto_msgTypes,
	}.Build()
	File_pbdeviceregistry_proto = out.File
	file_pbdeviceregistry_proto_rawDesc = nil
	file_pbdeviceregistry_proto_goTypes = nil
	file_pbdeviceregistry_proto_depIdxs = nil
}
