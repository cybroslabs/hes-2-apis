// Editions version of proto3 file

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.3
// source: pbdriver-models.proto

package pbdrivermodels

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Parity types
type SerialConfigParity int32

const (
	// No parity
	SerialConfigParity_PARITY_NONE SerialConfigParity = 0
	// Even parity
	SerialConfigParity_PARITY_EVEN SerialConfigParity = 1
	// Odd parity
	SerialConfigParity_PARITY_ODD SerialConfigParity = 2
	// Mark parity
	SerialConfigParity_PARITY_MARK SerialConfigParity = 3
	// Space parity
	SerialConfigParity_PARITY_SPACE SerialConfigParity = 4
)

// Enum value maps for SerialConfigParity.
var (
	SerialConfigParity_name = map[int32]string{
		0: "PARITY_NONE",
		1: "PARITY_EVEN",
		2: "PARITY_ODD",
		3: "PARITY_MARK",
		4: "PARITY_SPACE",
	}
	SerialConfigParity_value = map[string]int32{
		"PARITY_NONE":  0,
		"PARITY_EVEN":  1,
		"PARITY_ODD":   2,
		"PARITY_MARK":  3,
		"PARITY_SPACE": 4,
	}
)

func (x SerialConfigParity) Enum() *SerialConfigParity {
	p := new(SerialConfigParity)
	*p = x
	return p
}

func (x SerialConfigParity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SerialConfigParity) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_models_proto_enumTypes[0].Descriptor()
}

func (SerialConfigParity) Type() protoreflect.EnumType {
	return &file_pbdriver_models_proto_enumTypes[0]
}

func (x SerialConfigParity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Baud rate types
type SerialConfigBaudRate int32

const (
	// 110 baud
	SerialConfigBaudRate_BAUD_RATE_110 SerialConfigBaudRate = 0
	// 300 baud
	SerialConfigBaudRate_BAUD_RATE_300 SerialConfigBaudRate = 1
	// 600 baud
	SerialConfigBaudRate_BAUD_RATE_600 SerialConfigBaudRate = 2
	// 1200 baud
	SerialConfigBaudRate_BAUD_RATE_1200 SerialConfigBaudRate = 3
	// 2400 baud
	SerialConfigBaudRate_BAUD_RATE_2400 SerialConfigBaudRate = 4
	// 4800 baud
	SerialConfigBaudRate_BAUD_RATE_4800 SerialConfigBaudRate = 5
	// 9600 baud
	SerialConfigBaudRate_BAUD_RATE_9600 SerialConfigBaudRate = 6
	// 14400 baud
	SerialConfigBaudRate_BAUD_RATE_14400 SerialConfigBaudRate = 7
	// 19200 baud
	SerialConfigBaudRate_BAUD_RATE_19200 SerialConfigBaudRate = 8
	// 38400 baud
	SerialConfigBaudRate_BAUD_RATE_38400 SerialConfigBaudRate = 9
	// 57600 baud
	SerialConfigBaudRate_BAUD_RATE_57600 SerialConfigBaudRate = 10
	// 115200 baud
	SerialConfigBaudRate_BAUD_RATE_115200 SerialConfigBaudRate = 11
	// 230400 baud
	SerialConfigBaudRate_BAUD_RATE_230400 SerialConfigBaudRate = 12
	// 460800 baud
	SerialConfigBaudRate_BAUD_RATE_460800 SerialConfigBaudRate = 13
	// 921600 baud
	SerialConfigBaudRate_BAUD_RATE_921600 SerialConfigBaudRate = 14
)

// Enum value maps for SerialConfigBaudRate.
var (
	SerialConfigBaudRate_name = map[int32]string{
		0:  "BAUD_RATE_110",
		1:  "BAUD_RATE_300",
		2:  "BAUD_RATE_600",
		3:  "BAUD_RATE_1200",
		4:  "BAUD_RATE_2400",
		5:  "BAUD_RATE_4800",
		6:  "BAUD_RATE_9600",
		7:  "BAUD_RATE_14400",
		8:  "BAUD_RATE_19200",
		9:  "BAUD_RATE_38400",
		10: "BAUD_RATE_57600",
		11: "BAUD_RATE_115200",
		12: "BAUD_RATE_230400",
		13: "BAUD_RATE_460800",
		14: "BAUD_RATE_921600",
	}
	SerialConfigBaudRate_value = map[string]int32{
		"BAUD_RATE_110":    0,
		"BAUD_RATE_300":    1,
		"BAUD_RATE_600":    2,
		"BAUD_RATE_1200":   3,
		"BAUD_RATE_2400":   4,
		"BAUD_RATE_4800":   5,
		"BAUD_RATE_9600":   6,
		"BAUD_RATE_14400":  7,
		"BAUD_RATE_19200":  8,
		"BAUD_RATE_38400":  9,
		"BAUD_RATE_57600":  10,
		"BAUD_RATE_115200": 11,
		"BAUD_RATE_230400": 12,
		"BAUD_RATE_460800": 13,
		"BAUD_RATE_921600": 14,
	}
)

func (x SerialConfigBaudRate) Enum() *SerialConfigBaudRate {
	p := new(SerialConfigBaudRate)
	*p = x
	return p
}

func (x SerialConfigBaudRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SerialConfigBaudRate) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_models_proto_enumTypes[1].Descriptor()
}

func (SerialConfigBaudRate) Type() protoreflect.EnumType {
	return &file_pbdriver_models_proto_enumTypes[1]
}

func (x SerialConfigBaudRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Data bits types
type SerialConfigDataBits int32

const (
	// 5 data bits
	SerialConfigDataBits_DATA_BITS_5 SerialConfigDataBits = 0
	// 6 data bits
	SerialConfigDataBits_DATA_BITS_6 SerialConfigDataBits = 1
	// 7 data bits
	SerialConfigDataBits_DATA_BITS_7 SerialConfigDataBits = 2
	// 8 data bits
	SerialConfigDataBits_DATA_BITS_8 SerialConfigDataBits = 3
)

// Enum value maps for SerialConfigDataBits.
var (
	SerialConfigDataBits_name = map[int32]string{
		0: "DATA_BITS_5",
		1: "DATA_BITS_6",
		2: "DATA_BITS_7",
		3: "DATA_BITS_8",
	}
	SerialConfigDataBits_value = map[string]int32{
		"DATA_BITS_5": 0,
		"DATA_BITS_6": 1,
		"DATA_BITS_7": 2,
		"DATA_BITS_8": 3,
	}
)

func (x SerialConfigDataBits) Enum() *SerialConfigDataBits {
	p := new(SerialConfigDataBits)
	*p = x
	return p
}

func (x SerialConfigDataBits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SerialConfigDataBits) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_models_proto_enumTypes[2].Descriptor()
}

func (SerialConfigDataBits) Type() protoreflect.EnumType {
	return &file_pbdriver_models_proto_enumTypes[2]
}

func (x SerialConfigDataBits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Stop bits types
type SerialConfigStopBits int32

const (
	// 1 stop bit
	SerialConfigStopBits_STOP_BITS_1 SerialConfigStopBits = 0
	// 1.5 stop bits
	SerialConfigStopBits_STOP_BITS_1_5 SerialConfigStopBits = 1
	// 2 stop bits
	SerialConfigStopBits_STOP_BITS_2 SerialConfigStopBits = 2
)

// Enum value maps for SerialConfigStopBits.
var (
	SerialConfigStopBits_name = map[int32]string{
		0: "STOP_BITS_1",
		1: "STOP_BITS_1_5",
		2: "STOP_BITS_2",
	}
	SerialConfigStopBits_value = map[string]int32{
		"STOP_BITS_1":   0,
		"STOP_BITS_1_5": 1,
		"STOP_BITS_2":   2,
	}
)

func (x SerialConfigStopBits) Enum() *SerialConfigStopBits {
	p := new(SerialConfigStopBits)
	*p = x
	return p
}

func (x SerialConfigStopBits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SerialConfigStopBits) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_models_proto_enumTypes[3].Descriptor()
}

func (SerialConfigStopBits) Type() protoreflect.EnumType {
	return &file_pbdriver_models_proto_enumTypes[3]
}

func (x SerialConfigStopBits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Job priorities
type JobPriority int32

const (
	// The lowest priority
	JobPriority_JOB_PRIORITY_0 JobPriority = 0
	// The priority 1
	JobPriority_JOB_PRIORITY_1 JobPriority = 1
	// The priority 2
	JobPriority_JOB_PRIORITY_2 JobPriority = 2
	// The priority 3
	JobPriority_JOB_PRIORITY_3 JobPriority = 3
	// The priority 4
	JobPriority_JOB_PRIORITY_4 JobPriority = 4
	// The priority 5
	JobPriority_JOB_PRIORITY_5 JobPriority = 5
	// The priority 6
	JobPriority_JOB_PRIORITY_6 JobPriority = 6
	// The priority 7
	JobPriority_JOB_PRIORITY_7 JobPriority = 7
	// The highest priority
	JobPriority_JOB_PRIORITY_8 JobPriority = 8
)

// Enum value maps for JobPriority.
var (
	JobPriority_name = map[int32]string{
		0: "JOB_PRIORITY_0",
		1: "JOB_PRIORITY_1",
		2: "JOB_PRIORITY_2",
		3: "JOB_PRIORITY_3",
		4: "JOB_PRIORITY_4",
		5: "JOB_PRIORITY_5",
		6: "JOB_PRIORITY_6",
		7: "JOB_PRIORITY_7",
		8: "JOB_PRIORITY_8",
	}
	JobPriority_value = map[string]int32{
		"JOB_PRIORITY_0": 0,
		"JOB_PRIORITY_1": 1,
		"JOB_PRIORITY_2": 2,
		"JOB_PRIORITY_3": 3,
		"JOB_PRIORITY_4": 4,
		"JOB_PRIORITY_5": 5,
		"JOB_PRIORITY_6": 6,
		"JOB_PRIORITY_7": 7,
		"JOB_PRIORITY_8": 8,
	}
)

func (x JobPriority) Enum() *JobPriority {
	p := new(JobPriority)
	*p = x
	return p
}

func (x JobPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_models_proto_enumTypes[4].Descriptor()
}

func (JobPriority) Type() protoreflect.EnumType {
	return &file_pbdriver_models_proto_enumTypes[4]
}

func (x JobPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Attribute types
type AttributeType int32

const (
	// Integer attribute type
	AttributeType_ATTRIBUTE_TYPE_INT AttributeType = 0
	// String attribute type
	AttributeType_ATTRIBUTE_TYPE_STRING AttributeType = 1
	// Double attribute type
	AttributeType_ATTRIBUTE_TYPE_DOUBLE AttributeType = 2
	// Binary attribute type
	AttributeType_ATTRIBUTE_TYPE_BINARY AttributeType = 3
	// Date/time attribute type, stored as integer (UNIX timestamp)
	AttributeType_ATTRIBUTE_TYPE_TIMESTAMP AttributeType = 4
	// Date/time attribute type, stored as string in ISO-8601
	AttributeType_ATTRIBUTE_TYPE_TIMESTAMP_TZ AttributeType = 5
	// Bool attribute type
	AttributeType_ATTRIBUTE_TYPE_BOOL AttributeType = 6
)

// Enum value maps for AttributeType.
var (
	AttributeType_name = map[int32]string{
		0: "ATTRIBUTE_TYPE_INT",
		1: "ATTRIBUTE_TYPE_STRING",
		2: "ATTRIBUTE_TYPE_DOUBLE",
		3: "ATTRIBUTE_TYPE_BINARY",
		4: "ATTRIBUTE_TYPE_TIMESTAMP",
		5: "ATTRIBUTE_TYPE_TIMESTAMP_TZ",
		6: "ATTRIBUTE_TYPE_BOOL",
	}
	AttributeType_value = map[string]int32{
		"ATTRIBUTE_TYPE_INT":          0,
		"ATTRIBUTE_TYPE_STRING":       1,
		"ATTRIBUTE_TYPE_DOUBLE":       2,
		"ATTRIBUTE_TYPE_BINARY":       3,
		"ATTRIBUTE_TYPE_TIMESTAMP":    4,
		"ATTRIBUTE_TYPE_TIMESTAMP_TZ": 5,
		"ATTRIBUTE_TYPE_BOOL":         6,
	}
)

func (x AttributeType) Enum() *AttributeType {
	p := new(AttributeType)
	*p = x
	return p
}

func (x AttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_models_proto_enumTypes[5].Descriptor()
}

func (AttributeType) Type() protoreflect.EnumType {
	return &file_pbdriver_models_proto_enumTypes[5]
}

func (x AttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Action types
type ActionType int32

const (
	// Get billing value, for example instantaneous values. The action covers specific register.
	ActionType_ACTION_TYPE_GET_REGISTER ActionType = 0
	// Get periodical profile, for example load-profile. The action covers specific profile column.
	ActionType_ACTION_TYPE_GET_PERIODICAL_PROFILE ActionType = 1
	// Get non-periodical profile, for example daily profile or monthly billing registers. The action covers specific profile column and or specific billing register.
	ActionType_ACTION_TYPE_GET_IRREGULAR_PROFILE ActionType = 2
	// Get event log. The action covers specific event log.
	ActionType_ACTION_TYPE_GET_EVENTS ActionType = 3
	// Get clock. The action returns time in UTC.
	ActionType_ACTION_TYPE_GET_CLOCK ActionType = 10
	// Synchornize clock. The action synchronizes the time in the device, it can forcefully set it if force attribute is set.
	ActionType_ACTION_TYPE_SYNC_CLOCK ActionType = 11
	// Get relay state. The action covers single relay.
	ActionType_ACTION_TYPE_GET_RELAY_STATE ActionType = 20
	// Set relay state. The action covers single relay.
	ActionType_ACTION_TYPE_SET_RELAY_STATE ActionType = 21
	// Get disconnector state. The action covers single disconnector if multiple disconnectors are present in the device.
	ActionType_ACTION_TYPE_GET_DISCONNECTOR_STATE ActionType = 22
	// Set disconnector state. The action covers single relay. The action covers single disconnector if multiple disconnectors are present in the device.
	ActionType_ACTION_TYPE_SET_DISCONNECTOR_STATE ActionType = 23
	// Get time-of-use table.
	ActionType_ACTION_TYPE_GET_TOU ActionType = 24
	// Set time-of-use table.
	ActionType_ACTION_TYPE_SET_TOU ActionType = 25
	// Get limiter settings. The action covers single limiter.
	ActionType_ACTION_TYPE_GET_LIMITER ActionType = 26
	// Set limiter settings. The action covers single limiter.
	ActionType_ACTION_TYPE_SET_LIMITER ActionType = 27
	// Reseet billing period.
	ActionType_ACTION_TYPE_RESET_BILLING_PERIOD ActionType = 40
	// Start firmware update. The action updates starts FW upgrade procedure.
	ActionType_ACTION_TYPE_FW_UPDATE ActionType = 50
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0:  "ACTION_TYPE_GET_REGISTER",
		1:  "ACTION_TYPE_GET_PERIODICAL_PROFILE",
		2:  "ACTION_TYPE_GET_IRREGULAR_PROFILE",
		3:  "ACTION_TYPE_GET_EVENTS",
		10: "ACTION_TYPE_GET_CLOCK",
		11: "ACTION_TYPE_SYNC_CLOCK",
		20: "ACTION_TYPE_GET_RELAY_STATE",
		21: "ACTION_TYPE_SET_RELAY_STATE",
		22: "ACTION_TYPE_GET_DISCONNECTOR_STATE",
		23: "ACTION_TYPE_SET_DISCONNECTOR_STATE",
		24: "ACTION_TYPE_GET_TOU",
		25: "ACTION_TYPE_SET_TOU",
		26: "ACTION_TYPE_GET_LIMITER",
		27: "ACTION_TYPE_SET_LIMITER",
		40: "ACTION_TYPE_RESET_BILLING_PERIOD",
		50: "ACTION_TYPE_FW_UPDATE",
	}
	ActionType_value = map[string]int32{
		"ACTION_TYPE_GET_REGISTER":           0,
		"ACTION_TYPE_GET_PERIODICAL_PROFILE": 1,
		"ACTION_TYPE_GET_IRREGULAR_PROFILE":  2,
		"ACTION_TYPE_GET_EVENTS":             3,
		"ACTION_TYPE_GET_CLOCK":              10,
		"ACTION_TYPE_SYNC_CLOCK":             11,
		"ACTION_TYPE_GET_RELAY_STATE":        20,
		"ACTION_TYPE_SET_RELAY_STATE":        21,
		"ACTION_TYPE_GET_DISCONNECTOR_STATE": 22,
		"ACTION_TYPE_SET_DISCONNECTOR_STATE": 23,
		"ACTION_TYPE_GET_TOU":                24,
		"ACTION_TYPE_SET_TOU":                25,
		"ACTION_TYPE_GET_LIMITER":            26,
		"ACTION_TYPE_SET_LIMITER":            27,
		"ACTION_TYPE_RESET_BILLING_PERIOD":   40,
		"ACTION_TYPE_FW_UPDATE":              50,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_models_proto_enumTypes[6].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_pbdriver_models_proto_enumTypes[6]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Result codes related to job actions
type ActionResultCode int32

const (
	// The action has been completed successfully.
	ActionResultCode_ERROR_CODE_ACTION_OK ActionResultCode = 0
	// The action is not supported by the driver (or device).
	ActionResultCode_ERROR_CODE_ACTION_UNSUPPORTED ActionResultCode = 1
	// The action is pending.
	ActionResultCode_ERROR_CODE_ACTION_PENDING ActionResultCode = 3
	// The action failed.
	ActionResultCode_ERROR_CODE_ACTION_ERROR ActionResultCode = 5
)

// Enum value maps for ActionResultCode.
var (
	ActionResultCode_name = map[int32]string{
		0: "ERROR_CODE_ACTION_OK",
		1: "ERROR_CODE_ACTION_UNSUPPORTED",
		3: "ERROR_CODE_ACTION_PENDING",
		5: "ERROR_CODE_ACTION_ERROR",
	}
	ActionResultCode_value = map[string]int32{
		"ERROR_CODE_ACTION_OK":          0,
		"ERROR_CODE_ACTION_UNSUPPORTED": 1,
		"ERROR_CODE_ACTION_PENDING":     3,
		"ERROR_CODE_ACTION_ERROR":       5,
	}
)

func (x ActionResultCode) Enum() *ActionResultCode {
	p := new(ActionResultCode)
	*p = x
	return p
}

func (x ActionResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_models_proto_enumTypes[7].Descriptor()
}

func (ActionResultCode) Type() protoreflect.EnumType {
	return &file_pbdriver_models_proto_enumTypes[7]
}

func (x ActionResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Error codes related to jobs
type JobErrorCode int32

const (
	// The job has been completed successfully.
	JobErrorCode_JOB_ERROR_CODE_NONE JobErrorCode = 0
	// There is no free slot in the driver to handle the job; the job shall be send again later.
	JobErrorCode_JOB_ERROR_CODE_BUSY JobErrorCode = 1
	// The job failed, the retry will be attempted.
	JobErrorCode_JOB_ERROR_CODE_ERROR JobErrorCode = 5
	// This should never happen! It means that the same job is currently being processed by the driver and it was sent to the driver mutliple times which would mean that there is a bug.
	JobErrorCode_JOB_ERROR_CODE_ALREADY_EXISTS JobErrorCode = 8
	// The job failed, the retry will NOT be attempted.
	JobErrorCode_JOB_ERROR_CODE_FATAL JobErrorCode = 9
)

// Enum value maps for JobErrorCode.
var (
	JobErrorCode_name = map[int32]string{
		0: "JOB_ERROR_CODE_NONE",
		1: "JOB_ERROR_CODE_BUSY",
		5: "JOB_ERROR_CODE_ERROR",
		8: "JOB_ERROR_CODE_ALREADY_EXISTS",
		9: "JOB_ERROR_CODE_FATAL",
	}
	JobErrorCode_value = map[string]int32{
		"JOB_ERROR_CODE_NONE":           0,
		"JOB_ERROR_CODE_BUSY":           1,
		"JOB_ERROR_CODE_ERROR":          5,
		"JOB_ERROR_CODE_ALREADY_EXISTS": 8,
		"JOB_ERROR_CODE_FATAL":          9,
	}
)

func (x JobErrorCode) Enum() *JobErrorCode {
	p := new(JobErrorCode)
	*p = x
	return p
}

func (x JobErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_models_proto_enumTypes[8].Descriptor()
}

func (JobErrorCode) Type() protoreflect.EnumType {
	return &file_pbdriver_models_proto_enumTypes[8]
}

func (x JobErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Error codes
type ErrorCode int32

const (
	// No error
	ErrorCode_ERROR_CODE_OK ErrorCode = 0
	// Generic error
	ErrorCode_ERROR_CODE_ERROR ErrorCode = 4
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "ERROR_CODE_OK",
		4: "ERROR_CODE_ERROR",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_OK":    0,
		"ERROR_CODE_ERROR": 4,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_models_proto_enumTypes[9].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_pbdriver_models_proto_enumTypes[9]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Connection types
type CommunicationType int32

const (
	// The communication is done via direct TCP/IP.
	CommunicationType_COMMUNICATION_TYPE_TCPIP CommunicationType = 0
	// The communication is done via phone line (modem).
	CommunicationType_COMMUNICATION_TYPE_MODEM_POOL CommunicationType = 1
	// The communication is done via direct serial line.
	CommunicationType_COMMUNICATION_TYPE_SERIAL_LINE_DIRECT CommunicationType = 2
	// The communication is done via controller-serial line (Moxa).
	CommunicationType_COMMUNICATION_TYPE_SERIAL_LINE_MOXA CommunicationType = 3
	// The communication is passive, the driver is a service that listens on a port (DLMS devices in push mode) or a service that implements a subscriber to a message queue (e.g. MQTT).
	CommunicationType_COMMUNICATION_TYPE_LISTENING CommunicationType = 99
)

// Enum value maps for CommunicationType.
var (
	CommunicationType_name = map[int32]string{
		0:  "COMMUNICATION_TYPE_TCPIP",
		1:  "COMMUNICATION_TYPE_MODEM_POOL",
		2:  "COMMUNICATION_TYPE_SERIAL_LINE_DIRECT",
		3:  "COMMUNICATION_TYPE_SERIAL_LINE_MOXA",
		99: "COMMUNICATION_TYPE_LISTENING",
	}
	CommunicationType_value = map[string]int32{
		"COMMUNICATION_TYPE_TCPIP":              0,
		"COMMUNICATION_TYPE_MODEM_POOL":         1,
		"COMMUNICATION_TYPE_SERIAL_LINE_DIRECT": 2,
		"COMMUNICATION_TYPE_SERIAL_LINE_MOXA":   3,
		"COMMUNICATION_TYPE_LISTENING":          99,
	}
)

func (x CommunicationType) Enum() *CommunicationType {
	p := new(CommunicationType)
	*p = x
	return p
}

func (x CommunicationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommunicationType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_models_proto_enumTypes[10].Descriptor()
}

func (CommunicationType) Type() protoreflect.EnumType {
	return &file_pbdriver_models_proto_enumTypes[10]
}

func (x CommunicationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Data link protocols
type DataLinkProtocol int32

const (
	// The VDEW (IEC 62056-21, IEC-61107) protocol. In combination with DLMS protocol the driver initiates the communication by IEC and switches to the mode E to the HDLC+DLMS protocol. Supports addressing = multiple devices on the same line.
	DataLinkProtocol_LINKPROTO_IEC_62056_21 DataLinkProtocol = 0
	// The HDLC (ISO/IEC-3309) framing. It can be used for various application protocols, such as DLMS or MODBUS. Supports client/server addressing = multiple devices on the same line.
	DataLinkProtocol_LINKPROTO_HDLC DataLinkProtocol = 1
	// The COSEM wrapper. It can be used for DLMS application protocol. Supports client/server addressing = multiple devices on the same line.
	DataLinkProtocol_LINKPROTO_COSEM_WRAPPER DataLinkProtocol = 2
	// The Modbus protocol. It shall be used for Modbus application protocol where no other data link layer, such as HDLC, is used.
	DataLinkProtocol_LINKPROTO_MODBUS DataLinkProtocol = 3
	// The M-Bus protocol. It shall be used for M-Bus application protocol.
	DataLinkProtocol_LINKPROTO_MBUS DataLinkProtocol = 4
	// The data link protocol is not applicable. It's useful for listening communication type.
	DataLinkProtocol_LINKPROTO_NOT_APPLICABLE DataLinkProtocol = 99
)

// Enum value maps for DataLinkProtocol.
var (
	DataLinkProtocol_name = map[int32]string{
		0:  "LINKPROTO_IEC_62056_21",
		1:  "LINKPROTO_HDLC",
		2:  "LINKPROTO_COSEM_WRAPPER",
		3:  "LINKPROTO_MODBUS",
		4:  "LINKPROTO_MBUS",
		99: "LINKPROTO_NOT_APPLICABLE",
	}
	DataLinkProtocol_value = map[string]int32{
		"LINKPROTO_IEC_62056_21":   0,
		"LINKPROTO_HDLC":           1,
		"LINKPROTO_COSEM_WRAPPER":  2,
		"LINKPROTO_MODBUS":         3,
		"LINKPROTO_MBUS":           4,
		"LINKPROTO_NOT_APPLICABLE": 99,
	}
)

func (x DataLinkProtocol) Enum() *DataLinkProtocol {
	p := new(DataLinkProtocol)
	*p = x
	return p
}

func (x DataLinkProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataLinkProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_models_proto_enumTypes[11].Descriptor()
}

func (DataLinkProtocol) Type() protoreflect.EnumType {
	return &file_pbdriver_models_proto_enumTypes[11]
}

func (x DataLinkProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Application protocols
type ApplicationProtocol int32

const (
	// The IEC 62056-21 (IEC-61107, VDEW) protocol.
	ApplicationProtocol_APPPROTO_IEC_62056_21 ApplicationProtocol = 0
	// The DLMS short-name protocol.
	ApplicationProtocol_APPPROTO_DLMS_SN ApplicationProtocol = 1
	// The DLMS logical-name protocol.
	ApplicationProtocol_APPPROTO_DLMS_LN ApplicationProtocol = 2
	// The SCTM protocol.
	ApplicationProtocol_APPPROTO_SCTM ApplicationProtocol = 3
	// The LIS200 protocol.
	ApplicationProtocol_APPPROTO_LIS200 ApplicationProtocol = 4
	// The ANSI C12 protocol.
	ApplicationProtocol_APPPROTO_ANSI_C12 ApplicationProtocol = 5
	// The MQTT protocol.
	ApplicationProtocol_APPPROTO_MQTT ApplicationProtocol = 6
)

// Enum value maps for ApplicationProtocol.
var (
	ApplicationProtocol_name = map[int32]string{
		0: "APPPROTO_IEC_62056_21",
		1: "APPPROTO_DLMS_SN",
		2: "APPPROTO_DLMS_LN",
		3: "APPPROTO_SCTM",
		4: "APPPROTO_LIS200",
		5: "APPPROTO_ANSI_C12",
		6: "APPPROTO_MQTT",
	}
	ApplicationProtocol_value = map[string]int32{
		"APPPROTO_IEC_62056_21": 0,
		"APPPROTO_DLMS_SN":      1,
		"APPPROTO_DLMS_LN":      2,
		"APPPROTO_SCTM":         3,
		"APPPROTO_LIS200":       4,
		"APPPROTO_ANSI_C12":     5,
		"APPPROTO_MQTT":         6,
	}
)

func (x ApplicationProtocol) Enum() *ApplicationProtocol {
	p := new(ApplicationProtocol)
	*p = x
	return p
}

func (x ApplicationProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplicationProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_models_proto_enumTypes[12].Descriptor()
}

func (ApplicationProtocol) Type() protoreflect.EnumType {
	return &file_pbdriver_models_proto_enumTypes[12]
}

func (x ApplicationProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Driver -> Taskmaster job/action progress update message
type ProgressUpdate struct {
	state               protoimpl.MessageState    `protogen:"opaque.v1"`
	xxx_hidden_Progress isProgressUpdate_Progress `protobuf_oneof:"progress"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ProgressUpdate) Reset() {
	*x = ProgressUpdate{}
	mi := &file_pbdriver_models_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProgressUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressUpdate) ProtoMessage() {}

func (x *ProgressUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProgressUpdate) GetJob() *JobProgressUpdate {
	if x != nil {
		if x, ok := x.xxx_hidden_Progress.(*progressUpdate_Job); ok {
			return x.Job
		}
	}
	return nil
}

func (x *ProgressUpdate) GetAction() *ActionProgressUpdate {
	if x != nil {
		if x, ok := x.xxx_hidden_Progress.(*progressUpdate_Action); ok {
			return x.Action
		}
	}
	return nil
}

func (x *ProgressUpdate) SetJob(v *JobProgressUpdate) {
	if v == nil {
		x.xxx_hidden_Progress = nil
		return
	}
	x.xxx_hidden_Progress = &progressUpdate_Job{v}
}

func (x *ProgressUpdate) SetAction(v *ActionProgressUpdate) {
	if v == nil {
		x.xxx_hidden_Progress = nil
		return
	}
	x.xxx_hidden_Progress = &progressUpdate_Action{v}
}

func (x *ProgressUpdate) HasProgress() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Progress != nil
}

func (x *ProgressUpdate) HasJob() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Progress.(*progressUpdate_Job)
	return ok
}

func (x *ProgressUpdate) HasAction() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Progress.(*progressUpdate_Action)
	return ok
}

func (x *ProgressUpdate) ClearProgress() {
	x.xxx_hidden_Progress = nil
}

func (x *ProgressUpdate) ClearJob() {
	if _, ok := x.xxx_hidden_Progress.(*progressUpdate_Job); ok {
		x.xxx_hidden_Progress = nil
	}
}

func (x *ProgressUpdate) ClearAction() {
	if _, ok := x.xxx_hidden_Progress.(*progressUpdate_Action); ok {
		x.xxx_hidden_Progress = nil
	}
}

const ProgressUpdate_Progress_not_set_case case_ProgressUpdate_Progress = 0
const ProgressUpdate_Job_case case_ProgressUpdate_Progress = 1
const ProgressUpdate_Action_case case_ProgressUpdate_Progress = 2

func (x *ProgressUpdate) WhichProgress() case_ProgressUpdate_Progress {
	if x == nil {
		return ProgressUpdate_Progress_not_set_case
	}
	switch x.xxx_hidden_Progress.(type) {
	case *progressUpdate_Job:
		return ProgressUpdate_Job_case
	case *progressUpdate_Action:
		return ProgressUpdate_Action_case
	default:
		return ProgressUpdate_Progress_not_set_case
	}
}

type ProgressUpdate_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The oneof field containing the progress update data - either for job or for action.

	// Fields of oneof xxx_hidden_Progress:
	Job    *JobProgressUpdate
	Action *ActionProgressUpdate
	// -- end of xxx_hidden_Progress
}

func (b0 ProgressUpdate_builder) Build() *ProgressUpdate {
	m0 := &ProgressUpdate{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Job != nil {
		x.xxx_hidden_Progress = &progressUpdate_Job{b.Job}
	}
	if b.Action != nil {
		x.xxx_hidden_Progress = &progressUpdate_Action{b.Action}
	}
	return m0
}

type case_ProgressUpdate_Progress protoreflect.FieldNumber

func (x case_ProgressUpdate_Progress) String() string {
	md := file_pbdriver_models_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isProgressUpdate_Progress interface {
	isProgressUpdate_Progress()
}

type progressUpdate_Job struct {
	Job *JobProgressUpdate `protobuf:"bytes,1,opt,name=job,oneof"` // The job progress update data. It shall be called once and only once for each job. It shall be also called as the last message in the stream; other updates will be ignored after this.
}

type progressUpdate_Action struct {
	Action *ActionProgressUpdate `protobuf:"bytes,2,opt,name=action,oneof"` // The action progress update data. It shall be called for each action in the job.
}

func (*progressUpdate_Job) isProgressUpdate_Progress() {}

func (*progressUpdate_Action) isProgressUpdate_Progress() {}

// Sub-message containing action progress update
type ActionProgressUpdate struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_JobId       *string                `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	xxx_hidden_ActionId    *string                `protobuf:"bytes,2,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	xxx_hidden_Code        ActionResultCode       `protobuf:"varint,3,opt,name=code,enum=io.clbs.openhes.pbdriver.ActionResultCode" json:"code,omitempty"`
	xxx_hidden_Data        *ActionData            `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ActionProgressUpdate) Reset() {
	*x = ActionProgressUpdate{}
	mi := &file_pbdriver_models_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionProgressUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionProgressUpdate) ProtoMessage() {}

func (x *ActionProgressUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ActionProgressUpdate) GetJobId() string {
	if x != nil {
		if x.xxx_hidden_JobId != nil {
			return *x.xxx_hidden_JobId
		}
		return ""
	}
	return ""
}

func (x *ActionProgressUpdate) GetActionId() string {
	if x != nil {
		if x.xxx_hidden_ActionId != nil {
			return *x.xxx_hidden_ActionId
		}
		return ""
	}
	return ""
}

func (x *ActionProgressUpdate) GetCode() ActionResultCode {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_Code
		}
	}
	return ActionResultCode_ERROR_CODE_ACTION_OK
}

func (x *ActionProgressUpdate) GetData() *ActionData {
	if x != nil {
		return x.xxx_hidden_Data
	}
	return nil
}

func (x *ActionProgressUpdate) SetJobId(v string) {
	x.xxx_hidden_JobId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *ActionProgressUpdate) SetActionId(v string) {
	x.xxx_hidden_ActionId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *ActionProgressUpdate) SetCode(v ActionResultCode) {
	x.xxx_hidden_Code = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *ActionProgressUpdate) SetData(v *ActionData) {
	x.xxx_hidden_Data = v
}

func (x *ActionProgressUpdate) HasJobId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ActionProgressUpdate) HasActionId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ActionProgressUpdate) HasCode() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ActionProgressUpdate) HasData() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Data != nil
}

func (x *ActionProgressUpdate) ClearJobId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_JobId = nil
}

func (x *ActionProgressUpdate) ClearActionId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ActionId = nil
}

func (x *ActionProgressUpdate) ClearCode() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Code = ActionResultCode_ERROR_CODE_ACTION_OK
}

func (x *ActionProgressUpdate) ClearData() {
	x.xxx_hidden_Data = nil
}

type ActionProgressUpdate_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	JobId    *string
	ActionId *string
	Code     *ActionResultCode
	Data     *ActionData
}

func (b0 ActionProgressUpdate_builder) Build() *ActionProgressUpdate {
	m0 := &ActionProgressUpdate{}
	b, x := &b0, m0
	_, _ = b, x
	if b.JobId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_JobId = b.JobId
	}
	if b.ActionId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_ActionId = b.ActionId
	}
	if b.Code != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Code = *b.Code
	}
	x.xxx_hidden_Data = b.Data
	return m0
}

// Sub-message containing job progress update
type JobProgressUpdate struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_JobId       *string                `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	xxx_hidden_Code        JobErrorCode           `protobuf:"varint,2,opt,name=code,enum=io.clbs.openhes.pbdriver.JobErrorCode" json:"code,omitempty"`
	xxx_hidden_Duration    int64                  `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *JobProgressUpdate) Reset() {
	*x = JobProgressUpdate{}
	mi := &file_pbdriver_models_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobProgressUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobProgressUpdate) ProtoMessage() {}

func (x *JobProgressUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *JobProgressUpdate) GetJobId() string {
	if x != nil {
		if x.xxx_hidden_JobId != nil {
			return *x.xxx_hidden_JobId
		}
		return ""
	}
	return ""
}

func (x *JobProgressUpdate) GetCode() JobErrorCode {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Code
		}
	}
	return JobErrorCode_JOB_ERROR_CODE_NONE
}

func (x *JobProgressUpdate) GetDuration() int64 {
	if x != nil {
		return x.xxx_hidden_Duration
	}
	return 0
}

func (x *JobProgressUpdate) SetJobId(v string) {
	x.xxx_hidden_JobId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *JobProgressUpdate) SetCode(v JobErrorCode) {
	x.xxx_hidden_Code = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *JobProgressUpdate) SetDuration(v int64) {
	x.xxx_hidden_Duration = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *JobProgressUpdate) HasJobId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *JobProgressUpdate) HasCode() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *JobProgressUpdate) HasDuration() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *JobProgressUpdate) ClearJobId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_JobId = nil
}

func (x *JobProgressUpdate) ClearCode() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Code = JobErrorCode_JOB_ERROR_CODE_NONE
}

func (x *JobProgressUpdate) ClearDuration() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Duration = 0
}

type JobProgressUpdate_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	JobId    *string
	Code     *JobErrorCode
	Duration *int64
}

func (b0 JobProgressUpdate_builder) Build() *JobProgressUpdate {
	m0 := &JobProgressUpdate{}
	b, x := &b0, m0
	_, _ = b, x
	if b.JobId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_JobId = b.JobId
	}
	if b.Code != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Code = *b.Code
	}
	if b.Duration != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Duration = *b.Duration
	}
	return m0
}

// Sub-message containing action-based variant of data values
type ActionData struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Data isActionData_Data      `protobuf_oneof:"data"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ActionData) Reset() {
	*x = ActionData{}
	mi := &file_pbdriver_models_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionData) ProtoMessage() {}

func (x *ActionData) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ActionData) GetNodata() *emptypb.Empty {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*actionData_Nodata); ok {
			return x.Nodata
		}
	}
	return nil
}

func (x *ActionData) GetBillings() *BillingValues {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*actionData_Billings); ok {
			return x.Billings
		}
	}
	return nil
}

func (x *ActionData) GetProfile() *ProfileValues {
	if x != nil {
		if x, ok := x.xxx_hidden_Data.(*actionData_Profile); ok {
			return x.Profile
		}
	}
	return nil
}

func (x *ActionData) SetNodata(v *emptypb.Empty) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &actionData_Nodata{v}
}

func (x *ActionData) SetBillings(v *BillingValues) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &actionData_Billings{v}
}

func (x *ActionData) SetProfile(v *ProfileValues) {
	if v == nil {
		x.xxx_hidden_Data = nil
		return
	}
	x.xxx_hidden_Data = &actionData_Profile{v}
}

func (x *ActionData) HasData() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Data != nil
}

func (x *ActionData) HasNodata() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*actionData_Nodata)
	return ok
}

func (x *ActionData) HasBillings() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*actionData_Billings)
	return ok
}

func (x *ActionData) HasProfile() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Data.(*actionData_Profile)
	return ok
}

func (x *ActionData) ClearData() {
	x.xxx_hidden_Data = nil
}

func (x *ActionData) ClearNodata() {
	if _, ok := x.xxx_hidden_Data.(*actionData_Nodata); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *ActionData) ClearBillings() {
	if _, ok := x.xxx_hidden_Data.(*actionData_Billings); ok {
		x.xxx_hidden_Data = nil
	}
}

func (x *ActionData) ClearProfile() {
	if _, ok := x.xxx_hidden_Data.(*actionData_Profile); ok {
		x.xxx_hidden_Data = nil
	}
}

const ActionData_Data_not_set_case case_ActionData_Data = 0
const ActionData_Nodata_case case_ActionData_Data = 1
const ActionData_Billings_case case_ActionData_Data = 2
const ActionData_Profile_case case_ActionData_Data = 3

func (x *ActionData) WhichData() case_ActionData_Data {
	if x == nil {
		return ActionData_Data_not_set_case
	}
	switch x.xxx_hidden_Data.(type) {
	case *actionData_Nodata:
		return ActionData_Nodata_case
	case *actionData_Billings:
		return ActionData_Billings_case
	case *actionData_Profile:
		return ActionData_Profile_case
	default:
		return ActionData_Data_not_set_case
	}
}

type ActionData_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Data:
	Nodata   *emptypb.Empty
	Billings *BillingValues
	Profile  *ProfileValues
	// -- end of xxx_hidden_Data
}

func (b0 ActionData_builder) Build() *ActionData {
	m0 := &ActionData{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Nodata != nil {
		x.xxx_hidden_Data = &actionData_Nodata{b.Nodata}
	}
	if b.Billings != nil {
		x.xxx_hidden_Data = &actionData_Billings{b.Billings}
	}
	if b.Profile != nil {
		x.xxx_hidden_Data = &actionData_Profile{b.Profile}
	}
	return m0
}

type case_ActionData_Data protoreflect.FieldNumber

func (x case_ActionData_Data) String() string {
	md := file_pbdriver_models_proto_msgTypes[3].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isActionData_Data interface {
	isActionData_Data()
}

type actionData_Nodata struct {
	Nodata *emptypb.Empty `protobuf:"bytes,1,opt,name=nodata,oneof"` // No data
}

type actionData_Billings struct {
	Billings *BillingValues `protobuf:"bytes,2,opt,name=billings,oneof"` // Register values
}

type actionData_Profile struct {
	Profile *ProfileValues `protobuf:"bytes,3,opt,name=profile,oneof"` // Profile values
}

func (*actionData_Nodata) isActionData_Data() {}

func (*actionData_Billings) isActionData_Data() {}

func (*actionData_Profile) isActionData_Data() {}

// Sub-message containing profile-typed values
type ProfileValues struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Period      int32                  `protobuf:"varint,1,opt,name=period" json:"period,omitempty"`
	xxx_hidden_Unit        *string                `protobuf:"bytes,2,opt,name=unit" json:"unit,omitempty"`
	xxx_hidden_Blocks      *[]*ProfileBlok        `protobuf:"bytes,3,rep,name=blocks" json:"blocks,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ProfileValues) Reset() {
	*x = ProfileValues{}
	mi := &file_pbdriver_models_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileValues) ProtoMessage() {}

func (x *ProfileValues) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProfileValues) GetPeriod() int32 {
	if x != nil {
		return x.xxx_hidden_Period
	}
	return 0
}

func (x *ProfileValues) GetUnit() string {
	if x != nil {
		if x.xxx_hidden_Unit != nil {
			return *x.xxx_hidden_Unit
		}
		return ""
	}
	return ""
}

func (x *ProfileValues) GetBlocks() []*ProfileBlok {
	if x != nil {
		if x.xxx_hidden_Blocks != nil {
			return *x.xxx_hidden_Blocks
		}
	}
	return nil
}

func (x *ProfileValues) SetPeriod(v int32) {
	x.xxx_hidden_Period = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *ProfileValues) SetUnit(v string) {
	x.xxx_hidden_Unit = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *ProfileValues) SetBlocks(v []*ProfileBlok) {
	x.xxx_hidden_Blocks = &v
}

func (x *ProfileValues) HasPeriod() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ProfileValues) HasUnit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ProfileValues) ClearPeriod() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Period = 0
}

func (x *ProfileValues) ClearUnit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Unit = nil
}

type ProfileValues_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Period *int32
	Unit   *string
	Blocks []*ProfileBlok
}

func (b0 ProfileValues_builder) Build() *ProfileValues {
	m0 := &ProfileValues{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Period != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Period = *b.Period
	}
	if b.Unit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Unit = b.Unit
	}
	x.xxx_hidden_Blocks = &b.Blocks
	return m0
}

// Sub-message containing a single profile block
type ProfileBlok struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_StartTimestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	xxx_hidden_Values         *[]*MeasuredValue      `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ProfileBlok) Reset() {
	*x = ProfileBlok{}
	mi := &file_pbdriver_models_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileBlok) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileBlok) ProtoMessage() {}

func (x *ProfileBlok) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ProfileBlok) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_StartTimestamp
	}
	return nil
}

func (x *ProfileBlok) GetValues() []*MeasuredValue {
	if x != nil {
		if x.xxx_hidden_Values != nil {
			return *x.xxx_hidden_Values
		}
	}
	return nil
}

func (x *ProfileBlok) SetStartTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_StartTimestamp = v
}

func (x *ProfileBlok) SetValues(v []*MeasuredValue) {
	x.xxx_hidden_Values = &v
}

func (x *ProfileBlok) HasStartTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_StartTimestamp != nil
}

func (x *ProfileBlok) ClearStartTimestamp() {
	x.xxx_hidden_StartTimestamp = nil
}

type ProfileBlok_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	StartTimestamp *timestamppb.Timestamp
	Values         []*MeasuredValue
}

func (b0 ProfileBlok_builder) Build() *ProfileBlok {
	m0 := &ProfileBlok{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_StartTimestamp = b.StartTimestamp
	x.xxx_hidden_Values = &b.Values
	return m0
}

// Sub-message containing billing-typed values
type BillingValues struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Values *[]*BillingValue       `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BillingValues) Reset() {
	*x = BillingValues{}
	mi := &file_pbdriver_models_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BillingValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingValues) ProtoMessage() {}

func (x *BillingValues) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BillingValues) GetValues() []*BillingValue {
	if x != nil {
		if x.xxx_hidden_Values != nil {
			return *x.xxx_hidden_Values
		}
	}
	return nil
}

func (x *BillingValues) SetValues(v []*BillingValue) {
	x.xxx_hidden_Values = &v
}

type BillingValues_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Values []*BillingValue
}

func (b0 BillingValues_builder) Build() *BillingValues {
	m0 := &BillingValues{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Values = &b.Values
	return m0
}

// Sub-message containing billing-typed value
type BillingValue struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Timestamp   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	xxx_hidden_Unit        *string                `protobuf:"bytes,2,opt,name=unit" json:"unit,omitempty"`
	xxx_hidden_Value       *MeasuredValue         `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *BillingValue) Reset() {
	*x = BillingValue{}
	mi := &file_pbdriver_models_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BillingValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingValue) ProtoMessage() {}

func (x *BillingValue) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BillingValue) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *BillingValue) GetUnit() string {
	if x != nil {
		if x.xxx_hidden_Unit != nil {
			return *x.xxx_hidden_Unit
		}
		return ""
	}
	return ""
}

func (x *BillingValue) GetValue() *MeasuredValue {
	if x != nil {
		return x.xxx_hidden_Value
	}
	return nil
}

func (x *BillingValue) SetTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *BillingValue) SetUnit(v string) {
	x.xxx_hidden_Unit = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *BillingValue) SetValue(v *MeasuredValue) {
	x.xxx_hidden_Value = v
}

func (x *BillingValue) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *BillingValue) HasUnit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *BillingValue) HasValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Value != nil
}

func (x *BillingValue) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

func (x *BillingValue) ClearUnit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Unit = nil
}

func (x *BillingValue) ClearValue() {
	x.xxx_hidden_Value = nil
}

type BillingValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Timestamp *timestamppb.Timestamp
	Unit      *string
	Value     *MeasuredValue
}

func (b0 BillingValue_builder) Build() *BillingValue {
	m0 := &BillingValue{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Timestamp = b.Timestamp
	if b.Unit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Unit = b.Unit
	}
	x.xxx_hidden_Value = b.Value
	return m0
}

// Sub-message containing measured value
type MeasuredValue struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Status      int64                  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	xxx_hidden_Exponent    int32                  `protobuf:"varint,2,opt,name=exponent" json:"exponent,omitempty"`
	xxx_hidden_Value       isMeasuredValue_Value  `protobuf_oneof:"value"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MeasuredValue) Reset() {
	*x = MeasuredValue{}
	mi := &file_pbdriver_models_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeasuredValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasuredValue) ProtoMessage() {}

func (x *MeasuredValue) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MeasuredValue) GetStatus() int64 {
	if x != nil {
		return x.xxx_hidden_Status
	}
	return 0
}

func (x *MeasuredValue) GetExponent() int32 {
	if x != nil {
		return x.xxx_hidden_Exponent
	}
	return 0
}

func (x *MeasuredValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*measuredValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *MeasuredValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*measuredValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *MeasuredValue) GetStrValue() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*measuredValue_StrValue); ok {
			return x.StrValue
		}
	}
	return ""
}

func (x *MeasuredValue) GetTimestampValue() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*measuredValue_TimestampValue); ok {
			return x.TimestampValue
		}
	}
	return nil
}

func (x *MeasuredValue) GetTimestampTzValue() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*measuredValue_TimestampTzValue); ok {
			return x.TimestampTzValue
		}
	}
	return ""
}

func (x *MeasuredValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*measuredValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *MeasuredValue) SetStatus(v int64) {
	x.xxx_hidden_Status = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *MeasuredValue) SetExponent(v int32) {
	x.xxx_hidden_Exponent = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *MeasuredValue) SetDoubleValue(v float64) {
	x.xxx_hidden_Value = &measuredValue_DoubleValue{v}
}

func (x *MeasuredValue) SetIntValue(v int64) {
	x.xxx_hidden_Value = &measuredValue_IntValue{v}
}

func (x *MeasuredValue) SetStrValue(v string) {
	x.xxx_hidden_Value = &measuredValue_StrValue{v}
}

func (x *MeasuredValue) SetTimestampValue(v *timestamppb.Timestamp) {
	if v == nil {
		x.xxx_hidden_Value = nil
		return
	}
	x.xxx_hidden_Value = &measuredValue_TimestampValue{v}
}

func (x *MeasuredValue) SetTimestampTzValue(v string) {
	x.xxx_hidden_Value = &measuredValue_TimestampTzValue{v}
}

func (x *MeasuredValue) SetBoolValue(v bool) {
	x.xxx_hidden_Value = &measuredValue_BoolValue{v}
}

func (x *MeasuredValue) HasStatus() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *MeasuredValue) HasExponent() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *MeasuredValue) HasValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Value != nil
}

func (x *MeasuredValue) HasDoubleValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*measuredValue_DoubleValue)
	return ok
}

func (x *MeasuredValue) HasIntValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*measuredValue_IntValue)
	return ok
}

func (x *MeasuredValue) HasStrValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*measuredValue_StrValue)
	return ok
}

func (x *MeasuredValue) HasTimestampValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*measuredValue_TimestampValue)
	return ok
}

func (x *MeasuredValue) HasTimestampTzValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*measuredValue_TimestampTzValue)
	return ok
}

func (x *MeasuredValue) HasBoolValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*measuredValue_BoolValue)
	return ok
}

func (x *MeasuredValue) ClearStatus() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Status = 0
}

func (x *MeasuredValue) ClearExponent() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Exponent = 0
}

func (x *MeasuredValue) ClearValue() {
	x.xxx_hidden_Value = nil
}

func (x *MeasuredValue) ClearDoubleValue() {
	if _, ok := x.xxx_hidden_Value.(*measuredValue_DoubleValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *MeasuredValue) ClearIntValue() {
	if _, ok := x.xxx_hidden_Value.(*measuredValue_IntValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *MeasuredValue) ClearStrValue() {
	if _, ok := x.xxx_hidden_Value.(*measuredValue_StrValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *MeasuredValue) ClearTimestampValue() {
	if _, ok := x.xxx_hidden_Value.(*measuredValue_TimestampValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *MeasuredValue) ClearTimestampTzValue() {
	if _, ok := x.xxx_hidden_Value.(*measuredValue_TimestampTzValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *MeasuredValue) ClearBoolValue() {
	if _, ok := x.xxx_hidden_Value.(*measuredValue_BoolValue); ok {
		x.xxx_hidden_Value = nil
	}
}

const MeasuredValue_Value_not_set_case case_MeasuredValue_Value = 0
const MeasuredValue_DoubleValue_case case_MeasuredValue_Value = 3
const MeasuredValue_IntValue_case case_MeasuredValue_Value = 4
const MeasuredValue_StrValue_case case_MeasuredValue_Value = 5
const MeasuredValue_TimestampValue_case case_MeasuredValue_Value = 6
const MeasuredValue_TimestampTzValue_case case_MeasuredValue_Value = 7
const MeasuredValue_BoolValue_case case_MeasuredValue_Value = 8

func (x *MeasuredValue) WhichValue() case_MeasuredValue_Value {
	if x == nil {
		return MeasuredValue_Value_not_set_case
	}
	switch x.xxx_hidden_Value.(type) {
	case *measuredValue_DoubleValue:
		return MeasuredValue_DoubleValue_case
	case *measuredValue_IntValue:
		return MeasuredValue_IntValue_case
	case *measuredValue_StrValue:
		return MeasuredValue_StrValue_case
	case *measuredValue_TimestampValue:
		return MeasuredValue_TimestampValue_case
	case *measuredValue_TimestampTzValue:
		return MeasuredValue_TimestampTzValue_case
	case *measuredValue_BoolValue:
		return MeasuredValue_BoolValue_case
	default:
		return MeasuredValue_Value_not_set_case
	}
}

type MeasuredValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Status   *int64
	Exponent *int32
	// Fields of oneof xxx_hidden_Value:
	DoubleValue      *float64
	IntValue         *int64
	StrValue         *string
	TimestampValue   *timestamppb.Timestamp
	TimestampTzValue *string
	BoolValue        *bool
	// -- end of xxx_hidden_Value
}

func (b0 MeasuredValue_builder) Build() *MeasuredValue {
	m0 := &MeasuredValue{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Status != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Status = *b.Status
	}
	if b.Exponent != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Exponent = *b.Exponent
	}
	if b.DoubleValue != nil {
		x.xxx_hidden_Value = &measuredValue_DoubleValue{*b.DoubleValue}
	}
	if b.IntValue != nil {
		x.xxx_hidden_Value = &measuredValue_IntValue{*b.IntValue}
	}
	if b.StrValue != nil {
		x.xxx_hidden_Value = &measuredValue_StrValue{*b.StrValue}
	}
	if b.TimestampValue != nil {
		x.xxx_hidden_Value = &measuredValue_TimestampValue{b.TimestampValue}
	}
	if b.TimestampTzValue != nil {
		x.xxx_hidden_Value = &measuredValue_TimestampTzValue{*b.TimestampTzValue}
	}
	if b.BoolValue != nil {
		x.xxx_hidden_Value = &measuredValue_BoolValue{*b.BoolValue}
	}
	return m0
}

type case_MeasuredValue_Value protoreflect.FieldNumber

func (x case_MeasuredValue_Value) String() string {
	md := file_pbdriver_models_proto_msgTypes[8].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isMeasuredValue_Value interface {
	isMeasuredValue_Value()
}

type measuredValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,oneof"` // The double-typed value.
}

type measuredValue_IntValue struct {
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,oneof"` // The integer-typed value.
}

type measuredValue_StrValue struct {
	StrValue string `protobuf:"bytes,5,opt,name=str_value,json=strValue,oneof"` // The string-typed value.
}

type measuredValue_TimestampValue struct {
	TimestampValue *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp_value,json=timestampValue,oneof"` // The timestamp-typed value.
}

type measuredValue_TimestampTzValue struct {
	TimestampTzValue string `protobuf:"bytes,7,opt,name=timestamp_tz_value,json=timestampTzValue,oneof"` // The timestamp with timezone-typed value, stored as string in ISO-8601.
}

type measuredValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,8,opt,name=bool_value,json=boolValue,oneof"` // The boolean-typed value.
}

func (*measuredValue_DoubleValue) isMeasuredValue_Value() {}

func (*measuredValue_IntValue) isMeasuredValue_Value() {}

func (*measuredValue_StrValue) isMeasuredValue_Value() {}

func (*measuredValue_TimestampValue) isMeasuredValue_Value() {}

func (*measuredValue_TimestampTzValue) isMeasuredValue_Value() {}

func (*measuredValue_BoolValue) isMeasuredValue_Value() {}

// Sub-message containing attribute definition
type AttributeDefinition struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name         *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	xxx_hidden_Description  *string                `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	xxx_hidden_Type         AttributeType          `protobuf:"varint,3,opt,name=type,enum=io.clbs.openhes.pbdriver.AttributeType" json:"type,omitempty"`
	xxx_hidden_Mandatory    bool                   `protobuf:"varint,4,opt,name=mandatory" json:"mandatory,omitempty"`
	xxx_hidden_DefaultValue *AttributeValue        `protobuf:"bytes,5,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	xxx_hidden_Options      map[string]string      `protobuf:"bytes,6,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AttributeDefinition) Reset() {
	*x = AttributeDefinition{}
	mi := &file_pbdriver_models_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttributeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeDefinition) ProtoMessage() {}

func (x *AttributeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AttributeDefinition) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *AttributeDefinition) GetDescription() string {
	if x != nil {
		if x.xxx_hidden_Description != nil {
			return *x.xxx_hidden_Description
		}
		return ""
	}
	return ""
}

func (x *AttributeDefinition) GetType() AttributeType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_Type
		}
	}
	return AttributeType_ATTRIBUTE_TYPE_INT
}

func (x *AttributeDefinition) GetMandatory() bool {
	if x != nil {
		return x.xxx_hidden_Mandatory
	}
	return false
}

func (x *AttributeDefinition) GetDefaultValue() *AttributeValue {
	if x != nil {
		return x.xxx_hidden_DefaultValue
	}
	return nil
}

func (x *AttributeDefinition) GetOptions() map[string]string {
	if x != nil {
		return x.xxx_hidden_Options
	}
	return nil
}

func (x *AttributeDefinition) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *AttributeDefinition) SetDescription(v string) {
	x.xxx_hidden_Description = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *AttributeDefinition) SetType(v AttributeType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *AttributeDefinition) SetMandatory(v bool) {
	x.xxx_hidden_Mandatory = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *AttributeDefinition) SetDefaultValue(v *AttributeValue) {
	x.xxx_hidden_DefaultValue = v
}

func (x *AttributeDefinition) SetOptions(v map[string]string) {
	x.xxx_hidden_Options = v
}

func (x *AttributeDefinition) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *AttributeDefinition) HasDescription() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *AttributeDefinition) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *AttributeDefinition) HasMandatory() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *AttributeDefinition) HasDefaultValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DefaultValue != nil
}

func (x *AttributeDefinition) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

func (x *AttributeDefinition) ClearDescription() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Description = nil
}

func (x *AttributeDefinition) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Type = AttributeType_ATTRIBUTE_TYPE_INT
}

func (x *AttributeDefinition) ClearMandatory() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Mandatory = false
}

func (x *AttributeDefinition) ClearDefaultValue() {
	x.xxx_hidden_DefaultValue = nil
}

type AttributeDefinition_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name         *string
	Description  *string
	Type         *AttributeType
	Mandatory    *bool
	DefaultValue *AttributeValue
	Options      map[string]string
}

func (b0 AttributeDefinition_builder) Build() *AttributeDefinition {
	m0 := &AttributeDefinition{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_Name = b.Name
	}
	if b.Description != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_Description = b.Description
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_Type = *b.Type
	}
	if b.Mandatory != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_Mandatory = *b.Mandatory
	}
	x.xxx_hidden_DefaultValue = b.DefaultValue
	x.xxx_hidden_Options = b.Options
	return m0
}

// Sub-message containing job action attributes
type JobActionAttributes struct {
	state                  protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Type        ActionType              `protobuf:"varint,1,opt,name=type,enum=io.clbs.openhes.pbdriver.ActionType" json:"type,omitempty"`
	xxx_hidden_Attributes  *[]*AttributeDefinition `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *JobActionAttributes) Reset() {
	*x = JobActionAttributes{}
	mi := &file_pbdriver_models_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobActionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobActionAttributes) ProtoMessage() {}

func (x *JobActionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *JobActionAttributes) GetType() ActionType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Type
		}
	}
	return ActionType_ACTION_TYPE_GET_REGISTER
}

func (x *JobActionAttributes) GetAttributes() []*AttributeDefinition {
	if x != nil {
		if x.xxx_hidden_Attributes != nil {
			return *x.xxx_hidden_Attributes
		}
	}
	return nil
}

func (x *JobActionAttributes) SetType(v ActionType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *JobActionAttributes) SetAttributes(v []*AttributeDefinition) {
	x.xxx_hidden_Attributes = &v
}

func (x *JobActionAttributes) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *JobActionAttributes) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Type = ActionType_ACTION_TYPE_GET_REGISTER
}

type JobActionAttributes_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The type of action for which this instance of the template is defined.
	Type *ActionType
	// The template of the action attributes. It is represented as a list of attribute definitions.
	Attributes []*AttributeDefinition
}

func (b0 JobActionAttributes_builder) Build() *JobActionAttributes {
	m0 := &JobActionAttributes{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Type = *b.Type
	}
	x.xxx_hidden_Attributes = &b.Attributes
	return m0
}

// Taskmaster -> Driver start job request message
type StartJobsRequest struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ConnectionInfo *ConnectionInfo        `protobuf:"bytes,2,opt,name=connection_info,json=connectionInfo" json:"connection_info,omitempty"`
	xxx_hidden_Jobs           *[]*StartJobData       `protobuf:"bytes,1,rep,name=jobs" json:"jobs,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *StartJobsRequest) Reset() {
	*x = StartJobsRequest{}
	mi := &file_pbdriver_models_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartJobsRequest) ProtoMessage() {}

func (x *StartJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StartJobsRequest) GetConnectionInfo() *ConnectionInfo {
	if x != nil {
		return x.xxx_hidden_ConnectionInfo
	}
	return nil
}

func (x *StartJobsRequest) GetJobs() []*StartJobData {
	if x != nil {
		if x.xxx_hidden_Jobs != nil {
			return *x.xxx_hidden_Jobs
		}
	}
	return nil
}

func (x *StartJobsRequest) SetConnectionInfo(v *ConnectionInfo) {
	x.xxx_hidden_ConnectionInfo = v
}

func (x *StartJobsRequest) SetJobs(v []*StartJobData) {
	x.xxx_hidden_Jobs = &v
}

func (x *StartJobsRequest) HasConnectionInfo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ConnectionInfo != nil
}

func (x *StartJobsRequest) ClearConnectionInfo() {
	x.xxx_hidden_ConnectionInfo = nil
}

type StartJobsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ConnectionInfo *ConnectionInfo
	Jobs           []*StartJobData
}

func (b0 StartJobsRequest_builder) Build() *StartJobsRequest {
	m0 := &StartJobsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ConnectionInfo = b.ConnectionInfo
	x.xxx_hidden_Jobs = &b.Jobs
	return m0
}

// Sub-message containing job start request for single device
type StartJobData struct {
	state                       protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_DeviceAttributes map[string]*AttributeValue `protobuf:"bytes,1,rep,name=device_attributes,json=deviceAttributes" json:"device_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_JobId            *string                    `protobuf:"bytes,2,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	xxx_hidden_JobSettings      *JobSettings               `protobuf:"bytes,3,opt,name=job_settings,json=jobSettings" json:"job_settings,omitempty"`
	xxx_hidden_JobActions       *[]*JobAction              `protobuf:"bytes,4,rep,name=job_actions,json=jobActions" json:"job_actions,omitempty"`
	xxx_hidden_AppProtocol      ApplicationProtocol        `protobuf:"varint,5,opt,name=app_protocol,json=appProtocol,enum=io.clbs.openhes.pbdriver.ApplicationProtocol" json:"app_protocol,omitempty"`
	xxx_hidden_Timezone         *string                    `protobuf:"bytes,6,opt,name=timezone" json:"timezone,omitempty"`
	XXX_raceDetectHookData      protoimpl.RaceDetectHookData
	XXX_presence                [1]uint32
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *StartJobData) Reset() {
	*x = StartJobData{}
	mi := &file_pbdriver_models_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartJobData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartJobData) ProtoMessage() {}

func (x *StartJobData) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StartJobData) GetDeviceAttributes() map[string]*AttributeValue {
	if x != nil {
		return x.xxx_hidden_DeviceAttributes
	}
	return nil
}

func (x *StartJobData) GetJobId() string {
	if x != nil {
		if x.xxx_hidden_JobId != nil {
			return *x.xxx_hidden_JobId
		}
		return ""
	}
	return ""
}

func (x *StartJobData) GetJobSettings() *JobSettings {
	if x != nil {
		return x.xxx_hidden_JobSettings
	}
	return nil
}

func (x *StartJobData) GetJobActions() []*JobAction {
	if x != nil {
		if x.xxx_hidden_JobActions != nil {
			return *x.xxx_hidden_JobActions
		}
	}
	return nil
}

func (x *StartJobData) GetAppProtocol() ApplicationProtocol {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 4) {
			return x.xxx_hidden_AppProtocol
		}
	}
	return ApplicationProtocol_APPPROTO_IEC_62056_21
}

func (x *StartJobData) GetTimezone() string {
	if x != nil {
		if x.xxx_hidden_Timezone != nil {
			return *x.xxx_hidden_Timezone
		}
		return ""
	}
	return ""
}

func (x *StartJobData) SetDeviceAttributes(v map[string]*AttributeValue) {
	x.xxx_hidden_DeviceAttributes = v
}

func (x *StartJobData) SetJobId(v string) {
	x.xxx_hidden_JobId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *StartJobData) SetJobSettings(v *JobSettings) {
	x.xxx_hidden_JobSettings = v
}

func (x *StartJobData) SetJobActions(v []*JobAction) {
	x.xxx_hidden_JobActions = &v
}

func (x *StartJobData) SetAppProtocol(v ApplicationProtocol) {
	x.xxx_hidden_AppProtocol = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 6)
}

func (x *StartJobData) SetTimezone(v string) {
	x.xxx_hidden_Timezone = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *StartJobData) HasJobId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *StartJobData) HasJobSettings() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_JobSettings != nil
}

func (x *StartJobData) HasAppProtocol() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *StartJobData) HasTimezone() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *StartJobData) ClearJobId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_JobId = nil
}

func (x *StartJobData) ClearJobSettings() {
	x.xxx_hidden_JobSettings = nil
}

func (x *StartJobData) ClearAppProtocol() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_AppProtocol = ApplicationProtocol_APPPROTO_IEC_62056_21
}

func (x *StartJobData) ClearTimezone() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Timezone = nil
}

type StartJobData_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	DeviceAttributes map[string]*AttributeValue
	JobId            *string
	JobSettings      *JobSettings
	JobActions       []*JobAction
	AppProtocol      *ApplicationProtocol
	Timezone         *string
}

func (b0 StartJobData_builder) Build() *StartJobData {
	m0 := &StartJobData{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_DeviceAttributes = b.DeviceAttributes
	if b.JobId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_JobId = b.JobId
	}
	x.xxx_hidden_JobSettings = b.JobSettings
	x.xxx_hidden_JobActions = &b.JobActions
	if b.AppProtocol != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 6)
		x.xxx_hidden_AppProtocol = *b.AppProtocol
	}
	if b.Timezone != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_Timezone = b.Timezone
	}
	return m0
}

// Sub-message containing connection info for controlled-serial line over IP (e.g. Moxa) connection type
type ConnectionTypeControlledSerial struct {
	state                protoimpl.MessageState                     `protogen:"opaque.v1"`
	xxx_hidden_Converter isConnectionTypeControlledSerial_Converter `protobuf_oneof:"converter"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ConnectionTypeControlledSerial) Reset() {
	*x = ConnectionTypeControlledSerial{}
	mi := &file_pbdriver_models_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionTypeControlledSerial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionTypeControlledSerial) ProtoMessage() {}

func (x *ConnectionTypeControlledSerial) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ConnectionTypeControlledSerial) GetDirect() *ConnectionTypeSerialDirect {
	if x != nil {
		if x, ok := x.xxx_hidden_Converter.(*connectionTypeControlledSerial_Direct); ok {
			return x.Direct
		}
	}
	return nil
}

func (x *ConnectionTypeControlledSerial) GetMoxa() *ConnectionTypeSerialMoxa {
	if x != nil {
		if x, ok := x.xxx_hidden_Converter.(*connectionTypeControlledSerial_Moxa); ok {
			return x.Moxa
		}
	}
	return nil
}

func (x *ConnectionTypeControlledSerial) SetDirect(v *ConnectionTypeSerialDirect) {
	if v == nil {
		x.xxx_hidden_Converter = nil
		return
	}
	x.xxx_hidden_Converter = &connectionTypeControlledSerial_Direct{v}
}

func (x *ConnectionTypeControlledSerial) SetMoxa(v *ConnectionTypeSerialMoxa) {
	if v == nil {
		x.xxx_hidden_Converter = nil
		return
	}
	x.xxx_hidden_Converter = &connectionTypeControlledSerial_Moxa{v}
}

func (x *ConnectionTypeControlledSerial) HasConverter() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Converter != nil
}

func (x *ConnectionTypeControlledSerial) HasDirect() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Converter.(*connectionTypeControlledSerial_Direct)
	return ok
}

func (x *ConnectionTypeControlledSerial) HasMoxa() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Converter.(*connectionTypeControlledSerial_Moxa)
	return ok
}

func (x *ConnectionTypeControlledSerial) ClearConverter() {
	x.xxx_hidden_Converter = nil
}

func (x *ConnectionTypeControlledSerial) ClearDirect() {
	if _, ok := x.xxx_hidden_Converter.(*connectionTypeControlledSerial_Direct); ok {
		x.xxx_hidden_Converter = nil
	}
}

func (x *ConnectionTypeControlledSerial) ClearMoxa() {
	if _, ok := x.xxx_hidden_Converter.(*connectionTypeControlledSerial_Moxa); ok {
		x.xxx_hidden_Converter = nil
	}
}

const ConnectionTypeControlledSerial_Converter_not_set_case case_ConnectionTypeControlledSerial_Converter = 0
const ConnectionTypeControlledSerial_Direct_case case_ConnectionTypeControlledSerial_Converter = 1
const ConnectionTypeControlledSerial_Moxa_case case_ConnectionTypeControlledSerial_Converter = 2

func (x *ConnectionTypeControlledSerial) WhichConverter() case_ConnectionTypeControlledSerial_Converter {
	if x == nil {
		return ConnectionTypeControlledSerial_Converter_not_set_case
	}
	switch x.xxx_hidden_Converter.(type) {
	case *connectionTypeControlledSerial_Direct:
		return ConnectionTypeControlledSerial_Direct_case
	case *connectionTypeControlledSerial_Moxa:
		return ConnectionTypeControlledSerial_Moxa_case
	default:
		return ConnectionTypeControlledSerial_Converter_not_set_case
	}
}

type ConnectionTypeControlledSerial_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// IP-to-serial converter description.

	// Fields of oneof xxx_hidden_Converter:
	Direct *ConnectionTypeSerialDirect
	Moxa   *ConnectionTypeSerialMoxa
	// -- end of xxx_hidden_Converter
}

func (b0 ConnectionTypeControlledSerial_builder) Build() *ConnectionTypeControlledSerial {
	m0 := &ConnectionTypeControlledSerial{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Direct != nil {
		x.xxx_hidden_Converter = &connectionTypeControlledSerial_Direct{b.Direct}
	}
	if b.Moxa != nil {
		x.xxx_hidden_Converter = &connectionTypeControlledSerial_Moxa{b.Moxa}
	}
	return m0
}

type case_ConnectionTypeControlledSerial_Converter protoreflect.FieldNumber

func (x case_ConnectionTypeControlledSerial_Converter) String() string {
	md := file_pbdriver_models_proto_msgTypes[13].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isConnectionTypeControlledSerial_Converter interface {
	isConnectionTypeControlledSerial_Converter()
}

type connectionTypeControlledSerial_Direct struct {
	Direct *ConnectionTypeSerialDirect `protobuf:"bytes,1,opt,name=direct,oneof"` // The simple direct serial connection type.
}

type connectionTypeControlledSerial_Moxa struct {
	Moxa *ConnectionTypeSerialMoxa `protobuf:"bytes,2,opt,name=moxa,oneof"` // The Moxa connection type.
}

func (*connectionTypeControlledSerial_Direct) isConnectionTypeControlledSerial_Converter() {}

func (*connectionTypeControlledSerial_Moxa) isConnectionTypeControlledSerial_Converter() {}

// Sub-message containing modem connection info
type ModemInfo struct {
	state                      protoimpl.MessageState      `protogen:"opaque.v1"`
	xxx_hidden_Id              *string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	xxx_hidden_Name            *string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	xxx_hidden_AtInit          *string                     `protobuf:"bytes,3,opt,name=at_init,json=atInit" json:"at_init,omitempty"`
	xxx_hidden_AtTest          *string                     `protobuf:"bytes,4,opt,name=at_test,json=atTest" json:"at_test,omitempty"`
	xxx_hidden_AtConfig        *string                     `protobuf:"bytes,5,opt,name=at_config,json=atConfig" json:"at_config,omitempty"`
	xxx_hidden_AtDial          *string                     `protobuf:"bytes,6,opt,name=at_dial,json=atDial" json:"at_dial,omitempty"`
	xxx_hidden_AtHangup        *string                     `protobuf:"bytes,7,opt,name=at_hangup,json=atHangup" json:"at_hangup,omitempty"`
	xxx_hidden_AtEscape        *string                     `protobuf:"bytes,8,opt,name=at_escape,json=atEscape" json:"at_escape,omitempty"`
	xxx_hidden_AtDsr           bool                        `protobuf:"varint,9,opt,name=at_dsr,json=atDsr" json:"at_dsr,omitempty"`
	xxx_hidden_ConnectTimeout  uint32                      `protobuf:"varint,10,opt,name=connect_timeout,json=connectTimeout" json:"connect_timeout,omitempty"`
	xxx_hidden_ModemConnection isModemInfo_ModemConnection `protobuf_oneof:"modem_connection"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ModemInfo) Reset() {
	*x = ModemInfo{}
	mi := &file_pbdriver_models_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModemInfo) ProtoMessage() {}

func (x *ModemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ModemInfo) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *ModemInfo) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *ModemInfo) GetAtInit() string {
	if x != nil {
		if x.xxx_hidden_AtInit != nil {
			return *x.xxx_hidden_AtInit
		}
		return ""
	}
	return ""
}

func (x *ModemInfo) GetAtTest() string {
	if x != nil {
		if x.xxx_hidden_AtTest != nil {
			return *x.xxx_hidden_AtTest
		}
		return ""
	}
	return ""
}

func (x *ModemInfo) GetAtConfig() string {
	if x != nil {
		if x.xxx_hidden_AtConfig != nil {
			return *x.xxx_hidden_AtConfig
		}
		return ""
	}
	return ""
}

func (x *ModemInfo) GetAtDial() string {
	if x != nil {
		if x.xxx_hidden_AtDial != nil {
			return *x.xxx_hidden_AtDial
		}
		return ""
	}
	return ""
}

func (x *ModemInfo) GetAtHangup() string {
	if x != nil {
		if x.xxx_hidden_AtHangup != nil {
			return *x.xxx_hidden_AtHangup
		}
		return ""
	}
	return ""
}

func (x *ModemInfo) GetAtEscape() string {
	if x != nil {
		if x.xxx_hidden_AtEscape != nil {
			return *x.xxx_hidden_AtEscape
		}
		return ""
	}
	return ""
}

func (x *ModemInfo) GetAtDsr() bool {
	if x != nil {
		return x.xxx_hidden_AtDsr
	}
	return false
}

func (x *ModemInfo) GetConnectTimeout() uint32 {
	if x != nil {
		return x.xxx_hidden_ConnectTimeout
	}
	return 0
}

func (x *ModemInfo) GetTcpip() *ConnectionTypeDirectTcpIp {
	if x != nil {
		if x, ok := x.xxx_hidden_ModemConnection.(*modemInfo_Tcpip); ok {
			return x.Tcpip
		}
	}
	return nil
}

func (x *ModemInfo) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 11)
}

func (x *ModemInfo) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 11)
}

func (x *ModemInfo) SetAtInit(v string) {
	x.xxx_hidden_AtInit = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 11)
}

func (x *ModemInfo) SetAtTest(v string) {
	x.xxx_hidden_AtTest = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 11)
}

func (x *ModemInfo) SetAtConfig(v string) {
	x.xxx_hidden_AtConfig = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 11)
}

func (x *ModemInfo) SetAtDial(v string) {
	x.xxx_hidden_AtDial = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 11)
}

func (x *ModemInfo) SetAtHangup(v string) {
	x.xxx_hidden_AtHangup = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 11)
}

func (x *ModemInfo) SetAtEscape(v string) {
	x.xxx_hidden_AtEscape = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 11)
}

func (x *ModemInfo) SetAtDsr(v bool) {
	x.xxx_hidden_AtDsr = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 11)
}

func (x *ModemInfo) SetConnectTimeout(v uint32) {
	x.xxx_hidden_ConnectTimeout = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 11)
}

func (x *ModemInfo) SetTcpip(v *ConnectionTypeDirectTcpIp) {
	if v == nil {
		x.xxx_hidden_ModemConnection = nil
		return
	}
	x.xxx_hidden_ModemConnection = &modemInfo_Tcpip{v}
}

func (x *ModemInfo) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ModemInfo) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ModemInfo) HasAtInit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ModemInfo) HasAtTest() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ModemInfo) HasAtConfig() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ModemInfo) HasAtDial() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *ModemInfo) HasAtHangup() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *ModemInfo) HasAtEscape() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *ModemInfo) HasAtDsr() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *ModemInfo) HasConnectTimeout() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *ModemInfo) HasModemConnection() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ModemConnection != nil
}

func (x *ModemInfo) HasTcpip() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_ModemConnection.(*modemInfo_Tcpip)
	return ok
}

func (x *ModemInfo) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *ModemInfo) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *ModemInfo) ClearAtInit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_AtInit = nil
}

func (x *ModemInfo) ClearAtTest() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_AtTest = nil
}

func (x *ModemInfo) ClearAtConfig() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_AtConfig = nil
}

func (x *ModemInfo) ClearAtDial() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_AtDial = nil
}

func (x *ModemInfo) ClearAtHangup() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_AtHangup = nil
}

func (x *ModemInfo) ClearAtEscape() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_AtEscape = nil
}

func (x *ModemInfo) ClearAtDsr() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_AtDsr = false
}

func (x *ModemInfo) ClearConnectTimeout() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_ConnectTimeout = 0
}

func (x *ModemInfo) ClearModemConnection() {
	x.xxx_hidden_ModemConnection = nil
}

func (x *ModemInfo) ClearTcpip() {
	if _, ok := x.xxx_hidden_ModemConnection.(*modemInfo_Tcpip); ok {
		x.xxx_hidden_ModemConnection = nil
	}
}

const ModemInfo_ModemConnection_not_set_case case_ModemInfo_ModemConnection = 0
const ModemInfo_Tcpip_case case_ModemInfo_ModemConnection = 11

func (x *ModemInfo) WhichModemConnection() case_ModemInfo_ModemConnection {
	if x == nil {
		return ModemInfo_ModemConnection_not_set_case
	}
	switch x.xxx_hidden_ModemConnection.(type) {
	case *modemInfo_Tcpip:
		return ModemInfo_Tcpip_case
	default:
		return ModemInfo_ModemConnection_not_set_case
	}
}

type ModemInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id             *string
	Name           *string
	AtInit         *string
	AtTest         *string
	AtConfig       *string
	AtDial         *string
	AtHangup       *string
	AtEscape       *string
	AtDsr          *bool
	ConnectTimeout *uint32
	// The modem connection description.

	// Fields of oneof xxx_hidden_ModemConnection:
	Tcpip *ConnectionTypeDirectTcpIp
	// -- end of xxx_hidden_ModemConnection
}

func (b0 ModemInfo_builder) Build() *ModemInfo {
	m0 := &ModemInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 11)
		x.xxx_hidden_Id = b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 11)
		x.xxx_hidden_Name = b.Name
	}
	if b.AtInit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 11)
		x.xxx_hidden_AtInit = b.AtInit
	}
	if b.AtTest != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 11)
		x.xxx_hidden_AtTest = b.AtTest
	}
	if b.AtConfig != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 11)
		x.xxx_hidden_AtConfig = b.AtConfig
	}
	if b.AtDial != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 11)
		x.xxx_hidden_AtDial = b.AtDial
	}
	if b.AtHangup != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 11)
		x.xxx_hidden_AtHangup = b.AtHangup
	}
	if b.AtEscape != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 11)
		x.xxx_hidden_AtEscape = b.AtEscape
	}
	if b.AtDsr != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 11)
		x.xxx_hidden_AtDsr = *b.AtDsr
	}
	if b.ConnectTimeout != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 11)
		x.xxx_hidden_ConnectTimeout = *b.ConnectTimeout
	}
	if b.Tcpip != nil {
		x.xxx_hidden_ModemConnection = &modemInfo_Tcpip{b.Tcpip}
	}
	return m0
}

type case_ModemInfo_ModemConnection protoreflect.FieldNumber

func (x case_ModemInfo_ModemConnection) String() string {
	md := file_pbdriver_models_proto_msgTypes[14].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isModemInfo_ModemConnection interface {
	isModemInfo_ModemConnection()
}

type modemInfo_Tcpip struct {
	Tcpip *ConnectionTypeDirectTcpIp `protobuf:"bytes,11,opt,name=tcpip,oneof"` // The TCP connection type. The modem has either TCP or there is a IP-to-serial converter which handles the serial configuration so no additional serial configuration is needed.
}

func (*modemInfo_Tcpip) isModemInfo_ModemConnection() {}

// Sub-message containing serial port configuration
type SerialConfig struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_BaudRate    SerialConfigBaudRate   `protobuf:"varint,1,opt,name=baud_rate,json=baudRate,enum=io.clbs.openhes.pbdriver.SerialConfigBaudRate" json:"baud_rate,omitempty"`
	xxx_hidden_Parity      SerialConfigParity     `protobuf:"varint,2,opt,name=parity,enum=io.clbs.openhes.pbdriver.SerialConfigParity" json:"parity,omitempty"`
	xxx_hidden_DataBits    SerialConfigDataBits   `protobuf:"varint,3,opt,name=data_bits,json=dataBits,enum=io.clbs.openhes.pbdriver.SerialConfigDataBits" json:"data_bits,omitempty"`
	xxx_hidden_StopBits    SerialConfigStopBits   `protobuf:"varint,4,opt,name=stop_bits,json=stopBits,enum=io.clbs.openhes.pbdriver.SerialConfigStopBits" json:"stop_bits,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SerialConfig) Reset() {
	*x = SerialConfig{}
	mi := &file_pbdriver_models_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialConfig) ProtoMessage() {}

func (x *SerialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SerialConfig) GetBaudRate() SerialConfigBaudRate {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_BaudRate
		}
	}
	return SerialConfigBaudRate_BAUD_RATE_110
}

func (x *SerialConfig) GetParity() SerialConfigParity {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Parity
		}
	}
	return SerialConfigParity_PARITY_NONE
}

func (x *SerialConfig) GetDataBits() SerialConfigDataBits {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_DataBits
		}
	}
	return SerialConfigDataBits_DATA_BITS_5
}

func (x *SerialConfig) GetStopBits() SerialConfigStopBits {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_StopBits
		}
	}
	return SerialConfigStopBits_STOP_BITS_1
}

func (x *SerialConfig) SetBaudRate(v SerialConfigBaudRate) {
	x.xxx_hidden_BaudRate = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *SerialConfig) SetParity(v SerialConfigParity) {
	x.xxx_hidden_Parity = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *SerialConfig) SetDataBits(v SerialConfigDataBits) {
	x.xxx_hidden_DataBits = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *SerialConfig) SetStopBits(v SerialConfigStopBits) {
	x.xxx_hidden_StopBits = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *SerialConfig) HasBaudRate() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SerialConfig) HasParity() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SerialConfig) HasDataBits() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *SerialConfig) HasStopBits() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *SerialConfig) ClearBaudRate() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_BaudRate = SerialConfigBaudRate_BAUD_RATE_110
}

func (x *SerialConfig) ClearParity() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Parity = SerialConfigParity_PARITY_NONE
}

func (x *SerialConfig) ClearDataBits() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_DataBits = SerialConfigDataBits_DATA_BITS_5
}

func (x *SerialConfig) ClearStopBits() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_StopBits = SerialConfigStopBits_STOP_BITS_1
}

type SerialConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	BaudRate *SerialConfigBaudRate
	Parity   *SerialConfigParity
	DataBits *SerialConfigDataBits
	StopBits *SerialConfigStopBits
}

func (b0 SerialConfig_builder) Build() *SerialConfig {
	m0 := &SerialConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.BaudRate != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_BaudRate = *b.BaudRate
	}
	if b.Parity != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Parity = *b.Parity
	}
	if b.DataBits != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_DataBits = *b.DataBits
	}
	if b.StopBits != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_StopBits = *b.StopBits
	}
	return m0
}

// Sub-message containing connection info
type ConnectionInfo struct {
	state                       protoimpl.MessageState      `protogen:"opaque.v1"`
	xxx_hidden_Connection       isConnectionInfo_Connection `protobuf_oneof:"connection"`
	xxx_hidden_LinkProtocol     DataLinkProtocol            `protobuf:"varint,4,opt,name=link_protocol,json=linkProtocol,enum=io.clbs.openhes.pbdriver.DataLinkProtocol" json:"link_protocol,omitempty"`
	xxx_hidden_CustomGroupingId *string                     `protobuf:"bytes,5,opt,name=custom_grouping_id,json=customGroupingId" json:"custom_grouping_id,omitempty"`
	XXX_raceDetectHookData      protoimpl.RaceDetectHookData
	XXX_presence                [1]uint32
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *ConnectionInfo) Reset() {
	*x = ConnectionInfo{}
	mi := &file_pbdriver_models_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionInfo) ProtoMessage() {}

func (x *ConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ConnectionInfo) GetTcpip() *ConnectionTypeDirectTcpIp {
	if x != nil {
		if x, ok := x.xxx_hidden_Connection.(*connectionInfo_Tcpip); ok {
			return x.Tcpip
		}
	}
	return nil
}

func (x *ConnectionInfo) GetModemPool() *ConnectionTypeModemPool {
	if x != nil {
		if x, ok := x.xxx_hidden_Connection.(*connectionInfo_ModemPool); ok {
			return x.ModemPool
		}
	}
	return nil
}

func (x *ConnectionInfo) GetSerialOverIp() *ConnectionTypeControlledSerial {
	if x != nil {
		if x, ok := x.xxx_hidden_Connection.(*connectionInfo_SerialOverIp); ok {
			return x.SerialOverIp
		}
	}
	return nil
}

func (x *ConnectionInfo) GetLinkProtocol() DataLinkProtocol {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_LinkProtocol
		}
	}
	return DataLinkProtocol_LINKPROTO_IEC_62056_21
}

func (x *ConnectionInfo) GetCustomGroupingId() string {
	if x != nil {
		if x.xxx_hidden_CustomGroupingId != nil {
			return *x.xxx_hidden_CustomGroupingId
		}
		return ""
	}
	return ""
}

func (x *ConnectionInfo) SetTcpip(v *ConnectionTypeDirectTcpIp) {
	if v == nil {
		x.xxx_hidden_Connection = nil
		return
	}
	x.xxx_hidden_Connection = &connectionInfo_Tcpip{v}
}

func (x *ConnectionInfo) SetModemPool(v *ConnectionTypeModemPool) {
	if v == nil {
		x.xxx_hidden_Connection = nil
		return
	}
	x.xxx_hidden_Connection = &connectionInfo_ModemPool{v}
}

func (x *ConnectionInfo) SetSerialOverIp(v *ConnectionTypeControlledSerial) {
	if v == nil {
		x.xxx_hidden_Connection = nil
		return
	}
	x.xxx_hidden_Connection = &connectionInfo_SerialOverIp{v}
}

func (x *ConnectionInfo) SetLinkProtocol(v DataLinkProtocol) {
	x.xxx_hidden_LinkProtocol = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *ConnectionInfo) SetCustomGroupingId(v string) {
	x.xxx_hidden_CustomGroupingId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *ConnectionInfo) HasConnection() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Connection != nil
}

func (x *ConnectionInfo) HasTcpip() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Connection.(*connectionInfo_Tcpip)
	return ok
}

func (x *ConnectionInfo) HasModemPool() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Connection.(*connectionInfo_ModemPool)
	return ok
}

func (x *ConnectionInfo) HasSerialOverIp() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Connection.(*connectionInfo_SerialOverIp)
	return ok
}

func (x *ConnectionInfo) HasLinkProtocol() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ConnectionInfo) HasCustomGroupingId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ConnectionInfo) ClearConnection() {
	x.xxx_hidden_Connection = nil
}

func (x *ConnectionInfo) ClearTcpip() {
	if _, ok := x.xxx_hidden_Connection.(*connectionInfo_Tcpip); ok {
		x.xxx_hidden_Connection = nil
	}
}

func (x *ConnectionInfo) ClearModemPool() {
	if _, ok := x.xxx_hidden_Connection.(*connectionInfo_ModemPool); ok {
		x.xxx_hidden_Connection = nil
	}
}

func (x *ConnectionInfo) ClearSerialOverIp() {
	if _, ok := x.xxx_hidden_Connection.(*connectionInfo_SerialOverIp); ok {
		x.xxx_hidden_Connection = nil
	}
}

func (x *ConnectionInfo) ClearLinkProtocol() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_LinkProtocol = DataLinkProtocol_LINKPROTO_IEC_62056_21
}

func (x *ConnectionInfo) ClearCustomGroupingId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_CustomGroupingId = nil
}

const ConnectionInfo_Connection_not_set_case case_ConnectionInfo_Connection = 0
const ConnectionInfo_Tcpip_case case_ConnectionInfo_Connection = 1
const ConnectionInfo_ModemPool_case case_ConnectionInfo_Connection = 2
const ConnectionInfo_SerialOverIp_case case_ConnectionInfo_Connection = 3

func (x *ConnectionInfo) WhichConnection() case_ConnectionInfo_Connection {
	if x == nil {
		return ConnectionInfo_Connection_not_set_case
	}
	switch x.xxx_hidden_Connection.(type) {
	case *connectionInfo_Tcpip:
		return ConnectionInfo_Tcpip_case
	case *connectionInfo_ModemPool:
		return ConnectionInfo_ModemPool_case
	case *connectionInfo_SerialOverIp:
		return ConnectionInfo_SerialOverIp_case
	default:
		return ConnectionInfo_Connection_not_set_case
	}
}

type ConnectionInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The entrypoint connection description. It can be either direct TCP, a modem from a pool or a direct serial line over IP (using IP-to-serial converter).

	// Fields of oneof xxx_hidden_Connection:
	Tcpip        *ConnectionTypeDirectTcpIp
	ModemPool    *ConnectionTypeModemPool
	SerialOverIp *ConnectionTypeControlledSerial
	// -- end of xxx_hidden_Connection
	LinkProtocol     *DataLinkProtocol
	CustomGroupingId *string
}

func (b0 ConnectionInfo_builder) Build() *ConnectionInfo {
	m0 := &ConnectionInfo{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Tcpip != nil {
		x.xxx_hidden_Connection = &connectionInfo_Tcpip{b.Tcpip}
	}
	if b.ModemPool != nil {
		x.xxx_hidden_Connection = &connectionInfo_ModemPool{b.ModemPool}
	}
	if b.SerialOverIp != nil {
		x.xxx_hidden_Connection = &connectionInfo_SerialOverIp{b.SerialOverIp}
	}
	if b.LinkProtocol != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_LinkProtocol = *b.LinkProtocol
	}
	if b.CustomGroupingId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_CustomGroupingId = b.CustomGroupingId
	}
	return m0
}

type case_ConnectionInfo_Connection protoreflect.FieldNumber

func (x case_ConnectionInfo_Connection) String() string {
	md := file_pbdriver_models_proto_msgTypes[16].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isConnectionInfo_Connection interface {
	isConnectionInfo_Connection()
}

type connectionInfo_Tcpip struct {
	Tcpip *ConnectionTypeDirectTcpIp `protobuf:"bytes,1,opt,name=tcpip,oneof"` // The TCP connection type.
}

type connectionInfo_ModemPool struct {
	ModemPool *ConnectionTypeModemPool `protobuf:"bytes,2,opt,name=modem_pool,json=modemPool,oneof"` // The phone connection type.
}

type connectionInfo_SerialOverIp struct {
	SerialOverIp *ConnectionTypeControlledSerial `protobuf:"bytes,3,opt,name=serial_over_ip,json=serialOverIp,oneof"` // The serial over IP connection type.
}

func (*connectionInfo_Tcpip) isConnectionInfo_Connection() {}

func (*connectionInfo_ModemPool) isConnectionInfo_Connection() {}

func (*connectionInfo_SerialOverIp) isConnectionInfo_Connection() {}

// Sub-message containing connection info for TCP connection type
type ConnectionTypeDirectTcpIp struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Host        *string                `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	xxx_hidden_Port        uint32                 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	xxx_hidden_Timeout     int32                  `protobuf:"varint,3,opt,name=timeout" json:"timeout,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ConnectionTypeDirectTcpIp) Reset() {
	*x = ConnectionTypeDirectTcpIp{}
	mi := &file_pbdriver_models_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionTypeDirectTcpIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionTypeDirectTcpIp) ProtoMessage() {}

func (x *ConnectionTypeDirectTcpIp) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ConnectionTypeDirectTcpIp) GetHost() string {
	if x != nil {
		if x.xxx_hidden_Host != nil {
			return *x.xxx_hidden_Host
		}
		return ""
	}
	return ""
}

func (x *ConnectionTypeDirectTcpIp) GetPort() uint32 {
	if x != nil {
		return x.xxx_hidden_Port
	}
	return 0
}

func (x *ConnectionTypeDirectTcpIp) GetTimeout() int32 {
	if x != nil {
		return x.xxx_hidden_Timeout
	}
	return 0
}

func (x *ConnectionTypeDirectTcpIp) SetHost(v string) {
	x.xxx_hidden_Host = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *ConnectionTypeDirectTcpIp) SetPort(v uint32) {
	x.xxx_hidden_Port = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *ConnectionTypeDirectTcpIp) SetTimeout(v int32) {
	x.xxx_hidden_Timeout = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *ConnectionTypeDirectTcpIp) HasHost() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ConnectionTypeDirectTcpIp) HasPort() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ConnectionTypeDirectTcpIp) HasTimeout() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ConnectionTypeDirectTcpIp) ClearHost() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Host = nil
}

func (x *ConnectionTypeDirectTcpIp) ClearPort() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Port = 0
}

func (x *ConnectionTypeDirectTcpIp) ClearTimeout() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Timeout = 0
}

type ConnectionTypeDirectTcpIp_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Host    *string
	Port    *uint32
	Timeout *int32
}

func (b0 ConnectionTypeDirectTcpIp_builder) Build() *ConnectionTypeDirectTcpIp {
	m0 := &ConnectionTypeDirectTcpIp{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Host != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Host = b.Host
	}
	if b.Port != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Port = *b.Port
	}
	if b.Timeout != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Timeout = *b.Timeout
	}
	return m0
}

// Sub-message containing connection info for phone line (modem) connection type
type ConnectionTypeModemPool struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Number      *string                `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
	xxx_hidden_PoolId      *string                `protobuf:"bytes,2,opt,name=pool_id,json=poolId" json:"pool_id,omitempty"`
	xxx_hidden_Modem       *ModemInfo             `protobuf:"bytes,4,opt,name=modem" json:"modem,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ConnectionTypeModemPool) Reset() {
	*x = ConnectionTypeModemPool{}
	mi := &file_pbdriver_models_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionTypeModemPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionTypeModemPool) ProtoMessage() {}

func (x *ConnectionTypeModemPool) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ConnectionTypeModemPool) GetNumber() string {
	if x != nil {
		if x.xxx_hidden_Number != nil {
			return *x.xxx_hidden_Number
		}
		return ""
	}
	return ""
}

func (x *ConnectionTypeModemPool) GetPoolId() string {
	if x != nil {
		if x.xxx_hidden_PoolId != nil {
			return *x.xxx_hidden_PoolId
		}
		return ""
	}
	return ""
}

func (x *ConnectionTypeModemPool) GetModem() *ModemInfo {
	if x != nil {
		return x.xxx_hidden_Modem
	}
	return nil
}

func (x *ConnectionTypeModemPool) SetNumber(v string) {
	x.xxx_hidden_Number = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *ConnectionTypeModemPool) SetPoolId(v string) {
	x.xxx_hidden_PoolId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *ConnectionTypeModemPool) SetModem(v *ModemInfo) {
	x.xxx_hidden_Modem = v
}

func (x *ConnectionTypeModemPool) HasNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ConnectionTypeModemPool) HasPoolId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ConnectionTypeModemPool) HasModem() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Modem != nil
}

func (x *ConnectionTypeModemPool) ClearNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Number = nil
}

func (x *ConnectionTypeModemPool) ClearPoolId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_PoolId = nil
}

func (x *ConnectionTypeModemPool) ClearModem() {
	x.xxx_hidden_Modem = nil
}

type ConnectionTypeModemPool_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The phone number of the device to connect to.
	Number *string
	// The modem pool identifier. The pool is a group of modems that can be used to connect to the device. Final modem is selected by the Taskmaster at the time of the job start.
	PoolId *string
	// The modem device assigned to the job. This is filled only and only when the connection type is modem. The value is assigned by the Taskmaster when to job is being started. Driver is required to use this modem device to connect to the meter only and only for the time of this job!
	Modem *ModemInfo
}

func (b0 ConnectionTypeModemPool_builder) Build() *ConnectionTypeModemPool {
	m0 := &ConnectionTypeModemPool{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Number != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Number = b.Number
	}
	if b.PoolId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_PoolId = b.PoolId
	}
	x.xxx_hidden_Modem = b.Modem
	return m0
}

type ConnectionTypeSerialDirect struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Host        *string                `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	xxx_hidden_Port        uint32                 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ConnectionTypeSerialDirect) Reset() {
	*x = ConnectionTypeSerialDirect{}
	mi := &file_pbdriver_models_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionTypeSerialDirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionTypeSerialDirect) ProtoMessage() {}

func (x *ConnectionTypeSerialDirect) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ConnectionTypeSerialDirect) GetHost() string {
	if x != nil {
		if x.xxx_hidden_Host != nil {
			return *x.xxx_hidden_Host
		}
		return ""
	}
	return ""
}

func (x *ConnectionTypeSerialDirect) GetPort() uint32 {
	if x != nil {
		return x.xxx_hidden_Port
	}
	return 0
}

func (x *ConnectionTypeSerialDirect) SetHost(v string) {
	x.xxx_hidden_Host = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *ConnectionTypeSerialDirect) SetPort(v uint32) {
	x.xxx_hidden_Port = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *ConnectionTypeSerialDirect) HasHost() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ConnectionTypeSerialDirect) HasPort() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ConnectionTypeSerialDirect) ClearHost() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Host = nil
}

func (x *ConnectionTypeSerialDirect) ClearPort() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Port = 0
}

type ConnectionTypeSerialDirect_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Host *string
	Port *uint32
}

func (b0 ConnectionTypeSerialDirect_builder) Build() *ConnectionTypeSerialDirect {
	m0 := &ConnectionTypeSerialDirect{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Host != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Host = b.Host
	}
	if b.Port != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Port = *b.Port
	}
	return m0
}

// Sub-message containing connection info for controlled-serial line (Moxa) connection type
type ConnectionTypeSerialMoxa struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Host        *string                `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	xxx_hidden_DataPort    uint32                 `protobuf:"varint,2,opt,name=dataPort" json:"dataPort,omitempty"`
	xxx_hidden_CommandPort uint32                 `protobuf:"varint,3,opt,name=commandPort" json:"commandPort,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ConnectionTypeSerialMoxa) Reset() {
	*x = ConnectionTypeSerialMoxa{}
	mi := &file_pbdriver_models_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionTypeSerialMoxa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionTypeSerialMoxa) ProtoMessage() {}

func (x *ConnectionTypeSerialMoxa) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ConnectionTypeSerialMoxa) GetHost() string {
	if x != nil {
		if x.xxx_hidden_Host != nil {
			return *x.xxx_hidden_Host
		}
		return ""
	}
	return ""
}

func (x *ConnectionTypeSerialMoxa) GetDataPort() uint32 {
	if x != nil {
		return x.xxx_hidden_DataPort
	}
	return 0
}

func (x *ConnectionTypeSerialMoxa) GetCommandPort() uint32 {
	if x != nil {
		return x.xxx_hidden_CommandPort
	}
	return 0
}

func (x *ConnectionTypeSerialMoxa) SetHost(v string) {
	x.xxx_hidden_Host = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *ConnectionTypeSerialMoxa) SetDataPort(v uint32) {
	x.xxx_hidden_DataPort = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *ConnectionTypeSerialMoxa) SetCommandPort(v uint32) {
	x.xxx_hidden_CommandPort = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *ConnectionTypeSerialMoxa) HasHost() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ConnectionTypeSerialMoxa) HasDataPort() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ConnectionTypeSerialMoxa) HasCommandPort() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ConnectionTypeSerialMoxa) ClearHost() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Host = nil
}

func (x *ConnectionTypeSerialMoxa) ClearDataPort() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_DataPort = 0
}

func (x *ConnectionTypeSerialMoxa) ClearCommandPort() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_CommandPort = 0
}

type ConnectionTypeSerialMoxa_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Host        *string
	DataPort    *uint32
	CommandPort *uint32
}

func (b0 ConnectionTypeSerialMoxa_builder) Build() *ConnectionTypeSerialMoxa {
	m0 := &ConnectionTypeSerialMoxa{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Host != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Host = b.Host
	}
	if b.DataPort != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_DataPort = *b.DataPort
	}
	if b.CommandPort != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_CommandPort = *b.CommandPort
	}
	return m0
}

// Sub-message containing job parameters
type JobSettings struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_MaxDuration int64                  `protobuf:"varint,1,opt,name=max_duration,json=maxDuration" json:"max_duration,omitempty"`
	xxx_hidden_Priority    JobPriority            `protobuf:"varint,2,opt,name=priority,enum=io.clbs.openhes.pbdriver.JobPriority" json:"priority,omitempty"`
	xxx_hidden_Attempts    []int32                `protobuf:"varint,3,rep,packed,name=attempts" json:"attempts,omitempty"`
	xxx_hidden_RetryDelay  int64                  `protobuf:"varint,4,opt,name=retry_delay,json=retryDelay" json:"retry_delay,omitempty"`
	xxx_hidden_DeferStart  uint64                 `protobuf:"varint,5,opt,name=defer_start,json=deferStart" json:"defer_start,omitempty"`
	xxx_hidden_ExpiresAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expires_at,json=expiresAt" json:"expires_at,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *JobSettings) Reset() {
	*x = JobSettings{}
	mi := &file_pbdriver_models_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSettings) ProtoMessage() {}

func (x *JobSettings) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *JobSettings) GetMaxDuration() int64 {
	if x != nil {
		return x.xxx_hidden_MaxDuration
	}
	return 0
}

func (x *JobSettings) GetPriority() JobPriority {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Priority
		}
	}
	return JobPriority_JOB_PRIORITY_0
}

func (x *JobSettings) GetAttempts() []int32 {
	if x != nil {
		return x.xxx_hidden_Attempts
	}
	return nil
}

func (x *JobSettings) GetRetryDelay() int64 {
	if x != nil {
		return x.xxx_hidden_RetryDelay
	}
	return 0
}

func (x *JobSettings) GetDeferStart() uint64 {
	if x != nil {
		return x.xxx_hidden_DeferStart
	}
	return 0
}

func (x *JobSettings) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_ExpiresAt
	}
	return nil
}

func (x *JobSettings) SetMaxDuration(v int64) {
	x.xxx_hidden_MaxDuration = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *JobSettings) SetPriority(v JobPriority) {
	x.xxx_hidden_Priority = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *JobSettings) SetAttempts(v []int32) {
	x.xxx_hidden_Attempts = v
}

func (x *JobSettings) SetRetryDelay(v int64) {
	x.xxx_hidden_RetryDelay = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *JobSettings) SetDeferStart(v uint64) {
	x.xxx_hidden_DeferStart = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 6)
}

func (x *JobSettings) SetExpiresAt(v *timestamppb.Timestamp) {
	x.xxx_hidden_ExpiresAt = v
}

func (x *JobSettings) HasMaxDuration() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *JobSettings) HasPriority() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *JobSettings) HasRetryDelay() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *JobSettings) HasDeferStart() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *JobSettings) HasExpiresAt() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ExpiresAt != nil
}

func (x *JobSettings) ClearMaxDuration() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_MaxDuration = 0
}

func (x *JobSettings) ClearPriority() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Priority = JobPriority_JOB_PRIORITY_0
}

func (x *JobSettings) ClearRetryDelay() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_RetryDelay = 0
}

func (x *JobSettings) ClearDeferStart() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_DeferStart = 0
}

func (x *JobSettings) ClearExpiresAt() {
	x.xxx_hidden_ExpiresAt = nil
}

type JobSettings_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	MaxDuration *int64
	Priority    *JobPriority
	Attempts    []int32
	RetryDelay  *int64
	DeferStart  *uint64
	ExpiresAt   *timestamppb.Timestamp
}

func (b0 JobSettings_builder) Build() *JobSettings {
	m0 := &JobSettings{}
	b, x := &b0, m0
	_, _ = b, x
	if b.MaxDuration != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_MaxDuration = *b.MaxDuration
	}
	if b.Priority != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_Priority = *b.Priority
	}
	x.xxx_hidden_Attempts = b.Attempts
	if b.RetryDelay != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_RetryDelay = *b.RetryDelay
	}
	if b.DeferStart != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 6)
		x.xxx_hidden_DeferStart = *b.DeferStart
	}
	x.xxx_hidden_ExpiresAt = b.ExpiresAt
	return m0
}

// Sub-message containing job action specification
type JobAction struct {
	state                  protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_ActionId    *string                    `protobuf:"bytes,1,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	xxx_hidden_Attributes  map[string]*AttributeValue `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Action      isJobAction_Action         `protobuf_oneof:"action"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *JobAction) Reset() {
	*x = JobAction{}
	mi := &file_pbdriver_models_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobAction) ProtoMessage() {}

func (x *JobAction) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *JobAction) GetActionId() string {
	if x != nil {
		if x.xxx_hidden_ActionId != nil {
			return *x.xxx_hidden_ActionId
		}
		return ""
	}
	return ""
}

func (x *JobAction) GetAttributes() map[string]*AttributeValue {
	if x != nil {
		return x.xxx_hidden_Attributes
	}
	return nil
}

func (x *JobAction) GetGetRegister() *ActionGetRegister {
	if x != nil {
		if x, ok := x.xxx_hidden_Action.(*jobAction_GetRegister); ok {
			return x.GetRegister
		}
	}
	return nil
}

func (x *JobAction) GetGetPeriodicalProfile() *ActionGetPeriodicalProfile {
	if x != nil {
		if x, ok := x.xxx_hidden_Action.(*jobAction_GetPeriodicalProfile); ok {
			return x.GetPeriodicalProfile
		}
	}
	return nil
}

func (x *JobAction) GetGetIrregularProfile() *ActionGetIrregularProfile {
	if x != nil {
		if x, ok := x.xxx_hidden_Action.(*jobAction_GetIrregularProfile); ok {
			return x.GetIrregularProfile
		}
	}
	return nil
}

func (x *JobAction) GetGetEvents() *ActionGetEvents {
	if x != nil {
		if x, ok := x.xxx_hidden_Action.(*jobAction_GetEvents); ok {
			return x.GetEvents
		}
	}
	return nil
}

func (x *JobAction) GetGetClock() *ActionGetClock {
	if x != nil {
		if x, ok := x.xxx_hidden_Action.(*jobAction_GetClock); ok {
			return x.GetClock
		}
	}
	return nil
}

func (x *JobAction) GetSyncClock() *ActionSyncClock {
	if x != nil {
		if x, ok := x.xxx_hidden_Action.(*jobAction_SyncClock); ok {
			return x.SyncClock
		}
	}
	return nil
}

func (x *JobAction) GetGetRelayState() *ActionGetRelayState {
	if x != nil {
		if x, ok := x.xxx_hidden_Action.(*jobAction_GetRelayState); ok {
			return x.GetRelayState
		}
	}
	return nil
}

func (x *JobAction) GetSetRelayState() *ActionSetRelayState {
	if x != nil {
		if x, ok := x.xxx_hidden_Action.(*jobAction_SetRelayState); ok {
			return x.SetRelayState
		}
	}
	return nil
}

func (x *JobAction) GetGetDisconnectorState() *ActionGetDisconnectorState {
	if x != nil {
		if x, ok := x.xxx_hidden_Action.(*jobAction_GetDisconnectorState); ok {
			return x.GetDisconnectorState
		}
	}
	return nil
}

func (x *JobAction) GetSetDisconnectorState() *ActionSetDisconnectorState {
	if x != nil {
		if x, ok := x.xxx_hidden_Action.(*jobAction_SetDisconnectorState); ok {
			return x.SetDisconnectorState
		}
	}
	return nil
}

func (x *JobAction) GetGetTou() *ActionGetTou {
	if x != nil {
		if x, ok := x.xxx_hidden_Action.(*jobAction_GetTou); ok {
			return x.GetTou
		}
	}
	return nil
}

func (x *JobAction) GetSetTou() *ActionSetTou {
	if x != nil {
		if x, ok := x.xxx_hidden_Action.(*jobAction_SetTou); ok {
			return x.SetTou
		}
	}
	return nil
}

func (x *JobAction) GetGetLimiter() *ActionGetLimiter {
	if x != nil {
		if x, ok := x.xxx_hidden_Action.(*jobAction_GetLimiter); ok {
			return x.GetLimiter
		}
	}
	return nil
}

func (x *JobAction) GetSetLimiter() *ActionSetLimiter {
	if x != nil {
		if x, ok := x.xxx_hidden_Action.(*jobAction_SetLimiter); ok {
			return x.SetLimiter
		}
	}
	return nil
}

func (x *JobAction) GetResetBillingPeriod() *ActionResetBillingPeriod {
	if x != nil {
		if x, ok := x.xxx_hidden_Action.(*jobAction_ResetBillingPeriod); ok {
			return x.ResetBillingPeriod
		}
	}
	return nil
}

func (x *JobAction) GetFwUpdate() *ActionFwUpdate {
	if x != nil {
		if x, ok := x.xxx_hidden_Action.(*jobAction_FwUpdate); ok {
			return x.FwUpdate
		}
	}
	return nil
}

func (x *JobAction) SetActionId(v string) {
	x.xxx_hidden_ActionId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *JobAction) SetAttributes(v map[string]*AttributeValue) {
	x.xxx_hidden_Attributes = v
}

func (x *JobAction) SetGetRegister(v *ActionGetRegister) {
	if v == nil {
		x.xxx_hidden_Action = nil
		return
	}
	x.xxx_hidden_Action = &jobAction_GetRegister{v}
}

func (x *JobAction) SetGetPeriodicalProfile(v *ActionGetPeriodicalProfile) {
	if v == nil {
		x.xxx_hidden_Action = nil
		return
	}
	x.xxx_hidden_Action = &jobAction_GetPeriodicalProfile{v}
}

func (x *JobAction) SetGetIrregularProfile(v *ActionGetIrregularProfile) {
	if v == nil {
		x.xxx_hidden_Action = nil
		return
	}
	x.xxx_hidden_Action = &jobAction_GetIrregularProfile{v}
}

func (x *JobAction) SetGetEvents(v *ActionGetEvents) {
	if v == nil {
		x.xxx_hidden_Action = nil
		return
	}
	x.xxx_hidden_Action = &jobAction_GetEvents{v}
}

func (x *JobAction) SetGetClock(v *ActionGetClock) {
	if v == nil {
		x.xxx_hidden_Action = nil
		return
	}
	x.xxx_hidden_Action = &jobAction_GetClock{v}
}

func (x *JobAction) SetSyncClock(v *ActionSyncClock) {
	if v == nil {
		x.xxx_hidden_Action = nil
		return
	}
	x.xxx_hidden_Action = &jobAction_SyncClock{v}
}

func (x *JobAction) SetGetRelayState(v *ActionGetRelayState) {
	if v == nil {
		x.xxx_hidden_Action = nil
		return
	}
	x.xxx_hidden_Action = &jobAction_GetRelayState{v}
}

func (x *JobAction) SetSetRelayState(v *ActionSetRelayState) {
	if v == nil {
		x.xxx_hidden_Action = nil
		return
	}
	x.xxx_hidden_Action = &jobAction_SetRelayState{v}
}

func (x *JobAction) SetGetDisconnectorState(v *ActionGetDisconnectorState) {
	if v == nil {
		x.xxx_hidden_Action = nil
		return
	}
	x.xxx_hidden_Action = &jobAction_GetDisconnectorState{v}
}

func (x *JobAction) SetSetDisconnectorState(v *ActionSetDisconnectorState) {
	if v == nil {
		x.xxx_hidden_Action = nil
		return
	}
	x.xxx_hidden_Action = &jobAction_SetDisconnectorState{v}
}

func (x *JobAction) SetGetTou(v *ActionGetTou) {
	if v == nil {
		x.xxx_hidden_Action = nil
		return
	}
	x.xxx_hidden_Action = &jobAction_GetTou{v}
}

func (x *JobAction) SetSetTou(v *ActionSetTou) {
	if v == nil {
		x.xxx_hidden_Action = nil
		return
	}
	x.xxx_hidden_Action = &jobAction_SetTou{v}
}

func (x *JobAction) SetGetLimiter(v *ActionGetLimiter) {
	if v == nil {
		x.xxx_hidden_Action = nil
		return
	}
	x.xxx_hidden_Action = &jobAction_GetLimiter{v}
}

func (x *JobAction) SetSetLimiter(v *ActionSetLimiter) {
	if v == nil {
		x.xxx_hidden_Action = nil
		return
	}
	x.xxx_hidden_Action = &jobAction_SetLimiter{v}
}

func (x *JobAction) SetResetBillingPeriod(v *ActionResetBillingPeriod) {
	if v == nil {
		x.xxx_hidden_Action = nil
		return
	}
	x.xxx_hidden_Action = &jobAction_ResetBillingPeriod{v}
}

func (x *JobAction) SetFwUpdate(v *ActionFwUpdate) {
	if v == nil {
		x.xxx_hidden_Action = nil
		return
	}
	x.xxx_hidden_Action = &jobAction_FwUpdate{v}
}

func (x *JobAction) HasActionId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *JobAction) HasAction() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Action != nil
}

func (x *JobAction) HasGetRegister() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Action.(*jobAction_GetRegister)
	return ok
}

func (x *JobAction) HasGetPeriodicalProfile() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Action.(*jobAction_GetPeriodicalProfile)
	return ok
}

func (x *JobAction) HasGetIrregularProfile() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Action.(*jobAction_GetIrregularProfile)
	return ok
}

func (x *JobAction) HasGetEvents() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Action.(*jobAction_GetEvents)
	return ok
}

func (x *JobAction) HasGetClock() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Action.(*jobAction_GetClock)
	return ok
}

func (x *JobAction) HasSyncClock() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Action.(*jobAction_SyncClock)
	return ok
}

func (x *JobAction) HasGetRelayState() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Action.(*jobAction_GetRelayState)
	return ok
}

func (x *JobAction) HasSetRelayState() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Action.(*jobAction_SetRelayState)
	return ok
}

func (x *JobAction) HasGetDisconnectorState() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Action.(*jobAction_GetDisconnectorState)
	return ok
}

func (x *JobAction) HasSetDisconnectorState() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Action.(*jobAction_SetDisconnectorState)
	return ok
}

func (x *JobAction) HasGetTou() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Action.(*jobAction_GetTou)
	return ok
}

func (x *JobAction) HasSetTou() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Action.(*jobAction_SetTou)
	return ok
}

func (x *JobAction) HasGetLimiter() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Action.(*jobAction_GetLimiter)
	return ok
}

func (x *JobAction) HasSetLimiter() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Action.(*jobAction_SetLimiter)
	return ok
}

func (x *JobAction) HasResetBillingPeriod() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Action.(*jobAction_ResetBillingPeriod)
	return ok
}

func (x *JobAction) HasFwUpdate() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Action.(*jobAction_FwUpdate)
	return ok
}

func (x *JobAction) ClearActionId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ActionId = nil
}

func (x *JobAction) ClearAction() {
	x.xxx_hidden_Action = nil
}

func (x *JobAction) ClearGetRegister() {
	if _, ok := x.xxx_hidden_Action.(*jobAction_GetRegister); ok {
		x.xxx_hidden_Action = nil
	}
}

func (x *JobAction) ClearGetPeriodicalProfile() {
	if _, ok := x.xxx_hidden_Action.(*jobAction_GetPeriodicalProfile); ok {
		x.xxx_hidden_Action = nil
	}
}

func (x *JobAction) ClearGetIrregularProfile() {
	if _, ok := x.xxx_hidden_Action.(*jobAction_GetIrregularProfile); ok {
		x.xxx_hidden_Action = nil
	}
}

func (x *JobAction) ClearGetEvents() {
	if _, ok := x.xxx_hidden_Action.(*jobAction_GetEvents); ok {
		x.xxx_hidden_Action = nil
	}
}

func (x *JobAction) ClearGetClock() {
	if _, ok := x.xxx_hidden_Action.(*jobAction_GetClock); ok {
		x.xxx_hidden_Action = nil
	}
}

func (x *JobAction) ClearSyncClock() {
	if _, ok := x.xxx_hidden_Action.(*jobAction_SyncClock); ok {
		x.xxx_hidden_Action = nil
	}
}

func (x *JobAction) ClearGetRelayState() {
	if _, ok := x.xxx_hidden_Action.(*jobAction_GetRelayState); ok {
		x.xxx_hidden_Action = nil
	}
}

func (x *JobAction) ClearSetRelayState() {
	if _, ok := x.xxx_hidden_Action.(*jobAction_SetRelayState); ok {
		x.xxx_hidden_Action = nil
	}
}

func (x *JobAction) ClearGetDisconnectorState() {
	if _, ok := x.xxx_hidden_Action.(*jobAction_GetDisconnectorState); ok {
		x.xxx_hidden_Action = nil
	}
}

func (x *JobAction) ClearSetDisconnectorState() {
	if _, ok := x.xxx_hidden_Action.(*jobAction_SetDisconnectorState); ok {
		x.xxx_hidden_Action = nil
	}
}

func (x *JobAction) ClearGetTou() {
	if _, ok := x.xxx_hidden_Action.(*jobAction_GetTou); ok {
		x.xxx_hidden_Action = nil
	}
}

func (x *JobAction) ClearSetTou() {
	if _, ok := x.xxx_hidden_Action.(*jobAction_SetTou); ok {
		x.xxx_hidden_Action = nil
	}
}

func (x *JobAction) ClearGetLimiter() {
	if _, ok := x.xxx_hidden_Action.(*jobAction_GetLimiter); ok {
		x.xxx_hidden_Action = nil
	}
}

func (x *JobAction) ClearSetLimiter() {
	if _, ok := x.xxx_hidden_Action.(*jobAction_SetLimiter); ok {
		x.xxx_hidden_Action = nil
	}
}

func (x *JobAction) ClearResetBillingPeriod() {
	if _, ok := x.xxx_hidden_Action.(*jobAction_ResetBillingPeriod); ok {
		x.xxx_hidden_Action = nil
	}
}

func (x *JobAction) ClearFwUpdate() {
	if _, ok := x.xxx_hidden_Action.(*jobAction_FwUpdate); ok {
		x.xxx_hidden_Action = nil
	}
}

const JobAction_Action_not_set_case case_JobAction_Action = 0
const JobAction_GetRegister_case case_JobAction_Action = 3
const JobAction_GetPeriodicalProfile_case case_JobAction_Action = 4
const JobAction_GetIrregularProfile_case case_JobAction_Action = 5
const JobAction_GetEvents_case case_JobAction_Action = 6
const JobAction_GetClock_case case_JobAction_Action = 7
const JobAction_SyncClock_case case_JobAction_Action = 8
const JobAction_GetRelayState_case case_JobAction_Action = 9
const JobAction_SetRelayState_case case_JobAction_Action = 10
const JobAction_GetDisconnectorState_case case_JobAction_Action = 11
const JobAction_SetDisconnectorState_case case_JobAction_Action = 12
const JobAction_GetTou_case case_JobAction_Action = 13
const JobAction_SetTou_case case_JobAction_Action = 14
const JobAction_GetLimiter_case case_JobAction_Action = 15
const JobAction_SetLimiter_case case_JobAction_Action = 16
const JobAction_ResetBillingPeriod_case case_JobAction_Action = 17
const JobAction_FwUpdate_case case_JobAction_Action = 18

func (x *JobAction) WhichAction() case_JobAction_Action {
	if x == nil {
		return JobAction_Action_not_set_case
	}
	switch x.xxx_hidden_Action.(type) {
	case *jobAction_GetRegister:
		return JobAction_GetRegister_case
	case *jobAction_GetPeriodicalProfile:
		return JobAction_GetPeriodicalProfile_case
	case *jobAction_GetIrregularProfile:
		return JobAction_GetIrregularProfile_case
	case *jobAction_GetEvents:
		return JobAction_GetEvents_case
	case *jobAction_GetClock:
		return JobAction_GetClock_case
	case *jobAction_SyncClock:
		return JobAction_SyncClock_case
	case *jobAction_GetRelayState:
		return JobAction_GetRelayState_case
	case *jobAction_SetRelayState:
		return JobAction_SetRelayState_case
	case *jobAction_GetDisconnectorState:
		return JobAction_GetDisconnectorState_case
	case *jobAction_SetDisconnectorState:
		return JobAction_SetDisconnectorState_case
	case *jobAction_GetTou:
		return JobAction_GetTou_case
	case *jobAction_SetTou:
		return JobAction_SetTou_case
	case *jobAction_GetLimiter:
		return JobAction_GetLimiter_case
	case *jobAction_SetLimiter:
		return JobAction_SetLimiter_case
	case *jobAction_ResetBillingPeriod:
		return JobAction_ResetBillingPeriod_case
	case *jobAction_FwUpdate:
		return JobAction_FwUpdate_case
	default:
		return JobAction_Action_not_set_case
	}
}

type JobAction_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	ActionId   *string
	Attributes map[string]*AttributeValue
	// Fields of oneof xxx_hidden_Action:
	GetRegister          *ActionGetRegister
	GetPeriodicalProfile *ActionGetPeriodicalProfile
	GetIrregularProfile  *ActionGetIrregularProfile
	GetEvents            *ActionGetEvents
	GetClock             *ActionGetClock
	SyncClock            *ActionSyncClock
	GetRelayState        *ActionGetRelayState
	SetRelayState        *ActionSetRelayState
	GetDisconnectorState *ActionGetDisconnectorState
	SetDisconnectorState *ActionSetDisconnectorState
	GetTou               *ActionGetTou
	SetTou               *ActionSetTou
	GetLimiter           *ActionGetLimiter
	SetLimiter           *ActionSetLimiter
	ResetBillingPeriod   *ActionResetBillingPeriod
	FwUpdate             *ActionFwUpdate
	// -- end of xxx_hidden_Action
}

func (b0 JobAction_builder) Build() *JobAction {
	m0 := &JobAction{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ActionId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_ActionId = b.ActionId
	}
	x.xxx_hidden_Attributes = b.Attributes
	if b.GetRegister != nil {
		x.xxx_hidden_Action = &jobAction_GetRegister{b.GetRegister}
	}
	if b.GetPeriodicalProfile != nil {
		x.xxx_hidden_Action = &jobAction_GetPeriodicalProfile{b.GetPeriodicalProfile}
	}
	if b.GetIrregularProfile != nil {
		x.xxx_hidden_Action = &jobAction_GetIrregularProfile{b.GetIrregularProfile}
	}
	if b.GetEvents != nil {
		x.xxx_hidden_Action = &jobAction_GetEvents{b.GetEvents}
	}
	if b.GetClock != nil {
		x.xxx_hidden_Action = &jobAction_GetClock{b.GetClock}
	}
	if b.SyncClock != nil {
		x.xxx_hidden_Action = &jobAction_SyncClock{b.SyncClock}
	}
	if b.GetRelayState != nil {
		x.xxx_hidden_Action = &jobAction_GetRelayState{b.GetRelayState}
	}
	if b.SetRelayState != nil {
		x.xxx_hidden_Action = &jobAction_SetRelayState{b.SetRelayState}
	}
	if b.GetDisconnectorState != nil {
		x.xxx_hidden_Action = &jobAction_GetDisconnectorState{b.GetDisconnectorState}
	}
	if b.SetDisconnectorState != nil {
		x.xxx_hidden_Action = &jobAction_SetDisconnectorState{b.SetDisconnectorState}
	}
	if b.GetTou != nil {
		x.xxx_hidden_Action = &jobAction_GetTou{b.GetTou}
	}
	if b.SetTou != nil {
		x.xxx_hidden_Action = &jobAction_SetTou{b.SetTou}
	}
	if b.GetLimiter != nil {
		x.xxx_hidden_Action = &jobAction_GetLimiter{b.GetLimiter}
	}
	if b.SetLimiter != nil {
		x.xxx_hidden_Action = &jobAction_SetLimiter{b.SetLimiter}
	}
	if b.ResetBillingPeriod != nil {
		x.xxx_hidden_Action = &jobAction_ResetBillingPeriod{b.ResetBillingPeriod}
	}
	if b.FwUpdate != nil {
		x.xxx_hidden_Action = &jobAction_FwUpdate{b.FwUpdate}
	}
	return m0
}

type case_JobAction_Action protoreflect.FieldNumber

func (x case_JobAction_Action) String() string {
	md := file_pbdriver_models_proto_msgTypes[22].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isJobAction_Action interface {
	isJobAction_Action()
}

type jobAction_GetRegister struct {
	GetRegister *ActionGetRegister `protobuf:"bytes,3,opt,name=get_register,json=getRegister,oneof"` // The get register action specification.
}

type jobAction_GetPeriodicalProfile struct {
	GetPeriodicalProfile *ActionGetPeriodicalProfile `protobuf:"bytes,4,opt,name=get_periodical_profile,json=getPeriodicalProfile,oneof"` // The get periodical profile action specification.
}

type jobAction_GetIrregularProfile struct {
	GetIrregularProfile *ActionGetIrregularProfile `protobuf:"bytes,5,opt,name=get_irregular_profile,json=getIrregularProfile,oneof"` // The get irregular profile action specification.
}

type jobAction_GetEvents struct {
	GetEvents *ActionGetEvents `protobuf:"bytes,6,opt,name=get_events,json=getEvents,oneof"` // The get events action specification.
}

type jobAction_GetClock struct {
	GetClock *ActionGetClock `protobuf:"bytes,7,opt,name=get_clock,json=getClock,oneof"` // The get clock action specification.
}

type jobAction_SyncClock struct {
	SyncClock *ActionSyncClock `protobuf:"bytes,8,opt,name=sync_clock,json=syncClock,oneof"` // The sync clock action specification.
}

type jobAction_GetRelayState struct {
	GetRelayState *ActionGetRelayState `protobuf:"bytes,9,opt,name=get_relay_state,json=getRelayState,oneof"` // The get relay state action specification.
}

type jobAction_SetRelayState struct {
	SetRelayState *ActionSetRelayState `protobuf:"bytes,10,opt,name=set_relay_state,json=setRelayState,oneof"` // The set relay state action specification.
}

type jobAction_GetDisconnectorState struct {
	GetDisconnectorState *ActionGetDisconnectorState `protobuf:"bytes,11,opt,name=get_disconnector_state,json=getDisconnectorState,oneof"` // The get disconnector state action specification.
}

type jobAction_SetDisconnectorState struct {
	SetDisconnectorState *ActionSetDisconnectorState `protobuf:"bytes,12,opt,name=set_disconnector_state,json=setDisconnectorState,oneof"` // The set disconnector state action specification.
}

type jobAction_GetTou struct {
	GetTou *ActionGetTou `protobuf:"bytes,13,opt,name=get_tou,json=getTou,oneof"` // The get tou action specification.
}

type jobAction_SetTou struct {
	SetTou *ActionSetTou `protobuf:"bytes,14,opt,name=set_tou,json=setTou,oneof"` // The set tou action specification.
}

type jobAction_GetLimiter struct {
	GetLimiter *ActionGetLimiter `protobuf:"bytes,15,opt,name=get_limiter,json=getLimiter,oneof"` // The get limiter action specification.
}

type jobAction_SetLimiter struct {
	SetLimiter *ActionSetLimiter `protobuf:"bytes,16,opt,name=set_limiter,json=setLimiter,oneof"` // The set limiter action specification.
}

type jobAction_ResetBillingPeriod struct {
	ResetBillingPeriod *ActionResetBillingPeriod `protobuf:"bytes,17,opt,name=reset_billing_period,json=resetBillingPeriod,oneof"` // The reset billing period action specification.
}

type jobAction_FwUpdate struct {
	FwUpdate *ActionFwUpdate `protobuf:"bytes,18,opt,name=fw_update,json=fwUpdate,oneof"` // The firmware update action specification.
}

func (*jobAction_GetRegister) isJobAction_Action() {}

func (*jobAction_GetPeriodicalProfile) isJobAction_Action() {}

func (*jobAction_GetIrregularProfile) isJobAction_Action() {}

func (*jobAction_GetEvents) isJobAction_Action() {}

func (*jobAction_GetClock) isJobAction_Action() {}

func (*jobAction_SyncClock) isJobAction_Action() {}

func (*jobAction_GetRelayState) isJobAction_Action() {}

func (*jobAction_SetRelayState) isJobAction_Action() {}

func (*jobAction_GetDisconnectorState) isJobAction_Action() {}

func (*jobAction_SetDisconnectorState) isJobAction_Action() {}

func (*jobAction_GetTou) isJobAction_Action() {}

func (*jobAction_SetTou) isJobAction_Action() {}

func (*jobAction_GetLimiter) isJobAction_Action() {}

func (*jobAction_SetLimiter) isJobAction_Action() {}

func (*jobAction_ResetBillingPeriod) isJobAction_Action() {}

func (*jobAction_FwUpdate) isJobAction_Action() {}

// Sub-message containing get register action specification
type ActionGetRegister struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionGetRegister) Reset() {
	*x = ActionGetRegister{}
	mi := &file_pbdriver_models_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetRegister) ProtoMessage() {}

func (x *ActionGetRegister) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ActionGetRegister_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ActionGetRegister_builder) Build() *ActionGetRegister {
	m0 := &ActionGetRegister{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Sub-message containing get periodical profile action specification
type ActionGetPeriodicalProfile struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_From *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	xxx_hidden_To   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ActionGetPeriodicalProfile) Reset() {
	*x = ActionGetPeriodicalProfile{}
	mi := &file_pbdriver_models_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetPeriodicalProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetPeriodicalProfile) ProtoMessage() {}

func (x *ActionGetPeriodicalProfile) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ActionGetPeriodicalProfile) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_From
	}
	return nil
}

func (x *ActionGetPeriodicalProfile) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_To
	}
	return nil
}

func (x *ActionGetPeriodicalProfile) SetFrom(v *timestamppb.Timestamp) {
	x.xxx_hidden_From = v
}

func (x *ActionGetPeriodicalProfile) SetTo(v *timestamppb.Timestamp) {
	x.xxx_hidden_To = v
}

func (x *ActionGetPeriodicalProfile) HasFrom() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_From != nil
}

func (x *ActionGetPeriodicalProfile) HasTo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_To != nil
}

func (x *ActionGetPeriodicalProfile) ClearFrom() {
	x.xxx_hidden_From = nil
}

func (x *ActionGetPeriodicalProfile) ClearTo() {
	x.xxx_hidden_To = nil
}

type ActionGetPeriodicalProfile_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	From *timestamppb.Timestamp
	To   *timestamppb.Timestamp
}

func (b0 ActionGetPeriodicalProfile_builder) Build() *ActionGetPeriodicalProfile {
	m0 := &ActionGetPeriodicalProfile{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_From = b.From
	x.xxx_hidden_To = b.To
	return m0
}

// Sub-message containing get irregular profile action specification
type ActionGetIrregularProfile struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_From *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	xxx_hidden_To   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ActionGetIrregularProfile) Reset() {
	*x = ActionGetIrregularProfile{}
	mi := &file_pbdriver_models_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetIrregularProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetIrregularProfile) ProtoMessage() {}

func (x *ActionGetIrregularProfile) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ActionGetIrregularProfile) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_From
	}
	return nil
}

func (x *ActionGetIrregularProfile) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_To
	}
	return nil
}

func (x *ActionGetIrregularProfile) SetFrom(v *timestamppb.Timestamp) {
	x.xxx_hidden_From = v
}

func (x *ActionGetIrregularProfile) SetTo(v *timestamppb.Timestamp) {
	x.xxx_hidden_To = v
}

func (x *ActionGetIrregularProfile) HasFrom() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_From != nil
}

func (x *ActionGetIrregularProfile) HasTo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_To != nil
}

func (x *ActionGetIrregularProfile) ClearFrom() {
	x.xxx_hidden_From = nil
}

func (x *ActionGetIrregularProfile) ClearTo() {
	x.xxx_hidden_To = nil
}

type ActionGetIrregularProfile_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	From *timestamppb.Timestamp
	To   *timestamppb.Timestamp
}

func (b0 ActionGetIrregularProfile_builder) Build() *ActionGetIrregularProfile {
	m0 := &ActionGetIrregularProfile{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_From = b.From
	x.xxx_hidden_To = b.To
	return m0
}

// Sub-message containing get events action specification
type ActionGetEvents struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_From *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	xxx_hidden_To   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ActionGetEvents) Reset() {
	*x = ActionGetEvents{}
	mi := &file_pbdriver_models_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetEvents) ProtoMessage() {}

func (x *ActionGetEvents) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ActionGetEvents) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_From
	}
	return nil
}

func (x *ActionGetEvents) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_To
	}
	return nil
}

func (x *ActionGetEvents) SetFrom(v *timestamppb.Timestamp) {
	x.xxx_hidden_From = v
}

func (x *ActionGetEvents) SetTo(v *timestamppb.Timestamp) {
	x.xxx_hidden_To = v
}

func (x *ActionGetEvents) HasFrom() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_From != nil
}

func (x *ActionGetEvents) HasTo() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_To != nil
}

func (x *ActionGetEvents) ClearFrom() {
	x.xxx_hidden_From = nil
}

func (x *ActionGetEvents) ClearTo() {
	x.xxx_hidden_To = nil
}

type ActionGetEvents_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	From *timestamppb.Timestamp
	To   *timestamppb.Timestamp
}

func (b0 ActionGetEvents_builder) Build() *ActionGetEvents {
	m0 := &ActionGetEvents{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_From = b.From
	x.xxx_hidden_To = b.To
	return m0
}

// Sub-message containing get clock action specification
type ActionGetClock struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionGetClock) Reset() {
	*x = ActionGetClock{}
	mi := &file_pbdriver_models_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetClock) ProtoMessage() {}

func (x *ActionGetClock) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ActionGetClock_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ActionGetClock_builder) Build() *ActionGetClock {
	m0 := &ActionGetClock{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Sub-message containing sync clock action specification
type ActionSyncClock struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionSyncClock) Reset() {
	*x = ActionSyncClock{}
	mi := &file_pbdriver_models_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionSyncClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSyncClock) ProtoMessage() {}

func (x *ActionSyncClock) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ActionSyncClock_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ActionSyncClock_builder) Build() *ActionSyncClock {
	m0 := &ActionSyncClock{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Sub-message containing get relay state action specification
type ActionGetRelayState struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionGetRelayState) Reset() {
	*x = ActionGetRelayState{}
	mi := &file_pbdriver_models_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetRelayState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetRelayState) ProtoMessage() {}

func (x *ActionGetRelayState) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ActionGetRelayState_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ActionGetRelayState_builder) Build() *ActionGetRelayState {
	m0 := &ActionGetRelayState{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Sub-message containing set relay state action specification
type ActionSetRelayState struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionSetRelayState) Reset() {
	*x = ActionSetRelayState{}
	mi := &file_pbdriver_models_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionSetRelayState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSetRelayState) ProtoMessage() {}

func (x *ActionSetRelayState) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ActionSetRelayState_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ActionSetRelayState_builder) Build() *ActionSetRelayState {
	m0 := &ActionSetRelayState{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Sub-message containing get disconnector state action specification
type ActionGetDisconnectorState struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionGetDisconnectorState) Reset() {
	*x = ActionGetDisconnectorState{}
	mi := &file_pbdriver_models_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetDisconnectorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetDisconnectorState) ProtoMessage() {}

func (x *ActionGetDisconnectorState) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ActionGetDisconnectorState_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ActionGetDisconnectorState_builder) Build() *ActionGetDisconnectorState {
	m0 := &ActionGetDisconnectorState{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Sub-message containing set disconnector state action specification
type ActionSetDisconnectorState struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionSetDisconnectorState) Reset() {
	*x = ActionSetDisconnectorState{}
	mi := &file_pbdriver_models_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionSetDisconnectorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSetDisconnectorState) ProtoMessage() {}

func (x *ActionSetDisconnectorState) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ActionSetDisconnectorState_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ActionSetDisconnectorState_builder) Build() *ActionSetDisconnectorState {
	m0 := &ActionSetDisconnectorState{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Sub-message containing get tou action specification
type ActionGetTou struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionGetTou) Reset() {
	*x = ActionGetTou{}
	mi := &file_pbdriver_models_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetTou) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetTou) ProtoMessage() {}

func (x *ActionGetTou) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ActionGetTou_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ActionGetTou_builder) Build() *ActionGetTou {
	m0 := &ActionGetTou{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Sub-message containing set tou action specification
type ActionSetTou struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionSetTou) Reset() {
	*x = ActionSetTou{}
	mi := &file_pbdriver_models_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionSetTou) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSetTou) ProtoMessage() {}

func (x *ActionSetTou) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ActionSetTou_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ActionSetTou_builder) Build() *ActionSetTou {
	m0 := &ActionSetTou{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Sub-message containing get limiter action specification
type ActionGetLimiter struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionGetLimiter) Reset() {
	*x = ActionGetLimiter{}
	mi := &file_pbdriver_models_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetLimiter) ProtoMessage() {}

func (x *ActionGetLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ActionGetLimiter_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ActionGetLimiter_builder) Build() *ActionGetLimiter {
	m0 := &ActionGetLimiter{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Sub-message containing set limiter action specification
type ActionSetLimiter struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionSetLimiter) Reset() {
	*x = ActionSetLimiter{}
	mi := &file_pbdriver_models_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionSetLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSetLimiter) ProtoMessage() {}

func (x *ActionSetLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ActionSetLimiter_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ActionSetLimiter_builder) Build() *ActionSetLimiter {
	m0 := &ActionSetLimiter{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Sub-message containing reset billing period action specification
type ActionResetBillingPeriod struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionResetBillingPeriod) Reset() {
	*x = ActionResetBillingPeriod{}
	mi := &file_pbdriver_models_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionResetBillingPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResetBillingPeriod) ProtoMessage() {}

func (x *ActionResetBillingPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ActionResetBillingPeriod_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ActionResetBillingPeriod_builder) Build() *ActionResetBillingPeriod {
	m0 := &ActionResetBillingPeriod{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Sub-message containing firmware update action specification
type ActionFwUpdate struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionFwUpdate) Reset() {
	*x = ActionFwUpdate{}
	mi := &file_pbdriver_models_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionFwUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionFwUpdate) ProtoMessage() {}

func (x *ActionFwUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type ActionFwUpdate_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 ActionFwUpdate_builder) Build() *ActionFwUpdate {
	m0 := &ActionFwUpdate{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

// Sub-message containing single attribute value specification
type AttributeValue struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Value isAttributeValue_Value `protobuf_oneof:"value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AttributeValue) Reset() {
	*x = AttributeValue{}
	mi := &file_pbdriver_models_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttributeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeValue) ProtoMessage() {}

func (x *AttributeValue) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AttributeValue) GetStrValue() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*attributeValue_StrValue); ok {
			return x.StrValue
		}
	}
	return ""
}

func (x *AttributeValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*attributeValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *AttributeValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*attributeValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *AttributeValue) GetBinaryValue() []byte {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*attributeValue_BinaryValue); ok {
			return x.BinaryValue
		}
	}
	return nil
}

func (x *AttributeValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*attributeValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *AttributeValue) SetStrValue(v string) {
	x.xxx_hidden_Value = &attributeValue_StrValue{v}
}

func (x *AttributeValue) SetIntValue(v int64) {
	x.xxx_hidden_Value = &attributeValue_IntValue{v}
}

func (x *AttributeValue) SetDoubleValue(v float64) {
	x.xxx_hidden_Value = &attributeValue_DoubleValue{v}
}

func (x *AttributeValue) SetBinaryValue(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Value = &attributeValue_BinaryValue{v}
}

func (x *AttributeValue) SetBoolValue(v bool) {
	x.xxx_hidden_Value = &attributeValue_BoolValue{v}
}

func (x *AttributeValue) HasValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Value != nil
}

func (x *AttributeValue) HasStrValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*attributeValue_StrValue)
	return ok
}

func (x *AttributeValue) HasIntValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*attributeValue_IntValue)
	return ok
}

func (x *AttributeValue) HasDoubleValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*attributeValue_DoubleValue)
	return ok
}

func (x *AttributeValue) HasBinaryValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*attributeValue_BinaryValue)
	return ok
}

func (x *AttributeValue) HasBoolValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*attributeValue_BoolValue)
	return ok
}

func (x *AttributeValue) ClearValue() {
	x.xxx_hidden_Value = nil
}

func (x *AttributeValue) ClearStrValue() {
	if _, ok := x.xxx_hidden_Value.(*attributeValue_StrValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AttributeValue) ClearIntValue() {
	if _, ok := x.xxx_hidden_Value.(*attributeValue_IntValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AttributeValue) ClearDoubleValue() {
	if _, ok := x.xxx_hidden_Value.(*attributeValue_DoubleValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AttributeValue) ClearBinaryValue() {
	if _, ok := x.xxx_hidden_Value.(*attributeValue_BinaryValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AttributeValue) ClearBoolValue() {
	if _, ok := x.xxx_hidden_Value.(*attributeValue_BoolValue); ok {
		x.xxx_hidden_Value = nil
	}
}

const AttributeValue_Value_not_set_case case_AttributeValue_Value = 0
const AttributeValue_StrValue_case case_AttributeValue_Value = 1
const AttributeValue_IntValue_case case_AttributeValue_Value = 2
const AttributeValue_DoubleValue_case case_AttributeValue_Value = 3
const AttributeValue_BinaryValue_case case_AttributeValue_Value = 4
const AttributeValue_BoolValue_case case_AttributeValue_Value = 5

func (x *AttributeValue) WhichValue() case_AttributeValue_Value {
	if x == nil {
		return AttributeValue_Value_not_set_case
	}
	switch x.xxx_hidden_Value.(type) {
	case *attributeValue_StrValue:
		return AttributeValue_StrValue_case
	case *attributeValue_IntValue:
		return AttributeValue_IntValue_case
	case *attributeValue_DoubleValue:
		return AttributeValue_DoubleValue_case
	case *attributeValue_BinaryValue:
		return AttributeValue_BinaryValue_case
	case *attributeValue_BoolValue:
		return AttributeValue_BoolValue_case
	default:
		return AttributeValue_Value_not_set_case
	}
}

type AttributeValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Value:
	StrValue    *string
	IntValue    *int64
	DoubleValue *float64
	BinaryValue []byte
	BoolValue   *bool
	// -- end of xxx_hidden_Value
}

func (b0 AttributeValue_builder) Build() *AttributeValue {
	m0 := &AttributeValue{}
	b, x := &b0, m0
	_, _ = b, x
	if b.StrValue != nil {
		x.xxx_hidden_Value = &attributeValue_StrValue{*b.StrValue}
	}
	if b.IntValue != nil {
		x.xxx_hidden_Value = &attributeValue_IntValue{*b.IntValue}
	}
	if b.DoubleValue != nil {
		x.xxx_hidden_Value = &attributeValue_DoubleValue{*b.DoubleValue}
	}
	if b.BinaryValue != nil {
		x.xxx_hidden_Value = &attributeValue_BinaryValue{b.BinaryValue}
	}
	if b.BoolValue != nil {
		x.xxx_hidden_Value = &attributeValue_BoolValue{*b.BoolValue}
	}
	return m0
}

type case_AttributeValue_Value protoreflect.FieldNumber

func (x case_AttributeValue_Value) String() string {
	md := file_pbdriver_models_proto_msgTypes[39].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isAttributeValue_Value interface {
	isAttributeValue_Value()
}

type attributeValue_StrValue struct {
	StrValue string `protobuf:"bytes,1,opt,name=str_value,json=strValue,oneof"` // The string-typed value.
}

type attributeValue_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,oneof"` // The integer-typed value.
}

type attributeValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,oneof"` // The double-typed value.
}

type attributeValue_BinaryValue struct {
	BinaryValue []byte `protobuf:"bytes,4,opt,name=binary_value,json=binaryValue,oneof"` // The binary-typed value.
}

type attributeValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,oneof"` // The boolean-typed value.
}

func (*attributeValue_StrValue) isAttributeValue_Value() {}

func (*attributeValue_IntValue) isAttributeValue_Value() {}

func (*attributeValue_DoubleValue) isAttributeValue_Value() {}

func (*attributeValue_BinaryValue) isAttributeValue_Value() {}

func (*attributeValue_BoolValue) isAttributeValue_Value() {}

// Common gRPC response message
type CommonResponse struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Result      ErrorCode              `protobuf:"varint,1,opt,name=result,enum=io.clbs.openhes.pbdriver.ErrorCode" json:"result,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CommonResponse) Reset() {
	*x = CommonResponse{}
	mi := &file_pbdriver_models_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResponse) ProtoMessage() {}

func (x *CommonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CommonResponse) GetResult() ErrorCode {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Result
		}
	}
	return ErrorCode_ERROR_CODE_OK
}

func (x *CommonResponse) SetResult(v ErrorCode) {
	x.xxx_hidden_Result = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *CommonResponse) HasResult() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CommonResponse) ClearResult() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Result = ErrorCode_ERROR_CODE_OK
}

type CommonResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Result *ErrorCode
}

func (b0 CommonResponse_builder) Build() *CommonResponse {
	m0 := &CommonResponse{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Result != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Result = *b.Result
	}
	return m0
}

// Sub-message containing destription for one application protocol, e.g. DLMS_SN.
type ApplicationProtocolTemplate struct {
	state                  protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	xxx_hidden_Protocol    ApplicationProtocol     `protobuf:"varint,2,opt,name=protocol,enum=io.clbs.openhes.pbdriver.ApplicationProtocol" json:"protocol,omitempty"`
	xxx_hidden_Attributes  *[]*AttributeDefinition `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ApplicationProtocolTemplate) Reset() {
	*x = ApplicationProtocolTemplate{}
	mi := &file_pbdriver_models_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationProtocolTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationProtocolTemplate) ProtoMessage() {}

func (x *ApplicationProtocolTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ApplicationProtocolTemplate) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *ApplicationProtocolTemplate) GetProtocol() ApplicationProtocol {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Protocol
		}
	}
	return ApplicationProtocol_APPPROTO_IEC_62056_21
}

func (x *ApplicationProtocolTemplate) GetAttributes() []*AttributeDefinition {
	if x != nil {
		if x.xxx_hidden_Attributes != nil {
			return *x.xxx_hidden_Attributes
		}
	}
	return nil
}

func (x *ApplicationProtocolTemplate) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *ApplicationProtocolTemplate) SetProtocol(v ApplicationProtocol) {
	x.xxx_hidden_Protocol = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *ApplicationProtocolTemplate) SetAttributes(v []*AttributeDefinition) {
	x.xxx_hidden_Attributes = &v
}

func (x *ApplicationProtocolTemplate) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ApplicationProtocolTemplate) HasProtocol() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ApplicationProtocolTemplate) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *ApplicationProtocolTemplate) ClearProtocol() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Protocol = ApplicationProtocol_APPPROTO_IEC_62056_21
}

type ApplicationProtocolTemplate_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique identifier of the application protocol.
	Id *string
	// The application protocol.
	Protocol *ApplicationProtocol
	// The list of attribute definitions for the protocol.
	Attributes []*AttributeDefinition
}

func (b0 ApplicationProtocolTemplate_builder) Build() *ApplicationProtocolTemplate {
	m0 := &ApplicationProtocolTemplate{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Id = b.Id
	}
	if b.Protocol != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Protocol = *b.Protocol
	}
	x.xxx_hidden_Attributes = &b.Attributes
	return m0
}

// Sub-message containing destription for one data link protocol, e.g. HDLC.
type DataLinkTemplate struct {
	state                      protoimpl.MessageState  `protogen:"opaque.v1"`
	xxx_hidden_LinkProtocol    DataLinkProtocol        `protobuf:"varint,1,opt,name=link_protocol,json=linkProtocol,enum=io.clbs.openhes.pbdriver.DataLinkProtocol" json:"link_protocol,omitempty"`
	xxx_hidden_AppProtocolRefs []ApplicationProtocol   `protobuf:"varint,2,rep,packed,name=app_protocol_refs,json=appProtocolRefs,enum=io.clbs.openhes.pbdriver.ApplicationProtocol" json:"app_protocol_refs,omitempty"`
	xxx_hidden_Attributes      *[]*AttributeDefinition `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *DataLinkTemplate) Reset() {
	*x = DataLinkTemplate{}
	mi := &file_pbdriver_models_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataLinkTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLinkTemplate) ProtoMessage() {}

func (x *DataLinkTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DataLinkTemplate) GetLinkProtocol() DataLinkProtocol {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_LinkProtocol
		}
	}
	return DataLinkProtocol_LINKPROTO_IEC_62056_21
}

func (x *DataLinkTemplate) GetAppProtocolRefs() []ApplicationProtocol {
	if x != nil {
		return x.xxx_hidden_AppProtocolRefs
	}
	return nil
}

func (x *DataLinkTemplate) GetAttributes() []*AttributeDefinition {
	if x != nil {
		if x.xxx_hidden_Attributes != nil {
			return *x.xxx_hidden_Attributes
		}
	}
	return nil
}

func (x *DataLinkTemplate) SetLinkProtocol(v DataLinkProtocol) {
	x.xxx_hidden_LinkProtocol = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *DataLinkTemplate) SetAppProtocolRefs(v []ApplicationProtocol) {
	x.xxx_hidden_AppProtocolRefs = v
}

func (x *DataLinkTemplate) SetAttributes(v []*AttributeDefinition) {
	x.xxx_hidden_Attributes = &v
}

func (x *DataLinkTemplate) HasLinkProtocol() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DataLinkTemplate) ClearLinkProtocol() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_LinkProtocol = DataLinkProtocol_LINKPROTO_IEC_62056_21
}

type DataLinkTemplate_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The data link protocol.
	LinkProtocol *DataLinkProtocol
	// The list of application protocol identifiers supported by the driver.
	AppProtocolRefs []ApplicationProtocol
	// The list of attribute definitions related to given data link type (see link_protocol property) and all those will be instantiated for each device.
	Attributes []*AttributeDefinition
}

func (b0 DataLinkTemplate_builder) Build() *DataLinkTemplate {
	m0 := &DataLinkTemplate{}
	b, x := &b0, m0
	_, _ = b, x
	if b.LinkProtocol != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_LinkProtocol = *b.LinkProtocol
	}
	x.xxx_hidden_AppProtocolRefs = b.AppProtocolRefs
	x.xxx_hidden_Attributes = &b.Attributes
	return m0
}

// Sub-message containing destription for one communication type, e.g. TCP/IP.
type CommunicationTemplate struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Type        CommunicationType      `protobuf:"varint,1,opt,name=type,enum=io.clbs.openhes.pbdriver.CommunicationType" json:"type,omitempty"`
	xxx_hidden_Datalinks   *[]*DataLinkTemplate   `protobuf:"bytes,2,rep,name=datalinks" json:"datalinks,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CommunicationTemplate) Reset() {
	*x = CommunicationTemplate{}
	mi := &file_pbdriver_models_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommunicationTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationTemplate) ProtoMessage() {}

func (x *CommunicationTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CommunicationTemplate) GetType() CommunicationType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Type
		}
	}
	return CommunicationType_COMMUNICATION_TYPE_TCPIP
}

func (x *CommunicationTemplate) GetDatalinks() []*DataLinkTemplate {
	if x != nil {
		if x.xxx_hidden_Datalinks != nil {
			return *x.xxx_hidden_Datalinks
		}
	}
	return nil
}

func (x *CommunicationTemplate) SetType(v CommunicationType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *CommunicationTemplate) SetDatalinks(v []*DataLinkTemplate) {
	x.xxx_hidden_Datalinks = &v
}

func (x *CommunicationTemplate) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CommunicationTemplate) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Type = CommunicationType_COMMUNICATION_TYPE_TCPIP
}

type CommunicationTemplate_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The type of the communication.
	Type *CommunicationType
	// The list of data link protocols and their app protocols supported by the driver.
	Datalinks []*DataLinkTemplate
}

func (b0 CommunicationTemplate_builder) Build() *CommunicationTemplate {
	m0 := &CommunicationTemplate{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Type = *b.Type
	}
	x.xxx_hidden_Datalinks = &b.Datalinks
	return m0
}

// Sub-message containing access level definition
type AccessLevelTemplate struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	xxx_hidden_Name        *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *AccessLevelTemplate) Reset() {
	*x = AccessLevelTemplate{}
	mi := &file_pbdriver_models_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLevelTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLevelTemplate) ProtoMessage() {}

func (x *AccessLevelTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AccessLevelTemplate) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *AccessLevelTemplate) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *AccessLevelTemplate) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *AccessLevelTemplate) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *AccessLevelTemplate) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *AccessLevelTemplate) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *AccessLevelTemplate) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *AccessLevelTemplate) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

type AccessLevelTemplate_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id   *string
	Name *string
}

func (b0 AccessLevelTemplate_builder) Build() *AccessLevelTemplate {
	m0 := &AccessLevelTemplate{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Id = b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Name = b.Name
	}
	return m0
}

// Sub-message in driver negotiation request
type DriverTemplates struct {
	state                             protoimpl.MessageState          `protogen:"opaque.v1"`
	xxx_hidden_CommunicationTemplates *[]*CommunicationTemplate       `protobuf:"bytes,1,rep,name=communication_templates,json=communicationTemplates" json:"communication_templates,omitempty"`
	xxx_hidden_AppProtocols           *[]*ApplicationProtocolTemplate `protobuf:"bytes,2,rep,name=app_protocols,json=appProtocols" json:"app_protocols,omitempty"`
	xxx_hidden_ActionAttributes       *[]*JobActionAttributes         `protobuf:"bytes,3,rep,name=action_attributes,json=actionAttributes" json:"action_attributes,omitempty"`
	xxx_hidden_AccessTemplates        *[]*AccessLevelTemplate         `protobuf:"bytes,4,rep,name=access_templates,json=accessTemplates" json:"access_templates,omitempty"`
	xxx_hidden_ActionConstraints      *JobActionContraints            `protobuf:"bytes,5,opt,name=action_constraints,json=actionConstraints" json:"action_constraints,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *DriverTemplates) Reset() {
	*x = DriverTemplates{}
	mi := &file_pbdriver_models_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverTemplates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverTemplates) ProtoMessage() {}

func (x *DriverTemplates) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DriverTemplates) GetCommunicationTemplates() []*CommunicationTemplate {
	if x != nil {
		if x.xxx_hidden_CommunicationTemplates != nil {
			return *x.xxx_hidden_CommunicationTemplates
		}
	}
	return nil
}

func (x *DriverTemplates) GetAppProtocols() []*ApplicationProtocolTemplate {
	if x != nil {
		if x.xxx_hidden_AppProtocols != nil {
			return *x.xxx_hidden_AppProtocols
		}
	}
	return nil
}

func (x *DriverTemplates) GetActionAttributes() []*JobActionAttributes {
	if x != nil {
		if x.xxx_hidden_ActionAttributes != nil {
			return *x.xxx_hidden_ActionAttributes
		}
	}
	return nil
}

func (x *DriverTemplates) GetAccessTemplates() []*AccessLevelTemplate {
	if x != nil {
		if x.xxx_hidden_AccessTemplates != nil {
			return *x.xxx_hidden_AccessTemplates
		}
	}
	return nil
}

func (x *DriverTemplates) GetActionConstraints() *JobActionContraints {
	if x != nil {
		return x.xxx_hidden_ActionConstraints
	}
	return nil
}

func (x *DriverTemplates) SetCommunicationTemplates(v []*CommunicationTemplate) {
	x.xxx_hidden_CommunicationTemplates = &v
}

func (x *DriverTemplates) SetAppProtocols(v []*ApplicationProtocolTemplate) {
	x.xxx_hidden_AppProtocols = &v
}

func (x *DriverTemplates) SetActionAttributes(v []*JobActionAttributes) {
	x.xxx_hidden_ActionAttributes = &v
}

func (x *DriverTemplates) SetAccessTemplates(v []*AccessLevelTemplate) {
	x.xxx_hidden_AccessTemplates = &v
}

func (x *DriverTemplates) SetActionConstraints(v *JobActionContraints) {
	x.xxx_hidden_ActionConstraints = v
}

func (x *DriverTemplates) HasActionConstraints() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ActionConstraints != nil
}

func (x *DriverTemplates) ClearActionConstraints() {
	x.xxx_hidden_ActionConstraints = nil
}

type DriverTemplates_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The templates of the communication options. Every template represents an option how the drivers allows to communicate. The driver can support multiple communication templates.
	CommunicationTemplates []*CommunicationTemplate
	// The templates of the application protocols supported by the driver.
	AppProtocols []*ApplicationProtocolTemplate
	// The templates of the job actions for all supported action types. It must contain every action type supported by the driver once and only once.
	ActionAttributes []*JobActionAttributes
	// The templates of the access levels supported by the driver.
	AccessTemplates []*AccessLevelTemplate
	// The templates of the job actions constraints.
	ActionConstraints *JobActionContraints
}

func (b0 DriverTemplates_builder) Build() *DriverTemplates {
	m0 := &DriverTemplates{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_CommunicationTemplates = &b.CommunicationTemplates
	x.xxx_hidden_AppProtocols = &b.AppProtocols
	x.xxx_hidden_ActionAttributes = &b.ActionAttributes
	x.xxx_hidden_AccessTemplates = &b.AccessTemplates
	x.xxx_hidden_ActionConstraints = b.ActionConstraints
	return m0
}

// Defines a mesasge as a list of strings.
type StringList struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Items []string               `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StringList) Reset() {
	*x = StringList{}
	mi := &file_pbdriver_models_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringList) ProtoMessage() {}

func (x *StringList) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StringList) GetItems() []string {
	if x != nil {
		return x.xxx_hidden_Items
	}
	return nil
}

func (x *StringList) SetItems(v []string) {
	x.xxx_hidden_Items = v
}

type StringList_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The list of strings.
	Items []string
}

func (b0 StringList_builder) Build() *StringList {
	m0 := &StringList{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Items = b.Items
	return m0
}

// Sub-message containing constraints for job actions.
type JobActionContraints struct {
	state                                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_GetRegisterTypeName       map[string]string      `protobuf:"bytes,1,rep,name=get_register_type_name,json=getRegisterTypeName" json:"get_register_type_name,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_GetRegisterTypeAttributes map[string]*StringList `protobuf:"bytes,2,rep,name=get_register_type_attributes,json=getRegisterTypeAttributes" json:"get_register_type_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields                        protoimpl.UnknownFields
	sizeCache                            protoimpl.SizeCache
}

func (x *JobActionContraints) Reset() {
	*x = JobActionContraints{}
	mi := &file_pbdriver_models_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobActionContraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobActionContraints) ProtoMessage() {}

func (x *JobActionContraints) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *JobActionContraints) GetGetRegisterTypeName() map[string]string {
	if x != nil {
		return x.xxx_hidden_GetRegisterTypeName
	}
	return nil
}

func (x *JobActionContraints) GetGetRegisterTypeAttributes() map[string]*StringList {
	if x != nil {
		return x.xxx_hidden_GetRegisterTypeAttributes
	}
	return nil
}

func (x *JobActionContraints) SetGetRegisterTypeName(v map[string]string) {
	x.xxx_hidden_GetRegisterTypeName = v
}

func (x *JobActionContraints) SetGetRegisterTypeAttributes(v map[string]*StringList) {
	x.xxx_hidden_GetRegisterTypeAttributes = v
}

type JobActionContraints_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Contains all the register types & their names in the English language. For example: [gen]="Generic Register", [vqi]="Quality VQI Register"
	// Action: ACTION_TYPE_GET_REGISTER
	GetRegisterTypeName map[string]string
	// Contains all the register types & their attributes. For example: [gen]=["attribute1", "attribute2"], [vqi]=["attribute1", "attribute3"]
	// See JobActionAttributes for the attribute definitions.
	// Action: ACTION_TYPE_GET_REGISTER
	GetRegisterTypeAttributes map[string]*StringList
}

func (b0 JobActionContraints_builder) Build() *JobActionContraints {
	m0 := &JobActionContraints{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_GetRegisterTypeName = b.GetRegisterTypeName
	x.xxx_hidden_GetRegisterTypeAttributes = b.GetRegisterTypeAttributes
	return m0
}

// Taskmaster -> Driver cancel job request message
type CancelJobRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_JobId       *string                `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CancelJobRequest) Reset() {
	*x = CancelJobRequest{}
	mi := &file_pbdriver_models_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobRequest) ProtoMessage() {}

func (x *CancelJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CancelJobRequest) GetJobId() string {
	if x != nil {
		if x.xxx_hidden_JobId != nil {
			return *x.xxx_hidden_JobId
		}
		return ""
	}
	return ""
}

func (x *CancelJobRequest) SetJobId(v string) {
	x.xxx_hidden_JobId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *CancelJobRequest) HasJobId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CancelJobRequest) ClearJobId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_JobId = nil
}

type CancelJobRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	JobId *string
}

func (b0 CancelJobRequest_builder) Build() *CancelJobRequest {
	m0 := &CancelJobRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.JobId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_JobId = b.JobId
	}
	return m0
}

// Driver -> Taskmaster negotiate/health-check request message
type NegotiateRequest struct {
	state                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Version           *string                `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	xxx_hidden_ListeningPort     uint32                 `protobuf:"varint,2,opt,name=listening_port,json=listeningPort" json:"listening_port,omitempty"`
	xxx_hidden_DriverType        *string                `protobuf:"bytes,3,opt,name=driver_type,json=driverType" json:"driver_type,omitempty"`
	xxx_hidden_MaxConcurrentJobs int32                  `protobuf:"varint,4,opt,name=max_concurrent_jobs,json=maxConcurrentJobs" json:"max_concurrent_jobs,omitempty"`
	xxx_hidden_MaxCascadeDepth   uint32                 `protobuf:"varint,5,opt,name=max_cascade_depth,json=maxCascadeDepth" json:"max_cascade_depth,omitempty"`
	xxx_hidden_TypicalMemUsage   int32                  `protobuf:"varint,6,opt,name=typical_mem_usage,json=typicalMemUsage" json:"typical_mem_usage,omitempty"`
	xxx_hidden_Templates         *DriverTemplates       `protobuf:"bytes,7,opt,name=templates" json:"templates,omitempty"`
	xxx_hidden_DisplayName       *string                `protobuf:"bytes,8,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *NegotiateRequest) Reset() {
	*x = NegotiateRequest{}
	mi := &file_pbdriver_models_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NegotiateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NegotiateRequest) ProtoMessage() {}

func (x *NegotiateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *NegotiateRequest) GetVersion() string {
	if x != nil {
		if x.xxx_hidden_Version != nil {
			return *x.xxx_hidden_Version
		}
		return ""
	}
	return ""
}

func (x *NegotiateRequest) GetListeningPort() uint32 {
	if x != nil {
		return x.xxx_hidden_ListeningPort
	}
	return 0
}

func (x *NegotiateRequest) GetDriverType() string {
	if x != nil {
		if x.xxx_hidden_DriverType != nil {
			return *x.xxx_hidden_DriverType
		}
		return ""
	}
	return ""
}

func (x *NegotiateRequest) GetMaxConcurrentJobs() int32 {
	if x != nil {
		return x.xxx_hidden_MaxConcurrentJobs
	}
	return 0
}

func (x *NegotiateRequest) GetMaxCascadeDepth() uint32 {
	if x != nil {
		return x.xxx_hidden_MaxCascadeDepth
	}
	return 0
}

func (x *NegotiateRequest) GetTypicalMemUsage() int32 {
	if x != nil {
		return x.xxx_hidden_TypicalMemUsage
	}
	return 0
}

func (x *NegotiateRequest) GetTemplates() *DriverTemplates {
	if x != nil {
		return x.xxx_hidden_Templates
	}
	return nil
}

func (x *NegotiateRequest) GetDisplayName() string {
	if x != nil {
		if x.xxx_hidden_DisplayName != nil {
			return *x.xxx_hidden_DisplayName
		}
		return ""
	}
	return ""
}

func (x *NegotiateRequest) SetVersion(v string) {
	x.xxx_hidden_Version = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 8)
}

func (x *NegotiateRequest) SetListeningPort(v uint32) {
	x.xxx_hidden_ListeningPort = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 8)
}

func (x *NegotiateRequest) SetDriverType(v string) {
	x.xxx_hidden_DriverType = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 8)
}

func (x *NegotiateRequest) SetMaxConcurrentJobs(v int32) {
	x.xxx_hidden_MaxConcurrentJobs = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 8)
}

func (x *NegotiateRequest) SetMaxCascadeDepth(v uint32) {
	x.xxx_hidden_MaxCascadeDepth = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 8)
}

func (x *NegotiateRequest) SetTypicalMemUsage(v int32) {
	x.xxx_hidden_TypicalMemUsage = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 8)
}

func (x *NegotiateRequest) SetTemplates(v *DriverTemplates) {
	x.xxx_hidden_Templates = v
}

func (x *NegotiateRequest) SetDisplayName(v string) {
	x.xxx_hidden_DisplayName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 8)
}

func (x *NegotiateRequest) HasVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *NegotiateRequest) HasListeningPort() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *NegotiateRequest) HasDriverType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *NegotiateRequest) HasMaxConcurrentJobs() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *NegotiateRequest) HasMaxCascadeDepth() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *NegotiateRequest) HasTypicalMemUsage() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *NegotiateRequest) HasTemplates() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Templates != nil
}

func (x *NegotiateRequest) HasDisplayName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *NegotiateRequest) ClearVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Version = nil
}

func (x *NegotiateRequest) ClearListeningPort() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_ListeningPort = 0
}

func (x *NegotiateRequest) ClearDriverType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_DriverType = nil
}

func (x *NegotiateRequest) ClearMaxConcurrentJobs() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_MaxConcurrentJobs = 0
}

func (x *NegotiateRequest) ClearMaxCascadeDepth() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_MaxCascadeDepth = 0
}

func (x *NegotiateRequest) ClearTypicalMemUsage() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_TypicalMemUsage = 0
}

func (x *NegotiateRequest) ClearTemplates() {
	x.xxx_hidden_Templates = nil
}

func (x *NegotiateRequest) ClearDisplayName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_DisplayName = nil
}

type NegotiateRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The driver version. The format is not defined. The driver itself is versioned by the docker image tags so this value shall be either the same (set during the image build) or any useful user-readable version string.
	Version *string
	// The port the driver's gRPC will listen on.
	ListeningPort *uint32
	// The technical/internal ID of the driver.
	DriverType *string
	// The maximum number of concurrent jobs the driver can handle. The value 0 is not allowed, the maximum number respect typical_mem_usage not to overgrow the memory resources!
	MaxConcurrentJobs *int32
	// The maximum cascade depth the driver can handle. Number 1 means that the driver cannot handle cascading jobs, 2 means that the driver can handle cascading jobs with one level of depth, etc.
	// The value 0 means that the driver can handle any number of cascading jobs.
	MaxCascadeDepth *uint32
	// The typical memory usage of the driver in MB.
	TypicalMemUsage *int32
	// The connection and action templates.
	Templates *DriverTemplates
	// The display name of the driver. Must be in format '<manufacturer> <device_type> [<device_type_version>]'.
	// It must respect upper/lower characters.
	// The generic drivers, such as 'cybros labs generic', must be named as '<driver_company_name> generic'.
	//
	// Examples: 'Addax NP73E', 'cybros labs generic', 'Landis+Gyr S650 v2'
	DisplayName *string
}

func (b0 NegotiateRequest_builder) Build() *NegotiateRequest {
	m0 := &NegotiateRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Version != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 8)
		x.xxx_hidden_Version = b.Version
	}
	if b.ListeningPort != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 8)
		x.xxx_hidden_ListeningPort = *b.ListeningPort
	}
	if b.DriverType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 8)
		x.xxx_hidden_DriverType = b.DriverType
	}
	if b.MaxConcurrentJobs != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 8)
		x.xxx_hidden_MaxConcurrentJobs = *b.MaxConcurrentJobs
	}
	if b.MaxCascadeDepth != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 8)
		x.xxx_hidden_MaxCascadeDepth = *b.MaxCascadeDepth
	}
	if b.TypicalMemUsage != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 8)
		x.xxx_hidden_TypicalMemUsage = *b.TypicalMemUsage
	}
	x.xxx_hidden_Templates = b.Templates
	if b.DisplayName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 8)
		x.xxx_hidden_DisplayName = b.DisplayName
	}
	return m0
}

// Addon
type DeviceConnectionInfo struct {
	state                        protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_CommunicationUnit *ConnectionInfo            `protobuf:"bytes,1,opt,name=communication_unit,json=communicationUnit" json:"communication_unit,omitempty"`
	xxx_hidden_AppProtocol       ApplicationProtocol        `protobuf:"varint,2,opt,name=app_protocol,json=appProtocol,enum=io.clbs.openhes.pbdriver.ApplicationProtocol" json:"app_protocol,omitempty"`
	xxx_hidden_DeviceAttributes  map[string]*AttributeValue `protobuf:"bytes,3,rep,name=device_attributes,json=deviceAttributes" json:"device_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *DeviceConnectionInfo) Reset() {
	*x = DeviceConnectionInfo{}
	mi := &file_pbdriver_models_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceConnectionInfo) ProtoMessage() {}

func (x *DeviceConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeviceConnectionInfo) GetCommunicationUnit() *ConnectionInfo {
	if x != nil {
		return x.xxx_hidden_CommunicationUnit
	}
	return nil
}

func (x *DeviceConnectionInfo) GetAppProtocol() ApplicationProtocol {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_AppProtocol
		}
	}
	return ApplicationProtocol_APPPROTO_IEC_62056_21
}

func (x *DeviceConnectionInfo) GetDeviceAttributes() map[string]*AttributeValue {
	if x != nil {
		return x.xxx_hidden_DeviceAttributes
	}
	return nil
}

func (x *DeviceConnectionInfo) SetCommunicationUnit(v *ConnectionInfo) {
	x.xxx_hidden_CommunicationUnit = v
}

func (x *DeviceConnectionInfo) SetAppProtocol(v ApplicationProtocol) {
	x.xxx_hidden_AppProtocol = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *DeviceConnectionInfo) SetDeviceAttributes(v map[string]*AttributeValue) {
	x.xxx_hidden_DeviceAttributes = v
}

func (x *DeviceConnectionInfo) HasCommunicationUnit() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CommunicationUnit != nil
}

func (x *DeviceConnectionInfo) HasAppProtocol() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DeviceConnectionInfo) ClearCommunicationUnit() {
	x.xxx_hidden_CommunicationUnit = nil
}

func (x *DeviceConnectionInfo) ClearAppProtocol() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_AppProtocol = ApplicationProtocol_APPPROTO_IEC_62056_21
}

type DeviceConnectionInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	CommunicationUnit *ConnectionInfo
	AppProtocol       *ApplicationProtocol
	DeviceAttributes  map[string]*AttributeValue
}

func (b0 DeviceConnectionInfo_builder) Build() *DeviceConnectionInfo {
	m0 := &DeviceConnectionInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_CommunicationUnit = b.CommunicationUnit
	if b.AppProtocol != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_AppProtocol = *b.AppProtocol
	}
	x.xxx_hidden_DeviceAttributes = b.DeviceAttributes
	return m0
}

// Addon for DB
type ListOfModemInfo struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Items *[]*ModemInfo          `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ListOfModemInfo) Reset() {
	*x = ListOfModemInfo{}
	mi := &file_pbdriver_models_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOfModemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfModemInfo) ProtoMessage() {}

func (x *ListOfModemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListOfModemInfo) GetItems() []*ModemInfo {
	if x != nil {
		if x.xxx_hidden_Items != nil {
			return *x.xxx_hidden_Items
		}
	}
	return nil
}

func (x *ListOfModemInfo) SetItems(v []*ModemInfo) {
	x.xxx_hidden_Items = &v
}

type ListOfModemInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Items []*ModemInfo
}

func (b0 ListOfModemInfo_builder) Build() *ListOfModemInfo {
	m0 := &ListOfModemInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Items = &b.Items
	return m0
}

// Addon for DB
type ListOfConnectionInfo struct {
	state            protoimpl.MessageState   `protogen:"opaque.v1"`
	xxx_hidden_Items *[]*DeviceConnectionInfo `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ListOfConnectionInfo) Reset() {
	*x = ListOfConnectionInfo{}
	mi := &file_pbdriver_models_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOfConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfConnectionInfo) ProtoMessage() {}

func (x *ListOfConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_models_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListOfConnectionInfo) GetItems() []*DeviceConnectionInfo {
	if x != nil {
		if x.xxx_hidden_Items != nil {
			return *x.xxx_hidden_Items
		}
	}
	return nil
}

func (x *ListOfConnectionInfo) SetItems(v []*DeviceConnectionInfo) {
	x.xxx_hidden_Items = &v
}

type ListOfConnectionInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Items []*DeviceConnectionInfo
}

func (b0 ListOfConnectionInfo_builder) Build() *ListOfConnectionInfo {
	m0 := &ListOfConnectionInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Items = &b.Items
	return m0
}

var File_pbdriver_models_proto protoreflect.FileDescriptor

var file_pbdriver_models_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa7, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x3f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x03,
	0x6a, 0x6f, 0x62, 0x12, 0x48, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x14, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x82, 0x01, 0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7a, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x6b, 0x52, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x6b, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x0d,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3e, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x9b, 0x01,
	0x0a, 0x0c, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x0d,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x7a, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x54, 0x7a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x87, 0x03, 0x0a, 0x13, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4d,
	0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9e, 0x01, 0x0a, 0x13, 0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x22, 0xa1, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x6a, 0x6f, 0x62, 0x73, 0x22, 0xfd, 0x03, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f,
	0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x69, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x44, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6a, 0x6f, 0x62,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x1a, 0x6d, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x6d, 0x6f, 0x78, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x78, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x78,
	0x61, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x22, 0xf2,
	0x02, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x74, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x74, 0x5f, 0x68,
	0x61, 0x6e, 0x67, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x48,
	0x61, 0x6e, 0x67, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x74, 0x5f, 0x65, 0x73, 0x63, 0x61,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x45, 0x73, 0x63, 0x61,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x74, 0x5f, 0x64, 0x73, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x61, 0x74, 0x44, 0x73, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x74, 0x63, 0x70, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x54, 0x63, 0x70, 0x49, 0x70, 0x48, 0x00, 0x52, 0x05, 0x74, 0x63, 0x70, 0x69, 0x70, 0x42,
	0x12, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xbb, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a, 0x09, 0x62, 0x61, 0x75, 0x64, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x61, 0x75, 0x64, 0x52, 0x61, 0x74, 0x65, 0x52, 0x08, 0x62, 0x61, 0x75, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x44, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x62, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x74, 0x73, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x69, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x62, 0x69, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x6f, 0x70, 0x42, 0x69, 0x74, 0x73, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x69, 0x74,
	0x73, 0x22, 0xa0, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x05, 0x74, 0x63, 0x70, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x54, 0x63, 0x70, 0x49, 0x70, 0x48, 0x00, 0x52, 0x05, 0x74, 0x63, 0x70, 0x69,
	0x70, 0x12, 0x52, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x60, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4f, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x4f, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x63, 0x70, 0x49,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x22, 0x44, 0x0a, 0x1a, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x6c, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x78, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x22,
	0x8c, 0x02, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x4a, 0x6f, 0x62, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0xdf,
	0x0c, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x50,
	0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x6c, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x69,
	0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x72, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x74, 0x49, 0x72, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65, 0x74, 0x49, 0x72, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x67, 0x65, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x09, 0x67, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4a,
	0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x57, 0x0a, 0x0f, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x16,
	0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x16, 0x73, 0x65,
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f,
	0x74, 0x6f, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x75, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x12, 0x41, 0x0a, 0x07, 0x73,
	0x65, 0x74, 0x5f, 0x74, 0x6f, 0x75, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x54, 0x6f, 0x75, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x12, 0x4d,
	0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a,
	0x0b, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x14,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00,
	0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x47, 0x0a, 0x09, 0x66, 0x77, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x67, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x13, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x22, 0x78, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22,
	0x77, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x72, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x15, 0x0a, 0x13,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x22, 0x0e, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x22, 0x1a,
	0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x42, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xc2, 0x01, 0x0a,
	0x0e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1d, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x4d, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xc7, 0x01, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x49, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x4d, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x10, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x4f, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x59, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x66, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22,
	0x39, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xeb, 0x03, 0x0a, 0x0f, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x68,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x58, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x12, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x22, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xde, 0x03, 0x0a,
	0x13, 0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x7b, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x8d, 0x01, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x67, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x1a, 0x46, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x72, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a,
	0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0xe8, 0x02, 0x0a, 0x10, 0x4e, 0x65, 0x67,
	0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x5f, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x43,
	0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x4d,
	0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xa3, 0x03, 0x0a, 0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x12,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x71, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x6d, 0x0a, 0x15, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5c, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x66, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x44, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x2a, 0x69, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x41, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x50, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x44, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x04,
	0x2a, 0xcb, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x61, 0x75, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x55,
	0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x31, 0x31, 0x30, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x33, 0x30, 0x30, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x36, 0x30, 0x30,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x31, 0x32, 0x30, 0x30, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x32, 0x34, 0x30, 0x30, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41,
	0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x34, 0x38, 0x30, 0x30, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x39, 0x36, 0x30, 0x30,
	0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x31, 0x34, 0x34, 0x30, 0x30, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x55, 0x44, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x31, 0x39, 0x32, 0x30, 0x30, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f,
	0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x33, 0x38, 0x34, 0x30, 0x30, 0x10,
	0x09, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x35,
	0x37, 0x36, 0x30, 0x30, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x31, 0x31, 0x35, 0x32, 0x30, 0x30, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10,
	0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x32, 0x33, 0x30, 0x34, 0x30, 0x30,
	0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x34, 0x36, 0x30, 0x38, 0x30, 0x30, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x55, 0x44,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x39, 0x32, 0x31, 0x36, 0x30, 0x30, 0x10, 0x0e, 0x2a, 0x5a,
	0x0a, 0x14, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x69, 0x74, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x42,
	0x49, 0x54, 0x53, 0x5f, 0x35, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x42, 0x49, 0x54, 0x53, 0x5f, 0x36, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x42, 0x49, 0x54, 0x53, 0x5f, 0x37, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x42, 0x49, 0x54, 0x53, 0x5f, 0x38, 0x10, 0x03, 0x2a, 0x4b, 0x0a, 0x14, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x69,
	0x74, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x42, 0x49, 0x54, 0x53, 0x5f,
	0x31, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x42, 0x49, 0x54, 0x53,
	0x5f, 0x31, 0x5f, 0x35, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x42,
	0x49, 0x54, 0x53, 0x5f, 0x32, 0x10, 0x02, 0x2a, 0xc1, 0x01, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x42, 0x5f, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x30, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4a,
	0x4f, 0x42, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x31, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x42, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x32, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x42, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x42, 0x5f, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4a,
	0x4f, 0x42, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x35, 0x10, 0x05, 0x12,
	0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x42, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x36, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x42, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x42, 0x5f, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x38, 0x10, 0x08, 0x2a, 0xd0, 0x01, 0x0a, 0x0d,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50,
	0x5f, 0x54, 0x5a, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x06, 0x2a, 0x8b,
	0x04, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x52, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x10,
	0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x0b, 0x12, 0x1f, 0x0a,
	0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x14, 0x12, 0x1f,
	0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x15, 0x12,
	0x26, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x16, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x17, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x54, 0x4f, 0x55, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x55, 0x10,
	0x19, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x52, 0x10, 0x1a, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x52, 0x10, 0x1b, 0x12, 0x24, 0x0a, 0x20, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10,
	0x28, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x57, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x32, 0x2a, 0x8b, 0x01, 0x0a,
	0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x2a, 0x97, 0x01, 0x0a, 0x0c, 0x4a,
	0x6f, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4a,
	0x4f, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x4a, 0x4f, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x4a, 0x4f, 0x42, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x4a, 0x4f,
	0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x54,
	0x41, 0x4c, 0x10, 0x09, 0x2a, 0x34, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0xca, 0x01, 0x0a, 0x11, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x43, 0x50, 0x49, 0x50, 0x10, 0x00, 0x12, 0x21,
	0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10,
	0x01, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23,
	0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d,
	0x4f, 0x58, 0x41, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x63, 0x2a, 0xa7, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x16,
	0x4c, 0x49, 0x4e, 0x4b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x49, 0x45, 0x43, 0x5f, 0x36, 0x32,
	0x30, 0x35, 0x36, 0x5f, 0x32, 0x31, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4e, 0x4b,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x48, 0x44, 0x4c, 0x43, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x4c, 0x49, 0x4e, 0x4b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x53, 0x45, 0x4d, 0x5f,
	0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x49, 0x4e,
	0x4b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x4f, 0x44, 0x42, 0x55, 0x53, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4e, 0x4b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x42, 0x55,
	0x53, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x49, 0x4e, 0x4b, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x63, 0x2a, 0xae, 0x01, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x50, 0x50,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x49, 0x45, 0x43, 0x5f, 0x36, 0x32, 0x30, 0x35, 0x36, 0x5f,
	0x32, 0x31, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x50, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x5f, 0x44, 0x4c, 0x4d, 0x53, 0x5f, 0x53, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x50,
	0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x4c, 0x4d, 0x53, 0x5f, 0x4c, 0x4e, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x50, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x43, 0x54,
	0x4d, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x50, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x4c, 0x49, 0x53, 0x32, 0x30, 0x30, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x50, 0x50, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x4e, 0x53, 0x49, 0x5f, 0x43, 0x31, 0x32, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x50, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x51, 0x54, 0x54,
	0x10, 0x06, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x79, 0x62, 0x72, 0x6f, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x68, 0x65, 0x73, 0x2d,
	0x32, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x08,
	0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
}

var file_pbdriver_models_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_pbdriver_models_proto_msgTypes = make([]protoimpl.MessageInfo, 59)
var file_pbdriver_models_proto_goTypes = []any{
	(SerialConfigParity)(0),                // 0: io.clbs.openhes.pbdriver.SerialConfigParity
	(SerialConfigBaudRate)(0),              // 1: io.clbs.openhes.pbdriver.SerialConfigBaudRate
	(SerialConfigDataBits)(0),              // 2: io.clbs.openhes.pbdriver.SerialConfigDataBits
	(SerialConfigStopBits)(0),              // 3: io.clbs.openhes.pbdriver.SerialConfigStopBits
	(JobPriority)(0),                       // 4: io.clbs.openhes.pbdriver.JobPriority
	(AttributeType)(0),                     // 5: io.clbs.openhes.pbdriver.AttributeType
	(ActionType)(0),                        // 6: io.clbs.openhes.pbdriver.ActionType
	(ActionResultCode)(0),                  // 7: io.clbs.openhes.pbdriver.ActionResultCode
	(JobErrorCode)(0),                      // 8: io.clbs.openhes.pbdriver.JobErrorCode
	(ErrorCode)(0),                         // 9: io.clbs.openhes.pbdriver.ErrorCode
	(CommunicationType)(0),                 // 10: io.clbs.openhes.pbdriver.CommunicationType
	(DataLinkProtocol)(0),                  // 11: io.clbs.openhes.pbdriver.DataLinkProtocol
	(ApplicationProtocol)(0),               // 12: io.clbs.openhes.pbdriver.ApplicationProtocol
	(*ProgressUpdate)(nil),                 // 13: io.clbs.openhes.pbdriver.ProgressUpdate
	(*ActionProgressUpdate)(nil),           // 14: io.clbs.openhes.pbdriver.ActionProgressUpdate
	(*JobProgressUpdate)(nil),              // 15: io.clbs.openhes.pbdriver.JobProgressUpdate
	(*ActionData)(nil),                     // 16: io.clbs.openhes.pbdriver.ActionData
	(*ProfileValues)(nil),                  // 17: io.clbs.openhes.pbdriver.ProfileValues
	(*ProfileBlok)(nil),                    // 18: io.clbs.openhes.pbdriver.ProfileBlok
	(*BillingValues)(nil),                  // 19: io.clbs.openhes.pbdriver.BillingValues
	(*BillingValue)(nil),                   // 20: io.clbs.openhes.pbdriver.BillingValue
	(*MeasuredValue)(nil),                  // 21: io.clbs.openhes.pbdriver.MeasuredValue
	(*AttributeDefinition)(nil),            // 22: io.clbs.openhes.pbdriver.AttributeDefinition
	(*JobActionAttributes)(nil),            // 23: io.clbs.openhes.pbdriver.JobActionAttributes
	(*StartJobsRequest)(nil),               // 24: io.clbs.openhes.pbdriver.StartJobsRequest
	(*StartJobData)(nil),                   // 25: io.clbs.openhes.pbdriver.StartJobData
	(*ConnectionTypeControlledSerial)(nil), // 26: io.clbs.openhes.pbdriver.ConnectionTypeControlledSerial
	(*ModemInfo)(nil),                      // 27: io.clbs.openhes.pbdriver.ModemInfo
	(*SerialConfig)(nil),                   // 28: io.clbs.openhes.pbdriver.SerialConfig
	(*ConnectionInfo)(nil),                 // 29: io.clbs.openhes.pbdriver.ConnectionInfo
	(*ConnectionTypeDirectTcpIp)(nil),      // 30: io.clbs.openhes.pbdriver.ConnectionTypeDirectTcpIp
	(*ConnectionTypeModemPool)(nil),        // 31: io.clbs.openhes.pbdriver.ConnectionTypeModemPool
	(*ConnectionTypeSerialDirect)(nil),     // 32: io.clbs.openhes.pbdriver.ConnectionTypeSerialDirect
	(*ConnectionTypeSerialMoxa)(nil),       // 33: io.clbs.openhes.pbdriver.ConnectionTypeSerialMoxa
	(*JobSettings)(nil),                    // 34: io.clbs.openhes.pbdriver.JobSettings
	(*JobAction)(nil),                      // 35: io.clbs.openhes.pbdriver.JobAction
	(*ActionGetRegister)(nil),              // 36: io.clbs.openhes.pbdriver.ActionGetRegister
	(*ActionGetPeriodicalProfile)(nil),     // 37: io.clbs.openhes.pbdriver.ActionGetPeriodicalProfile
	(*ActionGetIrregularProfile)(nil),      // 38: io.clbs.openhes.pbdriver.ActionGetIrregularProfile
	(*ActionGetEvents)(nil),                // 39: io.clbs.openhes.pbdriver.ActionGetEvents
	(*ActionGetClock)(nil),                 // 40: io.clbs.openhes.pbdriver.ActionGetClock
	(*ActionSyncClock)(nil),                // 41: io.clbs.openhes.pbdriver.ActionSyncClock
	(*ActionGetRelayState)(nil),            // 42: io.clbs.openhes.pbdriver.ActionGetRelayState
	(*ActionSetRelayState)(nil),            // 43: io.clbs.openhes.pbdriver.ActionSetRelayState
	(*ActionGetDisconnectorState)(nil),     // 44: io.clbs.openhes.pbdriver.ActionGetDisconnectorState
	(*ActionSetDisconnectorState)(nil),     // 45: io.clbs.openhes.pbdriver.ActionSetDisconnectorState
	(*ActionGetTou)(nil),                   // 46: io.clbs.openhes.pbdriver.ActionGetTou
	(*ActionSetTou)(nil),                   // 47: io.clbs.openhes.pbdriver.ActionSetTou
	(*ActionGetLimiter)(nil),               // 48: io.clbs.openhes.pbdriver.ActionGetLimiter
	(*ActionSetLimiter)(nil),               // 49: io.clbs.openhes.pbdriver.ActionSetLimiter
	(*ActionResetBillingPeriod)(nil),       // 50: io.clbs.openhes.pbdriver.ActionResetBillingPeriod
	(*ActionFwUpdate)(nil),                 // 51: io.clbs.openhes.pbdriver.ActionFwUpdate
	(*AttributeValue)(nil),                 // 52: io.clbs.openhes.pbdriver.AttributeValue
	(*CommonResponse)(nil),                 // 53: io.clbs.openhes.pbdriver.CommonResponse
	(*ApplicationProtocolTemplate)(nil),    // 54: io.clbs.openhes.pbdriver.ApplicationProtocolTemplate
	(*DataLinkTemplate)(nil),               // 55: io.clbs.openhes.pbdriver.DataLinkTemplate
	(*CommunicationTemplate)(nil),          // 56: io.clbs.openhes.pbdriver.CommunicationTemplate
	(*AccessLevelTemplate)(nil),            // 57: io.clbs.openhes.pbdriver.AccessLevelTemplate
	(*DriverTemplates)(nil),                // 58: io.clbs.openhes.pbdriver.DriverTemplates
	(*StringList)(nil),                     // 59: io.clbs.openhes.pbdriver.StringList
	(*JobActionContraints)(nil),            // 60: io.clbs.openhes.pbdriver.JobActionContraints
	(*CancelJobRequest)(nil),               // 61: io.clbs.openhes.pbdriver.CancelJobRequest
	(*NegotiateRequest)(nil),               // 62: io.clbs.openhes.pbdriver.NegotiateRequest
	(*DeviceConnectionInfo)(nil),           // 63: io.clbs.openhes.pbdriver.DeviceConnectionInfo
	(*ListOfModemInfo)(nil),                // 64: io.clbs.openhes.pbdriver.ListOfModemInfo
	(*ListOfConnectionInfo)(nil),           // 65: io.clbs.openhes.pbdriver.ListOfConnectionInfo
	nil,                                    // 66: io.clbs.openhes.pbdriver.AttributeDefinition.OptionsEntry
	nil,                                    // 67: io.clbs.openhes.pbdriver.StartJobData.DeviceAttributesEntry
	nil,                                    // 68: io.clbs.openhes.pbdriver.JobAction.AttributesEntry
	nil,                                    // 69: io.clbs.openhes.pbdriver.JobActionContraints.GetRegisterTypeNameEntry
	nil,                                    // 70: io.clbs.openhes.pbdriver.JobActionContraints.GetRegisterTypeAttributesEntry
	nil,                                    // 71: io.clbs.openhes.pbdriver.DeviceConnectionInfo.DeviceAttributesEntry
	(*emptypb.Empty)(nil),                  // 72: google.protobuf.Empty
	(*timestamppb.Timestamp)(nil),          // 73: google.protobuf.Timestamp
}
var file_pbdriver_models_proto_depIdxs = []int32{
	15, // 0: io.clbs.openhes.pbdriver.ProgressUpdate.job:type_name -> io.clbs.openhes.pbdriver.JobProgressUpdate
	14, // 1: io.clbs.openhes.pbdriver.ProgressUpdate.action:type_name -> io.clbs.openhes.pbdriver.ActionProgressUpdate
	7,  // 2: io.clbs.openhes.pbdriver.ActionProgressUpdate.code:type_name -> io.clbs.openhes.pbdriver.ActionResultCode
	16, // 3: io.clbs.openhes.pbdriver.ActionProgressUpdate.data:type_name -> io.clbs.openhes.pbdriver.ActionData
	8,  // 4: io.clbs.openhes.pbdriver.JobProgressUpdate.code:type_name -> io.clbs.openhes.pbdriver.JobErrorCode
	72, // 5: io.clbs.openhes.pbdriver.ActionData.nodata:type_name -> google.protobuf.Empty
	19, // 6: io.clbs.openhes.pbdriver.ActionData.billings:type_name -> io.clbs.openhes.pbdriver.BillingValues
	17, // 7: io.clbs.openhes.pbdriver.ActionData.profile:type_name -> io.clbs.openhes.pbdriver.ProfileValues
	18, // 8: io.clbs.openhes.pbdriver.ProfileValues.blocks:type_name -> io.clbs.openhes.pbdriver.ProfileBlok
	73, // 9: io.clbs.openhes.pbdriver.ProfileBlok.start_timestamp:type_name -> google.protobuf.Timestamp
	21, // 10: io.clbs.openhes.pbdriver.ProfileBlok.values:type_name -> io.clbs.openhes.pbdriver.MeasuredValue
	20, // 11: io.clbs.openhes.pbdriver.BillingValues.values:type_name -> io.clbs.openhes.pbdriver.BillingValue
	73, // 12: io.clbs.openhes.pbdriver.BillingValue.timestamp:type_name -> google.protobuf.Timestamp
	21, // 13: io.clbs.openhes.pbdriver.BillingValue.value:type_name -> io.clbs.openhes.pbdriver.MeasuredValue
	73, // 14: io.clbs.openhes.pbdriver.MeasuredValue.timestamp_value:type_name -> google.protobuf.Timestamp
	5,  // 15: io.clbs.openhes.pbdriver.AttributeDefinition.type:type_name -> io.clbs.openhes.pbdriver.AttributeType
	52, // 16: io.clbs.openhes.pbdriver.AttributeDefinition.default_value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	66, // 17: io.clbs.openhes.pbdriver.AttributeDefinition.options:type_name -> io.clbs.openhes.pbdriver.AttributeDefinition.OptionsEntry
	6,  // 18: io.clbs.openhes.pbdriver.JobActionAttributes.type:type_name -> io.clbs.openhes.pbdriver.ActionType
	22, // 19: io.clbs.openhes.pbdriver.JobActionAttributes.attributes:type_name -> io.clbs.openhes.pbdriver.AttributeDefinition
	29, // 20: io.clbs.openhes.pbdriver.StartJobsRequest.connection_info:type_name -> io.clbs.openhes.pbdriver.ConnectionInfo
	25, // 21: io.clbs.openhes.pbdriver.StartJobsRequest.jobs:type_name -> io.clbs.openhes.pbdriver.StartJobData
	67, // 22: io.clbs.openhes.pbdriver.StartJobData.device_attributes:type_name -> io.clbs.openhes.pbdriver.StartJobData.DeviceAttributesEntry
	34, // 23: io.clbs.openhes.pbdriver.StartJobData.job_settings:type_name -> io.clbs.openhes.pbdriver.JobSettings
	35, // 24: io.clbs.openhes.pbdriver.StartJobData.job_actions:type_name -> io.clbs.openhes.pbdriver.JobAction
	12, // 25: io.clbs.openhes.pbdriver.StartJobData.app_protocol:type_name -> io.clbs.openhes.pbdriver.ApplicationProtocol
	32, // 26: io.clbs.openhes.pbdriver.ConnectionTypeControlledSerial.direct:type_name -> io.clbs.openhes.pbdriver.ConnectionTypeSerialDirect
	33, // 27: io.clbs.openhes.pbdriver.ConnectionTypeControlledSerial.moxa:type_name -> io.clbs.openhes.pbdriver.ConnectionTypeSerialMoxa
	30, // 28: io.clbs.openhes.pbdriver.ModemInfo.tcpip:type_name -> io.clbs.openhes.pbdriver.ConnectionTypeDirectTcpIp
	1,  // 29: io.clbs.openhes.pbdriver.SerialConfig.baud_rate:type_name -> io.clbs.openhes.pbdriver.SerialConfigBaudRate
	0,  // 30: io.clbs.openhes.pbdriver.SerialConfig.parity:type_name -> io.clbs.openhes.pbdriver.SerialConfigParity
	2,  // 31: io.clbs.openhes.pbdriver.SerialConfig.data_bits:type_name -> io.clbs.openhes.pbdriver.SerialConfigDataBits
	3,  // 32: io.clbs.openhes.pbdriver.SerialConfig.stop_bits:type_name -> io.clbs.openhes.pbdriver.SerialConfigStopBits
	30, // 33: io.clbs.openhes.pbdriver.ConnectionInfo.tcpip:type_name -> io.clbs.openhes.pbdriver.ConnectionTypeDirectTcpIp
	31, // 34: io.clbs.openhes.pbdriver.ConnectionInfo.modem_pool:type_name -> io.clbs.openhes.pbdriver.ConnectionTypeModemPool
	26, // 35: io.clbs.openhes.pbdriver.ConnectionInfo.serial_over_ip:type_name -> io.clbs.openhes.pbdriver.ConnectionTypeControlledSerial
	11, // 36: io.clbs.openhes.pbdriver.ConnectionInfo.link_protocol:type_name -> io.clbs.openhes.pbdriver.DataLinkProtocol
	27, // 37: io.clbs.openhes.pbdriver.ConnectionTypeModemPool.modem:type_name -> io.clbs.openhes.pbdriver.ModemInfo
	4,  // 38: io.clbs.openhes.pbdriver.JobSettings.priority:type_name -> io.clbs.openhes.pbdriver.JobPriority
	73, // 39: io.clbs.openhes.pbdriver.JobSettings.expires_at:type_name -> google.protobuf.Timestamp
	68, // 40: io.clbs.openhes.pbdriver.JobAction.attributes:type_name -> io.clbs.openhes.pbdriver.JobAction.AttributesEntry
	36, // 41: io.clbs.openhes.pbdriver.JobAction.get_register:type_name -> io.clbs.openhes.pbdriver.ActionGetRegister
	37, // 42: io.clbs.openhes.pbdriver.JobAction.get_periodical_profile:type_name -> io.clbs.openhes.pbdriver.ActionGetPeriodicalProfile
	38, // 43: io.clbs.openhes.pbdriver.JobAction.get_irregular_profile:type_name -> io.clbs.openhes.pbdriver.ActionGetIrregularProfile
	39, // 44: io.clbs.openhes.pbdriver.JobAction.get_events:type_name -> io.clbs.openhes.pbdriver.ActionGetEvents
	40, // 45: io.clbs.openhes.pbdriver.JobAction.get_clock:type_name -> io.clbs.openhes.pbdriver.ActionGetClock
	41, // 46: io.clbs.openhes.pbdriver.JobAction.sync_clock:type_name -> io.clbs.openhes.pbdriver.ActionSyncClock
	42, // 47: io.clbs.openhes.pbdriver.JobAction.get_relay_state:type_name -> io.clbs.openhes.pbdriver.ActionGetRelayState
	43, // 48: io.clbs.openhes.pbdriver.JobAction.set_relay_state:type_name -> io.clbs.openhes.pbdriver.ActionSetRelayState
	44, // 49: io.clbs.openhes.pbdriver.JobAction.get_disconnector_state:type_name -> io.clbs.openhes.pbdriver.ActionGetDisconnectorState
	45, // 50: io.clbs.openhes.pbdriver.JobAction.set_disconnector_state:type_name -> io.clbs.openhes.pbdriver.ActionSetDisconnectorState
	46, // 51: io.clbs.openhes.pbdriver.JobAction.get_tou:type_name -> io.clbs.openhes.pbdriver.ActionGetTou
	47, // 52: io.clbs.openhes.pbdriver.JobAction.set_tou:type_name -> io.clbs.openhes.pbdriver.ActionSetTou
	48, // 53: io.clbs.openhes.pbdriver.JobAction.get_limiter:type_name -> io.clbs.openhes.pbdriver.ActionGetLimiter
	49, // 54: io.clbs.openhes.pbdriver.JobAction.set_limiter:type_name -> io.clbs.openhes.pbdriver.ActionSetLimiter
	50, // 55: io.clbs.openhes.pbdriver.JobAction.reset_billing_period:type_name -> io.clbs.openhes.pbdriver.ActionResetBillingPeriod
	51, // 56: io.clbs.openhes.pbdriver.JobAction.fw_update:type_name -> io.clbs.openhes.pbdriver.ActionFwUpdate
	73, // 57: io.clbs.openhes.pbdriver.ActionGetPeriodicalProfile.from:type_name -> google.protobuf.Timestamp
	73, // 58: io.clbs.openhes.pbdriver.ActionGetPeriodicalProfile.to:type_name -> google.protobuf.Timestamp
	73, // 59: io.clbs.openhes.pbdriver.ActionGetIrregularProfile.from:type_name -> google.protobuf.Timestamp
	73, // 60: io.clbs.openhes.pbdriver.ActionGetIrregularProfile.to:type_name -> google.protobuf.Timestamp
	73, // 61: io.clbs.openhes.pbdriver.ActionGetEvents.from:type_name -> google.protobuf.Timestamp
	73, // 62: io.clbs.openhes.pbdriver.ActionGetEvents.to:type_name -> google.protobuf.Timestamp
	9,  // 63: io.clbs.openhes.pbdriver.CommonResponse.result:type_name -> io.clbs.openhes.pbdriver.ErrorCode
	12, // 64: io.clbs.openhes.pbdriver.ApplicationProtocolTemplate.protocol:type_name -> io.clbs.openhes.pbdriver.ApplicationProtocol
	22, // 65: io.clbs.openhes.pbdriver.ApplicationProtocolTemplate.attributes:type_name -> io.clbs.openhes.pbdriver.AttributeDefinition
	11, // 66: io.clbs.openhes.pbdriver.DataLinkTemplate.link_protocol:type_name -> io.clbs.openhes.pbdriver.DataLinkProtocol
	12, // 67: io.clbs.openhes.pbdriver.DataLinkTemplate.app_protocol_refs:type_name -> io.clbs.openhes.pbdriver.ApplicationProtocol
	22, // 68: io.clbs.openhes.pbdriver.DataLinkTemplate.attributes:type_name -> io.clbs.openhes.pbdriver.AttributeDefinition
	10, // 69: io.clbs.openhes.pbdriver.CommunicationTemplate.type:type_name -> io.clbs.openhes.pbdriver.CommunicationType
	55, // 70: io.clbs.openhes.pbdriver.CommunicationTemplate.datalinks:type_name -> io.clbs.openhes.pbdriver.DataLinkTemplate
	56, // 71: io.clbs.openhes.pbdriver.DriverTemplates.communication_templates:type_name -> io.clbs.openhes.pbdriver.CommunicationTemplate
	54, // 72: io.clbs.openhes.pbdriver.DriverTemplates.app_protocols:type_name -> io.clbs.openhes.pbdriver.ApplicationProtocolTemplate
	23, // 73: io.clbs.openhes.pbdriver.DriverTemplates.action_attributes:type_name -> io.clbs.openhes.pbdriver.JobActionAttributes
	57, // 74: io.clbs.openhes.pbdriver.DriverTemplates.access_templates:type_name -> io.clbs.openhes.pbdriver.AccessLevelTemplate
	60, // 75: io.clbs.openhes.pbdriver.DriverTemplates.action_constraints:type_name -> io.clbs.openhes.pbdriver.JobActionContraints
	69, // 76: io.clbs.openhes.pbdriver.JobActionContraints.get_register_type_name:type_name -> io.clbs.openhes.pbdriver.JobActionContraints.GetRegisterTypeNameEntry
	70, // 77: io.clbs.openhes.pbdriver.JobActionContraints.get_register_type_attributes:type_name -> io.clbs.openhes.pbdriver.JobActionContraints.GetRegisterTypeAttributesEntry
	58, // 78: io.clbs.openhes.pbdriver.NegotiateRequest.templates:type_name -> io.clbs.openhes.pbdriver.DriverTemplates
	29, // 79: io.clbs.openhes.pbdriver.DeviceConnectionInfo.communication_unit:type_name -> io.clbs.openhes.pbdriver.ConnectionInfo
	12, // 80: io.clbs.openhes.pbdriver.DeviceConnectionInfo.app_protocol:type_name -> io.clbs.openhes.pbdriver.ApplicationProtocol
	71, // 81: io.clbs.openhes.pbdriver.DeviceConnectionInfo.device_attributes:type_name -> io.clbs.openhes.pbdriver.DeviceConnectionInfo.DeviceAttributesEntry
	27, // 82: io.clbs.openhes.pbdriver.ListOfModemInfo.items:type_name -> io.clbs.openhes.pbdriver.ModemInfo
	63, // 83: io.clbs.openhes.pbdriver.ListOfConnectionInfo.items:type_name -> io.clbs.openhes.pbdriver.DeviceConnectionInfo
	52, // 84: io.clbs.openhes.pbdriver.StartJobData.DeviceAttributesEntry.value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	52, // 85: io.clbs.openhes.pbdriver.JobAction.AttributesEntry.value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	59, // 86: io.clbs.openhes.pbdriver.JobActionContraints.GetRegisterTypeAttributesEntry.value:type_name -> io.clbs.openhes.pbdriver.StringList
	52, // 87: io.clbs.openhes.pbdriver.DeviceConnectionInfo.DeviceAttributesEntry.value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	88, // [88:88] is the sub-list for method output_type
	88, // [88:88] is the sub-list for method input_type
	88, // [88:88] is the sub-list for extension type_name
	88, // [88:88] is the sub-list for extension extendee
	0,  // [0:88] is the sub-list for field type_name
}

func init() { file_pbdriver_models_proto_init() }
func file_pbdriver_models_proto_init() {
	if File_pbdriver_models_proto != nil {
		return
	}
	file_pbdriver_models_proto_msgTypes[0].OneofWrappers = []any{
		(*progressUpdate_Job)(nil),
		(*progressUpdate_Action)(nil),
	}
	file_pbdriver_models_proto_msgTypes[3].OneofWrappers = []any{
		(*actionData_Nodata)(nil),
		(*actionData_Billings)(nil),
		(*actionData_Profile)(nil),
	}
	file_pbdriver_models_proto_msgTypes[8].OneofWrappers = []any{
		(*measuredValue_DoubleValue)(nil),
		(*measuredValue_IntValue)(nil),
		(*measuredValue_StrValue)(nil),
		(*measuredValue_TimestampValue)(nil),
		(*measuredValue_TimestampTzValue)(nil),
		(*measuredValue_BoolValue)(nil),
	}
	file_pbdriver_models_proto_msgTypes[13].OneofWrappers = []any{
		(*connectionTypeControlledSerial_Direct)(nil),
		(*connectionTypeControlledSerial_Moxa)(nil),
	}
	file_pbdriver_models_proto_msgTypes[14].OneofWrappers = []any{
		(*modemInfo_Tcpip)(nil),
	}
	file_pbdriver_models_proto_msgTypes[16].OneofWrappers = []any{
		(*connectionInfo_Tcpip)(nil),
		(*connectionInfo_ModemPool)(nil),
		(*connectionInfo_SerialOverIp)(nil),
	}
	file_pbdriver_models_proto_msgTypes[22].OneofWrappers = []any{
		(*jobAction_GetRegister)(nil),
		(*jobAction_GetPeriodicalProfile)(nil),
		(*jobAction_GetIrregularProfile)(nil),
		(*jobAction_GetEvents)(nil),
		(*jobAction_GetClock)(nil),
		(*jobAction_SyncClock)(nil),
		(*jobAction_GetRelayState)(nil),
		(*jobAction_SetRelayState)(nil),
		(*jobAction_GetDisconnectorState)(nil),
		(*jobAction_SetDisconnectorState)(nil),
		(*jobAction_GetTou)(nil),
		(*jobAction_SetTou)(nil),
		(*jobAction_GetLimiter)(nil),
		(*jobAction_SetLimiter)(nil),
		(*jobAction_ResetBillingPeriod)(nil),
		(*jobAction_FwUpdate)(nil),
	}
	file_pbdriver_models_proto_msgTypes[39].OneofWrappers = []any{
		(*attributeValue_StrValue)(nil),
		(*attributeValue_IntValue)(nil),
		(*attributeValue_DoubleValue)(nil),
		(*attributeValue_BinaryValue)(nil),
		(*attributeValue_BoolValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbdriver_models_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   59,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pbdriver_models_proto_goTypes,
		DependencyIndexes: file_pbdriver_models_proto_depIdxs,
		EnumInfos:         file_pbdriver_models_proto_enumTypes,
		MessageInfos:      file_pbdriver_models_proto_msgTypes,
	}.Build()
	File_pbdriver_models_proto = out.File
	file_pbdriver_models_proto_rawDesc = nil
	file_pbdriver_models_proto_goTypes = nil
	file_pbdriver_models_proto_depIdxs = nil
}
