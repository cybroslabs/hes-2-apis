// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.pbdeviceregistry;

option go_package = "github.com/cybroslabs/hes-2-apis/protobuf/pbdeviceregistrymodels";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "pbdriver-models.proto";

// RestApi -> DriverRegistry - The communication unit specification.
message CreateCommunicationUnitRequest {
    CommunicationUnitSpec spec = 1;  // The communication unit specification.
}

// RestApi -> DriverRegistry - the request message to get the information about the communication unit.
message GetCommunicationUnitsRequest {
    string id          = 1;  // The UUID of the communication unit.
    string external_id = 2;  // The external identifier of the communication unit.
    string name        = 3;  // The name of the communication unit.
}

// DriverRegistry -> RestApi - the message holds the information about the communication unit.
message ArrayOfCommunicationUnitSpec {
    repeated CommunicationUnitSpec spec = 1;  // The communication unit specification.
}

// Sub-message - the communication unit specification.
message CommunicationUnitSpec {
    string id                               = 1;  // The UUID of the communication unit.
    string external_id                      = 2;  // The external identifier of the communication unit.
    string name                             = 3;  // The name of the communication unit.
    pbdriver.ConnectionInfo connection_info = 4;  // The connection info.
}

// RestApi -> DriverRegistry - the request message to create a new device.
message CreateDeviceRequest {
    DeviceSpec spec = 1;  // The device specification.
}

// RestApi -> DriverRegistry - the request message to get the information about the device.
message GetDevicesRequest {
    string id          = 1;  // The UUID of the device.
    string external_id = 2;  // The external identifier of the device.
    string name        = 3;  // The name of the device.
}

// DriverRegistry -> RestApi - the message holds the information about the device.
message Device {
    DeviceSpec spec = 1;  // The device specification.
    // TODO: Add status
}

message ArrayOfDevice {
    repeated Device items = 1; // The list of devices.
}

// Sub-message - the device specification.
message DeviceSpec {
    string id                                                = 1;  // The UUID of the device.
    string external_id                                       = 2;  // The external identifier of the device.
    string name                                              = 3;  // The name of the device.
    map<string, pbdriver.AttributeValue> attributes          = 4;  // The template of the action attributes. It is represented as a list of attribute definitions.
    repeated DeviceCommunicationUnit communication_unit_link = 5;  // The list of communication unit identifiers (and additional info) that set CUs usable to communicate with the device. It's an ordered set where the first element is the primary communication unit with the highest priority.
    string timezone                                          = 6;  // The timezone related to the device, e.g. "America/New_York", "Europe/Prague", "CET", "GMT", "Etc/GMT+2".
}

// Sub-message that represents the device group.
message DeviceGroupSpec {
    string id                 = 1;  // The UUID of the device group.
    string external_id        = 2;  // The external identifier of the communication unit.
    string name               = 3;  // The name of the device group.
    repeated string device_id = 4;  // The list of device identifiers that are part of the group.
}

// RestApi -> DriverRegistry - the request message to get the information about the device group.
message CreateDeviceGroupRequest {
    DeviceGroupSpec spec = 1;  // The device group specification.
}

// DriverRegistry -> RestApi - the message holds the information about the device group.
message GetDeviceGroupsResponse {
    map<string, DeviceGroupOverviewSpec> groups = 1;  // The list of device groups.
}

message DeviceGroupOverviewSpec {
    string id          = 1;  // The UUID of the device group.
    string external_id = 2;  // The external identifier of the communication unit.
    string name        = 3;  // The name of the device group.
}

// DriverRegistry -> RestApi - the message holds the information about the device group.
message GetDeviceGroupResponse {
    DeviceGroupSpec spec = 1;  // The device group specification.
}

// RestApi -> DriverRegistry - the request message to add a new device to the device group.
message AddDevicesToGroupRequest {
    string group_id           = 1;  // The unique identifier of the device group.
    repeated string device_id = 2;  // The unique identifier of the device.
}

// RestApi -> DriverRegistry - the request message to remove a device from the device group.
message RemoveDevicesFromGroupRequest {
    string group_id           = 1;  // The unique identifier of the device group.
    repeated string device_id = 2;  // The unique identifier of the device.
}

// RestApi -> DriverRegistry - the request message to add a new device to the communication unit.
message SetDeviceCommunicationUnitsRequest {
    string device_id                                     = 1;  // The unique identifier of the device.
    repeated DeviceCommunicationUnit communication_units = 2;  // The list of linked communication units.
}

message DeviceCommunicationUnit {
    string communication_unit_id              = 1;  // The unique identifier of the communication unit.
    pbdriver.ApplicationProtocol app_protocol = 2;  // The application protocol to be used for the communication over the communication unit.
}

// RestApi -> DriverRegistry - the request message to get
message GetDevicesCommunicationUnitsRequest {
    repeated string device_id = 1;  // The unique identifier of the device.
}

// DriverRegistry -> RestApi - the message holds the information about the communication units linked to the device.
message GetDevicesCommunicationUnitsResponse {
    map<string, pbdriver.ArrayOfConnectionInfo> devices = 1;  // The list of devices with their communication units.
}

// Sub-message that represents the modem pool.
message ModemPoolSpec {
    string pool_id = 1;  // The modem pool identifier.
    string name    = 2;  // The name of the modem pool.
}

// RestApi -> DriverRegistry - the request message to get the modem pools.
message GetModemPoolsResponse {
    repeated ModemPoolSpec pools = 1;  // The list of modem pools.
}

// RestApi -> DriverRegistry - the request message to get the modem pool info.
message GetModemPoolRequest {
    string pool_id = 1;  // The modem pool identifier.
}

// DriverRegistry -> RestApi - the message holds the information about the modem pool.
message GetModemPoolResponse {
    repeated pbdriver.ModemInfo modems = 1;  // The modems registered within the pool.
    string name                        = 2;  // The name of the modem pool.
}

message SetModemPoolRequest {
    string pool_id = 1;  // The modem pool identifier. It must be unique within the system.
    string name    = 2;  // The name of the modem pool to be created. It must be unique within the system.
}

message SetModemRequest {
    string pool_id           = 1;  // The modem pool identifier, required for update operation.
    pbdriver.ModemInfo modem = 2;  // The modem specification.
}
