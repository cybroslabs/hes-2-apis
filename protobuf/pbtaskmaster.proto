syntax = "proto3";
package io.clbs.openhes.pbtaskmaster;

option go_package = "github.com/cybroslabs/hes-2-apis/protobuf/pbtaskmaster";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "pbdriver.proto";


// The Taskmaster service definition.
// Those are the gRPC services that the Taskmaster provides for other components.
service TaskmasterService {
    rpc QueueJobs(QueueJobsRequest) returns (google.protobuf.Empty);
    // The method called by the RestApi to get the job status. The parameter contains the job identifier.
    rpc GetJob(GetJobRequest) returns (GetJobResponse);
    // The method called by the RestApi to purge all jobs (queued/running/finished) from the system.
    rpc PurgeJobs(google.protobuf.Empty) returns (google.protobuf.Empty);
    // The method called by the RestApi to cancel the job.
    rpc CancelJobs(CancelJobsRequest) returns (google.protobuf.Empty);
    
    // Subcribe for notification stream
    rpc Subscribe(google.protobuf.Empty) returns (stream StreamEventsData);

    // The method called by the driver to inform Taskmaster about the instance existence. The parameter contains the driver version, the listening port, the meter type, the maximum number of concurrent jobs, the typical memory usage, the connection attributes template, and the job action templates.
    rpc NegotiateStart(pbdriver.NegotiateRequest) returns (pbdriver.CommonResponse);
    // The method called by the driver to store the cache entry. The parameter contains the cache key and the cache value. The key is unique within the driver type.
    rpc CacheSet(CacheSetRequest) returns (google.protobuf.Empty);
    // The method called by the driver to retrieve the cache entry. The parameter contains the cache key. The key is unique within the driver type.
    rpc CacheGet(CacheGetRequest) returns (CacheGetResponse);
    
    // The method called by the RestApi to register the new driver to the Kubernetes. The parameter contains the driver type and the docker image.
    rpc RegisterDriver(RegisterDriverRequest) returns (google.protobuf.Empty);    
    // The method called by the RestApi to get the list of drivers.
    rpc GetDrivers(google.protobuf.Empty) returns (GetDriversResponse);
    // The method called by the RestApi to unregister driver from the system. The parameter contains the driver type.
    rpc UnregisterDriver(UnregisterDriverRequest) returns (google.protobuf.Empty);
    // The method called by the RestApi to get the driver templates.
    rpc GetDriverTemplates(GetDriverTemplatesRequest) returns (pbdriver.DriverTemplates);

    // The method called by the RestApi to get the system configuration.
    rpc GetConfig(google.protobuf.Empty) returns (SystemConfigResponse);
    // The method called by the RestApi to set the system configuration.
    rpc SetConfig(SystemConfig) returns (google.protobuf.Empty);
}

// Taskmaster -> Dataproxy event message
message StreamEventsData {
    oneof data {
        StreamEventsDataJobFinished job_done = 1 [json_name="jf"];
    }
}

// Sub-message - job-finished event data
message StreamEventsDataJobFinished {
    string job_id = 1 [json_name="i"];
}

// Driver -> Taskmaster cache set request message
message CacheSetRequest {
    string key = 1 [json_name="k"]; // The key of the cache entry. The key is unique within the driver type.
    pbdriver.AttributeValue value = 2 [json_name="v"]; // The value of the cache entry.
}

// Driver -> Taskmaster cache get request message
message CacheGetRequest {
    string key = 1 [json_name="k"]; // The key of the cache entry. The key is unique within the driver type.
}

// Taskmaster -> Driver cache get response message
message CacheGetResponse {
    pbdriver.ErrorCode result = 1 [json_name="r"]; // The result of the cache get operation.
    pbdriver.AttributeValue value = 2 [json_name="v"]; // The value of the cache entry.
}

// API -> Taskmaster cancel job request message
message CancelJobsRequest {
    repeated string job_id = 1 [json_name="id"]; // The job identifier.
}

// API -> Taskmaster queue jobs request message
message QueueJobsRequest {
    repeated JobSpec spec = 1 [json_name="j"]; // The list of jobs to be queued.
}

// Sub-message - job specification
message JobSpec {
    string job_id = 1 [json_name="id"]; // The job identifier.
    pbdriver.ConnectionInfo connection_info = 2 [json_name="ci"]; // The connection info for the job.
    pbdriver.JobSettings job_settings = 3 [json_name="js"]; // The job parameters.
    string driver_type = 4 [json_name="t"]; // The device (driver) type.
    repeated pbdriver.JobAction job_actions = 5 [json_name="a"]; // The list actions to be executed.
}

// Dataproxy -> Taskmaster get job request message
message GetJobRequest {
    string job_id = 1 [json_name="id"]; // The job identifier.
}


// Taskmaster -> API get job response message
message GetJobResponse {
    JobSpec spec = 1 [json_name="j"]; // The original job specification
    JobStatus status = 2 [json_name="s"]; // The status of the job
}

// Sub-message containing job status info
message JobStatus {
    JobStatusCode status = 1 [json_name="s"]; // The status of the job.
    optional pbdriver.JobErrorCode code = 2 [json_name="c"]; // The error code of the job.
    repeated ActionResult results = 3 [json_name="r"]; // The result data for all job actions.
    google.protobuf.Timestamp created_at = 4 [json_name="tc"]; // The creation timestamp of the job.
    optional google.protobuf.Timestamp started_at = 5 [json_name="ts"]; // The start timestamp of the job.
    optional google.protobuf.Timestamp finished_at = 6 [json_name="tf"]; // The finish timestamp of the job.
    int32 attempts_done = 7 [json_name="ad"]; // The number of attempts already done.
}

// Job statuses
enum JobStatusCode {
    // The job is waiting in the queue
    JOB_STATUS_QUEUED = 0;
    // The job is running
    JOB_STATUS_RUNNING = 1;
    // The job is completed
    JOB_STATUS_COMPLETED = 2;
    // The job is failed
    JOB_STATUS_FAILED = 3;
    // The job is cancelled
    JOB_STATUS_CANCELLED = 4;
    // The job has expired 
    JOB_STATUS_EXPIRED = 5;
}

// Sub-message containing action result for a single action.
message ActionResult {
    string action_id = 1 [json_name="id"]; // The action identifier.
    pbdriver.ActionResultCode status = 2 [json_name="s"]; // The status of the action.
    pbdriver.ActionData data = 3 [json_name="d"]; // The action result data.
}

// API -> Taskmaster register (install/update) driver request message
message RegisterDriverRequest {
    string driver_type = 1; // The driver unique identifier.
    string image = 2; // The docker image of the driver.
    ContainerResourceSet resources = 3; // The resource requirements of the driver.
}

// Taskmaster -> API get drivers response message
message GetDriversResponse {
    pbdriver.ErrorCode result = 1; // The result of the operation.
    repeated DriverInfo drivers = 2; // The list of drivers.
}

// Sub-message containing driver info
message DriverInfo {
    string driver_type = 1; // The driver unique identifier.
    string image = 2; // The docker image of the driver.
    ContainerResourceSet resources = 3; // The resource requirements of the driver.
}

// Sub-message containing container resource limits and requests
message ContainerResourceSet {
    ContainerResources limits = 1 [json_name="l"]; // The resource limits.
    optional ContainerResources requests = 2 [json_name="r"]; // The resource requests.
}

// Sub-message containing container resource requirements
message ContainerResources {
    string cpu = 1 [json_name="c"]; // The CPU resources.
    string memory = 2 [json_name="m"]; // The memory resources.
}

// API -> Taskmaster request to unregister driver
message UnregisterDriverRequest {
    string driver_type = 1; // The driver unique identifier.
}

// API <-> Taskmaster request/response for system configuration
message SystemConfig {
    int32 max_replicas = 1; // The maximum number of replicas for the driver.
}

// API <-> Taskmaster request/response for system configuration
message SystemConfigResponse {
    SystemConfig config = 1; // The maximum number of replicas for the driver.
    SystemConfigStatus status = 2; // The system status.
}

// Sub-message containing system status
message SystemConfigStatus {
    int64 queue_length = 1; // The length of the job queue.
}

// API -> Taskmaster request to get driver templates
message GetDriverTemplatesRequest {
    string driver_type = 1; // The driver unique identifier.
}

// Taskmaster -> Dataproxy job/action progress update message
message JobEventData {    
    bytes job_id = 1 [json_name="i"]; // The job identifier.
}

// Sub-message representing a single device in a bulk.
message JobDevice {
    string id = 1 [json_name="i"]; // The device (job) identifier.
    string external_id = 2 [json_name="e"]; // The external identifier.
    map<string,pbdriver.AttributeValue> device_attributes = 3 [json_name="da"]; // The connection attributes to the device.
    pbdriver.ConnectionInfo connection_info = 4 [json_name="c"]; // The conenction (device) parameters.
}
