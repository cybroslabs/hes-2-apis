syntax = "proto3";
package io.clbs.openhes.pbdriveroperator;

option go_package = "github.com/cybroslabs/hes-2-apis/protobuf/pbdriveroperator";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "pbdriver.proto";
import "pbtaskmaster.proto";

// The Driver Operator service definition.
// Those are the gRPC services that the Driver Operator provides for other components.
service DriverOperatorService {
    // The method called by the RestApi to get the list of drivers.
    rpc GetDrivers(google.protobuf.Empty) returns (pbtaskmaster.GetDriversResponse);
    // The method called by the RestApi to get the driver templates.
    rpc GetDriverTemplates(pbtaskmaster.GetDriverTemplatesRequest) returns (pbdriver.DriverTemplates);

    // The method called by the Taskmaster to set the driver scale.
    rpc SetDriverScale(SetDriverScaleRequest) returns (google.protobuf.Empty);
    // The method called by the Taskmaster to get the driver scale.
    rpc GetDriverScale(GetDriverScaleRequest) returns (google.protobuf.UInt32Value);

    // The method called by the DeviceRegistry to start the driver in upgrade mode. It will provide structure upgrade between the driver versions.
    // The driver is started as Kubernetes job and ends when all the structures are upgraded; which is controlled by the DeviceRegistry.
    rpc StartUpgrade(StartUpgradeRequest) returns (google.protobuf.Empty);
}

// Taskmaster -> Driver Operator driver-scale change request message
message SetDriverScaleRequest {
    string driver_type = 1; // The driver unique identifier.
    uint32 replicas = 2; // The number of replicas to scale to.
    string taskmaster_url = 3; // The URL of the Taskmaster service the driver shall connect to.
}

// Taskmaster -> Driver Operator get driver-scale message
message GetDriverScaleRequest {
    string taskmaster_id = 1; // The Taskmaster identifier. It is statefulset so value must be either full pod name or suffix integer of the pod name. For example: taskmaster-0 or 0.
    string driver_type = 2; // The driver unique identifier.
    uint32 replicas = 3; // The number of replicas to scale to.
}

message StartUpgradeRequest {
    string driver_type = 1; // The driver unique identifier.
    string driver_version = 2; // The driver version to be started. It must be a valid version of the driver and should be exactly +1 against the version of the data to be upgraded; or the major version can be +1 if current data version is the latest possible minor version.
    string deviceregistry_url = 3; // The URL of the DeviceRegistry service the driver shall connect to.
}
