syntax = "proto3";
package io.clbs.openhes.pbdriver;

option go_package = "github.com/cybroslabs/hes-2-apis/protobuf/pbdriver";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// The driver service definition.
// Those are the gRPC services that all drivers must implement to provide required control for the Taskmaster.
service DriverService {
    // The method called by the Taskmaster to start a new job. The parameter contains the job specification and the list of actions to be executed.
    rpc StartJob(StartJobsRequest) returns (stream ProgressUpdate);
    // The method called by the Taskmaster to cancel the job. The parameter contains the job identifier.
    rpc CancelJob(CancelJobRequest) returns (CommonResponse);
}

// Driver -> Taskmaster job/action progress update message
message ProgressUpdate {
    // The oneof field containing the progress update data - either for job or for action.
    oneof progress {
        JobProgressUpdate job = 1; // The job progress update data. It shall be called once and only once for each job. It shall be also called as the last message in the stream; other updates will be ignored after this.
        ActionProgressUpdate action = 2; // The action progress update data. It shall be called for each action in the job.
    }
}

// Sub-message containing action progress update
message ActionProgressUpdate {
    string job_id = 1 [json_name="id"]; // The job identifier.
    string action_id = 2 [json_name="a"]; // The action identifier.
    ActionResultCode code = 3 [json_name="c"]; // The status related to the action.
    optional ActionData data = 4 [json_name="d"]; // The action result data. Shall be empty if the code is not OK.
}

// Sub-message containing job progress update
message JobProgressUpdate {
    string job_id = 1 [json_name="id"]; // The job identifier.
    JobErrorCode code = 2 [json_name="c"]; // The status related to the job and or action update message.
    int64 duration = 3 [json_name="d"]; // The duration of the job in miliseconds.
}

// Sub-message containing action-based variant of data values
message ActionData {
    oneof data {
        google.protobuf.Empty nodata = 1 [json_name="n"]; // No data
        BillingValues billings = 2 [json_name="r"]; // Register values
        ProfileValues profile = 3 [json_name="p"]; // Profile values
    }
}

// Sub-message containing profile-typed values
message ProfileValues {
    int32 period = 1 [json_name="p"]; // The period of the profile values.
    string unit = 2 [json_name="u"]; // The unit of the profile values.
    repeated ProfileBlok blocks = 3 [json_name="b"]; // The list of continuous profile blocks.
}

// Sub-message containing a single profile block
message ProfileBlok {
    google.protobuf.Timestamp start_timestamp = 1 [json_name="t"]; // The start timestamp of the block.
    repeated MeasuredValue values = 2 [json_name="v"]; // The list of profile values. Values are ordered by timestamp.
}

// Sub-message containing billing-typed values
message BillingValues {
    repeated BillingValue values = 1 [json_name="v"]; // The list of register values.
}

// Sub-message containing billing-typed value
message BillingValue {
    google.protobuf.Timestamp timestamp = 1 [json_name="t"]; // The timestamp of the value.
    string unit = 2 [json_name="u"]; // The unit of the value.
    MeasuredValue value = 3 [json_name="v"]; // The value.
}

// Sub-message containing measured value
message MeasuredValue {
    optional int64 status = 1 [json_name="s"]; // The status of the value.
    oneof value {
        double double_value = 2 [json_name="d"]; // The double-typed value.
        int64 int_value = 3 [json_name="i"]; // The integer-typed value.
    }
    int32 exponent = 4 [json_name="e"]; // The exponent of the value.
}


// Sub-message containing attribute definition
message AttributeDefinition {
    string name = 1 [json_name="n"]; // The name of the attribute.
    string description = 2 [json_name="d"]; // The description of the attribute.
    AttributeType type = 3 [json_name="t"]; // The type of the attribute.
    bool mandatory = 4 [json_name="m"]; // The attribute is mandatory or not.s
    optional AttributeValue default_value = 5 [json_name="v"]; // The default value of the attribute.
}

// Sub-message containing job action attributes
message JobActionAttributes {
    ActionType type = 1 [json_name="t"]; // The action type.
    repeated AttributeDefinition attributes = 2 [json_name="a"]; // The template of the action attributes. It is represented as a list of attribute definitions.
}

// Taskmaster -> Driver start job request message
message StartJobsRequest {
    ConnectionInfo connection_info = 2 [json_name="ci"]; // The connection info for the job.
    repeated StartJobData jobs = 1 [json_name="j"]; // The list of jobs to be started with the same connection info.
}

// Sub-message containing job start request for single device
message StartJobData {
    string job_id = 1 [json_name="id"]; // The job identifier.
    JobSettings job_settings = 3 [json_name="js"]; // The job parameters.
    repeated JobAction job_actions = 4 [json_name="a"]; // The list actions to be executed.
}

// Sub-message containing connection info
message ConnectionInfo {
    map<string,AttributeValue> device_attributes = 1 [json_name="da"]; // The connection attributes to the device.
    oneof connection {
        ConnectionTypeTcp tcp = 2 [json_name="t"]; // The TCP connection type.
        ConnectionTypePhone phone = 3 [json_name="p"]; // The phone connection type.
        ConnectionTypeSerial serial = 4 [json_name="s"]; // The serial connection type.
    }
}

// Sub-message containing connection info for TCP connection type
message ConnectionTypeTcp {
    string host = 1 [json_name="h"]; // The host name or IP address of the device to connect to.
    uint32 port = 2 [json_name="p"]; // The TCP port number of the device to connect to.
    optional int32 timeout = 3 [json_name="to"]; // The timeout in seconds for the connection.
}

// Sub-message containing connection info for TCP connection type
message ConnectionTypePhone {
    string number = 1 [json_name="h"]; // The phone number of the device to connect to.
    // TODO: Add phone (via modem) connection attributes
}

// Sub-message containing connection info for TCP connection type
message ConnectionTypeSerial {
    // TODO: Add serial connection attributes
}

// Job priorities
enum JobPriority {
    // The lowest priority
    PRIORITY_0 = 0;
    // The priority 1
    PRIORITY_1 = 1;
    // The priority 2
    PRIORITY_2 = 2;
    // The priority 3
    PRIORITY_3 = 3;
    // The priority 4
    PRIORITY_4 = 4;
    // The priority 5
    PRIORITY_5 = 5;
    // The priority 6
    PRIORITY_6 = 6;
    // The priority 7
    PRIORITY_7 = 7;
    // The highest priority
    PRIORITY_8 = 8;
}

// Sub-message containing job parameters
message JobSettings {
    int64 max_duration = 1 [json_name="md"]; // Maximum duration of the job attempt in miliseconds. This is related to the real time for the driver.
    JobPriority priority = 2 [json_name="p"]; // Priority of the job.
    int32 attempts = 3 [json_name="a"]; // Maximum number of attempts, 1 is the minimum.
    int64 retry_delay = 4 [json_name="rd"]; // Delay in miliseconds between two attempts.
    uint64 defer_start = 5 [json_name="ds"]; // Number of miliseconds to wait before starting the job.
    google.protobuf.Timestamp expires_at = 6 [json_name="et"]; // The timestamp when the job expires.
}

// Attribute types
enum AttributeType {
    // Integer attribute type
    ATTRIBUTE_TYPE_INT = 0;
    // String attribute type
    ATTRIBUTE_TYPE_STRING = 1;
    // Double attribute type
    ATTRIBUTE_TYPE_DOUBLE = 2;
    // Binary attribute type
    ATTRIBUTE_TYPE_BINARY = 3;
    // Date/time attribute type
    ATTRIBUTE_TYPE_TIMESTAMP = 4;
}

// Action types
enum ActionType {
    // Get billing value, for example instantaneous values. The action covers specific register.
    ACTION_TYPE_GET_REGISTER = 0;
    // Get periodical profile, for example load-profile. The action covers specific profile column.
    ACTION_TYPE_GET_PERIODICAL_PROFILE = 1;
    // Get non-periodical profile, for example daily profile or monthly billing registers. The action covers specific profile column and or specific billing register.
    ACTION_TYPE_GET_IRREGULAR_PROFILE = 2;
    // Get event log. The action covers specific event log.
    ACTION_TYPE_GET_EVENTS = 3;

    // Get clock. The action returns time in UTC.
    ACTION_TYPE_GET_CLOCK = 10;
    // Synchornize clock. The action synchronizes the time in the device, it can forcefully set it if force attribute is set.
    ACTION_TYPE_SYNC_CLOCK = 11;

    // Get relay state. The action covers single relay.
    ACTION_TYPE_GET_RELAY_STATE = 20;
    // Set relay state. The action covers single relay.
    ACTION_TYPE_SET_RELAY_STATE = 21;

    // Get disconnector state. The action covers single disconnector if multiple disconnectors are present in the device.
    ACTION_TYPE_GET_DISCONNECTOR_STATE = 22;
    // Set disconnector state. The action covers single relay. The action covers single disconnector if multiple disconnectors are present in the device.
    ACTION_TYPE_SET_DISCONNECTOR_STATE = 23;

    // Get time-of-use table.
    ACTION_TYPE_GET_TOU = 24;
    // Set time-of-use table.
    ACTION_TYPE_SET_TOU = 25;

    // Get limiter settings. The action covers single limiter.
    ACTION_TYPE_GET_LIMITER = 26;
    // Set limiter settings. The action covers single limiter.
    ACTION_TYPE_SET_LIMITER = 27;

    // Reseet billing period.
    ACTION_TYPE_RESET_BILLING_PERIOD = 40;

    // Start firmware update. The action updates starts FW upgrade procedure.
    ACTION_TYPE_FW_UPDATE = 50;
}

// Sub-message containing job action specification
message JobAction {
    string action_id = 1 [json_name="id"]; // The action identifier.
    map<string,AttributeValue> attributes = 2 [json_name="a"]; // The action attributes.
    oneof action {
        ActionGetRegister get_register = 3 [json_name="a3"] ; // The get register action specification.
        ActionGetPeriodicalProfile get_periodical_profile = 4 [json_name="a4"]; // The get periodical profile action specification.
        ActionGetIrregularProfile get_irregular_profile = 5 [json_name="a5"]; // The get irregular profile action specification.
        ActionGetEvents get_events = 6 [json_name="a6"]; // The get events action specification.
        ActionGetClock get_clock = 7 [json_name="a7"]; // The get clock action specification.
        ActionSyncClock sync_clock = 8 [json_name="a8"]; // The sync clock action specification.
        ActionGetRelayState get_relay_state = 9 [json_name="a9"]; // The get relay state action specification.
        ActionSetRelayState set_relay_state = 10 [json_name="a10"]; // The set relay state action specification.
        ActionGetDisconnectorState get_disconnector_state = 11 [json_name="a11"]; // The get disconnector state action specification.
        ActionSetDisconnectorState set_disconnector_state = 12 [json_name="a12"]; // The set disconnector state action specification.
        ActionGetTou get_tou = 13 [json_name="a13"]; // The get tou action specification.
        ActionSetTou set_tou = 14 [json_name="a14"]; // The set tou action specification.
        ActionGetLimiter get_limiter = 15 [json_name="a15"]; // The get limiter action specification.
        ActionSetLimiter set_limiter = 16 [json_name="a16"]; // The set limiter action specification.
        ActionResetBillingPeriod reset_billing_period = 17 [json_name="a17"]; // The reset billing period action specification.
        ActionFwUpdate fw_update = 18 [json_name="a18"]; // The firmware update action specification.
    }
}

// Sub-message containing get register action specification
message ActionGetRegister {
}

// Sub-message containing get periodical profile action specification
message ActionGetPeriodicalProfile {
    google.protobuf.Timestamp from = 1 [json_name="f"]; // The start timestamp of the profile.
    google.protobuf.Timestamp to = 2 [json_name="t"]; // The end timestamp of the profile.
}

// Sub-message containing get irregular profile action specification
message ActionGetIrregularProfile {
}

// Sub-message containing get events action specification
message ActionGetEvents {
}

// Sub-message containing get clock action specification
message ActionGetClock {
}

// Sub-message containing sync clock action specification
message ActionSyncClock {
}

// Sub-message containing get relay state action specification
message ActionGetRelayState {
}

// Sub-message containing set relay state action specification
message ActionSetRelayState {
}

// Sub-message containing get disconnector state action specification
message ActionGetDisconnectorState {
}

// Sub-message containing set disconnector state action specification
message ActionSetDisconnectorState {
}

// Sub-message containing get tou action specification
message ActionGetTou {
}

// Sub-message containing set tou action specification
message ActionSetTou {
}

// Sub-message containing get limiter action specification
message ActionGetLimiter {
}

// Sub-message containing set limiter action specification
message ActionSetLimiter {
}

// Sub-message containing reset billing period action specification
message ActionResetBillingPeriod {
}

// Sub-message containing firmware update action specification
message ActionFwUpdate {
}

// Sub-message containing single attribute value specification
message AttributeValue {
    oneof value {
        string str_value = 1 [json_name="s"]; // The string-typed value.
        int64 int_value = 2 [json_name="i"]; // The integer-typed value.
        double double_value = 3 [json_name="d"]; // The double-typed value.
        bytes binary_value = 4 [json_name="b"]; // The binary-typed value.
    }
}

// Result codes related to job actions
enum ActionResultCode {
    // The action has been completed successfully.
    ERROR_CODE_ACTION_OK = 0;
    // The action is not supported by the driver (or device).
    ERROR_CODE_ACTION_UNSUPPORTED = 1;
    // The action failed.
    ERROR_CODE_ACTION_ERROR = 5;
}

// Error codes related to jobs
enum JobErrorCode {
    // The job has been completed successfully.
    JOB_ERROR_CODE_NONE = 0;
    // There is no free slot in the driver to handle the job; the job shall be send again later.
    JOB_ERROR_CODE_BUSY = 1;
    // The job failed, the retry will be attempted.
    JOB_ERROR_CODE_ERROR = 5;
	// This should never happen! It means that the same job is currently being processed by the driver and it was sent to the driver mutliple times which would mean that there is a bug.
	JOB_ERROR_CODE_ALREADY_EXISTS = 8;
    // The job failed, the retry will NOT be attempted.
    JOB_ERROR_CODE_FATAL = 9;
}

// Error codes
enum ErrorCode {
    // No error
    ERROR_CODE_OK = 0;
    // Generic error
    ERROR_CODE_ERROR = 4;
}

// Common gRPC response message
message CommonResponse {
    ErrorCode result = 1; // The result of the operation.
}

// Sub-message in driver negotiation request
message DriverTemplates {
    repeated AttributeDefinition device_attributes = 2; // The template of the connection attributes related to the device. It is represented as a list of attribute definitions.
    repeated JobActionAttributes action_attributes = 3; // The templates of the job actions for all supported action types.
}

// Taskmaster -> Driver cancel job request message
message CancelJobRequest {
    string job_id = 1 [json_name="id"]; // The job identifier.
}

// Driver -> Taskmaster negotiate/health-check request message
message NegotiateRequest {
    string version = 1; // The driver version.
    uint32 listening_port = 2; // The port the driver will listen on.
    string meter_type = 3;
    int32 max_concurrent_jobs = 4; // The maximum number of concurrent jobs the driver can handle.
    int32 typical_mem_usage = 5;
    DriverTemplates templates = 6; // The connection and action templates.
}
