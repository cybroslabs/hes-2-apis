// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: pbdriver.proto

package pbdriver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Job priorities
type JobPriority int32

const (
	// The lowest priority
	JobPriority_PRIORITY_0 JobPriority = 0
	// The priority 1
	JobPriority_PRIORITY_1 JobPriority = 1
	// The priority 2
	JobPriority_PRIORITY_2 JobPriority = 2
	// The priority 3
	JobPriority_PRIORITY_3 JobPriority = 3
	// The priority 4
	JobPriority_PRIORITY_4 JobPriority = 4
	// The priority 5
	JobPriority_PRIORITY_5 JobPriority = 5
	// The priority 6
	JobPriority_PRIORITY_6 JobPriority = 6
	// The priority 7
	JobPriority_PRIORITY_7 JobPriority = 7
	// The highest priority
	JobPriority_PRIORITY_8 JobPriority = 8
)

// Enum value maps for JobPriority.
var (
	JobPriority_name = map[int32]string{
		0: "PRIORITY_0",
		1: "PRIORITY_1",
		2: "PRIORITY_2",
		3: "PRIORITY_3",
		4: "PRIORITY_4",
		5: "PRIORITY_5",
		6: "PRIORITY_6",
		7: "PRIORITY_7",
		8: "PRIORITY_8",
	}
	JobPriority_value = map[string]int32{
		"PRIORITY_0": 0,
		"PRIORITY_1": 1,
		"PRIORITY_2": 2,
		"PRIORITY_3": 3,
		"PRIORITY_4": 4,
		"PRIORITY_5": 5,
		"PRIORITY_6": 6,
		"PRIORITY_7": 7,
		"PRIORITY_8": 8,
	}
)

func (x JobPriority) Enum() *JobPriority {
	p := new(JobPriority)
	*p = x
	return p
}

func (x JobPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[0].Descriptor()
}

func (JobPriority) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[0]
}

func (x JobPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobPriority.Descriptor instead.
func (JobPriority) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{0}
}

// Attribute types
type AttributeType int32

const (
	// Integer attribute type
	AttributeType_ATTRIBUTE_TYPE_INT AttributeType = 0
	// String attribute type
	AttributeType_ATTRIBUTE_TYPE_STRING AttributeType = 1
	// Double attribute type
	AttributeType_ATTRIBUTE_TYPE_DOUBLE AttributeType = 2
	// Binary attribute type
	AttributeType_ATTRIBUTE_TYPE_BINARY AttributeType = 3
	// Date/time attribute type
	AttributeType_ATTRIBUTE_TYPE_TIMESTAMP AttributeType = 4
)

// Enum value maps for AttributeType.
var (
	AttributeType_name = map[int32]string{
		0: "ATTRIBUTE_TYPE_INT",
		1: "ATTRIBUTE_TYPE_STRING",
		2: "ATTRIBUTE_TYPE_DOUBLE",
		3: "ATTRIBUTE_TYPE_BINARY",
		4: "ATTRIBUTE_TYPE_TIMESTAMP",
	}
	AttributeType_value = map[string]int32{
		"ATTRIBUTE_TYPE_INT":       0,
		"ATTRIBUTE_TYPE_STRING":    1,
		"ATTRIBUTE_TYPE_DOUBLE":    2,
		"ATTRIBUTE_TYPE_BINARY":    3,
		"ATTRIBUTE_TYPE_TIMESTAMP": 4,
	}
)

func (x AttributeType) Enum() *AttributeType {
	p := new(AttributeType)
	*p = x
	return p
}

func (x AttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[1].Descriptor()
}

func (AttributeType) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[1]
}

func (x AttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeType.Descriptor instead.
func (AttributeType) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{1}
}

// Action types
type ActionType int32

const (
	// Get billing value, for example instantaneous values. The action covers specific register.
	ActionType_ACTION_TYPE_GET_REGISTER ActionType = 0
	// Get periodical profile, for example load-profile. The action covers specific profile column.
	ActionType_ACTION_TYPE_GET_PERIODICAL_PROFILE ActionType = 1
	// Get non-periodical profile, for example daily profile or monthly billing registers. The action covers specific profile column and or specific billing register.
	ActionType_ACTION_TYPE_GET_IRREGULAR_PROFILE ActionType = 2
	// Get event log. The action covers specific event log.
	ActionType_ACTION_TYPE_GET_EVENTS ActionType = 3
	// Get clock. The action returns time in UTC.
	ActionType_ACTION_TYPE_GET_CLOCK ActionType = 10
	// Synchornize clock. The action synchronizes the time in the device, it can forcefully set it if force attribute is set.
	ActionType_ACTION_TYPE_SYNC_CLOCK ActionType = 11
	// Get relay state. The action covers single relay.
	ActionType_ACTION_TYPE_GET_RELAY_STATE ActionType = 20
	// Set relay state. The action covers single relay.
	ActionType_ACTION_TYPE_SET_RELAY_STATE ActionType = 21
	// Get disconnector state. The action covers single disconnector if multiple disconnectors are present in the device.
	ActionType_ACTION_TYPE_GET_DISCONNECTOR_STATE ActionType = 22
	// Set disconnector state. The action covers single relay. The action covers single disconnector if multiple disconnectors are present in the device.
	ActionType_ACTION_TYPE_SET_DISCONNECTOR_STATE ActionType = 23
	// Get time-of-use table.
	ActionType_ACTION_TYPE_GET_TOU ActionType = 24
	// Set time-of-use table.
	ActionType_ACTION_TYPE_SET_TOU ActionType = 25
	// Get limiter settings. The action covers single limiter.
	ActionType_ACTION_TYPE_GET_LIMITER ActionType = 26
	// Set limiter settings. The action covers single limiter.
	ActionType_ACTION_TYPE_SET_LIMITER ActionType = 27
	// Reseet billing period.
	ActionType_ACTION_TYPE_RESET_BILLING_PERIOD ActionType = 40
	// Start firmware update. The action updates starts FW upgrade procedure.
	ActionType_ACTION_TYPE_FW_UPDATE ActionType = 50
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0:  "ACTION_TYPE_GET_REGISTER",
		1:  "ACTION_TYPE_GET_PERIODICAL_PROFILE",
		2:  "ACTION_TYPE_GET_IRREGULAR_PROFILE",
		3:  "ACTION_TYPE_GET_EVENTS",
		10: "ACTION_TYPE_GET_CLOCK",
		11: "ACTION_TYPE_SYNC_CLOCK",
		20: "ACTION_TYPE_GET_RELAY_STATE",
		21: "ACTION_TYPE_SET_RELAY_STATE",
		22: "ACTION_TYPE_GET_DISCONNECTOR_STATE",
		23: "ACTION_TYPE_SET_DISCONNECTOR_STATE",
		24: "ACTION_TYPE_GET_TOU",
		25: "ACTION_TYPE_SET_TOU",
		26: "ACTION_TYPE_GET_LIMITER",
		27: "ACTION_TYPE_SET_LIMITER",
		40: "ACTION_TYPE_RESET_BILLING_PERIOD",
		50: "ACTION_TYPE_FW_UPDATE",
	}
	ActionType_value = map[string]int32{
		"ACTION_TYPE_GET_REGISTER":           0,
		"ACTION_TYPE_GET_PERIODICAL_PROFILE": 1,
		"ACTION_TYPE_GET_IRREGULAR_PROFILE":  2,
		"ACTION_TYPE_GET_EVENTS":             3,
		"ACTION_TYPE_GET_CLOCK":              10,
		"ACTION_TYPE_SYNC_CLOCK":             11,
		"ACTION_TYPE_GET_RELAY_STATE":        20,
		"ACTION_TYPE_SET_RELAY_STATE":        21,
		"ACTION_TYPE_GET_DISCONNECTOR_STATE": 22,
		"ACTION_TYPE_SET_DISCONNECTOR_STATE": 23,
		"ACTION_TYPE_GET_TOU":                24,
		"ACTION_TYPE_SET_TOU":                25,
		"ACTION_TYPE_GET_LIMITER":            26,
		"ACTION_TYPE_SET_LIMITER":            27,
		"ACTION_TYPE_RESET_BILLING_PERIOD":   40,
		"ACTION_TYPE_FW_UPDATE":              50,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[2].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[2]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{2}
}

// Result codes related to job actions
type ActionResultCode int32

const (
	// The action has been completed successfully.
	ActionResultCode_ERROR_CODE_ACTION_OK ActionResultCode = 0
	// The action is not supported by the driver (or device).
	ActionResultCode_ERROR_CODE_ACTION_UNSUPPORTED ActionResultCode = 1
	// The action failed.
	ActionResultCode_ERROR_CODE_ACTION_ERROR ActionResultCode = 5
)

// Enum value maps for ActionResultCode.
var (
	ActionResultCode_name = map[int32]string{
		0: "ERROR_CODE_ACTION_OK",
		1: "ERROR_CODE_ACTION_UNSUPPORTED",
		5: "ERROR_CODE_ACTION_ERROR",
	}
	ActionResultCode_value = map[string]int32{
		"ERROR_CODE_ACTION_OK":          0,
		"ERROR_CODE_ACTION_UNSUPPORTED": 1,
		"ERROR_CODE_ACTION_ERROR":       5,
	}
)

func (x ActionResultCode) Enum() *ActionResultCode {
	p := new(ActionResultCode)
	*p = x
	return p
}

func (x ActionResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[3].Descriptor()
}

func (ActionResultCode) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[3]
}

func (x ActionResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionResultCode.Descriptor instead.
func (ActionResultCode) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{3}
}

// Error codes related to jobs
type JobErrorCode int32

const (
	// The job has been completed successfully.
	JobErrorCode_JOB_ERROR_CODE_NONE JobErrorCode = 0
	// There is no free slot in the driver to handle the job; the job shall be send again later.
	JobErrorCode_JOB_ERROR_CODE_BUSY JobErrorCode = 1
	// The job failed, the retry will be attempted.
	JobErrorCode_JOB_ERROR_CODE_ERROR JobErrorCode = 5
	// The job failed, the retry will NOT be attempted.
	JobErrorCode_JOB_ERROR_CODE_FATAL JobErrorCode = 9
)

// Enum value maps for JobErrorCode.
var (
	JobErrorCode_name = map[int32]string{
		0: "JOB_ERROR_CODE_NONE",
		1: "JOB_ERROR_CODE_BUSY",
		5: "JOB_ERROR_CODE_ERROR",
		9: "JOB_ERROR_CODE_FATAL",
	}
	JobErrorCode_value = map[string]int32{
		"JOB_ERROR_CODE_NONE":  0,
		"JOB_ERROR_CODE_BUSY":  1,
		"JOB_ERROR_CODE_ERROR": 5,
		"JOB_ERROR_CODE_FATAL": 9,
	}
)

func (x JobErrorCode) Enum() *JobErrorCode {
	p := new(JobErrorCode)
	*p = x
	return p
}

func (x JobErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[4].Descriptor()
}

func (JobErrorCode) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[4]
}

func (x JobErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobErrorCode.Descriptor instead.
func (JobErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{4}
}

// Error codes
type ErrorCode int32

const (
	// No error
	ErrorCode_ERROR_CODE_OK ErrorCode = 0
	// Generic error
	ErrorCode_ERROR_CODE_ERROR ErrorCode = 4
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "ERROR_CODE_OK",
		4: "ERROR_CODE_ERROR",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_OK":    0,
		"ERROR_CODE_ERROR": 4,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[5].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[5]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{5}
}

// Driver -> Taskmaster job/action progress update message
type ProgressUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The oneof field containing the progress update data - either for job or for action.
	//
	// Types that are assignable to Progress:
	//
	//	*ProgressUpdate_Job
	//	*ProgressUpdate_Action
	Progress isProgressUpdate_Progress `protobuf_oneof:"progress"`
}

func (x *ProgressUpdate) Reset() {
	*x = ProgressUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressUpdate) ProtoMessage() {}

func (x *ProgressUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressUpdate.ProtoReflect.Descriptor instead.
func (*ProgressUpdate) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{0}
}

func (m *ProgressUpdate) GetProgress() isProgressUpdate_Progress {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (x *ProgressUpdate) GetJob() *JobProgressUpdate {
	if x, ok := x.GetProgress().(*ProgressUpdate_Job); ok {
		return x.Job
	}
	return nil
}

func (x *ProgressUpdate) GetAction() *ActionProgressUpdate {
	if x, ok := x.GetProgress().(*ProgressUpdate_Action); ok {
		return x.Action
	}
	return nil
}

type isProgressUpdate_Progress interface {
	isProgressUpdate_Progress()
}

type ProgressUpdate_Job struct {
	Job *JobProgressUpdate `protobuf:"bytes,1,opt,name=job,proto3,oneof"` // The job progress update data. It shall be called once and only once for each job. It shall be also called as the last message in the stream; other updates will be ignored after this.
}

type ProgressUpdate_Action struct {
	Action *ActionProgressUpdate `protobuf:"bytes,2,opt,name=action,proto3,oneof"` // The action progress update data. It shall be called for each action in the job.
}

func (*ProgressUpdate_Job) isProgressUpdate_Progress() {}

func (*ProgressUpdate_Action) isProgressUpdate_Progress() {}

// Sub-message containing action progress update
type ActionProgressUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId    string           `protobuf:"bytes,1,opt,name=job_id,json=id,proto3" json:"job_id,omitempty"`                                            // The job identifier.
	ActionId string           `protobuf:"bytes,2,opt,name=action_id,json=a,proto3" json:"action_id,omitempty"`                                       // The action identifier.
	Code     ActionResultCode `protobuf:"varint,3,opt,name=code,json=c,proto3,enum=io.clbs.openhes.pbdriver.ActionResultCode" json:"code,omitempty"` // The status related to the action.
	Data     *ActionData      `protobuf:"bytes,4,opt,name=data,json=d,proto3,oneof" json:"data,omitempty"`                                           // The action result data. Shall be empty if the code is not OK.
}

func (x *ActionProgressUpdate) Reset() {
	*x = ActionProgressUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionProgressUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionProgressUpdate) ProtoMessage() {}

func (x *ActionProgressUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionProgressUpdate.ProtoReflect.Descriptor instead.
func (*ActionProgressUpdate) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{1}
}

func (x *ActionProgressUpdate) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *ActionProgressUpdate) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *ActionProgressUpdate) GetCode() ActionResultCode {
	if x != nil {
		return x.Code
	}
	return ActionResultCode_ERROR_CODE_ACTION_OK
}

func (x *ActionProgressUpdate) GetData() *ActionData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Sub-message containing job progress update
type JobProgressUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId    string       `protobuf:"bytes,1,opt,name=job_id,json=id,proto3" json:"job_id,omitempty"`                                        // The job identifier.
	Code     JobErrorCode `protobuf:"varint,2,opt,name=code,json=c,proto3,enum=io.clbs.openhes.pbdriver.JobErrorCode" json:"code,omitempty"` // The status related to the job and or action update message.
	Duration int64        `protobuf:"varint,3,opt,name=duration,json=d,proto3" json:"duration,omitempty"`                                    // The duration of the job in miliseconds.
}

func (x *JobProgressUpdate) Reset() {
	*x = JobProgressUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobProgressUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobProgressUpdate) ProtoMessage() {}

func (x *JobProgressUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobProgressUpdate.ProtoReflect.Descriptor instead.
func (*JobProgressUpdate) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{2}
}

func (x *JobProgressUpdate) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobProgressUpdate) GetCode() JobErrorCode {
	if x != nil {
		return x.Code
	}
	return JobErrorCode_JOB_ERROR_CODE_NONE
}

func (x *JobProgressUpdate) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Sub-message containing action-based variant of data values
type ActionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*ActionData_Nodata
	//	*ActionData_Billings
	//	*ActionData_Profile
	Data isActionData_Data `protobuf_oneof:"data"`
}

func (x *ActionData) Reset() {
	*x = ActionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionData) ProtoMessage() {}

func (x *ActionData) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionData.ProtoReflect.Descriptor instead.
func (*ActionData) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{3}
}

func (m *ActionData) GetData() isActionData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ActionData) GetNodata() *emptypb.Empty {
	if x, ok := x.GetData().(*ActionData_Nodata); ok {
		return x.Nodata
	}
	return nil
}

func (x *ActionData) GetBillings() *BillingValues {
	if x, ok := x.GetData().(*ActionData_Billings); ok {
		return x.Billings
	}
	return nil
}

func (x *ActionData) GetProfile() *ProfileValues {
	if x, ok := x.GetData().(*ActionData_Profile); ok {
		return x.Profile
	}
	return nil
}

type isActionData_Data interface {
	isActionData_Data()
}

type ActionData_Nodata struct {
	Nodata *emptypb.Empty `protobuf:"bytes,1,opt,name=nodata,json=n,proto3,oneof"` // No data
}

type ActionData_Billings struct {
	Billings *BillingValues `protobuf:"bytes,2,opt,name=billings,json=r,proto3,oneof"` // Register values
}

type ActionData_Profile struct {
	Profile *ProfileValues `protobuf:"bytes,3,opt,name=profile,json=p,proto3,oneof"` // Profile values
}

func (*ActionData_Nodata) isActionData_Data() {}

func (*ActionData_Billings) isActionData_Data() {}

func (*ActionData_Profile) isActionData_Data() {}

// Sub-message containing profile-typed values
type ProfileValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period int32          `protobuf:"varint,1,opt,name=period,json=p,proto3" json:"period,omitempty"` // The period of the profile values.
	Unit   string         `protobuf:"bytes,2,opt,name=unit,json=u,proto3" json:"unit,omitempty"`      // The unit of the profile values.
	Blocks []*ProfileBlok `protobuf:"bytes,3,rep,name=blocks,json=b,proto3" json:"blocks,omitempty"`  // The list of continuous profile blocks.
}

func (x *ProfileValues) Reset() {
	*x = ProfileValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileValues) ProtoMessage() {}

func (x *ProfileValues) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileValues.ProtoReflect.Descriptor instead.
func (*ProfileValues) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{4}
}

func (x *ProfileValues) GetPeriod() int32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *ProfileValues) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ProfileValues) GetBlocks() []*ProfileBlok {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// Sub-message containing a single profile block
type ProfileBlok struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_timestamp,json=t,proto3" json:"start_timestamp,omitempty"` // The start timestamp of the block.
	Values         []*MeasuredValue       `protobuf:"bytes,2,rep,name=values,json=v,proto3" json:"values,omitempty"`                   // The list of profile values. Values are ordered by timestamp.
}

func (x *ProfileBlok) Reset() {
	*x = ProfileBlok{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileBlok) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileBlok) ProtoMessage() {}

func (x *ProfileBlok) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileBlok.ProtoReflect.Descriptor instead.
func (*ProfileBlok) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{5}
}

func (x *ProfileBlok) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *ProfileBlok) GetValues() []*MeasuredValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// Sub-message containing billing-typed values
type BillingValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*BillingValue `protobuf:"bytes,1,rep,name=values,json=v,proto3" json:"values,omitempty"` // The list of register values.
}

func (x *BillingValues) Reset() {
	*x = BillingValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillingValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingValues) ProtoMessage() {}

func (x *BillingValues) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingValues.ProtoReflect.Descriptor instead.
func (*BillingValues) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{6}
}

func (x *BillingValues) GetValues() []*BillingValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// Sub-message containing billing-typed value
type BillingValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,json=t,proto3" json:"timestamp,omitempty"` // The timestamp of the value.
	Unit      string                 `protobuf:"bytes,2,opt,name=unit,json=u,proto3" json:"unit,omitempty"`           // The unit of the value.
	Value     *MeasuredValue         `protobuf:"bytes,3,opt,name=value,json=v,proto3" json:"value,omitempty"`         // The value.
}

func (x *BillingValue) Reset() {
	*x = BillingValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillingValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingValue) ProtoMessage() {}

func (x *BillingValue) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingValue.ProtoReflect.Descriptor instead.
func (*BillingValue) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{7}
}

func (x *BillingValue) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *BillingValue) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *BillingValue) GetValue() *MeasuredValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// Sub-message containing measured value
type MeasuredValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *int64 `protobuf:"varint,1,opt,name=status,json=s,proto3,oneof" json:"status,omitempty"` // The status of the value.
	// Types that are assignable to Value:
	//
	//	*MeasuredValue_DoubleValue
	//	*MeasuredValue_IntValue
	Value    isMeasuredValue_Value `protobuf_oneof:"value"`
	Exponent int32                 `protobuf:"varint,4,opt,name=exponent,json=e,proto3" json:"exponent,omitempty"` // The exponent of the value.
}

func (x *MeasuredValue) Reset() {
	*x = MeasuredValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasuredValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasuredValue) ProtoMessage() {}

func (x *MeasuredValue) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasuredValue.ProtoReflect.Descriptor instead.
func (*MeasuredValue) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{8}
}

func (x *MeasuredValue) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (m *MeasuredValue) GetValue() isMeasuredValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MeasuredValue) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*MeasuredValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *MeasuredValue) GetIntValue() int64 {
	if x, ok := x.GetValue().(*MeasuredValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *MeasuredValue) GetExponent() int32 {
	if x != nil {
		return x.Exponent
	}
	return 0
}

type isMeasuredValue_Value interface {
	isMeasuredValue_Value()
}

type MeasuredValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,2,opt,name=double_value,json=d,proto3,oneof"` // The double-typed value.
}

type MeasuredValue_IntValue struct {
	IntValue int64 `protobuf:"varint,3,opt,name=int_value,json=i,proto3,oneof"` // The integer-typed value.
}

func (*MeasuredValue_DoubleValue) isMeasuredValue_Value() {}

func (*MeasuredValue_IntValue) isMeasuredValue_Value() {}

// Sub-message containing attribute definition
type AttributeDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string          `protobuf:"bytes,1,opt,name=name,json=n,proto3" json:"name,omitempty"`                                              // The name of the attribute.
	Description  string          `protobuf:"bytes,2,opt,name=description,json=d,proto3" json:"description,omitempty"`                                // The description of the attribute.
	Type         AttributeType   `protobuf:"varint,3,opt,name=type,json=t,proto3,enum=io.clbs.openhes.pbdriver.AttributeType" json:"type,omitempty"` // The type of the attribute.
	Mandatory    bool            `protobuf:"varint,4,opt,name=mandatory,json=m,proto3" json:"mandatory,omitempty"`                                   // The attribute is mandatory or not.s
	DefaultValue *AttributeValue `protobuf:"bytes,5,opt,name=default_value,json=v,proto3,oneof" json:"default_value,omitempty"`                      // The default value of the attribute.
}

func (x *AttributeDefinition) Reset() {
	*x = AttributeDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeDefinition) ProtoMessage() {}

func (x *AttributeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeDefinition.ProtoReflect.Descriptor instead.
func (*AttributeDefinition) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{9}
}

func (x *AttributeDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttributeDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AttributeDefinition) GetType() AttributeType {
	if x != nil {
		return x.Type
	}
	return AttributeType_ATTRIBUTE_TYPE_INT
}

func (x *AttributeDefinition) GetMandatory() bool {
	if x != nil {
		return x.Mandatory
	}
	return false
}

func (x *AttributeDefinition) GetDefaultValue() *AttributeValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

// Sub-message containing job action attributes
type JobActionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       ActionType             `protobuf:"varint,1,opt,name=type,json=t,proto3,enum=io.clbs.openhes.pbdriver.ActionType" json:"type,omitempty"` // The action type.
	Attributes []*AttributeDefinition `protobuf:"bytes,2,rep,name=attributes,json=a,proto3" json:"attributes,omitempty"`                               // The template of the action attributes. It is represented as a list of attribute definitions.
}

func (x *JobActionAttributes) Reset() {
	*x = JobActionAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobActionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobActionAttributes) ProtoMessage() {}

func (x *JobActionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobActionAttributes.ProtoReflect.Descriptor instead.
func (*JobActionAttributes) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{10}
}

func (x *JobActionAttributes) GetType() ActionType {
	if x != nil {
		return x.Type
	}
	return ActionType_ACTION_TYPE_GET_REGISTER
}

func (x *JobActionAttributes) GetAttributes() []*AttributeDefinition {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type StartJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId          string          `protobuf:"bytes,1,opt,name=job_id,json=id,proto3" json:"job_id,omitempty"`                   // The job identifier.
	ConnectionInfo *ConnectionInfo `protobuf:"bytes,2,opt,name=connection_info,json=ci,proto3" json:"connection_info,omitempty"` // The connection info for the job.
	JobSettings    *JobSettings    `protobuf:"bytes,3,opt,name=job_settings,json=js,proto3" json:"job_settings,omitempty"`       // The job parameters.
	JobActions     []*JobAction    `protobuf:"bytes,4,rep,name=job_actions,json=a,proto3" json:"job_actions,omitempty"`          // The list actions to be executed.
}

func (x *StartJobRequest) Reset() {
	*x = StartJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartJobRequest) ProtoMessage() {}

func (x *StartJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartJobRequest.ProtoReflect.Descriptor instead.
func (*StartJobRequest) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{11}
}

func (x *StartJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *StartJobRequest) GetConnectionInfo() *ConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *StartJobRequest) GetJobSettings() *JobSettings {
	if x != nil {
		return x.JobSettings
	}
	return nil
}

func (x *StartJobRequest) GetJobActions() []*JobAction {
	if x != nil {
		return x.JobActions
	}
	return nil
}

// Sub-message containing connection info
type ConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceAttributes map[string]*AttributeValue `protobuf:"bytes,1,rep,name=device_attributes,json=da,proto3" json:"device_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // The connection attributes to the device.
	// Types that are assignable to Connection:
	//
	//	*ConnectionInfo_Tcp
	//	*ConnectionInfo_Phone
	//	*ConnectionInfo_Serial
	Connection isConnectionInfo_Connection `protobuf_oneof:"connection"`
}

func (x *ConnectionInfo) Reset() {
	*x = ConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionInfo) ProtoMessage() {}

func (x *ConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionInfo.ProtoReflect.Descriptor instead.
func (*ConnectionInfo) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{12}
}

func (x *ConnectionInfo) GetDeviceAttributes() map[string]*AttributeValue {
	if x != nil {
		return x.DeviceAttributes
	}
	return nil
}

func (m *ConnectionInfo) GetConnection() isConnectionInfo_Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (x *ConnectionInfo) GetTcp() *ConnectionTypeTcp {
	if x, ok := x.GetConnection().(*ConnectionInfo_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *ConnectionInfo) GetPhone() *ConnectionTypePhone {
	if x, ok := x.GetConnection().(*ConnectionInfo_Phone); ok {
		return x.Phone
	}
	return nil
}

func (x *ConnectionInfo) GetSerial() *ConnectionTypeSerial {
	if x, ok := x.GetConnection().(*ConnectionInfo_Serial); ok {
		return x.Serial
	}
	return nil
}

type isConnectionInfo_Connection interface {
	isConnectionInfo_Connection()
}

type ConnectionInfo_Tcp struct {
	Tcp *ConnectionTypeTcp `protobuf:"bytes,2,opt,name=tcp,json=t,proto3,oneof"` // The TCP connection type.
}

type ConnectionInfo_Phone struct {
	Phone *ConnectionTypePhone `protobuf:"bytes,3,opt,name=phone,json=p,proto3,oneof"` // The phone connection type.
}

type ConnectionInfo_Serial struct {
	Serial *ConnectionTypeSerial `protobuf:"bytes,4,opt,name=serial,json=s,proto3,oneof"` // The serial connection type.
}

func (*ConnectionInfo_Tcp) isConnectionInfo_Connection() {}

func (*ConnectionInfo_Phone) isConnectionInfo_Connection() {}

func (*ConnectionInfo_Serial) isConnectionInfo_Connection() {}

// Sub-message containing connection info for TCP connection type
type ConnectionTypeTcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host    string `protobuf:"bytes,1,opt,name=host,json=h,proto3" json:"host,omitempty"`               // The host name or IP address of the device to connect to.
	Port    uint32 `protobuf:"varint,2,opt,name=port,json=p,proto3" json:"port,omitempty"`              // The TCP port number of the device to connect to.
	Timeout *int32 `protobuf:"varint,3,opt,name=timeout,json=to,proto3,oneof" json:"timeout,omitempty"` // The timeout in seconds for the connection.
}

func (x *ConnectionTypeTcp) Reset() {
	*x = ConnectionTypeTcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionTypeTcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionTypeTcp) ProtoMessage() {}

func (x *ConnectionTypeTcp) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionTypeTcp.ProtoReflect.Descriptor instead.
func (*ConnectionTypeTcp) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{13}
}

func (x *ConnectionTypeTcp) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ConnectionTypeTcp) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ConnectionTypeTcp) GetTimeout() int32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

// Sub-message containing connection info for TCP connection type
type ConnectionTypePhone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number string `protobuf:"bytes,1,opt,name=number,json=h,proto3" json:"number,omitempty"` // The phone number of the device to connect to.
}

func (x *ConnectionTypePhone) Reset() {
	*x = ConnectionTypePhone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionTypePhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionTypePhone) ProtoMessage() {}

func (x *ConnectionTypePhone) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionTypePhone.ProtoReflect.Descriptor instead.
func (*ConnectionTypePhone) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{14}
}

func (x *ConnectionTypePhone) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

// Sub-message containing connection info for TCP connection type
type ConnectionTypeSerial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectionTypeSerial) Reset() {
	*x = ConnectionTypeSerial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionTypeSerial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionTypeSerial) ProtoMessage() {}

func (x *ConnectionTypeSerial) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionTypeSerial.ProtoReflect.Descriptor instead.
func (*ConnectionTypeSerial) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{15}
}

// Sub-message containing job parameters
type JobSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxDuration int64                  `protobuf:"varint,1,opt,name=max_duration,json=md,proto3" json:"max_duration,omitempty"`                                  // Maximum duration of the job attempt in miliseconds. This is related to the real time for the driver.
	Priority    JobPriority            `protobuf:"varint,2,opt,name=priority,json=p,proto3,enum=io.clbs.openhes.pbdriver.JobPriority" json:"priority,omitempty"` // Priority of the job.
	Attempts    int32                  `protobuf:"varint,3,opt,name=attempts,json=a,proto3" json:"attempts,omitempty"`                                           // Maximum number of attempts, 1 is the minimum.
	RetryDelay  int64                  `protobuf:"varint,4,opt,name=retry_delay,json=rd,proto3" json:"retry_delay,omitempty"`                                    // Delay in miliseconds between two attempts.
	DeferStart  uint64                 `protobuf:"varint,5,opt,name=defer_start,json=ds,proto3" json:"defer_start,omitempty"`                                    // Number of miliseconds to wait before starting the job.
	ExpiresAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expires_at,json=et,proto3" json:"expires_at,omitempty"`                                       // The timestamp when the job expires.
}

func (x *JobSettings) Reset() {
	*x = JobSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSettings) ProtoMessage() {}

func (x *JobSettings) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSettings.ProtoReflect.Descriptor instead.
func (*JobSettings) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{16}
}

func (x *JobSettings) GetMaxDuration() int64 {
	if x != nil {
		return x.MaxDuration
	}
	return 0
}

func (x *JobSettings) GetPriority() JobPriority {
	if x != nil {
		return x.Priority
	}
	return JobPriority_PRIORITY_0
}

func (x *JobSettings) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *JobSettings) GetRetryDelay() int64 {
	if x != nil {
		return x.RetryDelay
	}
	return 0
}

func (x *JobSettings) GetDeferStart() uint64 {
	if x != nil {
		return x.DeferStart
	}
	return 0
}

func (x *JobSettings) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

// Sub-message containing job action specification
type JobAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId   string                     `protobuf:"bytes,1,opt,name=action_id,json=id,proto3" json:"action_id,omitempty"`                                                                                          // The action identifier.
	Attributes map[string]*AttributeValue `protobuf:"bytes,2,rep,name=attributes,json=a,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // The action attributes.
	// Types that are assignable to Action:
	//
	//	*JobAction_GetRegister
	//	*JobAction_GetPeriodicalProfile
	//	*JobAction_GetIrregularProfile
	//	*JobAction_GetEvents
	//	*JobAction_GetClock
	//	*JobAction_SyncClock
	//	*JobAction_GetRelayState
	//	*JobAction_SetRelayState
	//	*JobAction_GetDisconnectorState
	//	*JobAction_SetDisconnectorState
	//	*JobAction_GetTou
	//	*JobAction_SetTou
	//	*JobAction_GetLimiter
	//	*JobAction_SetLimiter
	//	*JobAction_ResetBillingPeriod
	//	*JobAction_FwUpdate
	Action isJobAction_Action `protobuf_oneof:"action"`
}

func (x *JobAction) Reset() {
	*x = JobAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobAction) ProtoMessage() {}

func (x *JobAction) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobAction.ProtoReflect.Descriptor instead.
func (*JobAction) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{17}
}

func (x *JobAction) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *JobAction) GetAttributes() map[string]*AttributeValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (m *JobAction) GetAction() isJobAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *JobAction) GetGetRegister() *ActionGetRegister {
	if x, ok := x.GetAction().(*JobAction_GetRegister); ok {
		return x.GetRegister
	}
	return nil
}

func (x *JobAction) GetGetPeriodicalProfile() *ActionGetPeriodicalProfile {
	if x, ok := x.GetAction().(*JobAction_GetPeriodicalProfile); ok {
		return x.GetPeriodicalProfile
	}
	return nil
}

func (x *JobAction) GetGetIrregularProfile() *ActionGetIrregularProfile {
	if x, ok := x.GetAction().(*JobAction_GetIrregularProfile); ok {
		return x.GetIrregularProfile
	}
	return nil
}

func (x *JobAction) GetGetEvents() *ActionGetEvents {
	if x, ok := x.GetAction().(*JobAction_GetEvents); ok {
		return x.GetEvents
	}
	return nil
}

func (x *JobAction) GetGetClock() *ActionGetClock {
	if x, ok := x.GetAction().(*JobAction_GetClock); ok {
		return x.GetClock
	}
	return nil
}

func (x *JobAction) GetSyncClock() *ActionSyncClock {
	if x, ok := x.GetAction().(*JobAction_SyncClock); ok {
		return x.SyncClock
	}
	return nil
}

func (x *JobAction) GetGetRelayState() *ActionGetRelayState {
	if x, ok := x.GetAction().(*JobAction_GetRelayState); ok {
		return x.GetRelayState
	}
	return nil
}

func (x *JobAction) GetSetRelayState() *ActionSetRelayState {
	if x, ok := x.GetAction().(*JobAction_SetRelayState); ok {
		return x.SetRelayState
	}
	return nil
}

func (x *JobAction) GetGetDisconnectorState() *ActionGetDisconnectorState {
	if x, ok := x.GetAction().(*JobAction_GetDisconnectorState); ok {
		return x.GetDisconnectorState
	}
	return nil
}

func (x *JobAction) GetSetDisconnectorState() *ActionSetDisconnectorState {
	if x, ok := x.GetAction().(*JobAction_SetDisconnectorState); ok {
		return x.SetDisconnectorState
	}
	return nil
}

func (x *JobAction) GetGetTou() *ActionGetTou {
	if x, ok := x.GetAction().(*JobAction_GetTou); ok {
		return x.GetTou
	}
	return nil
}

func (x *JobAction) GetSetTou() *ActionSetTou {
	if x, ok := x.GetAction().(*JobAction_SetTou); ok {
		return x.SetTou
	}
	return nil
}

func (x *JobAction) GetGetLimiter() *ActionGetLimiter {
	if x, ok := x.GetAction().(*JobAction_GetLimiter); ok {
		return x.GetLimiter
	}
	return nil
}

func (x *JobAction) GetSetLimiter() *ActionSetLimiter {
	if x, ok := x.GetAction().(*JobAction_SetLimiter); ok {
		return x.SetLimiter
	}
	return nil
}

func (x *JobAction) GetResetBillingPeriod() *ActionResetBillingPeriod {
	if x, ok := x.GetAction().(*JobAction_ResetBillingPeriod); ok {
		return x.ResetBillingPeriod
	}
	return nil
}

func (x *JobAction) GetFwUpdate() *ActionFwUpdate {
	if x, ok := x.GetAction().(*JobAction_FwUpdate); ok {
		return x.FwUpdate
	}
	return nil
}

type isJobAction_Action interface {
	isJobAction_Action()
}

type JobAction_GetRegister struct {
	GetRegister *ActionGetRegister `protobuf:"bytes,3,opt,name=get_register,json=a3,proto3,oneof"` // The get register action specification.
}

type JobAction_GetPeriodicalProfile struct {
	GetPeriodicalProfile *ActionGetPeriodicalProfile `protobuf:"bytes,4,opt,name=get_periodical_profile,json=a4,proto3,oneof"` // The get periodical profile action specification.
}

type JobAction_GetIrregularProfile struct {
	GetIrregularProfile *ActionGetIrregularProfile `protobuf:"bytes,5,opt,name=get_irregular_profile,json=a5,proto3,oneof"` // The get irregular profile action specification.
}

type JobAction_GetEvents struct {
	GetEvents *ActionGetEvents `protobuf:"bytes,6,opt,name=get_events,json=a6,proto3,oneof"` // The get events action specification.
}

type JobAction_GetClock struct {
	GetClock *ActionGetClock `protobuf:"bytes,7,opt,name=get_clock,json=a7,proto3,oneof"` // The get clock action specification.
}

type JobAction_SyncClock struct {
	SyncClock *ActionSyncClock `protobuf:"bytes,8,opt,name=sync_clock,json=a8,proto3,oneof"` // The sync clock action specification.
}

type JobAction_GetRelayState struct {
	GetRelayState *ActionGetRelayState `protobuf:"bytes,9,opt,name=get_relay_state,json=a9,proto3,oneof"` // The get relay state action specification.
}

type JobAction_SetRelayState struct {
	SetRelayState *ActionSetRelayState `protobuf:"bytes,10,opt,name=set_relay_state,json=a10,proto3,oneof"` // The set relay state action specification.
}

type JobAction_GetDisconnectorState struct {
	GetDisconnectorState *ActionGetDisconnectorState `protobuf:"bytes,11,opt,name=get_disconnector_state,json=a11,proto3,oneof"` // The get disconnector state action specification.
}

type JobAction_SetDisconnectorState struct {
	SetDisconnectorState *ActionSetDisconnectorState `protobuf:"bytes,12,opt,name=set_disconnector_state,json=a12,proto3,oneof"` // The set disconnector state action specification.
}

type JobAction_GetTou struct {
	GetTou *ActionGetTou `protobuf:"bytes,13,opt,name=get_tou,json=a13,proto3,oneof"` // The get tou action specification.
}

type JobAction_SetTou struct {
	SetTou *ActionSetTou `protobuf:"bytes,14,opt,name=set_tou,json=a14,proto3,oneof"` // The set tou action specification.
}

type JobAction_GetLimiter struct {
	GetLimiter *ActionGetLimiter `protobuf:"bytes,15,opt,name=get_limiter,json=a15,proto3,oneof"` // The get limiter action specification.
}

type JobAction_SetLimiter struct {
	SetLimiter *ActionSetLimiter `protobuf:"bytes,16,opt,name=set_limiter,json=a16,proto3,oneof"` // The set limiter action specification.
}

type JobAction_ResetBillingPeriod struct {
	ResetBillingPeriod *ActionResetBillingPeriod `protobuf:"bytes,17,opt,name=reset_billing_period,json=a17,proto3,oneof"` // The reset billing period action specification.
}

type JobAction_FwUpdate struct {
	FwUpdate *ActionFwUpdate `protobuf:"bytes,18,opt,name=fw_update,json=a18,proto3,oneof"` // The firmware update action specification.
}

func (*JobAction_GetRegister) isJobAction_Action() {}

func (*JobAction_GetPeriodicalProfile) isJobAction_Action() {}

func (*JobAction_GetIrregularProfile) isJobAction_Action() {}

func (*JobAction_GetEvents) isJobAction_Action() {}

func (*JobAction_GetClock) isJobAction_Action() {}

func (*JobAction_SyncClock) isJobAction_Action() {}

func (*JobAction_GetRelayState) isJobAction_Action() {}

func (*JobAction_SetRelayState) isJobAction_Action() {}

func (*JobAction_GetDisconnectorState) isJobAction_Action() {}

func (*JobAction_SetDisconnectorState) isJobAction_Action() {}

func (*JobAction_GetTou) isJobAction_Action() {}

func (*JobAction_SetTou) isJobAction_Action() {}

func (*JobAction_GetLimiter) isJobAction_Action() {}

func (*JobAction_SetLimiter) isJobAction_Action() {}

func (*JobAction_ResetBillingPeriod) isJobAction_Action() {}

func (*JobAction_FwUpdate) isJobAction_Action() {}

// Sub-message containing get register action specification
type ActionGetRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionGetRegister) Reset() {
	*x = ActionGetRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionGetRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetRegister) ProtoMessage() {}

func (x *ActionGetRegister) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetRegister.ProtoReflect.Descriptor instead.
func (*ActionGetRegister) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{18}
}

// Sub-message containing get periodical profile action specification
type ActionGetPeriodicalProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,json=f,proto3" json:"from,omitempty"` // The start timestamp of the profile.
	To   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to,json=t,proto3" json:"to,omitempty"`     // The end timestamp of the profile.
}

func (x *ActionGetPeriodicalProfile) Reset() {
	*x = ActionGetPeriodicalProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionGetPeriodicalProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetPeriodicalProfile) ProtoMessage() {}

func (x *ActionGetPeriodicalProfile) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetPeriodicalProfile.ProtoReflect.Descriptor instead.
func (*ActionGetPeriodicalProfile) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{19}
}

func (x *ActionGetPeriodicalProfile) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ActionGetPeriodicalProfile) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

// Sub-message containing get irregular profile action specification
type ActionGetIrregularProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionGetIrregularProfile) Reset() {
	*x = ActionGetIrregularProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionGetIrregularProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetIrregularProfile) ProtoMessage() {}

func (x *ActionGetIrregularProfile) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetIrregularProfile.ProtoReflect.Descriptor instead.
func (*ActionGetIrregularProfile) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{20}
}

// Sub-message containing get events action specification
type ActionGetEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionGetEvents) Reset() {
	*x = ActionGetEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionGetEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetEvents) ProtoMessage() {}

func (x *ActionGetEvents) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetEvents.ProtoReflect.Descriptor instead.
func (*ActionGetEvents) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{21}
}

// Sub-message containing get clock action specification
type ActionGetClock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionGetClock) Reset() {
	*x = ActionGetClock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionGetClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetClock) ProtoMessage() {}

func (x *ActionGetClock) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetClock.ProtoReflect.Descriptor instead.
func (*ActionGetClock) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{22}
}

// Sub-message containing sync clock action specification
type ActionSyncClock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionSyncClock) Reset() {
	*x = ActionSyncClock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSyncClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSyncClock) ProtoMessage() {}

func (x *ActionSyncClock) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSyncClock.ProtoReflect.Descriptor instead.
func (*ActionSyncClock) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{23}
}

// Sub-message containing get relay state action specification
type ActionGetRelayState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionGetRelayState) Reset() {
	*x = ActionGetRelayState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionGetRelayState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetRelayState) ProtoMessage() {}

func (x *ActionGetRelayState) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetRelayState.ProtoReflect.Descriptor instead.
func (*ActionGetRelayState) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{24}
}

// Sub-message containing set relay state action specification
type ActionSetRelayState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionSetRelayState) Reset() {
	*x = ActionSetRelayState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSetRelayState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSetRelayState) ProtoMessage() {}

func (x *ActionSetRelayState) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSetRelayState.ProtoReflect.Descriptor instead.
func (*ActionSetRelayState) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{25}
}

// Sub-message containing get disconnector state action specification
type ActionGetDisconnectorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionGetDisconnectorState) Reset() {
	*x = ActionGetDisconnectorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionGetDisconnectorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetDisconnectorState) ProtoMessage() {}

func (x *ActionGetDisconnectorState) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetDisconnectorState.ProtoReflect.Descriptor instead.
func (*ActionGetDisconnectorState) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{26}
}

// Sub-message containing set disconnector state action specification
type ActionSetDisconnectorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionSetDisconnectorState) Reset() {
	*x = ActionSetDisconnectorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSetDisconnectorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSetDisconnectorState) ProtoMessage() {}

func (x *ActionSetDisconnectorState) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSetDisconnectorState.ProtoReflect.Descriptor instead.
func (*ActionSetDisconnectorState) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{27}
}

// Sub-message containing get tou action specification
type ActionGetTou struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionGetTou) Reset() {
	*x = ActionGetTou{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionGetTou) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetTou) ProtoMessage() {}

func (x *ActionGetTou) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetTou.ProtoReflect.Descriptor instead.
func (*ActionGetTou) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{28}
}

// Sub-message containing set tou action specification
type ActionSetTou struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionSetTou) Reset() {
	*x = ActionSetTou{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSetTou) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSetTou) ProtoMessage() {}

func (x *ActionSetTou) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSetTou.ProtoReflect.Descriptor instead.
func (*ActionSetTou) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{29}
}

// Sub-message containing get limiter action specification
type ActionGetLimiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionGetLimiter) Reset() {
	*x = ActionGetLimiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionGetLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetLimiter) ProtoMessage() {}

func (x *ActionGetLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetLimiter.ProtoReflect.Descriptor instead.
func (*ActionGetLimiter) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{30}
}

// Sub-message containing set limiter action specification
type ActionSetLimiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionSetLimiter) Reset() {
	*x = ActionSetLimiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSetLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSetLimiter) ProtoMessage() {}

func (x *ActionSetLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSetLimiter.ProtoReflect.Descriptor instead.
func (*ActionSetLimiter) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{31}
}

// Sub-message containing reset billing period action specification
type ActionResetBillingPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionResetBillingPeriod) Reset() {
	*x = ActionResetBillingPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionResetBillingPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResetBillingPeriod) ProtoMessage() {}

func (x *ActionResetBillingPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResetBillingPeriod.ProtoReflect.Descriptor instead.
func (*ActionResetBillingPeriod) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{32}
}

// Sub-message containing firmware update action specification
type ActionFwUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionFwUpdate) Reset() {
	*x = ActionFwUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionFwUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionFwUpdate) ProtoMessage() {}

func (x *ActionFwUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionFwUpdate.ProtoReflect.Descriptor instead.
func (*ActionFwUpdate) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{33}
}

// Sub-message containing single attribute value specification
type AttributeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*AttributeValue_StrValue
	//	*AttributeValue_IntValue
	//	*AttributeValue_DoubleValue
	//	*AttributeValue_BinaryValue
	Value isAttributeValue_Value `protobuf_oneof:"value"`
}

func (x *AttributeValue) Reset() {
	*x = AttributeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeValue) ProtoMessage() {}

func (x *AttributeValue) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeValue.ProtoReflect.Descriptor instead.
func (*AttributeValue) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{34}
}

func (m *AttributeValue) GetValue() isAttributeValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AttributeValue) GetStrValue() string {
	if x, ok := x.GetValue().(*AttributeValue_StrValue); ok {
		return x.StrValue
	}
	return ""
}

func (x *AttributeValue) GetIntValue() int64 {
	if x, ok := x.GetValue().(*AttributeValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *AttributeValue) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*AttributeValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *AttributeValue) GetBinaryValue() []byte {
	if x, ok := x.GetValue().(*AttributeValue_BinaryValue); ok {
		return x.BinaryValue
	}
	return nil
}

type isAttributeValue_Value interface {
	isAttributeValue_Value()
}

type AttributeValue_StrValue struct {
	StrValue string `protobuf:"bytes,1,opt,name=str_value,json=s,proto3,oneof"` // The string-typed value.
}

type AttributeValue_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=i,proto3,oneof"` // The integer-typed value.
}

type AttributeValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=d,proto3,oneof"` // The double-typed value.
}

type AttributeValue_BinaryValue struct {
	BinaryValue []byte `protobuf:"bytes,4,opt,name=binary_value,json=b,proto3,oneof"` // The binary-typed value.
}

func (*AttributeValue_StrValue) isAttributeValue_Value() {}

func (*AttributeValue_IntValue) isAttributeValue_Value() {}

func (*AttributeValue_DoubleValue) isAttributeValue_Value() {}

func (*AttributeValue_BinaryValue) isAttributeValue_Value() {}

// Common gRPC response message
type CommonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result ErrorCode `protobuf:"varint,1,opt,name=result,proto3,enum=io.clbs.openhes.pbdriver.ErrorCode" json:"result,omitempty"` // The result of the operation.
}

func (x *CommonResponse) Reset() {
	*x = CommonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResponse) ProtoMessage() {}

func (x *CommonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResponse.ProtoReflect.Descriptor instead.
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{35}
}

func (x *CommonResponse) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERROR_CODE_OK
}

// Sub-message in driver negotiation request
type DriverTemplates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceAttributes []*AttributeDefinition `protobuf:"bytes,2,rep,name=device_attributes,json=deviceAttributes,proto3" json:"device_attributes,omitempty"` // The template of the connection attributes related to the device. It is represented as a list of attribute definitions.
	ActionAttributes []*JobActionAttributes `protobuf:"bytes,3,rep,name=action_attributes,json=actionAttributes,proto3" json:"action_attributes,omitempty"` // The templates of the job actions for all supported action types.
}

func (x *DriverTemplates) Reset() {
	*x = DriverTemplates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverTemplates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverTemplates) ProtoMessage() {}

func (x *DriverTemplates) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverTemplates.ProtoReflect.Descriptor instead.
func (*DriverTemplates) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{36}
}

func (x *DriverTemplates) GetDeviceAttributes() []*AttributeDefinition {
	if x != nil {
		return x.DeviceAttributes
	}
	return nil
}

func (x *DriverTemplates) GetActionAttributes() []*JobActionAttributes {
	if x != nil {
		return x.ActionAttributes
	}
	return nil
}

// Taskmaster -> Driver cancel job request message
type CancelJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=id,proto3" json:"job_id,omitempty"` // The job identifier.
}

func (x *CancelJobRequest) Reset() {
	*x = CancelJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobRequest) ProtoMessage() {}

func (x *CancelJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobRequest.ProtoReflect.Descriptor instead.
func (*CancelJobRequest) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{37}
}

func (x *CancelJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// Driver -> Taskmaster negotiate/health-check request message
type NegotiateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version           string           `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`                                   // The driver version.
	ListeningPort     uint32           `protobuf:"varint,2,opt,name=listening_port,json=listeningPort,proto3" json:"listening_port,omitempty"` // The port the driver will listen on.
	MeterType         string           `protobuf:"bytes,3,opt,name=meter_type,json=meterType,proto3" json:"meter_type,omitempty"`
	MaxConcurrentJobs int32            `protobuf:"varint,4,opt,name=max_concurrent_jobs,json=maxConcurrentJobs,proto3" json:"max_concurrent_jobs,omitempty"` // The maximum number of concurrent jobs the driver can handle.
	TypicalMemUsage   int32            `protobuf:"varint,5,opt,name=typical_mem_usage,json=typicalMemUsage,proto3" json:"typical_mem_usage,omitempty"`
	Templates         *DriverTemplates `protobuf:"bytes,6,opt,name=templates,proto3" json:"templates,omitempty"` // The connection and action templates.
}

func (x *NegotiateRequest) Reset() {
	*x = NegotiateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbdriver_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NegotiateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NegotiateRequest) ProtoMessage() {}

func (x *NegotiateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NegotiateRequest.ProtoReflect.Descriptor instead.
func (*NegotiateRequest) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{38}
}

func (x *NegotiateRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NegotiateRequest) GetListeningPort() uint32 {
	if x != nil {
		return x.ListeningPort
	}
	return 0
}

func (x *NegotiateRequest) GetMeterType() string {
	if x != nil {
		return x.MeterType
	}
	return ""
}

func (x *NegotiateRequest) GetMaxConcurrentJobs() int32 {
	if x != nil {
		return x.MaxConcurrentJobs
	}
	return 0
}

func (x *NegotiateRequest) GetTypicalMemUsage() int32 {
	if x != nil {
		return x.TypicalMemUsage
	}
	return 0
}

func (x *NegotiateRequest) GetTemplates() *DriverTemplates {
	if x != nil {
		return x.Templates
	}
	return nil
}

var File_pbdriver_proto protoreflect.FileDescriptor

var file_pbdriver_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x18, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x03, 0x6a,
	0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x48, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x01, 0x63, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x01, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x75, 0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x37, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x01, 0x63, 0x12, 0x13, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x64, 0x22, 0xc0,
	0x01, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a,
	0x06, 0x6e, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x01, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x01, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x01, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x6d, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x11, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x70, 0x12, 0x0f, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x75, 0x12, 0x38, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x6b, 0x52, 0x01, 0x62,
	0x22, 0x81, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x6b,
	0x12, 0x36, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x01, 0x76, 0x22, 0x4a, 0x0a, 0x0d, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x76,
	0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x01, 0x74, 0x12, 0x0f, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x01, 0x75, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x76, 0x22,
	0x83, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x01, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x0c, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x01, 0x64, 0x12, 0x16, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x01, 0x69, 0x12, 0x13, 0x0a, 0x08,
	0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x13, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6e, 0x12, 0x16,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x01, 0x74,
	0x12, 0x14, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x01, 0x6d, 0x12, 0x47, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x01, 0x76, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x01, 0x74,
	0x12, 0x44, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x01, 0x61, 0x22, 0xea, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x02, 0x63, 0x69, 0x12, 0x3f, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x02, 0x6a, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x01, 0x61, 0x22, 0xb3, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x02, 0x64, 0x61, 0x12, 0x3d, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x63, 0x70, 0x48,
	0x00, 0x52, 0x01, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x48, 0x00, 0x52, 0x01, 0x70, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x01, 0x73, 0x1a, 0x6d, 0x0a, 0x15,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x63, 0x70, 0x12, 0x0f,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x68, 0x12,
	0x0f, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x02, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x28, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x11, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x68,
	0x22, 0x16, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xde, 0x01, 0x0a, 0x0b, 0x4a, 0x6f, 0x62,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x6d, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x4a, 0x6f, 0x62, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x01, 0x70, 0x12, 0x13,
	0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x61, 0x12, 0x17, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x0b,
	0x64, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x65, 0x74, 0x22, 0xb1, 0x0b, 0x0a, 0x09, 0x4a, 0x6f,
	0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f,
	0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x01, 0x61, 0x12, 0x47, 0x0a, 0x0c, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x02, 0x61, 0x33, 0x12, 0x5a, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x02, 0x61, 0x34, 0x12,
	0x58, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x72, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x65, 0x74, 0x49, 0x72, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x02, 0x61, 0x35, 0x12, 0x43, 0x0a, 0x0a, 0x67, 0x65, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x02, 0x61, 0x36, 0x12, 0x41,
	0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x02, 0x61,
	0x37, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x02, 0x61, 0x38, 0x12, 0x4c, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x02, 0x61, 0x39, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x31, 0x30, 0x12, 0x5b, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x31, 0x31,
	0x12, 0x5b, 0x0a, 0x16, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x31, 0x32, 0x12, 0x3e, 0x0a,
	0x07, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x48, 0x00, 0x52, 0x03, 0x61, 0x31, 0x33, 0x12, 0x3e, 0x0a,
	0x07, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x75, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x48, 0x00, 0x52, 0x03, 0x61, 0x31, 0x34, 0x12, 0x46, 0x0a,
	0x0b, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x31, 0x35, 0x12, 0x46, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x61, 0x31, 0x36, 0x12, 0x57, 0x0a,
	0x14, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x31, 0x37, 0x12, 0x42, 0x0a, 0x09, 0x66, 0x77, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x77, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x31, 0x38, 0x1a, 0x67, 0x0a, 0x0f, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x13, 0x0a,
	0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x22, 0x74, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x2b, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x66, 0x12, 0x29, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x01, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x72, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x15, 0x0a,
	0x13, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x22, 0x0e, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x22, 0x12, 0x0a, 0x10, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x22,
	0x1a, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x7f, 0x0a,
	0x0e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x16, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x01, 0x73, 0x12, 0x16, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x01, 0x69, 0x12,
	0x19, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x01, 0x64, 0x12, 0x19, 0x0a, 0x0c, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x01, 0x62, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d,
	0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc9, 0x01,
	0x0a, 0x0f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x5a, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5a, 0x0a,
	0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x10, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x97, 0x02, 0x0a, 0x10, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2a, 0x9d, 0x01, 0x0a, 0x0b,
	0x4a, 0x6f, 0x62, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x30, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x35, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x36, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x38, 0x10, 0x08, 0x2a, 0x96, 0x01, 0x0a, 0x0d,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x10, 0x04, 0x2a, 0x8b, 0x04, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x41, 0x4c, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x52, 0x52,
	0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x43, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x10, 0x15, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x16, 0x12, 0x26, 0x0a,
	0x22, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x55, 0x10, 0x18, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x54, 0x4f, 0x55, 0x10, 0x19, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x45, 0x52, 0x10, 0x1a, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x52, 0x10,
	0x1b, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x28, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x57, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x32, 0x2a, 0x6c, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05,
	0x2a, 0x74, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x42,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x59,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4a, 0x4f, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14,
	0x4a, 0x4f, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46,
	0x41, 0x54, 0x41, 0x4c, 0x10, 0x09, 0x2a, 0x34, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x32, 0xd5, 0x01, 0x0a,
	0x0d, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61,
	0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x29, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x30,
	0x01, 0x12, 0x61, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x2a,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x79, 0x62, 0x72, 0x6f, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x68, 0x65,
	0x73, 0x2d, 0x32, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pbdriver_proto_rawDescOnce sync.Once
	file_pbdriver_proto_rawDescData = file_pbdriver_proto_rawDesc
)

func file_pbdriver_proto_rawDescGZIP() []byte {
	file_pbdriver_proto_rawDescOnce.Do(func() {
		file_pbdriver_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbdriver_proto_rawDescData)
	})
	return file_pbdriver_proto_rawDescData
}

var file_pbdriver_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_pbdriver_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_pbdriver_proto_goTypes = []interface{}{
	(JobPriority)(0),                   // 0: io.clbs.openhes.pbdriver.JobPriority
	(AttributeType)(0),                 // 1: io.clbs.openhes.pbdriver.AttributeType
	(ActionType)(0),                    // 2: io.clbs.openhes.pbdriver.ActionType
	(ActionResultCode)(0),              // 3: io.clbs.openhes.pbdriver.ActionResultCode
	(JobErrorCode)(0),                  // 4: io.clbs.openhes.pbdriver.JobErrorCode
	(ErrorCode)(0),                     // 5: io.clbs.openhes.pbdriver.ErrorCode
	(*ProgressUpdate)(nil),             // 6: io.clbs.openhes.pbdriver.ProgressUpdate
	(*ActionProgressUpdate)(nil),       // 7: io.clbs.openhes.pbdriver.ActionProgressUpdate
	(*JobProgressUpdate)(nil),          // 8: io.clbs.openhes.pbdriver.JobProgressUpdate
	(*ActionData)(nil),                 // 9: io.clbs.openhes.pbdriver.ActionData
	(*ProfileValues)(nil),              // 10: io.clbs.openhes.pbdriver.ProfileValues
	(*ProfileBlok)(nil),                // 11: io.clbs.openhes.pbdriver.ProfileBlok
	(*BillingValues)(nil),              // 12: io.clbs.openhes.pbdriver.BillingValues
	(*BillingValue)(nil),               // 13: io.clbs.openhes.pbdriver.BillingValue
	(*MeasuredValue)(nil),              // 14: io.clbs.openhes.pbdriver.MeasuredValue
	(*AttributeDefinition)(nil),        // 15: io.clbs.openhes.pbdriver.AttributeDefinition
	(*JobActionAttributes)(nil),        // 16: io.clbs.openhes.pbdriver.JobActionAttributes
	(*StartJobRequest)(nil),            // 17: io.clbs.openhes.pbdriver.StartJobRequest
	(*ConnectionInfo)(nil),             // 18: io.clbs.openhes.pbdriver.ConnectionInfo
	(*ConnectionTypeTcp)(nil),          // 19: io.clbs.openhes.pbdriver.ConnectionTypeTcp
	(*ConnectionTypePhone)(nil),        // 20: io.clbs.openhes.pbdriver.ConnectionTypePhone
	(*ConnectionTypeSerial)(nil),       // 21: io.clbs.openhes.pbdriver.ConnectionTypeSerial
	(*JobSettings)(nil),                // 22: io.clbs.openhes.pbdriver.JobSettings
	(*JobAction)(nil),                  // 23: io.clbs.openhes.pbdriver.JobAction
	(*ActionGetRegister)(nil),          // 24: io.clbs.openhes.pbdriver.ActionGetRegister
	(*ActionGetPeriodicalProfile)(nil), // 25: io.clbs.openhes.pbdriver.ActionGetPeriodicalProfile
	(*ActionGetIrregularProfile)(nil),  // 26: io.clbs.openhes.pbdriver.ActionGetIrregularProfile
	(*ActionGetEvents)(nil),            // 27: io.clbs.openhes.pbdriver.ActionGetEvents
	(*ActionGetClock)(nil),             // 28: io.clbs.openhes.pbdriver.ActionGetClock
	(*ActionSyncClock)(nil),            // 29: io.clbs.openhes.pbdriver.ActionSyncClock
	(*ActionGetRelayState)(nil),        // 30: io.clbs.openhes.pbdriver.ActionGetRelayState
	(*ActionSetRelayState)(nil),        // 31: io.clbs.openhes.pbdriver.ActionSetRelayState
	(*ActionGetDisconnectorState)(nil), // 32: io.clbs.openhes.pbdriver.ActionGetDisconnectorState
	(*ActionSetDisconnectorState)(nil), // 33: io.clbs.openhes.pbdriver.ActionSetDisconnectorState
	(*ActionGetTou)(nil),               // 34: io.clbs.openhes.pbdriver.ActionGetTou
	(*ActionSetTou)(nil),               // 35: io.clbs.openhes.pbdriver.ActionSetTou
	(*ActionGetLimiter)(nil),           // 36: io.clbs.openhes.pbdriver.ActionGetLimiter
	(*ActionSetLimiter)(nil),           // 37: io.clbs.openhes.pbdriver.ActionSetLimiter
	(*ActionResetBillingPeriod)(nil),   // 38: io.clbs.openhes.pbdriver.ActionResetBillingPeriod
	(*ActionFwUpdate)(nil),             // 39: io.clbs.openhes.pbdriver.ActionFwUpdate
	(*AttributeValue)(nil),             // 40: io.clbs.openhes.pbdriver.AttributeValue
	(*CommonResponse)(nil),             // 41: io.clbs.openhes.pbdriver.CommonResponse
	(*DriverTemplates)(nil),            // 42: io.clbs.openhes.pbdriver.DriverTemplates
	(*CancelJobRequest)(nil),           // 43: io.clbs.openhes.pbdriver.CancelJobRequest
	(*NegotiateRequest)(nil),           // 44: io.clbs.openhes.pbdriver.NegotiateRequest
	nil,                                // 45: io.clbs.openhes.pbdriver.ConnectionInfo.DeviceAttributesEntry
	nil,                                // 46: io.clbs.openhes.pbdriver.JobAction.AttributesEntry
	(*emptypb.Empty)(nil),              // 47: google.protobuf.Empty
	(*timestamppb.Timestamp)(nil),      // 48: google.protobuf.Timestamp
}
var file_pbdriver_proto_depIdxs = []int32{
	8,  // 0: io.clbs.openhes.pbdriver.ProgressUpdate.job:type_name -> io.clbs.openhes.pbdriver.JobProgressUpdate
	7,  // 1: io.clbs.openhes.pbdriver.ProgressUpdate.action:type_name -> io.clbs.openhes.pbdriver.ActionProgressUpdate
	3,  // 2: io.clbs.openhes.pbdriver.ActionProgressUpdate.code:type_name -> io.clbs.openhes.pbdriver.ActionResultCode
	9,  // 3: io.clbs.openhes.pbdriver.ActionProgressUpdate.data:type_name -> io.clbs.openhes.pbdriver.ActionData
	4,  // 4: io.clbs.openhes.pbdriver.JobProgressUpdate.code:type_name -> io.clbs.openhes.pbdriver.JobErrorCode
	47, // 5: io.clbs.openhes.pbdriver.ActionData.nodata:type_name -> google.protobuf.Empty
	12, // 6: io.clbs.openhes.pbdriver.ActionData.billings:type_name -> io.clbs.openhes.pbdriver.BillingValues
	10, // 7: io.clbs.openhes.pbdriver.ActionData.profile:type_name -> io.clbs.openhes.pbdriver.ProfileValues
	11, // 8: io.clbs.openhes.pbdriver.ProfileValues.blocks:type_name -> io.clbs.openhes.pbdriver.ProfileBlok
	48, // 9: io.clbs.openhes.pbdriver.ProfileBlok.start_timestamp:type_name -> google.protobuf.Timestamp
	14, // 10: io.clbs.openhes.pbdriver.ProfileBlok.values:type_name -> io.clbs.openhes.pbdriver.MeasuredValue
	13, // 11: io.clbs.openhes.pbdriver.BillingValues.values:type_name -> io.clbs.openhes.pbdriver.BillingValue
	48, // 12: io.clbs.openhes.pbdriver.BillingValue.timestamp:type_name -> google.protobuf.Timestamp
	14, // 13: io.clbs.openhes.pbdriver.BillingValue.value:type_name -> io.clbs.openhes.pbdriver.MeasuredValue
	1,  // 14: io.clbs.openhes.pbdriver.AttributeDefinition.type:type_name -> io.clbs.openhes.pbdriver.AttributeType
	40, // 15: io.clbs.openhes.pbdriver.AttributeDefinition.default_value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	2,  // 16: io.clbs.openhes.pbdriver.JobActionAttributes.type:type_name -> io.clbs.openhes.pbdriver.ActionType
	15, // 17: io.clbs.openhes.pbdriver.JobActionAttributes.attributes:type_name -> io.clbs.openhes.pbdriver.AttributeDefinition
	18, // 18: io.clbs.openhes.pbdriver.StartJobRequest.connection_info:type_name -> io.clbs.openhes.pbdriver.ConnectionInfo
	22, // 19: io.clbs.openhes.pbdriver.StartJobRequest.job_settings:type_name -> io.clbs.openhes.pbdriver.JobSettings
	23, // 20: io.clbs.openhes.pbdriver.StartJobRequest.job_actions:type_name -> io.clbs.openhes.pbdriver.JobAction
	45, // 21: io.clbs.openhes.pbdriver.ConnectionInfo.device_attributes:type_name -> io.clbs.openhes.pbdriver.ConnectionInfo.DeviceAttributesEntry
	19, // 22: io.clbs.openhes.pbdriver.ConnectionInfo.tcp:type_name -> io.clbs.openhes.pbdriver.ConnectionTypeTcp
	20, // 23: io.clbs.openhes.pbdriver.ConnectionInfo.phone:type_name -> io.clbs.openhes.pbdriver.ConnectionTypePhone
	21, // 24: io.clbs.openhes.pbdriver.ConnectionInfo.serial:type_name -> io.clbs.openhes.pbdriver.ConnectionTypeSerial
	0,  // 25: io.clbs.openhes.pbdriver.JobSettings.priority:type_name -> io.clbs.openhes.pbdriver.JobPriority
	48, // 26: io.clbs.openhes.pbdriver.JobSettings.expires_at:type_name -> google.protobuf.Timestamp
	46, // 27: io.clbs.openhes.pbdriver.JobAction.attributes:type_name -> io.clbs.openhes.pbdriver.JobAction.AttributesEntry
	24, // 28: io.clbs.openhes.pbdriver.JobAction.get_register:type_name -> io.clbs.openhes.pbdriver.ActionGetRegister
	25, // 29: io.clbs.openhes.pbdriver.JobAction.get_periodical_profile:type_name -> io.clbs.openhes.pbdriver.ActionGetPeriodicalProfile
	26, // 30: io.clbs.openhes.pbdriver.JobAction.get_irregular_profile:type_name -> io.clbs.openhes.pbdriver.ActionGetIrregularProfile
	27, // 31: io.clbs.openhes.pbdriver.JobAction.get_events:type_name -> io.clbs.openhes.pbdriver.ActionGetEvents
	28, // 32: io.clbs.openhes.pbdriver.JobAction.get_clock:type_name -> io.clbs.openhes.pbdriver.ActionGetClock
	29, // 33: io.clbs.openhes.pbdriver.JobAction.sync_clock:type_name -> io.clbs.openhes.pbdriver.ActionSyncClock
	30, // 34: io.clbs.openhes.pbdriver.JobAction.get_relay_state:type_name -> io.clbs.openhes.pbdriver.ActionGetRelayState
	31, // 35: io.clbs.openhes.pbdriver.JobAction.set_relay_state:type_name -> io.clbs.openhes.pbdriver.ActionSetRelayState
	32, // 36: io.clbs.openhes.pbdriver.JobAction.get_disconnector_state:type_name -> io.clbs.openhes.pbdriver.ActionGetDisconnectorState
	33, // 37: io.clbs.openhes.pbdriver.JobAction.set_disconnector_state:type_name -> io.clbs.openhes.pbdriver.ActionSetDisconnectorState
	34, // 38: io.clbs.openhes.pbdriver.JobAction.get_tou:type_name -> io.clbs.openhes.pbdriver.ActionGetTou
	35, // 39: io.clbs.openhes.pbdriver.JobAction.set_tou:type_name -> io.clbs.openhes.pbdriver.ActionSetTou
	36, // 40: io.clbs.openhes.pbdriver.JobAction.get_limiter:type_name -> io.clbs.openhes.pbdriver.ActionGetLimiter
	37, // 41: io.clbs.openhes.pbdriver.JobAction.set_limiter:type_name -> io.clbs.openhes.pbdriver.ActionSetLimiter
	38, // 42: io.clbs.openhes.pbdriver.JobAction.reset_billing_period:type_name -> io.clbs.openhes.pbdriver.ActionResetBillingPeriod
	39, // 43: io.clbs.openhes.pbdriver.JobAction.fw_update:type_name -> io.clbs.openhes.pbdriver.ActionFwUpdate
	48, // 44: io.clbs.openhes.pbdriver.ActionGetPeriodicalProfile.from:type_name -> google.protobuf.Timestamp
	48, // 45: io.clbs.openhes.pbdriver.ActionGetPeriodicalProfile.to:type_name -> google.protobuf.Timestamp
	5,  // 46: io.clbs.openhes.pbdriver.CommonResponse.result:type_name -> io.clbs.openhes.pbdriver.ErrorCode
	15, // 47: io.clbs.openhes.pbdriver.DriverTemplates.device_attributes:type_name -> io.clbs.openhes.pbdriver.AttributeDefinition
	16, // 48: io.clbs.openhes.pbdriver.DriverTemplates.action_attributes:type_name -> io.clbs.openhes.pbdriver.JobActionAttributes
	42, // 49: io.clbs.openhes.pbdriver.NegotiateRequest.templates:type_name -> io.clbs.openhes.pbdriver.DriverTemplates
	40, // 50: io.clbs.openhes.pbdriver.ConnectionInfo.DeviceAttributesEntry.value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	40, // 51: io.clbs.openhes.pbdriver.JobAction.AttributesEntry.value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	17, // 52: io.clbs.openhes.pbdriver.DriverService.StartJob:input_type -> io.clbs.openhes.pbdriver.StartJobRequest
	43, // 53: io.clbs.openhes.pbdriver.DriverService.CancelJob:input_type -> io.clbs.openhes.pbdriver.CancelJobRequest
	6,  // 54: io.clbs.openhes.pbdriver.DriverService.StartJob:output_type -> io.clbs.openhes.pbdriver.ProgressUpdate
	41, // 55: io.clbs.openhes.pbdriver.DriverService.CancelJob:output_type -> io.clbs.openhes.pbdriver.CommonResponse
	54, // [54:56] is the sub-list for method output_type
	52, // [52:54] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_pbdriver_proto_init() }
func file_pbdriver_proto_init() {
	if File_pbdriver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbdriver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionProgressUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobProgressUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileBlok); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillingValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillingValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasuredValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobActionAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionTypeTcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionTypePhone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionTypeSerial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionGetRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionGetPeriodicalProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionGetIrregularProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionGetEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionGetClock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSyncClock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionGetRelayState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSetRelayState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionGetDisconnectorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSetDisconnectorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionGetTou); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSetTou); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionGetLimiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSetLimiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionResetBillingPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionFwUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverTemplates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbdriver_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NegotiateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pbdriver_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ProgressUpdate_Job)(nil),
		(*ProgressUpdate_Action)(nil),
	}
	file_pbdriver_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_pbdriver_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ActionData_Nodata)(nil),
		(*ActionData_Billings)(nil),
		(*ActionData_Profile)(nil),
	}
	file_pbdriver_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*MeasuredValue_DoubleValue)(nil),
		(*MeasuredValue_IntValue)(nil),
	}
	file_pbdriver_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_pbdriver_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ConnectionInfo_Tcp)(nil),
		(*ConnectionInfo_Phone)(nil),
		(*ConnectionInfo_Serial)(nil),
	}
	file_pbdriver_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_pbdriver_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*JobAction_GetRegister)(nil),
		(*JobAction_GetPeriodicalProfile)(nil),
		(*JobAction_GetIrregularProfile)(nil),
		(*JobAction_GetEvents)(nil),
		(*JobAction_GetClock)(nil),
		(*JobAction_SyncClock)(nil),
		(*JobAction_GetRelayState)(nil),
		(*JobAction_SetRelayState)(nil),
		(*JobAction_GetDisconnectorState)(nil),
		(*JobAction_SetDisconnectorState)(nil),
		(*JobAction_GetTou)(nil),
		(*JobAction_SetTou)(nil),
		(*JobAction_GetLimiter)(nil),
		(*JobAction_SetLimiter)(nil),
		(*JobAction_ResetBillingPeriod)(nil),
		(*JobAction_FwUpdate)(nil),
	}
	file_pbdriver_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*AttributeValue_StrValue)(nil),
		(*AttributeValue_IntValue)(nil),
		(*AttributeValue_DoubleValue)(nil),
		(*AttributeValue_BinaryValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbdriver_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pbdriver_proto_goTypes,
		DependencyIndexes: file_pbdriver_proto_depIdxs,
		EnumInfos:         file_pbdriver_proto_enumTypes,
		MessageInfos:      file_pbdriver_proto_msgTypes,
	}.Build()
	File_pbdriver_proto = out.File
	file_pbdriver_proto_rawDesc = nil
	file_pbdriver_proto_goTypes = nil
	file_pbdriver_proto_depIdxs = nil
}
