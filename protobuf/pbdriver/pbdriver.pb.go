// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: pbdriver.proto

package pbdriver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Parity types
type SerialConfigParity int32

const (
	// No parity
	SerialConfigParity_PARITY_NONE SerialConfigParity = 0
	// Even parity
	SerialConfigParity_PARITY_EVEN SerialConfigParity = 1
	// Odd parity
	SerialConfigParity_PARITY_ODD SerialConfigParity = 2
	// Mark parity
	SerialConfigParity_PARITY_MARK SerialConfigParity = 3
	// Space parity
	SerialConfigParity_PARITY_SPACE SerialConfigParity = 4
)

// Enum value maps for SerialConfigParity.
var (
	SerialConfigParity_name = map[int32]string{
		0: "PARITY_NONE",
		1: "PARITY_EVEN",
		2: "PARITY_ODD",
		3: "PARITY_MARK",
		4: "PARITY_SPACE",
	}
	SerialConfigParity_value = map[string]int32{
		"PARITY_NONE":  0,
		"PARITY_EVEN":  1,
		"PARITY_ODD":   2,
		"PARITY_MARK":  3,
		"PARITY_SPACE": 4,
	}
)

func (x SerialConfigParity) Enum() *SerialConfigParity {
	p := new(SerialConfigParity)
	*p = x
	return p
}

func (x SerialConfigParity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SerialConfigParity) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[0].Descriptor()
}

func (SerialConfigParity) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[0]
}

func (x SerialConfigParity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SerialConfigParity.Descriptor instead.
func (SerialConfigParity) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{0}
}

// Baud rate types
type SerialConfigBaudRate int32

const (
	// 110 baud
	SerialConfigBaudRate_BAUD_RATE_110 SerialConfigBaudRate = 0
	// 300 baud
	SerialConfigBaudRate_BAUD_RATE_300 SerialConfigBaudRate = 1
	// 600 baud
	SerialConfigBaudRate_BAUD_RATE_600 SerialConfigBaudRate = 2
	// 1200 baud
	SerialConfigBaudRate_BAUD_RATE_1200 SerialConfigBaudRate = 3
	// 2400 baud
	SerialConfigBaudRate_BAUD_RATE_2400 SerialConfigBaudRate = 4
	// 4800 baud
	SerialConfigBaudRate_BAUD_RATE_4800 SerialConfigBaudRate = 5
	// 9600 baud
	SerialConfigBaudRate_BAUD_RATE_9600 SerialConfigBaudRate = 6
	// 14400 baud
	SerialConfigBaudRate_BAUD_RATE_14400 SerialConfigBaudRate = 7
	// 19200 baud
	SerialConfigBaudRate_BAUD_RATE_19200 SerialConfigBaudRate = 8
	// 38400 baud
	SerialConfigBaudRate_BAUD_RATE_38400 SerialConfigBaudRate = 9
	// 57600 baud
	SerialConfigBaudRate_BAUD_RATE_57600 SerialConfigBaudRate = 10
	// 115200 baud
	SerialConfigBaudRate_BAUD_RATE_115200 SerialConfigBaudRate = 11
	// 230400 baud
	SerialConfigBaudRate_BAUD_RATE_230400 SerialConfigBaudRate = 12
	// 460800 baud
	SerialConfigBaudRate_BAUD_RATE_460800 SerialConfigBaudRate = 13
	// 921600 baud
	SerialConfigBaudRate_BAUD_RATE_921600 SerialConfigBaudRate = 14
)

// Enum value maps for SerialConfigBaudRate.
var (
	SerialConfigBaudRate_name = map[int32]string{
		0:  "BAUD_RATE_110",
		1:  "BAUD_RATE_300",
		2:  "BAUD_RATE_600",
		3:  "BAUD_RATE_1200",
		4:  "BAUD_RATE_2400",
		5:  "BAUD_RATE_4800",
		6:  "BAUD_RATE_9600",
		7:  "BAUD_RATE_14400",
		8:  "BAUD_RATE_19200",
		9:  "BAUD_RATE_38400",
		10: "BAUD_RATE_57600",
		11: "BAUD_RATE_115200",
		12: "BAUD_RATE_230400",
		13: "BAUD_RATE_460800",
		14: "BAUD_RATE_921600",
	}
	SerialConfigBaudRate_value = map[string]int32{
		"BAUD_RATE_110":    0,
		"BAUD_RATE_300":    1,
		"BAUD_RATE_600":    2,
		"BAUD_RATE_1200":   3,
		"BAUD_RATE_2400":   4,
		"BAUD_RATE_4800":   5,
		"BAUD_RATE_9600":   6,
		"BAUD_RATE_14400":  7,
		"BAUD_RATE_19200":  8,
		"BAUD_RATE_38400":  9,
		"BAUD_RATE_57600":  10,
		"BAUD_RATE_115200": 11,
		"BAUD_RATE_230400": 12,
		"BAUD_RATE_460800": 13,
		"BAUD_RATE_921600": 14,
	}
)

func (x SerialConfigBaudRate) Enum() *SerialConfigBaudRate {
	p := new(SerialConfigBaudRate)
	*p = x
	return p
}

func (x SerialConfigBaudRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SerialConfigBaudRate) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[1].Descriptor()
}

func (SerialConfigBaudRate) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[1]
}

func (x SerialConfigBaudRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SerialConfigBaudRate.Descriptor instead.
func (SerialConfigBaudRate) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{1}
}

// Data bits types
type SerialConfigDataBits int32

const (
	// 5 data bits
	SerialConfigDataBits_DATA_BITS_5 SerialConfigDataBits = 0
	// 6 data bits
	SerialConfigDataBits_DATA_BITS_6 SerialConfigDataBits = 1
	// 7 data bits
	SerialConfigDataBits_DATA_BITS_7 SerialConfigDataBits = 2
	// 8 data bits
	SerialConfigDataBits_DATA_BITS_8 SerialConfigDataBits = 3
)

// Enum value maps for SerialConfigDataBits.
var (
	SerialConfigDataBits_name = map[int32]string{
		0: "DATA_BITS_5",
		1: "DATA_BITS_6",
		2: "DATA_BITS_7",
		3: "DATA_BITS_8",
	}
	SerialConfigDataBits_value = map[string]int32{
		"DATA_BITS_5": 0,
		"DATA_BITS_6": 1,
		"DATA_BITS_7": 2,
		"DATA_BITS_8": 3,
	}
)

func (x SerialConfigDataBits) Enum() *SerialConfigDataBits {
	p := new(SerialConfigDataBits)
	*p = x
	return p
}

func (x SerialConfigDataBits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SerialConfigDataBits) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[2].Descriptor()
}

func (SerialConfigDataBits) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[2]
}

func (x SerialConfigDataBits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SerialConfigDataBits.Descriptor instead.
func (SerialConfigDataBits) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{2}
}

// Stop bits types
type SerialConfigStopBits int32

const (
	// 1 stop bit
	SerialConfigStopBits_STOP_BITS_1 SerialConfigStopBits = 0
	// 1.5 stop bits
	SerialConfigStopBits_STOP_BITS_1_5 SerialConfigStopBits = 1
	// 2 stop bits
	SerialConfigStopBits_STOP_BITS_2 SerialConfigStopBits = 2
)

// Enum value maps for SerialConfigStopBits.
var (
	SerialConfigStopBits_name = map[int32]string{
		0: "STOP_BITS_1",
		1: "STOP_BITS_1_5",
		2: "STOP_BITS_2",
	}
	SerialConfigStopBits_value = map[string]int32{
		"STOP_BITS_1":   0,
		"STOP_BITS_1_5": 1,
		"STOP_BITS_2":   2,
	}
)

func (x SerialConfigStopBits) Enum() *SerialConfigStopBits {
	p := new(SerialConfigStopBits)
	*p = x
	return p
}

func (x SerialConfigStopBits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SerialConfigStopBits) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[3].Descriptor()
}

func (SerialConfigStopBits) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[3]
}

func (x SerialConfigStopBits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SerialConfigStopBits.Descriptor instead.
func (SerialConfigStopBits) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{3}
}

// Job priorities
type JobPriority int32

const (
	// The lowest priority
	JobPriority_JOB_PRIORITY_0 JobPriority = 0
	// The priority 1
	JobPriority_JOB_PRIORITY_1 JobPriority = 1
	// The priority 2
	JobPriority_JOB_PRIORITY_2 JobPriority = 2
	// The priority 3
	JobPriority_JOB_PRIORITY_3 JobPriority = 3
	// The priority 4
	JobPriority_JOB_PRIORITY_4 JobPriority = 4
	// The priority 5
	JobPriority_JOB_PRIORITY_5 JobPriority = 5
	// The priority 6
	JobPriority_JOB_PRIORITY_6 JobPriority = 6
	// The priority 7
	JobPriority_JOB_PRIORITY_7 JobPriority = 7
	// The highest priority
	JobPriority_JOB_PRIORITY_8 JobPriority = 8
)

// Enum value maps for JobPriority.
var (
	JobPriority_name = map[int32]string{
		0: "JOB_PRIORITY_0",
		1: "JOB_PRIORITY_1",
		2: "JOB_PRIORITY_2",
		3: "JOB_PRIORITY_3",
		4: "JOB_PRIORITY_4",
		5: "JOB_PRIORITY_5",
		6: "JOB_PRIORITY_6",
		7: "JOB_PRIORITY_7",
		8: "JOB_PRIORITY_8",
	}
	JobPriority_value = map[string]int32{
		"JOB_PRIORITY_0": 0,
		"JOB_PRIORITY_1": 1,
		"JOB_PRIORITY_2": 2,
		"JOB_PRIORITY_3": 3,
		"JOB_PRIORITY_4": 4,
		"JOB_PRIORITY_5": 5,
		"JOB_PRIORITY_6": 6,
		"JOB_PRIORITY_7": 7,
		"JOB_PRIORITY_8": 8,
	}
)

func (x JobPriority) Enum() *JobPriority {
	p := new(JobPriority)
	*p = x
	return p
}

func (x JobPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[4].Descriptor()
}

func (JobPriority) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[4]
}

func (x JobPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobPriority.Descriptor instead.
func (JobPriority) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{4}
}

// Attribute types
type AttributeType int32

const (
	// Integer attribute type
	AttributeType_ATTRIBUTE_TYPE_INT AttributeType = 0
	// String attribute type
	AttributeType_ATTRIBUTE_TYPE_STRING AttributeType = 1
	// Double attribute type
	AttributeType_ATTRIBUTE_TYPE_DOUBLE AttributeType = 2
	// Binary attribute type
	AttributeType_ATTRIBUTE_TYPE_BINARY AttributeType = 3
	// Date/time attribute type, stored as integer (UNIX timestamp)
	AttributeType_ATTRIBUTE_TYPE_TIMESTAMP AttributeType = 4
	// Date/time attribute type, stored as string in ISO-8601
	AttributeType_ATTRIBUTE_TYPE_TIMESTAMP_TZ AttributeType = 5
	// Bool attribute type
	AttributeType_ATTRIBUTE_TYPE_BOOL AttributeType = 6
)

// Enum value maps for AttributeType.
var (
	AttributeType_name = map[int32]string{
		0: "ATTRIBUTE_TYPE_INT",
		1: "ATTRIBUTE_TYPE_STRING",
		2: "ATTRIBUTE_TYPE_DOUBLE",
		3: "ATTRIBUTE_TYPE_BINARY",
		4: "ATTRIBUTE_TYPE_TIMESTAMP",
		5: "ATTRIBUTE_TYPE_TIMESTAMP_TZ",
		6: "ATTRIBUTE_TYPE_BOOL",
	}
	AttributeType_value = map[string]int32{
		"ATTRIBUTE_TYPE_INT":          0,
		"ATTRIBUTE_TYPE_STRING":       1,
		"ATTRIBUTE_TYPE_DOUBLE":       2,
		"ATTRIBUTE_TYPE_BINARY":       3,
		"ATTRIBUTE_TYPE_TIMESTAMP":    4,
		"ATTRIBUTE_TYPE_TIMESTAMP_TZ": 5,
		"ATTRIBUTE_TYPE_BOOL":         6,
	}
)

func (x AttributeType) Enum() *AttributeType {
	p := new(AttributeType)
	*p = x
	return p
}

func (x AttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[5].Descriptor()
}

func (AttributeType) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[5]
}

func (x AttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeType.Descriptor instead.
func (AttributeType) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{5}
}

// Action types
type ActionType int32

const (
	// Get billing value, for example instantaneous values. The action covers specific register.
	ActionType_ACTION_TYPE_GET_REGISTER ActionType = 0
	// Get periodical profile, for example load-profile. The action covers specific profile column.
	ActionType_ACTION_TYPE_GET_PERIODICAL_PROFILE ActionType = 1
	// Get non-periodical profile, for example daily profile or monthly billing registers. The action covers specific profile column and or specific billing register.
	ActionType_ACTION_TYPE_GET_IRREGULAR_PROFILE ActionType = 2
	// Get event log. The action covers specific event log.
	ActionType_ACTION_TYPE_GET_EVENTS ActionType = 3
	// Get clock. The action returns time in UTC.
	ActionType_ACTION_TYPE_GET_CLOCK ActionType = 10
	// Synchornize clock. The action synchronizes the time in the device, it can forcefully set it if force attribute is set.
	ActionType_ACTION_TYPE_SYNC_CLOCK ActionType = 11
	// Get relay state. The action covers single relay.
	ActionType_ACTION_TYPE_GET_RELAY_STATE ActionType = 20
	// Set relay state. The action covers single relay.
	ActionType_ACTION_TYPE_SET_RELAY_STATE ActionType = 21
	// Get disconnector state. The action covers single disconnector if multiple disconnectors are present in the device.
	ActionType_ACTION_TYPE_GET_DISCONNECTOR_STATE ActionType = 22
	// Set disconnector state. The action covers single relay. The action covers single disconnector if multiple disconnectors are present in the device.
	ActionType_ACTION_TYPE_SET_DISCONNECTOR_STATE ActionType = 23
	// Get time-of-use table.
	ActionType_ACTION_TYPE_GET_TOU ActionType = 24
	// Set time-of-use table.
	ActionType_ACTION_TYPE_SET_TOU ActionType = 25
	// Get limiter settings. The action covers single limiter.
	ActionType_ACTION_TYPE_GET_LIMITER ActionType = 26
	// Set limiter settings. The action covers single limiter.
	ActionType_ACTION_TYPE_SET_LIMITER ActionType = 27
	// Reseet billing period.
	ActionType_ACTION_TYPE_RESET_BILLING_PERIOD ActionType = 40
	// Start firmware update. The action updates starts FW upgrade procedure.
	ActionType_ACTION_TYPE_FW_UPDATE ActionType = 50
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0:  "ACTION_TYPE_GET_REGISTER",
		1:  "ACTION_TYPE_GET_PERIODICAL_PROFILE",
		2:  "ACTION_TYPE_GET_IRREGULAR_PROFILE",
		3:  "ACTION_TYPE_GET_EVENTS",
		10: "ACTION_TYPE_GET_CLOCK",
		11: "ACTION_TYPE_SYNC_CLOCK",
		20: "ACTION_TYPE_GET_RELAY_STATE",
		21: "ACTION_TYPE_SET_RELAY_STATE",
		22: "ACTION_TYPE_GET_DISCONNECTOR_STATE",
		23: "ACTION_TYPE_SET_DISCONNECTOR_STATE",
		24: "ACTION_TYPE_GET_TOU",
		25: "ACTION_TYPE_SET_TOU",
		26: "ACTION_TYPE_GET_LIMITER",
		27: "ACTION_TYPE_SET_LIMITER",
		40: "ACTION_TYPE_RESET_BILLING_PERIOD",
		50: "ACTION_TYPE_FW_UPDATE",
	}
	ActionType_value = map[string]int32{
		"ACTION_TYPE_GET_REGISTER":           0,
		"ACTION_TYPE_GET_PERIODICAL_PROFILE": 1,
		"ACTION_TYPE_GET_IRREGULAR_PROFILE":  2,
		"ACTION_TYPE_GET_EVENTS":             3,
		"ACTION_TYPE_GET_CLOCK":              10,
		"ACTION_TYPE_SYNC_CLOCK":             11,
		"ACTION_TYPE_GET_RELAY_STATE":        20,
		"ACTION_TYPE_SET_RELAY_STATE":        21,
		"ACTION_TYPE_GET_DISCONNECTOR_STATE": 22,
		"ACTION_TYPE_SET_DISCONNECTOR_STATE": 23,
		"ACTION_TYPE_GET_TOU":                24,
		"ACTION_TYPE_SET_TOU":                25,
		"ACTION_TYPE_GET_LIMITER":            26,
		"ACTION_TYPE_SET_LIMITER":            27,
		"ACTION_TYPE_RESET_BILLING_PERIOD":   40,
		"ACTION_TYPE_FW_UPDATE":              50,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[6].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[6]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{6}
}

// Result codes related to job actions
type ActionResultCode int32

const (
	// The action has been completed successfully.
	ActionResultCode_ERROR_CODE_ACTION_OK ActionResultCode = 0
	// The action is not supported by the driver (or device).
	ActionResultCode_ERROR_CODE_ACTION_UNSUPPORTED ActionResultCode = 1
	// The action is pending.
	ActionResultCode_ERROR_CODE_ACTION_PENDING ActionResultCode = 3
	// The action failed.
	ActionResultCode_ERROR_CODE_ACTION_ERROR ActionResultCode = 5
)

// Enum value maps for ActionResultCode.
var (
	ActionResultCode_name = map[int32]string{
		0: "ERROR_CODE_ACTION_OK",
		1: "ERROR_CODE_ACTION_UNSUPPORTED",
		3: "ERROR_CODE_ACTION_PENDING",
		5: "ERROR_CODE_ACTION_ERROR",
	}
	ActionResultCode_value = map[string]int32{
		"ERROR_CODE_ACTION_OK":          0,
		"ERROR_CODE_ACTION_UNSUPPORTED": 1,
		"ERROR_CODE_ACTION_PENDING":     3,
		"ERROR_CODE_ACTION_ERROR":       5,
	}
)

func (x ActionResultCode) Enum() *ActionResultCode {
	p := new(ActionResultCode)
	*p = x
	return p
}

func (x ActionResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[7].Descriptor()
}

func (ActionResultCode) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[7]
}

func (x ActionResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionResultCode.Descriptor instead.
func (ActionResultCode) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{7}
}

// Error codes related to jobs
type JobErrorCode int32

const (
	// The job has been completed successfully.
	JobErrorCode_JOB_ERROR_CODE_NONE JobErrorCode = 0
	// There is no free slot in the driver to handle the job; the job shall be send again later.
	JobErrorCode_JOB_ERROR_CODE_BUSY JobErrorCode = 1
	// The job failed, the retry will be attempted.
	JobErrorCode_JOB_ERROR_CODE_ERROR JobErrorCode = 5
	// This should never happen! It means that the same job is currently being processed by the driver and it was sent to the driver mutliple times which would mean that there is a bug.
	JobErrorCode_JOB_ERROR_CODE_ALREADY_EXISTS JobErrorCode = 8
	// The job failed, the retry will NOT be attempted.
	JobErrorCode_JOB_ERROR_CODE_FATAL JobErrorCode = 9
)

// Enum value maps for JobErrorCode.
var (
	JobErrorCode_name = map[int32]string{
		0: "JOB_ERROR_CODE_NONE",
		1: "JOB_ERROR_CODE_BUSY",
		5: "JOB_ERROR_CODE_ERROR",
		8: "JOB_ERROR_CODE_ALREADY_EXISTS",
		9: "JOB_ERROR_CODE_FATAL",
	}
	JobErrorCode_value = map[string]int32{
		"JOB_ERROR_CODE_NONE":           0,
		"JOB_ERROR_CODE_BUSY":           1,
		"JOB_ERROR_CODE_ERROR":          5,
		"JOB_ERROR_CODE_ALREADY_EXISTS": 8,
		"JOB_ERROR_CODE_FATAL":          9,
	}
)

func (x JobErrorCode) Enum() *JobErrorCode {
	p := new(JobErrorCode)
	*p = x
	return p
}

func (x JobErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[8].Descriptor()
}

func (JobErrorCode) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[8]
}

func (x JobErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobErrorCode.Descriptor instead.
func (JobErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{8}
}

// Error codes
type ErrorCode int32

const (
	// No error
	ErrorCode_ERROR_CODE_OK ErrorCode = 0
	// Generic error
	ErrorCode_ERROR_CODE_ERROR ErrorCode = 4
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "ERROR_CODE_OK",
		4: "ERROR_CODE_ERROR",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_OK":    0,
		"ERROR_CODE_ERROR": 4,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[9].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[9]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{9}
}

// Connection types
type CommunicationType int32

const (
	// The communication is done via direct TCP/IP.
	CommunicationType_COMMUNICATION_TYPE_TCPIP CommunicationType = 0
	// The communication is done via phone line (modem).
	CommunicationType_COMMUNICATION_TYPE_MODEM_POOL CommunicationType = 1
	// The communication is done via controller-serial line (Moxa).
	CommunicationType_COMMUNICATION_TYPE_SERIAL_LINE_MOXA CommunicationType = 2
	// The communication is passive, the driver is a service that listens on a port (DLMS devices in push mode) or a service that implements a subscriber to a message queue (e.g. MQTT).
	CommunicationType_COMMUNICATION_TYPE_LISTENING CommunicationType = 99
)

// Enum value maps for CommunicationType.
var (
	CommunicationType_name = map[int32]string{
		0:  "COMMUNICATION_TYPE_TCPIP",
		1:  "COMMUNICATION_TYPE_MODEM_POOL",
		2:  "COMMUNICATION_TYPE_SERIAL_LINE_MOXA",
		99: "COMMUNICATION_TYPE_LISTENING",
	}
	CommunicationType_value = map[string]int32{
		"COMMUNICATION_TYPE_TCPIP":            0,
		"COMMUNICATION_TYPE_MODEM_POOL":       1,
		"COMMUNICATION_TYPE_SERIAL_LINE_MOXA": 2,
		"COMMUNICATION_TYPE_LISTENING":        99,
	}
)

func (x CommunicationType) Enum() *CommunicationType {
	p := new(CommunicationType)
	*p = x
	return p
}

func (x CommunicationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommunicationType) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[10].Descriptor()
}

func (CommunicationType) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[10]
}

func (x CommunicationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommunicationType.Descriptor instead.
func (CommunicationType) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{10}
}

// Data link protocols
type DataLinkProtocol int32

const (
	// The VDEW (IEC 62056-21, IEC-61107) protocol. In combination with DLMS protocol the driver initiates the communication by IEC and switches to the mode E to the HDLC+DLMS protocol. Supports addressing = multiple devices on the same line.
	DataLinkProtocol_LINKPROTO_IEC_62056_21 DataLinkProtocol = 0
	// The HDLC (ISO/IEC-3309) framing. It can be used for various application protocols, such as DLMS or MODBUS. Supports client/server addressing = multiple devices on the same line.
	DataLinkProtocol_LINKPROTO_HDLC DataLinkProtocol = 1
	// The COSEM wrapper. It can be used for DLMS application protocol. Supports client/server addressing = multiple devices on the same line.
	DataLinkProtocol_LINKPROTO_COSEM_WRAPPER DataLinkProtocol = 2
	// The Modbus protocol. It shall be used for Modbus application protocol where no other data link layer, such as HDLC, is used.
	DataLinkProtocol_LINKPROTO_MODBUS DataLinkProtocol = 3
	// The M-Bus protocol. It shall be used for M-Bus application protocol.
	DataLinkProtocol_LINKPROTO_MBUS DataLinkProtocol = 4
	// The data link protocol is not applicable. It's useful for listening communication type.
	DataLinkProtocol_LINKPROTO_NOT_APPLICABLE DataLinkProtocol = 99
)

// Enum value maps for DataLinkProtocol.
var (
	DataLinkProtocol_name = map[int32]string{
		0:  "LINKPROTO_IEC_62056_21",
		1:  "LINKPROTO_HDLC",
		2:  "LINKPROTO_COSEM_WRAPPER",
		3:  "LINKPROTO_MODBUS",
		4:  "LINKPROTO_MBUS",
		99: "LINKPROTO_NOT_APPLICABLE",
	}
	DataLinkProtocol_value = map[string]int32{
		"LINKPROTO_IEC_62056_21":   0,
		"LINKPROTO_HDLC":           1,
		"LINKPROTO_COSEM_WRAPPER":  2,
		"LINKPROTO_MODBUS":         3,
		"LINKPROTO_MBUS":           4,
		"LINKPROTO_NOT_APPLICABLE": 99,
	}
)

func (x DataLinkProtocol) Enum() *DataLinkProtocol {
	p := new(DataLinkProtocol)
	*p = x
	return p
}

func (x DataLinkProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataLinkProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[11].Descriptor()
}

func (DataLinkProtocol) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[11]
}

func (x DataLinkProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataLinkProtocol.Descriptor instead.
func (DataLinkProtocol) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{11}
}

// Application protocols
type ApplicationProtocol int32

const (
	// The IEC 62056-21 (IEC-61107, VDEW) protocol.
	ApplicationProtocol_APPPROTO_IEC_62056_21 ApplicationProtocol = 0
	// The DLMS short-name protocol.
	ApplicationProtocol_APPPROTO_DLMS_SN ApplicationProtocol = 1
	// The DLMS logical-name protocol.
	ApplicationProtocol_APPPROTO_DLMS_LN ApplicationProtocol = 2
	// The SCTM protocol.
	ApplicationProtocol_APPPROTO_SCTM ApplicationProtocol = 3
	// The LIS200 protocol.
	ApplicationProtocol_APPPROTO_LIS200 ApplicationProtocol = 4
	// The ANSI C12 protocol.
	ApplicationProtocol_APPPROTO_ANSI_C12 ApplicationProtocol = 5
	// The MQTT protocol.
	ApplicationProtocol_APPPROTO_MQTT ApplicationProtocol = 6
)

// Enum value maps for ApplicationProtocol.
var (
	ApplicationProtocol_name = map[int32]string{
		0: "APPPROTO_IEC_62056_21",
		1: "APPPROTO_DLMS_SN",
		2: "APPPROTO_DLMS_LN",
		3: "APPPROTO_SCTM",
		4: "APPPROTO_LIS200",
		5: "APPPROTO_ANSI_C12",
		6: "APPPROTO_MQTT",
	}
	ApplicationProtocol_value = map[string]int32{
		"APPPROTO_IEC_62056_21": 0,
		"APPPROTO_DLMS_SN":      1,
		"APPPROTO_DLMS_LN":      2,
		"APPPROTO_SCTM":         3,
		"APPPROTO_LIS200":       4,
		"APPPROTO_ANSI_C12":     5,
		"APPPROTO_MQTT":         6,
	}
)

func (x ApplicationProtocol) Enum() *ApplicationProtocol {
	p := new(ApplicationProtocol)
	*p = x
	return p
}

func (x ApplicationProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplicationProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_pbdriver_proto_enumTypes[12].Descriptor()
}

func (ApplicationProtocol) Type() protoreflect.EnumType {
	return &file_pbdriver_proto_enumTypes[12]
}

func (x ApplicationProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplicationProtocol.Descriptor instead.
func (ApplicationProtocol) EnumDescriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{12}
}

// Driver -> Taskmaster job/action progress update message
type ProgressUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The oneof field containing the progress update data - either for job or for action.
	//
	// Types that are valid to be assigned to Progress:
	//
	//	*ProgressUpdate_Job
	//	*ProgressUpdate_Action
	Progress      isProgressUpdate_Progress `protobuf_oneof:"progress"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProgressUpdate) Reset() {
	*x = ProgressUpdate{}
	mi := &file_pbdriver_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProgressUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressUpdate) ProtoMessage() {}

func (x *ProgressUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressUpdate.ProtoReflect.Descriptor instead.
func (*ProgressUpdate) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{0}
}

func (x *ProgressUpdate) GetProgress() isProgressUpdate_Progress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *ProgressUpdate) GetJob() *JobProgressUpdate {
	if x != nil {
		if x, ok := x.Progress.(*ProgressUpdate_Job); ok {
			return x.Job
		}
	}
	return nil
}

func (x *ProgressUpdate) GetAction() *ActionProgressUpdate {
	if x != nil {
		if x, ok := x.Progress.(*ProgressUpdate_Action); ok {
			return x.Action
		}
	}
	return nil
}

type isProgressUpdate_Progress interface {
	isProgressUpdate_Progress()
}

type ProgressUpdate_Job struct {
	Job *JobProgressUpdate `protobuf:"bytes,1,opt,name=job,proto3,oneof"` // The job progress update data. It shall be called once and only once for each job. It shall be also called as the last message in the stream; other updates will be ignored after this.
}

type ProgressUpdate_Action struct {
	Action *ActionProgressUpdate `protobuf:"bytes,2,opt,name=action,proto3,oneof"` // The action progress update data. It shall be called for each action in the job.
}

func (*ProgressUpdate_Job) isProgressUpdate_Progress() {}

func (*ProgressUpdate_Action) isProgressUpdate_Progress() {}

// Sub-message containing action progress update
type ActionProgressUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`                                  // The job identifier.
	ActionId      string                 `protobuf:"bytes,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`                         // The action identifier.
	Code          ActionResultCode       `protobuf:"varint,3,opt,name=code,proto3,enum=io.clbs.openhes.pbdriver.ActionResultCode" json:"code,omitempty"` // The status related to the action.
	Data          *ActionData            `protobuf:"bytes,4,opt,name=data,proto3,oneof" json:"data,omitempty"`                                           // The action result data. Shall be empty if the code is not OK.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionProgressUpdate) Reset() {
	*x = ActionProgressUpdate{}
	mi := &file_pbdriver_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionProgressUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionProgressUpdate) ProtoMessage() {}

func (x *ActionProgressUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionProgressUpdate.ProtoReflect.Descriptor instead.
func (*ActionProgressUpdate) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{1}
}

func (x *ActionProgressUpdate) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *ActionProgressUpdate) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *ActionProgressUpdate) GetCode() ActionResultCode {
	if x != nil {
		return x.Code
	}
	return ActionResultCode_ERROR_CODE_ACTION_OK
}

func (x *ActionProgressUpdate) GetData() *ActionData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Sub-message containing job progress update
type JobProgressUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`                              // The job identifier.
	Code          JobErrorCode           `protobuf:"varint,2,opt,name=code,proto3,enum=io.clbs.openhes.pbdriver.JobErrorCode" json:"code,omitempty"` // The status related to the job and or action update message.
	Duration      int64                  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`                                    // The duration of the job in miliseconds.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobProgressUpdate) Reset() {
	*x = JobProgressUpdate{}
	mi := &file_pbdriver_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobProgressUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobProgressUpdate) ProtoMessage() {}

func (x *JobProgressUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobProgressUpdate.ProtoReflect.Descriptor instead.
func (*JobProgressUpdate) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{2}
}

func (x *JobProgressUpdate) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobProgressUpdate) GetCode() JobErrorCode {
	if x != nil {
		return x.Code
	}
	return JobErrorCode_JOB_ERROR_CODE_NONE
}

func (x *JobProgressUpdate) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Sub-message containing action-based variant of data values
type ActionData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*ActionData_Nodata
	//	*ActionData_Billings
	//	*ActionData_Profile
	Data          isActionData_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionData) Reset() {
	*x = ActionData{}
	mi := &file_pbdriver_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionData) ProtoMessage() {}

func (x *ActionData) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionData.ProtoReflect.Descriptor instead.
func (*ActionData) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{3}
}

func (x *ActionData) GetData() isActionData_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ActionData) GetNodata() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Data.(*ActionData_Nodata); ok {
			return x.Nodata
		}
	}
	return nil
}

func (x *ActionData) GetBillings() *BillingValues {
	if x != nil {
		if x, ok := x.Data.(*ActionData_Billings); ok {
			return x.Billings
		}
	}
	return nil
}

func (x *ActionData) GetProfile() *ProfileValues {
	if x != nil {
		if x, ok := x.Data.(*ActionData_Profile); ok {
			return x.Profile
		}
	}
	return nil
}

type isActionData_Data interface {
	isActionData_Data()
}

type ActionData_Nodata struct {
	Nodata *emptypb.Empty `protobuf:"bytes,1,opt,name=nodata,proto3,oneof"` // No data
}

type ActionData_Billings struct {
	Billings *BillingValues `protobuf:"bytes,2,opt,name=billings,proto3,oneof"` // Register values
}

type ActionData_Profile struct {
	Profile *ProfileValues `protobuf:"bytes,3,opt,name=profile,proto3,oneof"` // Profile values
}

func (*ActionData_Nodata) isActionData_Data() {}

func (*ActionData_Billings) isActionData_Data() {}

func (*ActionData_Profile) isActionData_Data() {}

// Sub-message containing profile-typed values
type ProfileValues struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Period        int32                  `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"` // The period of the profile values.
	Unit          string                 `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`      // The unit of the profile values.
	Blocks        []*ProfileBlok         `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty"`  // The list of continuous profile blocks.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileValues) Reset() {
	*x = ProfileValues{}
	mi := &file_pbdriver_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileValues) ProtoMessage() {}

func (x *ProfileValues) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileValues.ProtoReflect.Descriptor instead.
func (*ProfileValues) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{4}
}

func (x *ProfileValues) GetPeriod() int32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *ProfileValues) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ProfileValues) GetBlocks() []*ProfileBlok {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// Sub-message containing a single profile block
type ProfileBlok struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	StartTimestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"` // The start timestamp of the block.
	Values         []*MeasuredValue       `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`                                       // The list of profile values. Values are ordered by timestamp.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ProfileBlok) Reset() {
	*x = ProfileBlok{}
	mi := &file_pbdriver_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileBlok) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileBlok) ProtoMessage() {}

func (x *ProfileBlok) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileBlok.ProtoReflect.Descriptor instead.
func (*ProfileBlok) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{5}
}

func (x *ProfileBlok) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *ProfileBlok) GetValues() []*MeasuredValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// Sub-message containing billing-typed values
type BillingValues struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []*BillingValue        `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"` // The list of register values.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BillingValues) Reset() {
	*x = BillingValues{}
	mi := &file_pbdriver_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BillingValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingValues) ProtoMessage() {}

func (x *BillingValues) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingValues.ProtoReflect.Descriptor instead.
func (*BillingValues) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{6}
}

func (x *BillingValues) GetValues() []*BillingValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// Sub-message containing billing-typed value
type BillingValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // The timestamp of the value.
	Unit          string                 `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`           // The unit of the value.
	Value         *MeasuredValue         `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`         // The value.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BillingValue) Reset() {
	*x = BillingValue{}
	mi := &file_pbdriver_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BillingValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingValue) ProtoMessage() {}

func (x *BillingValue) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingValue.ProtoReflect.Descriptor instead.
func (*BillingValue) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{7}
}

func (x *BillingValue) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *BillingValue) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *BillingValue) GetValue() *MeasuredValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// Sub-message containing measured value
type MeasuredValue struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Status   *int64                 `protobuf:"varint,1,opt,name=status,proto3,oneof" json:"status,omitempty"` // The status of the value.
	Exponent int32                  `protobuf:"varint,2,opt,name=exponent,proto3" json:"exponent,omitempty"`   // The exponent of the value. It's used to calculate the real value as value * 10^exponent for double and int values.
	// Types that are valid to be assigned to Value:
	//
	//	*MeasuredValue_DoubleValue
	//	*MeasuredValue_IntValue
	//	*MeasuredValue_StrValue
	//	*MeasuredValue_TimestampValue
	//	*MeasuredValue_TimestampTzValue
	//	*MeasuredValue_BoolValue
	Value         isMeasuredValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeasuredValue) Reset() {
	*x = MeasuredValue{}
	mi := &file_pbdriver_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeasuredValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasuredValue) ProtoMessage() {}

func (x *MeasuredValue) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasuredValue.ProtoReflect.Descriptor instead.
func (*MeasuredValue) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{8}
}

func (x *MeasuredValue) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *MeasuredValue) GetExponent() int32 {
	if x != nil {
		return x.Exponent
	}
	return 0
}

func (x *MeasuredValue) GetValue() isMeasuredValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MeasuredValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*MeasuredValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *MeasuredValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*MeasuredValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *MeasuredValue) GetStrValue() string {
	if x != nil {
		if x, ok := x.Value.(*MeasuredValue_StrValue); ok {
			return x.StrValue
		}
	}
	return ""
}

func (x *MeasuredValue) GetTimestampValue() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Value.(*MeasuredValue_TimestampValue); ok {
			return x.TimestampValue
		}
	}
	return nil
}

func (x *MeasuredValue) GetTimestampTzValue() string {
	if x != nil {
		if x, ok := x.Value.(*MeasuredValue_TimestampTzValue); ok {
			return x.TimestampTzValue
		}
	}
	return ""
}

func (x *MeasuredValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*MeasuredValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

type isMeasuredValue_Value interface {
	isMeasuredValue_Value()
}

type MeasuredValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,proto3,oneof"` // The double-typed value.
}

type MeasuredValue_IntValue struct {
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,proto3,oneof"` // The integer-typed value.
}

type MeasuredValue_StrValue struct {
	StrValue string `protobuf:"bytes,5,opt,name=str_value,json=strValue,proto3,oneof"` // The string-typed value.
}

type MeasuredValue_TimestampValue struct {
	TimestampValue *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp_value,json=timestampValue,proto3,oneof"` // The timestamp-typed value.
}

type MeasuredValue_TimestampTzValue struct {
	TimestampTzValue string `protobuf:"bytes,7,opt,name=timestamp_tz_value,json=timestampTzValue,proto3,oneof"` // The timestamp with timezone-typed value, stored as string in ISO-8601.
}

type MeasuredValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,8,opt,name=bool_value,json=boolValue,proto3,oneof"` // The boolean-typed value.
}

func (*MeasuredValue_DoubleValue) isMeasuredValue_Value() {}

func (*MeasuredValue_IntValue) isMeasuredValue_Value() {}

func (*MeasuredValue_StrValue) isMeasuredValue_Value() {}

func (*MeasuredValue_TimestampValue) isMeasuredValue_Value() {}

func (*MeasuredValue_TimestampTzValue) isMeasuredValue_Value() {}

func (*MeasuredValue_BoolValue) isMeasuredValue_Value() {}

// Sub-message containing attribute definition
type AttributeDefinition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                              // The name of the attribute.
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                                // The description of the attribute.
	Type          AttributeType          `protobuf:"varint,3,opt,name=type,proto3,enum=io.clbs.openhes.pbdriver.AttributeType" json:"type,omitempty"` // The type of the attribute.
	Mandatory     bool                   `protobuf:"varint,4,opt,name=mandatory,proto3" json:"mandatory,omitempty"`                                   // The attribute is mandatory or not.s
	DefaultValue  *AttributeValue        `protobuf:"bytes,5,opt,name=default_value,json=defaultValue,proto3,oneof" json:"default_value,omitempty"`    // The default value of the attribute.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttributeDefinition) Reset() {
	*x = AttributeDefinition{}
	mi := &file_pbdriver_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttributeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeDefinition) ProtoMessage() {}

func (x *AttributeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeDefinition.ProtoReflect.Descriptor instead.
func (*AttributeDefinition) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{9}
}

func (x *AttributeDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttributeDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AttributeDefinition) GetType() AttributeType {
	if x != nil {
		return x.Type
	}
	return AttributeType_ATTRIBUTE_TYPE_INT
}

func (x *AttributeDefinition) GetMandatory() bool {
	if x != nil {
		return x.Mandatory
	}
	return false
}

func (x *AttributeDefinition) GetDefaultValue() *AttributeValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

// Sub-message containing job action attributes
type JobActionAttributes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          ActionType             `protobuf:"varint,1,opt,name=type,proto3,enum=io.clbs.openhes.pbdriver.ActionType" json:"type,omitempty"` // The action type.
	Attributes    []*AttributeDefinition `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`                               // The template of the action attributes. It is represented as a list of attribute definitions.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobActionAttributes) Reset() {
	*x = JobActionAttributes{}
	mi := &file_pbdriver_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobActionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobActionAttributes) ProtoMessage() {}

func (x *JobActionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobActionAttributes.ProtoReflect.Descriptor instead.
func (*JobActionAttributes) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{10}
}

func (x *JobActionAttributes) GetType() ActionType {
	if x != nil {
		return x.Type
	}
	return ActionType_ACTION_TYPE_GET_REGISTER
}

func (x *JobActionAttributes) GetAttributes() []*AttributeDefinition {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Taskmaster -> Driver start job request message
type StartJobsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ConnectionInfo *ConnectionInfo        `protobuf:"bytes,2,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"` // The connection info for the job.
	Jobs           []*StartJobData        `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`                                           // The list of jobs to be started with the same connection info.
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StartJobsRequest) Reset() {
	*x = StartJobsRequest{}
	mi := &file_pbdriver_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartJobsRequest) ProtoMessage() {}

func (x *StartJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartJobsRequest.ProtoReflect.Descriptor instead.
func (*StartJobsRequest) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{11}
}

func (x *StartJobsRequest) GetConnectionInfo() *ConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *StartJobsRequest) GetJobs() []*StartJobData {
	if x != nil {
		return x.Jobs
	}
	return nil
}

// Sub-message containing job start request for single device
type StartJobData struct {
	state            protoimpl.MessageState     `protogen:"open.v1"`
	DeviceAttributes map[string]*AttributeValue `protobuf:"bytes,1,rep,name=device_attributes,json=deviceAttributes,proto3" json:"device_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // The connection attributes to the device.
	JobId            string                     `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`                                                                                                            // The job identifier.
	JobSettings      *JobSettings               `protobuf:"bytes,3,opt,name=job_settings,json=jobSettings,proto3" json:"job_settings,omitempty"`                                                                                          // The job parameters.
	JobActions       []*JobAction               `protobuf:"bytes,4,rep,name=job_actions,json=jobActions,proto3" json:"job_actions,omitempty"`                                                                                             // The list actions to be executed.
	AppProtocol      ApplicationProtocol        `protobuf:"varint,5,opt,name=app_protocol,json=appProtocol,proto3,enum=io.clbs.openhes.pbdriver.ApplicationProtocol" json:"app_protocol,omitempty"`                                       // The application protocol.
	Timezone         *string                    `protobuf:"bytes,6,opt,name=timezone,proto3,oneof" json:"timezone,omitempty"`                                                                                                             // The timezone related to the device, e.g. "America/New_York", "Europe/Prague", "CET", "GMT", "Etc/GMT+2".
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StartJobData) Reset() {
	*x = StartJobData{}
	mi := &file_pbdriver_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartJobData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartJobData) ProtoMessage() {}

func (x *StartJobData) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartJobData.ProtoReflect.Descriptor instead.
func (*StartJobData) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{12}
}

func (x *StartJobData) GetDeviceAttributes() map[string]*AttributeValue {
	if x != nil {
		return x.DeviceAttributes
	}
	return nil
}

func (x *StartJobData) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *StartJobData) GetJobSettings() *JobSettings {
	if x != nil {
		return x.JobSettings
	}
	return nil
}

func (x *StartJobData) GetJobActions() []*JobAction {
	if x != nil {
		return x.JobActions
	}
	return nil
}

func (x *StartJobData) GetAppProtocol() ApplicationProtocol {
	if x != nil {
		return x.AppProtocol
	}
	return ApplicationProtocol_APPPROTO_IEC_62056_21
}

func (x *StartJobData) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

// Sub-message containing modem connection connected behind a IP-to-serial converter
type ModemOverControlledSerial struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Serial        *ConnectionTypeControlledSerial `protobuf:"bytes,1,opt,name=serial,proto3" json:"serial,omitempty"`                                 // The serial connection type.
	SerialConfig  *SerialConfig                   `protobuf:"bytes,2,opt,name=serial_config,json=serialConfig,proto3" json:"serial_config,omitempty"` // The serial port configuration related to the modem.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModemOverControlledSerial) Reset() {
	*x = ModemOverControlledSerial{}
	mi := &file_pbdriver_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModemOverControlledSerial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModemOverControlledSerial) ProtoMessage() {}

func (x *ModemOverControlledSerial) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModemOverControlledSerial.ProtoReflect.Descriptor instead.
func (*ModemOverControlledSerial) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{13}
}

func (x *ModemOverControlledSerial) GetSerial() *ConnectionTypeControlledSerial {
	if x != nil {
		return x.Serial
	}
	return nil
}

func (x *ModemOverControlledSerial) GetSerialConfig() *SerialConfig {
	if x != nil {
		return x.SerialConfig
	}
	return nil
}

// Sub-message containing connection info for controlled-serial line over IP (e.g. Moxa) connection type
type ConnectionTypeControlledSerial struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IP-to-serial converter description.
	//
	// Types that are valid to be assigned to Converter:
	//
	//	*ConnectionTypeControlledSerial_Moxa
	Converter     isConnectionTypeControlledSerial_Converter `protobuf_oneof:"converter"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionTypeControlledSerial) Reset() {
	*x = ConnectionTypeControlledSerial{}
	mi := &file_pbdriver_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionTypeControlledSerial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionTypeControlledSerial) ProtoMessage() {}

func (x *ConnectionTypeControlledSerial) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionTypeControlledSerial.ProtoReflect.Descriptor instead.
func (*ConnectionTypeControlledSerial) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{14}
}

func (x *ConnectionTypeControlledSerial) GetConverter() isConnectionTypeControlledSerial_Converter {
	if x != nil {
		return x.Converter
	}
	return nil
}

func (x *ConnectionTypeControlledSerial) GetMoxa() *ConnectionTypeSerialMoxa {
	if x != nil {
		if x, ok := x.Converter.(*ConnectionTypeControlledSerial_Moxa); ok {
			return x.Moxa
		}
	}
	return nil
}

type isConnectionTypeControlledSerial_Converter interface {
	isConnectionTypeControlledSerial_Converter()
}

type ConnectionTypeControlledSerial_Moxa struct {
	Moxa *ConnectionTypeSerialMoxa `protobuf:"bytes,1,opt,name=moxa,proto3,oneof"` // The Moxa connection type.
}

func (*ConnectionTypeControlledSerial_Moxa) isConnectionTypeControlledSerial_Converter() {}

// Sub-message containing modem connection info
type ModemInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,12,opt,name=id,proto3" json:"id,omitempty"`                                               // The modem identifier. It is automatically generated during creation.
	Name           string                 `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`                                           // The name of the modem.
	AtInit         string                 `protobuf:"bytes,1,opt,name=at_init,json=atInit,proto3" json:"at_init,omitempty"`                          // The modem initialization command.
	AtTest         string                 `protobuf:"bytes,2,opt,name=at_test,json=atTest,proto3" json:"at_test,omitempty"`                          // The modem test command.
	AtConfig       string                 `protobuf:"bytes,3,opt,name=at_config,json=atConfig,proto3" json:"at_config,omitempty"`                    // The modem configuration command.
	AtDial         string                 `protobuf:"bytes,4,opt,name=at_dial,json=atDial,proto3" json:"at_dial,omitempty"`                          // The modem dial command.
	AtHangup       string                 `protobuf:"bytes,5,opt,name=at_hangup,json=atHangup,proto3" json:"at_hangup,omitempty"`                    // The modem hangup command.
	AtEscape       string                 `protobuf:"bytes,6,opt,name=at_escape,json=atEscape,proto3" json:"at_escape,omitempty"`                    // The modem escape command.
	AtDsr          bool                   `protobuf:"varint,7,opt,name=at_dsr,json=atDsr,proto3" json:"at_dsr,omitempty"`                            // The modem DSR command.
	ConnectTimeout uint32                 `protobuf:"varint,8,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"` // The modem connection timeout.
	// The modem connection description.
	//
	// Types that are valid to be assigned to ModemConnection:
	//
	//	*ModemInfo_Tcpip
	//	*ModemInfo_SerialOverIp
	ModemConnection isModemInfo_ModemConnection `protobuf_oneof:"modem_connection"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ModemInfo) Reset() {
	*x = ModemInfo{}
	mi := &file_pbdriver_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModemInfo) ProtoMessage() {}

func (x *ModemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModemInfo.ProtoReflect.Descriptor instead.
func (*ModemInfo) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{15}
}

func (x *ModemInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModemInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModemInfo) GetAtInit() string {
	if x != nil {
		return x.AtInit
	}
	return ""
}

func (x *ModemInfo) GetAtTest() string {
	if x != nil {
		return x.AtTest
	}
	return ""
}

func (x *ModemInfo) GetAtConfig() string {
	if x != nil {
		return x.AtConfig
	}
	return ""
}

func (x *ModemInfo) GetAtDial() string {
	if x != nil {
		return x.AtDial
	}
	return ""
}

func (x *ModemInfo) GetAtHangup() string {
	if x != nil {
		return x.AtHangup
	}
	return ""
}

func (x *ModemInfo) GetAtEscape() string {
	if x != nil {
		return x.AtEscape
	}
	return ""
}

func (x *ModemInfo) GetAtDsr() bool {
	if x != nil {
		return x.AtDsr
	}
	return false
}

func (x *ModemInfo) GetConnectTimeout() uint32 {
	if x != nil {
		return x.ConnectTimeout
	}
	return 0
}

func (x *ModemInfo) GetModemConnection() isModemInfo_ModemConnection {
	if x != nil {
		return x.ModemConnection
	}
	return nil
}

func (x *ModemInfo) GetTcpip() *ConnectionTypeDirectTcpIp {
	if x != nil {
		if x, ok := x.ModemConnection.(*ModemInfo_Tcpip); ok {
			return x.Tcpip
		}
	}
	return nil
}

func (x *ModemInfo) GetSerialOverIp() *ModemOverControlledSerial {
	if x != nil {
		if x, ok := x.ModemConnection.(*ModemInfo_SerialOverIp); ok {
			return x.SerialOverIp
		}
	}
	return nil
}

type isModemInfo_ModemConnection interface {
	isModemInfo_ModemConnection()
}

type ModemInfo_Tcpip struct {
	Tcpip *ConnectionTypeDirectTcpIp `protobuf:"bytes,9,opt,name=tcpip,proto3,oneof"` // The TCP connection type. The modem has either TCP or there is a IP-to-serial converter which handles the serial configuration so no additional serial configuration is needed.
}

type ModemInfo_SerialOverIp struct {
	SerialOverIp *ModemOverControlledSerial `protobuf:"bytes,10,opt,name=serial_over_ip,json=serialOverIp,proto3,oneof"` // The serial over IP connection type. The modem is connected to a IP-to-serial converter and the converter requires serial port configuration to be set.
}

func (*ModemInfo_Tcpip) isModemInfo_ModemConnection() {}

func (*ModemInfo_SerialOverIp) isModemInfo_ModemConnection() {}

// Sub-message containing serial port configuration
type SerialConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaudRate      SerialConfigBaudRate   `protobuf:"varint,1,opt,name=baud_rate,json=baudRate,proto3,enum=io.clbs.openhes.pbdriver.SerialConfigBaudRate" json:"baud_rate,omitempty"` // The baud rate.
	Parity        SerialConfigParity     `protobuf:"varint,2,opt,name=parity,proto3,enum=io.clbs.openhes.pbdriver.SerialConfigParity" json:"parity,omitempty"`                       // The parity.
	DataBits      SerialConfigDataBits   `protobuf:"varint,3,opt,name=data_bits,json=dataBits,proto3,enum=io.clbs.openhes.pbdriver.SerialConfigDataBits" json:"data_bits,omitempty"` // The data bits.
	StopBits      SerialConfigStopBits   `protobuf:"varint,4,opt,name=stop_bits,json=stopBits,proto3,enum=io.clbs.openhes.pbdriver.SerialConfigStopBits" json:"stop_bits,omitempty"` // The stop bits.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SerialConfig) Reset() {
	*x = SerialConfig{}
	mi := &file_pbdriver_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerialConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialConfig) ProtoMessage() {}

func (x *SerialConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialConfig.ProtoReflect.Descriptor instead.
func (*SerialConfig) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{16}
}

func (x *SerialConfig) GetBaudRate() SerialConfigBaudRate {
	if x != nil {
		return x.BaudRate
	}
	return SerialConfigBaudRate_BAUD_RATE_110
}

func (x *SerialConfig) GetParity() SerialConfigParity {
	if x != nil {
		return x.Parity
	}
	return SerialConfigParity_PARITY_NONE
}

func (x *SerialConfig) GetDataBits() SerialConfigDataBits {
	if x != nil {
		return x.DataBits
	}
	return SerialConfigDataBits_DATA_BITS_5
}

func (x *SerialConfig) GetStopBits() SerialConfigStopBits {
	if x != nil {
		return x.StopBits
	}
	return SerialConfigStopBits_STOP_BITS_1
}

// Sub-message containing connection info
type ConnectionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The entrypoint connection description. It can be either direct TCP, a modem from a pool or a direct serial line over IP (using IP-to-serial converter).
	//
	// Types that are valid to be assigned to Connection:
	//
	//	*ConnectionInfo_Tcpip
	//	*ConnectionInfo_ModemPool
	//	*ConnectionInfo_SerialOverIp
	Connection    isConnectionInfo_Connection `protobuf_oneof:"connection"`
	LinkProtocol  DataLinkProtocol            `protobuf:"varint,4,opt,name=link_protocol,json=linkProtocol,proto3,enum=io.clbs.openhes.pbdriver.DataLinkProtocol" json:"link_protocol,omitempty"` // The data link protocol.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionInfo) Reset() {
	*x = ConnectionInfo{}
	mi := &file_pbdriver_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionInfo) ProtoMessage() {}

func (x *ConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionInfo.ProtoReflect.Descriptor instead.
func (*ConnectionInfo) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{17}
}

func (x *ConnectionInfo) GetConnection() isConnectionInfo_Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *ConnectionInfo) GetTcpip() *ConnectionTypeDirectTcpIp {
	if x != nil {
		if x, ok := x.Connection.(*ConnectionInfo_Tcpip); ok {
			return x.Tcpip
		}
	}
	return nil
}

func (x *ConnectionInfo) GetModemPool() *ConnectionTypeModemPool {
	if x != nil {
		if x, ok := x.Connection.(*ConnectionInfo_ModemPool); ok {
			return x.ModemPool
		}
	}
	return nil
}

func (x *ConnectionInfo) GetSerialOverIp() *ConnectionTypeControlledSerial {
	if x != nil {
		if x, ok := x.Connection.(*ConnectionInfo_SerialOverIp); ok {
			return x.SerialOverIp
		}
	}
	return nil
}

func (x *ConnectionInfo) GetLinkProtocol() DataLinkProtocol {
	if x != nil {
		return x.LinkProtocol
	}
	return DataLinkProtocol_LINKPROTO_IEC_62056_21
}

type isConnectionInfo_Connection interface {
	isConnectionInfo_Connection()
}

type ConnectionInfo_Tcpip struct {
	Tcpip *ConnectionTypeDirectTcpIp `protobuf:"bytes,1,opt,name=tcpip,proto3,oneof"` // The TCP connection type.
}

type ConnectionInfo_ModemPool struct {
	ModemPool *ConnectionTypeModemPool `protobuf:"bytes,2,opt,name=modem_pool,json=modemPool,proto3,oneof"` // The phone connection type.
}

type ConnectionInfo_SerialOverIp struct {
	SerialOverIp *ConnectionTypeControlledSerial `protobuf:"bytes,3,opt,name=serial_over_ip,json=serialOverIp,proto3,oneof"` // The serial over IP connection type.
}

func (*ConnectionInfo_Tcpip) isConnectionInfo_Connection() {}

func (*ConnectionInfo_ModemPool) isConnectionInfo_Connection() {}

func (*ConnectionInfo_SerialOverIp) isConnectionInfo_Connection() {}

// Sub-message containing connection info for TCP connection type
type ConnectionTypeDirectTcpIp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`              // The host name or IP address of the device to connect to.
	Port          uint32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`             // The TCP port number of the device to connect to.
	Timeout       *int32                 `protobuf:"varint,3,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"` // The timeout in seconds for the connection.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionTypeDirectTcpIp) Reset() {
	*x = ConnectionTypeDirectTcpIp{}
	mi := &file_pbdriver_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionTypeDirectTcpIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionTypeDirectTcpIp) ProtoMessage() {}

func (x *ConnectionTypeDirectTcpIp) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionTypeDirectTcpIp.ProtoReflect.Descriptor instead.
func (*ConnectionTypeDirectTcpIp) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{18}
}

func (x *ConnectionTypeDirectTcpIp) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ConnectionTypeDirectTcpIp) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ConnectionTypeDirectTcpIp) GetTimeout() int32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

// Sub-message containing connection info for phone line (modem) connection type
type ConnectionTypeModemPool struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The phone number of the device to connect to.
	Number string `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	// The modem pool identifier. The pool is a group of modems that can be used to connect to the device. Final modem is selected by the Taskmaster at the time of the job start.
	PoolId string `protobuf:"bytes,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// The modem device assigned to the job. This is filled only and only when the connection type is modem. The value is assigned by the Taskmaster when to job is being started. Driver is required to use this modem device to connect to the meter only and only for the time of this job!
	Modem         *ModemInfo `protobuf:"bytes,4,opt,name=modem,proto3,oneof" json:"modem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionTypeModemPool) Reset() {
	*x = ConnectionTypeModemPool{}
	mi := &file_pbdriver_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionTypeModemPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionTypeModemPool) ProtoMessage() {}

func (x *ConnectionTypeModemPool) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionTypeModemPool.ProtoReflect.Descriptor instead.
func (*ConnectionTypeModemPool) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{19}
}

func (x *ConnectionTypeModemPool) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *ConnectionTypeModemPool) GetPoolId() string {
	if x != nil {
		return x.PoolId
	}
	return ""
}

func (x *ConnectionTypeModemPool) GetModem() *ModemInfo {
	if x != nil {
		return x.Modem
	}
	return nil
}

// Sub-message containing connection info for controlled-serial line (Moxa) connection type
type ConnectionTypeSerialMoxa struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`                // The host name or IP address of the device to connect to.
	DataPort      uint32                 `protobuf:"varint,2,opt,name=dataPort,proto3" json:"dataPort,omitempty"`       // The TCP port number of the device to connect to - data port.
	CommandPort   uint32                 `protobuf:"varint,3,opt,name=commandPort,proto3" json:"commandPort,omitempty"` // The TCP port number of the device to connect to - command port.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionTypeSerialMoxa) Reset() {
	*x = ConnectionTypeSerialMoxa{}
	mi := &file_pbdriver_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionTypeSerialMoxa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionTypeSerialMoxa) ProtoMessage() {}

func (x *ConnectionTypeSerialMoxa) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionTypeSerialMoxa.ProtoReflect.Descriptor instead.
func (*ConnectionTypeSerialMoxa) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{20}
}

func (x *ConnectionTypeSerialMoxa) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ConnectionTypeSerialMoxa) GetDataPort() uint32 {
	if x != nil {
		return x.DataPort
	}
	return 0
}

func (x *ConnectionTypeSerialMoxa) GetCommandPort() uint32 {
	if x != nil {
		return x.CommandPort
	}
	return 0
}

// Sub-message containing job parameters
type JobSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxDuration   int64                  `protobuf:"varint,1,opt,name=max_duration,json=maxDuration,proto3" json:"max_duration,omitempty"`                  // Maximum duration of the job attempt in miliseconds. This is related to the real time for the driver.
	Priority      JobPriority            `protobuf:"varint,2,opt,name=priority,proto3,enum=io.clbs.openhes.pbdriver.JobPriority" json:"priority,omitempty"` // Priority of the job.
	Attempts      []int32                `protobuf:"varint,3,rep,packed,name=attempts,proto3" json:"attempts,omitempty"`                                    // Maximum number of attempts, 1 is the minimum.
	RetryDelay    int64                  `protobuf:"varint,4,opt,name=retry_delay,json=retryDelay,proto3" json:"retry_delay,omitempty"`                     // Delay in miliseconds between two attempts.
	DeferStart    uint64                 `protobuf:"varint,5,opt,name=defer_start,json=deferStart,proto3" json:"defer_start,omitempty"`                     // Number of miliseconds to wait before starting the job.
	ExpiresAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`                         // The timestamp when the job expires.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobSettings) Reset() {
	*x = JobSettings{}
	mi := &file_pbdriver_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSettings) ProtoMessage() {}

func (x *JobSettings) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSettings.ProtoReflect.Descriptor instead.
func (*JobSettings) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{21}
}

func (x *JobSettings) GetMaxDuration() int64 {
	if x != nil {
		return x.MaxDuration
	}
	return 0
}

func (x *JobSettings) GetPriority() JobPriority {
	if x != nil {
		return x.Priority
	}
	return JobPriority_JOB_PRIORITY_0
}

func (x *JobSettings) GetAttempts() []int32 {
	if x != nil {
		return x.Attempts
	}
	return nil
}

func (x *JobSettings) GetRetryDelay() int64 {
	if x != nil {
		return x.RetryDelay
	}
	return 0
}

func (x *JobSettings) GetDeferStart() uint64 {
	if x != nil {
		return x.DeferStart
	}
	return 0
}

func (x *JobSettings) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

// Sub-message containing job action specification
type JobAction struct {
	state      protoimpl.MessageState     `protogen:"open.v1"`
	ActionId   string                     `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`                                                               // The action identifier.
	Attributes map[string]*AttributeValue `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // The action attributes.
	// Types that are valid to be assigned to Action:
	//
	//	*JobAction_GetRegister
	//	*JobAction_GetPeriodicalProfile
	//	*JobAction_GetIrregularProfile
	//	*JobAction_GetEvents
	//	*JobAction_GetClock
	//	*JobAction_SyncClock
	//	*JobAction_GetRelayState
	//	*JobAction_SetRelayState
	//	*JobAction_GetDisconnectorState
	//	*JobAction_SetDisconnectorState
	//	*JobAction_GetTou
	//	*JobAction_SetTou
	//	*JobAction_GetLimiter
	//	*JobAction_SetLimiter
	//	*JobAction_ResetBillingPeriod
	//	*JobAction_FwUpdate
	Action        isJobAction_Action `protobuf_oneof:"action"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobAction) Reset() {
	*x = JobAction{}
	mi := &file_pbdriver_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobAction) ProtoMessage() {}

func (x *JobAction) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobAction.ProtoReflect.Descriptor instead.
func (*JobAction) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{22}
}

func (x *JobAction) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *JobAction) GetAttributes() map[string]*AttributeValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *JobAction) GetAction() isJobAction_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *JobAction) GetGetRegister() *ActionGetRegister {
	if x != nil {
		if x, ok := x.Action.(*JobAction_GetRegister); ok {
			return x.GetRegister
		}
	}
	return nil
}

func (x *JobAction) GetGetPeriodicalProfile() *ActionGetPeriodicalProfile {
	if x != nil {
		if x, ok := x.Action.(*JobAction_GetPeriodicalProfile); ok {
			return x.GetPeriodicalProfile
		}
	}
	return nil
}

func (x *JobAction) GetGetIrregularProfile() *ActionGetIrregularProfile {
	if x != nil {
		if x, ok := x.Action.(*JobAction_GetIrregularProfile); ok {
			return x.GetIrregularProfile
		}
	}
	return nil
}

func (x *JobAction) GetGetEvents() *ActionGetEvents {
	if x != nil {
		if x, ok := x.Action.(*JobAction_GetEvents); ok {
			return x.GetEvents
		}
	}
	return nil
}

func (x *JobAction) GetGetClock() *ActionGetClock {
	if x != nil {
		if x, ok := x.Action.(*JobAction_GetClock); ok {
			return x.GetClock
		}
	}
	return nil
}

func (x *JobAction) GetSyncClock() *ActionSyncClock {
	if x != nil {
		if x, ok := x.Action.(*JobAction_SyncClock); ok {
			return x.SyncClock
		}
	}
	return nil
}

func (x *JobAction) GetGetRelayState() *ActionGetRelayState {
	if x != nil {
		if x, ok := x.Action.(*JobAction_GetRelayState); ok {
			return x.GetRelayState
		}
	}
	return nil
}

func (x *JobAction) GetSetRelayState() *ActionSetRelayState {
	if x != nil {
		if x, ok := x.Action.(*JobAction_SetRelayState); ok {
			return x.SetRelayState
		}
	}
	return nil
}

func (x *JobAction) GetGetDisconnectorState() *ActionGetDisconnectorState {
	if x != nil {
		if x, ok := x.Action.(*JobAction_GetDisconnectorState); ok {
			return x.GetDisconnectorState
		}
	}
	return nil
}

func (x *JobAction) GetSetDisconnectorState() *ActionSetDisconnectorState {
	if x != nil {
		if x, ok := x.Action.(*JobAction_SetDisconnectorState); ok {
			return x.SetDisconnectorState
		}
	}
	return nil
}

func (x *JobAction) GetGetTou() *ActionGetTou {
	if x != nil {
		if x, ok := x.Action.(*JobAction_GetTou); ok {
			return x.GetTou
		}
	}
	return nil
}

func (x *JobAction) GetSetTou() *ActionSetTou {
	if x != nil {
		if x, ok := x.Action.(*JobAction_SetTou); ok {
			return x.SetTou
		}
	}
	return nil
}

func (x *JobAction) GetGetLimiter() *ActionGetLimiter {
	if x != nil {
		if x, ok := x.Action.(*JobAction_GetLimiter); ok {
			return x.GetLimiter
		}
	}
	return nil
}

func (x *JobAction) GetSetLimiter() *ActionSetLimiter {
	if x != nil {
		if x, ok := x.Action.(*JobAction_SetLimiter); ok {
			return x.SetLimiter
		}
	}
	return nil
}

func (x *JobAction) GetResetBillingPeriod() *ActionResetBillingPeriod {
	if x != nil {
		if x, ok := x.Action.(*JobAction_ResetBillingPeriod); ok {
			return x.ResetBillingPeriod
		}
	}
	return nil
}

func (x *JobAction) GetFwUpdate() *ActionFwUpdate {
	if x != nil {
		if x, ok := x.Action.(*JobAction_FwUpdate); ok {
			return x.FwUpdate
		}
	}
	return nil
}

type isJobAction_Action interface {
	isJobAction_Action()
}

type JobAction_GetRegister struct {
	GetRegister *ActionGetRegister `protobuf:"bytes,3,opt,name=get_register,json=getRegister,proto3,oneof"` // The get register action specification.
}

type JobAction_GetPeriodicalProfile struct {
	GetPeriodicalProfile *ActionGetPeriodicalProfile `protobuf:"bytes,4,opt,name=get_periodical_profile,json=getPeriodicalProfile,proto3,oneof"` // The get periodical profile action specification.
}

type JobAction_GetIrregularProfile struct {
	GetIrregularProfile *ActionGetIrregularProfile `protobuf:"bytes,5,opt,name=get_irregular_profile,json=getIrregularProfile,proto3,oneof"` // The get irregular profile action specification.
}

type JobAction_GetEvents struct {
	GetEvents *ActionGetEvents `protobuf:"bytes,6,opt,name=get_events,json=getEvents,proto3,oneof"` // The get events action specification.
}

type JobAction_GetClock struct {
	GetClock *ActionGetClock `protobuf:"bytes,7,opt,name=get_clock,json=getClock,proto3,oneof"` // The get clock action specification.
}

type JobAction_SyncClock struct {
	SyncClock *ActionSyncClock `protobuf:"bytes,8,opt,name=sync_clock,json=syncClock,proto3,oneof"` // The sync clock action specification.
}

type JobAction_GetRelayState struct {
	GetRelayState *ActionGetRelayState `protobuf:"bytes,9,opt,name=get_relay_state,json=getRelayState,proto3,oneof"` // The get relay state action specification.
}

type JobAction_SetRelayState struct {
	SetRelayState *ActionSetRelayState `protobuf:"bytes,10,opt,name=set_relay_state,json=setRelayState,proto3,oneof"` // The set relay state action specification.
}

type JobAction_GetDisconnectorState struct {
	GetDisconnectorState *ActionGetDisconnectorState `protobuf:"bytes,11,opt,name=get_disconnector_state,json=getDisconnectorState,proto3,oneof"` // The get disconnector state action specification.
}

type JobAction_SetDisconnectorState struct {
	SetDisconnectorState *ActionSetDisconnectorState `protobuf:"bytes,12,opt,name=set_disconnector_state,json=setDisconnectorState,proto3,oneof"` // The set disconnector state action specification.
}

type JobAction_GetTou struct {
	GetTou *ActionGetTou `protobuf:"bytes,13,opt,name=get_tou,json=getTou,proto3,oneof"` // The get tou action specification.
}

type JobAction_SetTou struct {
	SetTou *ActionSetTou `protobuf:"bytes,14,opt,name=set_tou,json=setTou,proto3,oneof"` // The set tou action specification.
}

type JobAction_GetLimiter struct {
	GetLimiter *ActionGetLimiter `protobuf:"bytes,15,opt,name=get_limiter,json=getLimiter,proto3,oneof"` // The get limiter action specification.
}

type JobAction_SetLimiter struct {
	SetLimiter *ActionSetLimiter `protobuf:"bytes,16,opt,name=set_limiter,json=setLimiter,proto3,oneof"` // The set limiter action specification.
}

type JobAction_ResetBillingPeriod struct {
	ResetBillingPeriod *ActionResetBillingPeriod `protobuf:"bytes,17,opt,name=reset_billing_period,json=resetBillingPeriod,proto3,oneof"` // The reset billing period action specification.
}

type JobAction_FwUpdate struct {
	FwUpdate *ActionFwUpdate `protobuf:"bytes,18,opt,name=fw_update,json=fwUpdate,proto3,oneof"` // The firmware update action specification.
}

func (*JobAction_GetRegister) isJobAction_Action() {}

func (*JobAction_GetPeriodicalProfile) isJobAction_Action() {}

func (*JobAction_GetIrregularProfile) isJobAction_Action() {}

func (*JobAction_GetEvents) isJobAction_Action() {}

func (*JobAction_GetClock) isJobAction_Action() {}

func (*JobAction_SyncClock) isJobAction_Action() {}

func (*JobAction_GetRelayState) isJobAction_Action() {}

func (*JobAction_SetRelayState) isJobAction_Action() {}

func (*JobAction_GetDisconnectorState) isJobAction_Action() {}

func (*JobAction_SetDisconnectorState) isJobAction_Action() {}

func (*JobAction_GetTou) isJobAction_Action() {}

func (*JobAction_SetTou) isJobAction_Action() {}

func (*JobAction_GetLimiter) isJobAction_Action() {}

func (*JobAction_SetLimiter) isJobAction_Action() {}

func (*JobAction_ResetBillingPeriod) isJobAction_Action() {}

func (*JobAction_FwUpdate) isJobAction_Action() {}

// Sub-message containing get register action specification
type ActionGetRegister struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionGetRegister) Reset() {
	*x = ActionGetRegister{}
	mi := &file_pbdriver_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetRegister) ProtoMessage() {}

func (x *ActionGetRegister) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetRegister.ProtoReflect.Descriptor instead.
func (*ActionGetRegister) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{23}
}

// Sub-message containing get periodical profile action specification
type ActionGetPeriodicalProfile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"` // The start timestamp of the profile.
	To            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`     // The end timestamp of the profile.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionGetPeriodicalProfile) Reset() {
	*x = ActionGetPeriodicalProfile{}
	mi := &file_pbdriver_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetPeriodicalProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetPeriodicalProfile) ProtoMessage() {}

func (x *ActionGetPeriodicalProfile) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetPeriodicalProfile.ProtoReflect.Descriptor instead.
func (*ActionGetPeriodicalProfile) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{24}
}

func (x *ActionGetPeriodicalProfile) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ActionGetPeriodicalProfile) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

// Sub-message containing get irregular profile action specification
type ActionGetIrregularProfile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionGetIrregularProfile) Reset() {
	*x = ActionGetIrregularProfile{}
	mi := &file_pbdriver_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetIrregularProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetIrregularProfile) ProtoMessage() {}

func (x *ActionGetIrregularProfile) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetIrregularProfile.ProtoReflect.Descriptor instead.
func (*ActionGetIrregularProfile) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{25}
}

// Sub-message containing get events action specification
type ActionGetEvents struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionGetEvents) Reset() {
	*x = ActionGetEvents{}
	mi := &file_pbdriver_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetEvents) ProtoMessage() {}

func (x *ActionGetEvents) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetEvents.ProtoReflect.Descriptor instead.
func (*ActionGetEvents) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{26}
}

// Sub-message containing get clock action specification
type ActionGetClock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionGetClock) Reset() {
	*x = ActionGetClock{}
	mi := &file_pbdriver_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetClock) ProtoMessage() {}

func (x *ActionGetClock) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetClock.ProtoReflect.Descriptor instead.
func (*ActionGetClock) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{27}
}

// Sub-message containing sync clock action specification
type ActionSyncClock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionSyncClock) Reset() {
	*x = ActionSyncClock{}
	mi := &file_pbdriver_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionSyncClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSyncClock) ProtoMessage() {}

func (x *ActionSyncClock) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSyncClock.ProtoReflect.Descriptor instead.
func (*ActionSyncClock) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{28}
}

// Sub-message containing get relay state action specification
type ActionGetRelayState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionGetRelayState) Reset() {
	*x = ActionGetRelayState{}
	mi := &file_pbdriver_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetRelayState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetRelayState) ProtoMessage() {}

func (x *ActionGetRelayState) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetRelayState.ProtoReflect.Descriptor instead.
func (*ActionGetRelayState) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{29}
}

// Sub-message containing set relay state action specification
type ActionSetRelayState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionSetRelayState) Reset() {
	*x = ActionSetRelayState{}
	mi := &file_pbdriver_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionSetRelayState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSetRelayState) ProtoMessage() {}

func (x *ActionSetRelayState) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSetRelayState.ProtoReflect.Descriptor instead.
func (*ActionSetRelayState) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{30}
}

// Sub-message containing get disconnector state action specification
type ActionGetDisconnectorState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionGetDisconnectorState) Reset() {
	*x = ActionGetDisconnectorState{}
	mi := &file_pbdriver_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetDisconnectorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetDisconnectorState) ProtoMessage() {}

func (x *ActionGetDisconnectorState) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetDisconnectorState.ProtoReflect.Descriptor instead.
func (*ActionGetDisconnectorState) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{31}
}

// Sub-message containing set disconnector state action specification
type ActionSetDisconnectorState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionSetDisconnectorState) Reset() {
	*x = ActionSetDisconnectorState{}
	mi := &file_pbdriver_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionSetDisconnectorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSetDisconnectorState) ProtoMessage() {}

func (x *ActionSetDisconnectorState) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSetDisconnectorState.ProtoReflect.Descriptor instead.
func (*ActionSetDisconnectorState) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{32}
}

// Sub-message containing get tou action specification
type ActionGetTou struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionGetTou) Reset() {
	*x = ActionGetTou{}
	mi := &file_pbdriver_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetTou) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetTou) ProtoMessage() {}

func (x *ActionGetTou) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetTou.ProtoReflect.Descriptor instead.
func (*ActionGetTou) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{33}
}

// Sub-message containing set tou action specification
type ActionSetTou struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionSetTou) Reset() {
	*x = ActionSetTou{}
	mi := &file_pbdriver_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionSetTou) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSetTou) ProtoMessage() {}

func (x *ActionSetTou) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSetTou.ProtoReflect.Descriptor instead.
func (*ActionSetTou) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{34}
}

// Sub-message containing get limiter action specification
type ActionGetLimiter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionGetLimiter) Reset() {
	*x = ActionGetLimiter{}
	mi := &file_pbdriver_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionGetLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGetLimiter) ProtoMessage() {}

func (x *ActionGetLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGetLimiter.ProtoReflect.Descriptor instead.
func (*ActionGetLimiter) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{35}
}

// Sub-message containing set limiter action specification
type ActionSetLimiter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionSetLimiter) Reset() {
	*x = ActionSetLimiter{}
	mi := &file_pbdriver_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionSetLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSetLimiter) ProtoMessage() {}

func (x *ActionSetLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSetLimiter.ProtoReflect.Descriptor instead.
func (*ActionSetLimiter) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{36}
}

// Sub-message containing reset billing period action specification
type ActionResetBillingPeriod struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionResetBillingPeriod) Reset() {
	*x = ActionResetBillingPeriod{}
	mi := &file_pbdriver_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionResetBillingPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResetBillingPeriod) ProtoMessage() {}

func (x *ActionResetBillingPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResetBillingPeriod.ProtoReflect.Descriptor instead.
func (*ActionResetBillingPeriod) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{37}
}

// Sub-message containing firmware update action specification
type ActionFwUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionFwUpdate) Reset() {
	*x = ActionFwUpdate{}
	mi := &file_pbdriver_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionFwUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionFwUpdate) ProtoMessage() {}

func (x *ActionFwUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionFwUpdate.ProtoReflect.Descriptor instead.
func (*ActionFwUpdate) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{38}
}

// Sub-message containing single attribute value specification
type AttributeValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*AttributeValue_StrValue
	//	*AttributeValue_IntValue
	//	*AttributeValue_DoubleValue
	//	*AttributeValue_BinaryValue
	//	*AttributeValue_BoolValue
	Value         isAttributeValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttributeValue) Reset() {
	*x = AttributeValue{}
	mi := &file_pbdriver_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttributeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeValue) ProtoMessage() {}

func (x *AttributeValue) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeValue.ProtoReflect.Descriptor instead.
func (*AttributeValue) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{39}
}

func (x *AttributeValue) GetValue() isAttributeValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AttributeValue) GetStrValue() string {
	if x != nil {
		if x, ok := x.Value.(*AttributeValue_StrValue); ok {
			return x.StrValue
		}
	}
	return ""
}

func (x *AttributeValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*AttributeValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *AttributeValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*AttributeValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *AttributeValue) GetBinaryValue() []byte {
	if x != nil {
		if x, ok := x.Value.(*AttributeValue_BinaryValue); ok {
			return x.BinaryValue
		}
	}
	return nil
}

func (x *AttributeValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*AttributeValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

type isAttributeValue_Value interface {
	isAttributeValue_Value()
}

type AttributeValue_StrValue struct {
	StrValue string `protobuf:"bytes,1,opt,name=str_value,json=strValue,proto3,oneof"` // The string-typed value.
}

type AttributeValue_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof"` // The integer-typed value.
}

type AttributeValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,proto3,oneof"` // The double-typed value.
}

type AttributeValue_BinaryValue struct {
	BinaryValue []byte `protobuf:"bytes,4,opt,name=binary_value,json=binaryValue,proto3,oneof"` // The binary-typed value.
}

type AttributeValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,proto3,oneof"` // The boolean-typed value.
}

func (*AttributeValue_StrValue) isAttributeValue_Value() {}

func (*AttributeValue_IntValue) isAttributeValue_Value() {}

func (*AttributeValue_DoubleValue) isAttributeValue_Value() {}

func (*AttributeValue_BinaryValue) isAttributeValue_Value() {}

func (*AttributeValue_BoolValue) isAttributeValue_Value() {}

// Common gRPC response message
type CommonResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        ErrorCode              `protobuf:"varint,1,opt,name=result,proto3,enum=io.clbs.openhes.pbdriver.ErrorCode" json:"result,omitempty"` // The result of the operation.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommonResponse) Reset() {
	*x = CommonResponse{}
	mi := &file_pbdriver_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResponse) ProtoMessage() {}

func (x *CommonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResponse.ProtoReflect.Descriptor instead.
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{40}
}

func (x *CommonResponse) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERROR_CODE_OK
}

// Sub-message containing destription for one application protocol, e.g. DLMS_SN.
type ApplicationProtocolTemplate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the application protocol.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The application protocol.
	Protocol ApplicationProtocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=io.clbs.openhes.pbdriver.ApplicationProtocol" json:"protocol,omitempty"`
	// The list of attribute definitions for the protocol.
	Attributes    []*AttributeDefinition `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplicationProtocolTemplate) Reset() {
	*x = ApplicationProtocolTemplate{}
	mi := &file_pbdriver_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationProtocolTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationProtocolTemplate) ProtoMessage() {}

func (x *ApplicationProtocolTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationProtocolTemplate.ProtoReflect.Descriptor instead.
func (*ApplicationProtocolTemplate) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{41}
}

func (x *ApplicationProtocolTemplate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplicationProtocolTemplate) GetProtocol() ApplicationProtocol {
	if x != nil {
		return x.Protocol
	}
	return ApplicationProtocol_APPPROTO_IEC_62056_21
}

func (x *ApplicationProtocolTemplate) GetAttributes() []*AttributeDefinition {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Sub-message containing destription for one data link protocol, e.g. HDLC.
type DataLinkTemplate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The data link protocol.
	LinkProtocol DataLinkProtocol `protobuf:"varint,1,opt,name=link_protocol,json=linkProtocol,proto3,enum=io.clbs.openhes.pbdriver.DataLinkProtocol" json:"link_protocol,omitempty"`
	// The list of application protocol identifiers supported by the driver.
	AppProtocolRefs []ApplicationProtocol `protobuf:"varint,2,rep,packed,name=app_protocol_refs,json=appProtocolRefs,proto3,enum=io.clbs.openhes.pbdriver.ApplicationProtocol" json:"app_protocol_refs,omitempty"`
	// The list of attribute definitions related to given data link type (see link_protocol property) and all those will be instantiated for each device.
	Attributes    []*AttributeDefinition `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataLinkTemplate) Reset() {
	*x = DataLinkTemplate{}
	mi := &file_pbdriver_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataLinkTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLinkTemplate) ProtoMessage() {}

func (x *DataLinkTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataLinkTemplate.ProtoReflect.Descriptor instead.
func (*DataLinkTemplate) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{42}
}

func (x *DataLinkTemplate) GetLinkProtocol() DataLinkProtocol {
	if x != nil {
		return x.LinkProtocol
	}
	return DataLinkProtocol_LINKPROTO_IEC_62056_21
}

func (x *DataLinkTemplate) GetAppProtocolRefs() []ApplicationProtocol {
	if x != nil {
		return x.AppProtocolRefs
	}
	return nil
}

func (x *DataLinkTemplate) GetAttributes() []*AttributeDefinition {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Sub-message containing destription for one communication type, e.g. TCP/IP.
type CommunicationTemplate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the communication.
	Type CommunicationType `protobuf:"varint,1,opt,name=type,proto3,enum=io.clbs.openhes.pbdriver.CommunicationType" json:"type,omitempty"`
	// The list of data link protocols and their app protocols supported by the driver.
	Datalinks     []*DataLinkTemplate `protobuf:"bytes,2,rep,name=datalinks,proto3" json:"datalinks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommunicationTemplate) Reset() {
	*x = CommunicationTemplate{}
	mi := &file_pbdriver_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommunicationTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationTemplate) ProtoMessage() {}

func (x *CommunicationTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationTemplate.ProtoReflect.Descriptor instead.
func (*CommunicationTemplate) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{43}
}

func (x *CommunicationTemplate) GetType() CommunicationType {
	if x != nil {
		return x.Type
	}
	return CommunicationType_COMMUNICATION_TYPE_TCPIP
}

func (x *CommunicationTemplate) GetDatalinks() []*DataLinkTemplate {
	if x != nil {
		return x.Datalinks
	}
	return nil
}

// Sub-message containing access level definition
type AccessLevelTemplate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // The access level identifier, such as "1", "G", "16" or similar.
	Name          *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"` // The access level name. Should be in English and unique for given driver, e.g. "Management", "Public".
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLevelTemplate) Reset() {
	*x = AccessLevelTemplate{}
	mi := &file_pbdriver_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLevelTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLevelTemplate) ProtoMessage() {}

func (x *AccessLevelTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLevelTemplate.ProtoReflect.Descriptor instead.
func (*AccessLevelTemplate) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{44}
}

func (x *AccessLevelTemplate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccessLevelTemplate) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// Sub-message in driver negotiation request
type DriverTemplates struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The templates of the communication options. Every template represents an option how the drivers allows to communicate. The driver can support multiple communication templates.
	CommunicationTemplates []*CommunicationTemplate `protobuf:"bytes,1,rep,name=communication_templates,json=communicationTemplates,proto3" json:"communication_templates,omitempty"`
	// The templates of the application protocols supported by the driver.
	AppProtocols []*ApplicationProtocolTemplate `protobuf:"bytes,2,rep,name=app_protocols,json=appProtocols,proto3" json:"app_protocols,omitempty"`
	// The templates of the job actions for all supported action types.
	ActionAttributes []*JobActionAttributes `protobuf:"bytes,3,rep,name=action_attributes,json=actionAttributes,proto3" json:"action_attributes,omitempty"`
	// The templates of the access levels supported by the driver.
	AccessTemplates []*AccessLevelTemplate `protobuf:"bytes,4,rep,name=access_templates,json=accessTemplates,proto3" json:"access_templates,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DriverTemplates) Reset() {
	*x = DriverTemplates{}
	mi := &file_pbdriver_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverTemplates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverTemplates) ProtoMessage() {}

func (x *DriverTemplates) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverTemplates.ProtoReflect.Descriptor instead.
func (*DriverTemplates) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{45}
}

func (x *DriverTemplates) GetCommunicationTemplates() []*CommunicationTemplate {
	if x != nil {
		return x.CommunicationTemplates
	}
	return nil
}

func (x *DriverTemplates) GetAppProtocols() []*ApplicationProtocolTemplate {
	if x != nil {
		return x.AppProtocols
	}
	return nil
}

func (x *DriverTemplates) GetActionAttributes() []*JobActionAttributes {
	if x != nil {
		return x.ActionAttributes
	}
	return nil
}

func (x *DriverTemplates) GetAccessTemplates() []*AccessLevelTemplate {
	if x != nil {
		return x.AccessTemplates
	}
	return nil
}

// Taskmaster -> Driver cancel job request message
type CancelJobRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"` // The job identifier.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelJobRequest) Reset() {
	*x = CancelJobRequest{}
	mi := &file_pbdriver_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobRequest) ProtoMessage() {}

func (x *CancelJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobRequest.ProtoReflect.Descriptor instead.
func (*CancelJobRequest) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{46}
}

func (x *CancelJobRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// Driver -> Taskmaster negotiate/health-check request message
type NegotiateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The driver version. The format is not defined. The driver itself is versioned by the docker image tags so this value shall be either the same (set during the image build) or any useful user-readable version string.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The port the driver's gRPC will listen on.
	ListeningPort uint32 `protobuf:"varint,2,opt,name=listening_port,json=listeningPort,proto3" json:"listening_port,omitempty"`
	// The technical/internal ID of the driver.
	DriverType string `protobuf:"bytes,3,opt,name=driver_type,json=driverType,proto3" json:"driver_type,omitempty"`
	// The maximum number of concurrent jobs the driver can handle. The value 0 is not allowed, the maximum number respect typical_mem_usage not to overgrow the memory resources!
	MaxConcurrentJobs int32 `protobuf:"varint,4,opt,name=max_concurrent_jobs,json=maxConcurrentJobs,proto3" json:"max_concurrent_jobs,omitempty"`
	// The maximum cascade depth the driver can handle. Number 1 means that the driver cannot handle cascading jobs, 2 means that the driver can handle cascading jobs with one level of depth, etc.
	// The value 0 means that the driver can handle any number of cascading jobs.
	MaxCascadeDepth uint32 `protobuf:"varint,5,opt,name=max_cascade_depth,json=maxCascadeDepth,proto3" json:"max_cascade_depth,omitempty"`
	// The typical memory usage of the driver in MB.
	TypicalMemUsage int32 `protobuf:"varint,6,opt,name=typical_mem_usage,json=typicalMemUsage,proto3" json:"typical_mem_usage,omitempty"`
	// The connection and action templates.
	Templates *DriverTemplates `protobuf:"bytes,7,opt,name=templates,proto3" json:"templates,omitempty"`
	// The display name of the driver. Must be in format '<manufacturer> <device_type> [<device_type_version>]'.
	// It must respect upper/lower characters.
	// The generic drivers, such as 'cybros labs generic', must be named as '<driver_company_name> generic'.
	//
	// Examples: 'Addax NP73E', 'cybros labs generic', 'Landis+Gyr S650 v2'
	DisplayName   string `protobuf:"bytes,8,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NegotiateRequest) Reset() {
	*x = NegotiateRequest{}
	mi := &file_pbdriver_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NegotiateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NegotiateRequest) ProtoMessage() {}

func (x *NegotiateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriver_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NegotiateRequest.ProtoReflect.Descriptor instead.
func (*NegotiateRequest) Descriptor() ([]byte, []int) {
	return file_pbdriver_proto_rawDescGZIP(), []int{47}
}

func (x *NegotiateRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NegotiateRequest) GetListeningPort() uint32 {
	if x != nil {
		return x.ListeningPort
	}
	return 0
}

func (x *NegotiateRequest) GetDriverType() string {
	if x != nil {
		return x.DriverType
	}
	return ""
}

func (x *NegotiateRequest) GetMaxConcurrentJobs() int32 {
	if x != nil {
		return x.MaxConcurrentJobs
	}
	return 0
}

func (x *NegotiateRequest) GetMaxCascadeDepth() uint32 {
	if x != nil {
		return x.MaxCascadeDepth
	}
	return 0
}

func (x *NegotiateRequest) GetTypicalMemUsage() int32 {
	if x != nil {
		return x.TypicalMemUsage
	}
	return 0
}

func (x *NegotiateRequest) GetTemplates() *DriverTemplates {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *NegotiateRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

var File_pbdriver_proto protoreflect.FileDescriptor

var file_pbdriver_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x18, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x03, 0x6a,
	0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x48, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x3e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f,
	0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x01, 0x0a,
	0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x06, 0x6e,
	0x6f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a,
	0x08, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x7a, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x3d,
	0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x6c, 0x6f, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x93, 0x01,
	0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x6b, 0x12, 0x43, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x0d, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x0d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x45, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x7a, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x54, 0x7a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8c, 0x02, 0x0a,
	0x13, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x13,
	0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xa1, 0x01, 0x0a,
	0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73,
	0x22, 0x8f, 0x04, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x69, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x44, 0x0a,
	0x0b, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f,
	0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x6d, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x19, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x4f, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x50, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x77, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x48, 0x0a, 0x04, 0x6d, 0x6f, 0x78, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d,
	0x6f, 0x78, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x78, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x22, 0xcf, 0x03, 0x0a, 0x09, 0x4d, 0x6f, 0x64,
	0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x74,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x74, 0x49,
	0x6e, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x74, 0x5f,
	0x64, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x74, 0x44, 0x69,
	0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x74, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x74, 0x5f, 0x64, 0x73, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x74,
	0x44, 0x73, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4b, 0x0a, 0x05,
	0x74, 0x63, 0x70, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x63, 0x70, 0x49, 0x70,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x63, 0x70, 0x69, 0x70, 0x12, 0x5b, 0x0a, 0x0e, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4f, 0x76, 0x65, 0x72, 0x49, 0x70, 0x42, 0x12, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbb, 0x02, 0x0a, 0x0c, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a, 0x09, 0x62,
	0x61, 0x75, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x75, 0x64, 0x52, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x62, 0x61, 0x75, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4b,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x74,
	0x73, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x42, 0x69, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x69, 0x74, 0x73, 0x52, 0x08,
	0x73, 0x74, 0x6f, 0x70, 0x42, 0x69, 0x74, 0x73, 0x22, 0xf2, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x05, 0x74,
	0x63, 0x70, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x63, 0x70, 0x49, 0x70, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x63, 0x70, 0x69, 0x70, 0x12, 0x52, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65,
	0x6d, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x48,
	0x00, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x60, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x4f,
	0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42,
	0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a,
	0x19, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x63, 0x70, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x94, 0x01,
	0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6d, 0x22, 0x6c, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x6f, 0x78, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41,
	0x74, 0x22, 0xdf, 0x0c, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x50, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x74,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x69, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x72, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49, 0x72, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65, 0x74, 0x49, 0x72, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0a,
	0x67, 0x65, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x09, 0x67,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x57, 0x0a,
	0x0f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x6c, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a,
	0x16, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x67,
	0x65, 0x74, 0x5f, 0x74, 0x6f, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x75, 0x48, 0x00, 0x52, 0x06, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x12, 0x41,
	0x0a, 0x07, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x75, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x74, 0x54, 0x6f,
	0x75, 0x12, 0x4d, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x12, 0x4d, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12,
	0x66, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x47, 0x0a, 0x09, 0x66, 0x77, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x77, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x1a, 0x67, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x22, 0x78, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02,
	0x74, 0x6f, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x49,
	0x72, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0x11, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x15,
	0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x75, 0x22, 0x0e, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x54, 0x6f,
	0x75, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d, 0x0a, 0x0e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x1b,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0c, 0x6c,
	0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x59, 0x0a, 0x11, 0x61,
	0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x65, 0x66, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x48, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x47, 0x0a, 0x13, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x8d, 0x03, 0x0a, 0x0f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x5a, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x5a, 0x0a,
	0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x10, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0xe8,
	0x02, 0x0a, 0x10, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x73,
	0x63, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x79,
	0x70, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a,
	0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x09, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0x69, 0x0a, 0x12, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x44, 0x44, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x10, 0x04, 0x2a, 0xcb, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x75, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x31, 0x31, 0x30, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x33, 0x30,
	0x30, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x36, 0x30, 0x30, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x31, 0x32, 0x30, 0x30, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41,
	0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x32, 0x34, 0x30, 0x30, 0x10, 0x04, 0x12, 0x12,
	0x0a, 0x0e, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x34, 0x38, 0x30, 0x30,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x39, 0x36, 0x30, 0x30, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x31, 0x34, 0x34, 0x30, 0x30, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x42,
	0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x31, 0x39, 0x32, 0x30, 0x30, 0x10, 0x08,
	0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x33, 0x38,
	0x34, 0x30, 0x30, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x35, 0x37, 0x36, 0x30, 0x30, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41,
	0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x31, 0x31, 0x35, 0x32, 0x30, 0x30, 0x10, 0x0b,
	0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x32, 0x33,
	0x30, 0x34, 0x30, 0x30, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x55, 0x44, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x34, 0x36, 0x30, 0x38, 0x30, 0x30, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10,
	0x42, 0x41, 0x55, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x39, 0x32, 0x31, 0x36, 0x30, 0x30,
	0x10, 0x0e, 0x2a, 0x5a, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x74, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x42, 0x49, 0x54, 0x53, 0x5f, 0x35, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x42, 0x49, 0x54, 0x53, 0x5f, 0x36, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x42, 0x49, 0x54, 0x53, 0x5f, 0x37, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x42, 0x49, 0x54, 0x53, 0x5f, 0x38, 0x10, 0x03, 0x2a, 0x4b,
	0x0a, 0x14, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74,
	0x6f, 0x70, 0x42, 0x69, 0x74, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x42,
	0x49, 0x54, 0x53, 0x5f, 0x31, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x4f, 0x50, 0x5f,
	0x42, 0x49, 0x54, 0x53, 0x5f, 0x31, 0x5f, 0x35, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x42, 0x49, 0x54, 0x53, 0x5f, 0x32, 0x10, 0x02, 0x2a, 0xc1, 0x01, 0x0a, 0x0b,
	0x4a, 0x6f, 0x62, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x4a,
	0x4f, 0x42, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x30, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x42, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x31, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x42, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x42, 0x5f, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4a,
	0x4f, 0x42, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x34, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x42, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x35, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x42, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x36, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4a, 0x4f, 0x42, 0x5f, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x4a,
	0x4f, 0x42, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x38, 0x10, 0x08, 0x2a,
	0xd0, 0x01, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x54, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x54,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x54, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x54, 0x41, 0x4d, 0x50, 0x5f, 0x54, 0x5a, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x54, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c,
	0x10, 0x06, 0x2a, 0x8b, 0x04, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x26, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x49, 0x52, 0x52, 0x45, 0x47,
	0x55, 0x4c, 0x41, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4c,
	0x4f, 0x43, 0x4b, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x10,
	0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x15, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x16, 0x12, 0x26, 0x0a, 0x22, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x55, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x54, 0x4f, 0x55, 0x10, 0x19, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x52,
	0x10, 0x1a, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x52, 0x10, 0x1b, 0x12,
	0x24, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x10, 0x28, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x57, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x32,
	0x2a, 0x8b, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x2a, 0x97,
	0x01, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x42, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x4a, 0x4f, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x4a,
	0x4f, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x08, 0x12, 0x18,
	0x0a, 0x14, 0x4a, 0x4f, 0x42, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x09, 0x2a, 0x34, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x9f,
	0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x43, 0x50, 0x49, 0x50,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x5f, 0x50,
	0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x49,
	0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x4f, 0x58, 0x41, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x63,
	0x2a, 0xa7, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x49, 0x4e, 0x4b, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x49, 0x45, 0x43, 0x5f, 0x36, 0x32, 0x30, 0x35, 0x36, 0x5f, 0x32, 0x31, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4e, 0x4b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x48,
	0x44, 0x4c, 0x43, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x49, 0x4e, 0x4b, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x53, 0x45, 0x4d, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x49, 0x4e, 0x4b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x4d, 0x4f, 0x44, 0x42, 0x55, 0x53, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4e, 0x4b,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x42, 0x55, 0x53, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x4c, 0x49, 0x4e, 0x4b, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x63, 0x2a, 0xae, 0x01, 0x0a, 0x13, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x49,
	0x45, 0x43, 0x5f, 0x36, 0x32, 0x30, 0x35, 0x36, 0x5f, 0x32, 0x31, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x50, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x44, 0x4c, 0x4d, 0x53, 0x5f, 0x53,
	0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x50, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
	0x44, 0x4c, 0x4d, 0x53, 0x5f, 0x4c, 0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x50, 0x50,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x43, 0x54, 0x4d, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x50, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x53, 0x32, 0x30, 0x30, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x50, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x4e,
	0x53, 0x49, 0x5f, 0x43, 0x31, 0x32, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x50, 0x50, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x51, 0x54, 0x54, 0x10, 0x06, 0x32, 0xd6, 0x01, 0x0a, 0x0d,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a,
	0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x30,
	0x01, 0x12, 0x61, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x2a,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x79, 0x62, 0x72, 0x6f, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x68, 0x65,
	0x73, 0x2d, 0x32, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pbdriver_proto_rawDescOnce sync.Once
	file_pbdriver_proto_rawDescData = file_pbdriver_proto_rawDesc
)

func file_pbdriver_proto_rawDescGZIP() []byte {
	file_pbdriver_proto_rawDescOnce.Do(func() {
		file_pbdriver_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbdriver_proto_rawDescData)
	})
	return file_pbdriver_proto_rawDescData
}

var file_pbdriver_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_pbdriver_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_pbdriver_proto_goTypes = []any{
	(SerialConfigParity)(0),                // 0: io.clbs.openhes.pbdriver.SerialConfigParity
	(SerialConfigBaudRate)(0),              // 1: io.clbs.openhes.pbdriver.SerialConfigBaudRate
	(SerialConfigDataBits)(0),              // 2: io.clbs.openhes.pbdriver.SerialConfigDataBits
	(SerialConfigStopBits)(0),              // 3: io.clbs.openhes.pbdriver.SerialConfigStopBits
	(JobPriority)(0),                       // 4: io.clbs.openhes.pbdriver.JobPriority
	(AttributeType)(0),                     // 5: io.clbs.openhes.pbdriver.AttributeType
	(ActionType)(0),                        // 6: io.clbs.openhes.pbdriver.ActionType
	(ActionResultCode)(0),                  // 7: io.clbs.openhes.pbdriver.ActionResultCode
	(JobErrorCode)(0),                      // 8: io.clbs.openhes.pbdriver.JobErrorCode
	(ErrorCode)(0),                         // 9: io.clbs.openhes.pbdriver.ErrorCode
	(CommunicationType)(0),                 // 10: io.clbs.openhes.pbdriver.CommunicationType
	(DataLinkProtocol)(0),                  // 11: io.clbs.openhes.pbdriver.DataLinkProtocol
	(ApplicationProtocol)(0),               // 12: io.clbs.openhes.pbdriver.ApplicationProtocol
	(*ProgressUpdate)(nil),                 // 13: io.clbs.openhes.pbdriver.ProgressUpdate
	(*ActionProgressUpdate)(nil),           // 14: io.clbs.openhes.pbdriver.ActionProgressUpdate
	(*JobProgressUpdate)(nil),              // 15: io.clbs.openhes.pbdriver.JobProgressUpdate
	(*ActionData)(nil),                     // 16: io.clbs.openhes.pbdriver.ActionData
	(*ProfileValues)(nil),                  // 17: io.clbs.openhes.pbdriver.ProfileValues
	(*ProfileBlok)(nil),                    // 18: io.clbs.openhes.pbdriver.ProfileBlok
	(*BillingValues)(nil),                  // 19: io.clbs.openhes.pbdriver.BillingValues
	(*BillingValue)(nil),                   // 20: io.clbs.openhes.pbdriver.BillingValue
	(*MeasuredValue)(nil),                  // 21: io.clbs.openhes.pbdriver.MeasuredValue
	(*AttributeDefinition)(nil),            // 22: io.clbs.openhes.pbdriver.AttributeDefinition
	(*JobActionAttributes)(nil),            // 23: io.clbs.openhes.pbdriver.JobActionAttributes
	(*StartJobsRequest)(nil),               // 24: io.clbs.openhes.pbdriver.StartJobsRequest
	(*StartJobData)(nil),                   // 25: io.clbs.openhes.pbdriver.StartJobData
	(*ModemOverControlledSerial)(nil),      // 26: io.clbs.openhes.pbdriver.ModemOverControlledSerial
	(*ConnectionTypeControlledSerial)(nil), // 27: io.clbs.openhes.pbdriver.ConnectionTypeControlledSerial
	(*ModemInfo)(nil),                      // 28: io.clbs.openhes.pbdriver.ModemInfo
	(*SerialConfig)(nil),                   // 29: io.clbs.openhes.pbdriver.SerialConfig
	(*ConnectionInfo)(nil),                 // 30: io.clbs.openhes.pbdriver.ConnectionInfo
	(*ConnectionTypeDirectTcpIp)(nil),      // 31: io.clbs.openhes.pbdriver.ConnectionTypeDirectTcpIp
	(*ConnectionTypeModemPool)(nil),        // 32: io.clbs.openhes.pbdriver.ConnectionTypeModemPool
	(*ConnectionTypeSerialMoxa)(nil),       // 33: io.clbs.openhes.pbdriver.ConnectionTypeSerialMoxa
	(*JobSettings)(nil),                    // 34: io.clbs.openhes.pbdriver.JobSettings
	(*JobAction)(nil),                      // 35: io.clbs.openhes.pbdriver.JobAction
	(*ActionGetRegister)(nil),              // 36: io.clbs.openhes.pbdriver.ActionGetRegister
	(*ActionGetPeriodicalProfile)(nil),     // 37: io.clbs.openhes.pbdriver.ActionGetPeriodicalProfile
	(*ActionGetIrregularProfile)(nil),      // 38: io.clbs.openhes.pbdriver.ActionGetIrregularProfile
	(*ActionGetEvents)(nil),                // 39: io.clbs.openhes.pbdriver.ActionGetEvents
	(*ActionGetClock)(nil),                 // 40: io.clbs.openhes.pbdriver.ActionGetClock
	(*ActionSyncClock)(nil),                // 41: io.clbs.openhes.pbdriver.ActionSyncClock
	(*ActionGetRelayState)(nil),            // 42: io.clbs.openhes.pbdriver.ActionGetRelayState
	(*ActionSetRelayState)(nil),            // 43: io.clbs.openhes.pbdriver.ActionSetRelayState
	(*ActionGetDisconnectorState)(nil),     // 44: io.clbs.openhes.pbdriver.ActionGetDisconnectorState
	(*ActionSetDisconnectorState)(nil),     // 45: io.clbs.openhes.pbdriver.ActionSetDisconnectorState
	(*ActionGetTou)(nil),                   // 46: io.clbs.openhes.pbdriver.ActionGetTou
	(*ActionSetTou)(nil),                   // 47: io.clbs.openhes.pbdriver.ActionSetTou
	(*ActionGetLimiter)(nil),               // 48: io.clbs.openhes.pbdriver.ActionGetLimiter
	(*ActionSetLimiter)(nil),               // 49: io.clbs.openhes.pbdriver.ActionSetLimiter
	(*ActionResetBillingPeriod)(nil),       // 50: io.clbs.openhes.pbdriver.ActionResetBillingPeriod
	(*ActionFwUpdate)(nil),                 // 51: io.clbs.openhes.pbdriver.ActionFwUpdate
	(*AttributeValue)(nil),                 // 52: io.clbs.openhes.pbdriver.AttributeValue
	(*CommonResponse)(nil),                 // 53: io.clbs.openhes.pbdriver.CommonResponse
	(*ApplicationProtocolTemplate)(nil),    // 54: io.clbs.openhes.pbdriver.ApplicationProtocolTemplate
	(*DataLinkTemplate)(nil),               // 55: io.clbs.openhes.pbdriver.DataLinkTemplate
	(*CommunicationTemplate)(nil),          // 56: io.clbs.openhes.pbdriver.CommunicationTemplate
	(*AccessLevelTemplate)(nil),            // 57: io.clbs.openhes.pbdriver.AccessLevelTemplate
	(*DriverTemplates)(nil),                // 58: io.clbs.openhes.pbdriver.DriverTemplates
	(*CancelJobRequest)(nil),               // 59: io.clbs.openhes.pbdriver.CancelJobRequest
	(*NegotiateRequest)(nil),               // 60: io.clbs.openhes.pbdriver.NegotiateRequest
	nil,                                    // 61: io.clbs.openhes.pbdriver.StartJobData.DeviceAttributesEntry
	nil,                                    // 62: io.clbs.openhes.pbdriver.JobAction.AttributesEntry
	(*emptypb.Empty)(nil),                  // 63: google.protobuf.Empty
	(*timestamppb.Timestamp)(nil),          // 64: google.protobuf.Timestamp
}
var file_pbdriver_proto_depIdxs = []int32{
	15, // 0: io.clbs.openhes.pbdriver.ProgressUpdate.job:type_name -> io.clbs.openhes.pbdriver.JobProgressUpdate
	14, // 1: io.clbs.openhes.pbdriver.ProgressUpdate.action:type_name -> io.clbs.openhes.pbdriver.ActionProgressUpdate
	7,  // 2: io.clbs.openhes.pbdriver.ActionProgressUpdate.code:type_name -> io.clbs.openhes.pbdriver.ActionResultCode
	16, // 3: io.clbs.openhes.pbdriver.ActionProgressUpdate.data:type_name -> io.clbs.openhes.pbdriver.ActionData
	8,  // 4: io.clbs.openhes.pbdriver.JobProgressUpdate.code:type_name -> io.clbs.openhes.pbdriver.JobErrorCode
	63, // 5: io.clbs.openhes.pbdriver.ActionData.nodata:type_name -> google.protobuf.Empty
	19, // 6: io.clbs.openhes.pbdriver.ActionData.billings:type_name -> io.clbs.openhes.pbdriver.BillingValues
	17, // 7: io.clbs.openhes.pbdriver.ActionData.profile:type_name -> io.clbs.openhes.pbdriver.ProfileValues
	18, // 8: io.clbs.openhes.pbdriver.ProfileValues.blocks:type_name -> io.clbs.openhes.pbdriver.ProfileBlok
	64, // 9: io.clbs.openhes.pbdriver.ProfileBlok.start_timestamp:type_name -> google.protobuf.Timestamp
	21, // 10: io.clbs.openhes.pbdriver.ProfileBlok.values:type_name -> io.clbs.openhes.pbdriver.MeasuredValue
	20, // 11: io.clbs.openhes.pbdriver.BillingValues.values:type_name -> io.clbs.openhes.pbdriver.BillingValue
	64, // 12: io.clbs.openhes.pbdriver.BillingValue.timestamp:type_name -> google.protobuf.Timestamp
	21, // 13: io.clbs.openhes.pbdriver.BillingValue.value:type_name -> io.clbs.openhes.pbdriver.MeasuredValue
	64, // 14: io.clbs.openhes.pbdriver.MeasuredValue.timestamp_value:type_name -> google.protobuf.Timestamp
	5,  // 15: io.clbs.openhes.pbdriver.AttributeDefinition.type:type_name -> io.clbs.openhes.pbdriver.AttributeType
	52, // 16: io.clbs.openhes.pbdriver.AttributeDefinition.default_value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	6,  // 17: io.clbs.openhes.pbdriver.JobActionAttributes.type:type_name -> io.clbs.openhes.pbdriver.ActionType
	22, // 18: io.clbs.openhes.pbdriver.JobActionAttributes.attributes:type_name -> io.clbs.openhes.pbdriver.AttributeDefinition
	30, // 19: io.clbs.openhes.pbdriver.StartJobsRequest.connection_info:type_name -> io.clbs.openhes.pbdriver.ConnectionInfo
	25, // 20: io.clbs.openhes.pbdriver.StartJobsRequest.jobs:type_name -> io.clbs.openhes.pbdriver.StartJobData
	61, // 21: io.clbs.openhes.pbdriver.StartJobData.device_attributes:type_name -> io.clbs.openhes.pbdriver.StartJobData.DeviceAttributesEntry
	34, // 22: io.clbs.openhes.pbdriver.StartJobData.job_settings:type_name -> io.clbs.openhes.pbdriver.JobSettings
	35, // 23: io.clbs.openhes.pbdriver.StartJobData.job_actions:type_name -> io.clbs.openhes.pbdriver.JobAction
	12, // 24: io.clbs.openhes.pbdriver.StartJobData.app_protocol:type_name -> io.clbs.openhes.pbdriver.ApplicationProtocol
	27, // 25: io.clbs.openhes.pbdriver.ModemOverControlledSerial.serial:type_name -> io.clbs.openhes.pbdriver.ConnectionTypeControlledSerial
	29, // 26: io.clbs.openhes.pbdriver.ModemOverControlledSerial.serial_config:type_name -> io.clbs.openhes.pbdriver.SerialConfig
	33, // 27: io.clbs.openhes.pbdriver.ConnectionTypeControlledSerial.moxa:type_name -> io.clbs.openhes.pbdriver.ConnectionTypeSerialMoxa
	31, // 28: io.clbs.openhes.pbdriver.ModemInfo.tcpip:type_name -> io.clbs.openhes.pbdriver.ConnectionTypeDirectTcpIp
	26, // 29: io.clbs.openhes.pbdriver.ModemInfo.serial_over_ip:type_name -> io.clbs.openhes.pbdriver.ModemOverControlledSerial
	1,  // 30: io.clbs.openhes.pbdriver.SerialConfig.baud_rate:type_name -> io.clbs.openhes.pbdriver.SerialConfigBaudRate
	0,  // 31: io.clbs.openhes.pbdriver.SerialConfig.parity:type_name -> io.clbs.openhes.pbdriver.SerialConfigParity
	2,  // 32: io.clbs.openhes.pbdriver.SerialConfig.data_bits:type_name -> io.clbs.openhes.pbdriver.SerialConfigDataBits
	3,  // 33: io.clbs.openhes.pbdriver.SerialConfig.stop_bits:type_name -> io.clbs.openhes.pbdriver.SerialConfigStopBits
	31, // 34: io.clbs.openhes.pbdriver.ConnectionInfo.tcpip:type_name -> io.clbs.openhes.pbdriver.ConnectionTypeDirectTcpIp
	32, // 35: io.clbs.openhes.pbdriver.ConnectionInfo.modem_pool:type_name -> io.clbs.openhes.pbdriver.ConnectionTypeModemPool
	27, // 36: io.clbs.openhes.pbdriver.ConnectionInfo.serial_over_ip:type_name -> io.clbs.openhes.pbdriver.ConnectionTypeControlledSerial
	11, // 37: io.clbs.openhes.pbdriver.ConnectionInfo.link_protocol:type_name -> io.clbs.openhes.pbdriver.DataLinkProtocol
	28, // 38: io.clbs.openhes.pbdriver.ConnectionTypeModemPool.modem:type_name -> io.clbs.openhes.pbdriver.ModemInfo
	4,  // 39: io.clbs.openhes.pbdriver.JobSettings.priority:type_name -> io.clbs.openhes.pbdriver.JobPriority
	64, // 40: io.clbs.openhes.pbdriver.JobSettings.expires_at:type_name -> google.protobuf.Timestamp
	62, // 41: io.clbs.openhes.pbdriver.JobAction.attributes:type_name -> io.clbs.openhes.pbdriver.JobAction.AttributesEntry
	36, // 42: io.clbs.openhes.pbdriver.JobAction.get_register:type_name -> io.clbs.openhes.pbdriver.ActionGetRegister
	37, // 43: io.clbs.openhes.pbdriver.JobAction.get_periodical_profile:type_name -> io.clbs.openhes.pbdriver.ActionGetPeriodicalProfile
	38, // 44: io.clbs.openhes.pbdriver.JobAction.get_irregular_profile:type_name -> io.clbs.openhes.pbdriver.ActionGetIrregularProfile
	39, // 45: io.clbs.openhes.pbdriver.JobAction.get_events:type_name -> io.clbs.openhes.pbdriver.ActionGetEvents
	40, // 46: io.clbs.openhes.pbdriver.JobAction.get_clock:type_name -> io.clbs.openhes.pbdriver.ActionGetClock
	41, // 47: io.clbs.openhes.pbdriver.JobAction.sync_clock:type_name -> io.clbs.openhes.pbdriver.ActionSyncClock
	42, // 48: io.clbs.openhes.pbdriver.JobAction.get_relay_state:type_name -> io.clbs.openhes.pbdriver.ActionGetRelayState
	43, // 49: io.clbs.openhes.pbdriver.JobAction.set_relay_state:type_name -> io.clbs.openhes.pbdriver.ActionSetRelayState
	44, // 50: io.clbs.openhes.pbdriver.JobAction.get_disconnector_state:type_name -> io.clbs.openhes.pbdriver.ActionGetDisconnectorState
	45, // 51: io.clbs.openhes.pbdriver.JobAction.set_disconnector_state:type_name -> io.clbs.openhes.pbdriver.ActionSetDisconnectorState
	46, // 52: io.clbs.openhes.pbdriver.JobAction.get_tou:type_name -> io.clbs.openhes.pbdriver.ActionGetTou
	47, // 53: io.clbs.openhes.pbdriver.JobAction.set_tou:type_name -> io.clbs.openhes.pbdriver.ActionSetTou
	48, // 54: io.clbs.openhes.pbdriver.JobAction.get_limiter:type_name -> io.clbs.openhes.pbdriver.ActionGetLimiter
	49, // 55: io.clbs.openhes.pbdriver.JobAction.set_limiter:type_name -> io.clbs.openhes.pbdriver.ActionSetLimiter
	50, // 56: io.clbs.openhes.pbdriver.JobAction.reset_billing_period:type_name -> io.clbs.openhes.pbdriver.ActionResetBillingPeriod
	51, // 57: io.clbs.openhes.pbdriver.JobAction.fw_update:type_name -> io.clbs.openhes.pbdriver.ActionFwUpdate
	64, // 58: io.clbs.openhes.pbdriver.ActionGetPeriodicalProfile.from:type_name -> google.protobuf.Timestamp
	64, // 59: io.clbs.openhes.pbdriver.ActionGetPeriodicalProfile.to:type_name -> google.protobuf.Timestamp
	9,  // 60: io.clbs.openhes.pbdriver.CommonResponse.result:type_name -> io.clbs.openhes.pbdriver.ErrorCode
	12, // 61: io.clbs.openhes.pbdriver.ApplicationProtocolTemplate.protocol:type_name -> io.clbs.openhes.pbdriver.ApplicationProtocol
	22, // 62: io.clbs.openhes.pbdriver.ApplicationProtocolTemplate.attributes:type_name -> io.clbs.openhes.pbdriver.AttributeDefinition
	11, // 63: io.clbs.openhes.pbdriver.DataLinkTemplate.link_protocol:type_name -> io.clbs.openhes.pbdriver.DataLinkProtocol
	12, // 64: io.clbs.openhes.pbdriver.DataLinkTemplate.app_protocol_refs:type_name -> io.clbs.openhes.pbdriver.ApplicationProtocol
	22, // 65: io.clbs.openhes.pbdriver.DataLinkTemplate.attributes:type_name -> io.clbs.openhes.pbdriver.AttributeDefinition
	10, // 66: io.clbs.openhes.pbdriver.CommunicationTemplate.type:type_name -> io.clbs.openhes.pbdriver.CommunicationType
	55, // 67: io.clbs.openhes.pbdriver.CommunicationTemplate.datalinks:type_name -> io.clbs.openhes.pbdriver.DataLinkTemplate
	56, // 68: io.clbs.openhes.pbdriver.DriverTemplates.communication_templates:type_name -> io.clbs.openhes.pbdriver.CommunicationTemplate
	54, // 69: io.clbs.openhes.pbdriver.DriverTemplates.app_protocols:type_name -> io.clbs.openhes.pbdriver.ApplicationProtocolTemplate
	23, // 70: io.clbs.openhes.pbdriver.DriverTemplates.action_attributes:type_name -> io.clbs.openhes.pbdriver.JobActionAttributes
	57, // 71: io.clbs.openhes.pbdriver.DriverTemplates.access_templates:type_name -> io.clbs.openhes.pbdriver.AccessLevelTemplate
	58, // 72: io.clbs.openhes.pbdriver.NegotiateRequest.templates:type_name -> io.clbs.openhes.pbdriver.DriverTemplates
	52, // 73: io.clbs.openhes.pbdriver.StartJobData.DeviceAttributesEntry.value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	52, // 74: io.clbs.openhes.pbdriver.JobAction.AttributesEntry.value:type_name -> io.clbs.openhes.pbdriver.AttributeValue
	24, // 75: io.clbs.openhes.pbdriver.DriverService.StartJob:input_type -> io.clbs.openhes.pbdriver.StartJobsRequest
	59, // 76: io.clbs.openhes.pbdriver.DriverService.CancelJob:input_type -> io.clbs.openhes.pbdriver.CancelJobRequest
	13, // 77: io.clbs.openhes.pbdriver.DriverService.StartJob:output_type -> io.clbs.openhes.pbdriver.ProgressUpdate
	53, // 78: io.clbs.openhes.pbdriver.DriverService.CancelJob:output_type -> io.clbs.openhes.pbdriver.CommonResponse
	77, // [77:79] is the sub-list for method output_type
	75, // [75:77] is the sub-list for method input_type
	75, // [75:75] is the sub-list for extension type_name
	75, // [75:75] is the sub-list for extension extendee
	0,  // [0:75] is the sub-list for field type_name
}

func init() { file_pbdriver_proto_init() }
func file_pbdriver_proto_init() {
	if File_pbdriver_proto != nil {
		return
	}
	file_pbdriver_proto_msgTypes[0].OneofWrappers = []any{
		(*ProgressUpdate_Job)(nil),
		(*ProgressUpdate_Action)(nil),
	}
	file_pbdriver_proto_msgTypes[1].OneofWrappers = []any{}
	file_pbdriver_proto_msgTypes[3].OneofWrappers = []any{
		(*ActionData_Nodata)(nil),
		(*ActionData_Billings)(nil),
		(*ActionData_Profile)(nil),
	}
	file_pbdriver_proto_msgTypes[8].OneofWrappers = []any{
		(*MeasuredValue_DoubleValue)(nil),
		(*MeasuredValue_IntValue)(nil),
		(*MeasuredValue_StrValue)(nil),
		(*MeasuredValue_TimestampValue)(nil),
		(*MeasuredValue_TimestampTzValue)(nil),
		(*MeasuredValue_BoolValue)(nil),
	}
	file_pbdriver_proto_msgTypes[9].OneofWrappers = []any{}
	file_pbdriver_proto_msgTypes[12].OneofWrappers = []any{}
	file_pbdriver_proto_msgTypes[14].OneofWrappers = []any{
		(*ConnectionTypeControlledSerial_Moxa)(nil),
	}
	file_pbdriver_proto_msgTypes[15].OneofWrappers = []any{
		(*ModemInfo_Tcpip)(nil),
		(*ModemInfo_SerialOverIp)(nil),
	}
	file_pbdriver_proto_msgTypes[17].OneofWrappers = []any{
		(*ConnectionInfo_Tcpip)(nil),
		(*ConnectionInfo_ModemPool)(nil),
		(*ConnectionInfo_SerialOverIp)(nil),
	}
	file_pbdriver_proto_msgTypes[18].OneofWrappers = []any{}
	file_pbdriver_proto_msgTypes[19].OneofWrappers = []any{}
	file_pbdriver_proto_msgTypes[22].OneofWrappers = []any{
		(*JobAction_GetRegister)(nil),
		(*JobAction_GetPeriodicalProfile)(nil),
		(*JobAction_GetIrregularProfile)(nil),
		(*JobAction_GetEvents)(nil),
		(*JobAction_GetClock)(nil),
		(*JobAction_SyncClock)(nil),
		(*JobAction_GetRelayState)(nil),
		(*JobAction_SetRelayState)(nil),
		(*JobAction_GetDisconnectorState)(nil),
		(*JobAction_SetDisconnectorState)(nil),
		(*JobAction_GetTou)(nil),
		(*JobAction_SetTou)(nil),
		(*JobAction_GetLimiter)(nil),
		(*JobAction_SetLimiter)(nil),
		(*JobAction_ResetBillingPeriod)(nil),
		(*JobAction_FwUpdate)(nil),
	}
	file_pbdriver_proto_msgTypes[39].OneofWrappers = []any{
		(*AttributeValue_StrValue)(nil),
		(*AttributeValue_IntValue)(nil),
		(*AttributeValue_DoubleValue)(nil),
		(*AttributeValue_BinaryValue)(nil),
		(*AttributeValue_BoolValue)(nil),
	}
	file_pbdriver_proto_msgTypes[44].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbdriver_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pbdriver_proto_goTypes,
		DependencyIndexes: file_pbdriver_proto_depIdxs,
		EnumInfos:         file_pbdriver_proto_enumTypes,
		MessageInfos:      file_pbdriver_proto_msgTypes,
	}.Build()
	File_pbdriver_proto = out.File
	file_pbdriver_proto_rawDesc = nil
	file_pbdriver_proto_goTypes = nil
	file_pbdriver_proto_depIdxs = nil
}
