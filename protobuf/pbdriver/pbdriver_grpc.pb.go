// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: pbdriver.proto

package pbdriver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DriverService_StartJob_FullMethodName  = "/io.clbs.openhes.pbdriver.DriverService/StartJob"
	DriverService_CancelJob_FullMethodName = "/io.clbs.openhes.pbdriver.DriverService/CancelJob"
)

// DriverServiceClient is the client API for DriverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriverServiceClient interface {
	// The method called by the Taskmaster to start a new job. The parameter contains the job specification and the list of actions to be executed.
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (DriverService_StartJobClient, error)
	// The method called by the Taskmaster to cancel the job. The parameter contains the job identifier.
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CommonResponse, error)
}

type driverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverServiceClient(cc grpc.ClientConnInterface) DriverServiceClient {
	return &driverServiceClient{cc}
}

func (c *driverServiceClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (DriverService_StartJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &DriverService_ServiceDesc.Streams[0], DriverService_StartJob_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &driverServiceStartJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DriverService_StartJobClient interface {
	Recv() (*ProgressUpdate, error)
	grpc.ClientStream
}

type driverServiceStartJobClient struct {
	grpc.ClientStream
}

func (x *driverServiceStartJobClient) Recv() (*ProgressUpdate, error) {
	m := new(ProgressUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverServiceClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, DriverService_CancelJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverServiceServer is the server API for DriverService service.
// All implementations must embed UnimplementedDriverServiceServer
// for forward compatibility
type DriverServiceServer interface {
	// The method called by the Taskmaster to start a new job. The parameter contains the job specification and the list of actions to be executed.
	StartJob(*StartJobRequest, DriverService_StartJobServer) error
	// The method called by the Taskmaster to cancel the job. The parameter contains the job identifier.
	CancelJob(context.Context, *CancelJobRequest) (*CommonResponse, error)
	mustEmbedUnimplementedDriverServiceServer()
}

// UnimplementedDriverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDriverServiceServer struct {
}

func (UnimplementedDriverServiceServer) StartJob(*StartJobRequest, DriverService_StartJobServer) error {
	return status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (UnimplementedDriverServiceServer) CancelJob(context.Context, *CancelJobRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (UnimplementedDriverServiceServer) mustEmbedUnimplementedDriverServiceServer() {}

// UnsafeDriverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverServiceServer will
// result in compilation errors.
type UnsafeDriverServiceServer interface {
	mustEmbedUnimplementedDriverServiceServer()
}

func RegisterDriverServiceServer(s grpc.ServiceRegistrar, srv DriverServiceServer) {
	s.RegisterService(&DriverService_ServiceDesc, srv)
}

func _DriverService_StartJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DriverServiceServer).StartJob(m, &driverServiceStartJobServer{stream})
}

type DriverService_StartJobServer interface {
	Send(*ProgressUpdate) error
	grpc.ServerStream
}

type driverServiceStartJobServer struct {
	grpc.ServerStream
}

func (x *driverServiceStartJobServer) Send(m *ProgressUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _DriverService_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DriverService_CancelJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DriverService_ServiceDesc is the grpc.ServiceDesc for DriverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DriverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.clbs.openhes.pbdriver.DriverService",
	HandlerType: (*DriverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelJob",
			Handler:    _DriverService_CancelJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartJob",
			Handler:       _DriverService_StartJob_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pbdriver.proto",
}
