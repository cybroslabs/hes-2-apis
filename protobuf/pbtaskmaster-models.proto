// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.obsolete;

// option go_package = "github.com/cybroslabs/hes-2-apis/protobuf/pbtaskmastermodels";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "acquisition/job.proto";

// Taskmaster -> Dataproxy event message
message StreamEventsData {
    oneof data {
        StreamEventsDataJobFinished job_done = 1;
    }
}

// Sub-message - job-finished event data
message StreamEventsDataJobFinished {
    string job_id = 1;
}

// Driver -> Taskmaster cache set request message
message CacheSetRequest {
    string key                    = 1;  // The key of the cache entry. The key is unique within the driver type.
    acquisition.AttributeValue value = 2;  // The value of the cache entry.
}

// Driver -> Taskmaster cache get request message
message CacheGetRequest {
    string key = 1;  // The key of the cache entry. The key is unique within the driver type.
}

// Taskmaster -> Driver cache get response message
message CacheGetResponse {
    acquisition.AttributeValue value = 2;  // The value of the cache entry.
}

// API -> Taskmaster cancel job request message
message CancelJobsRequest {
    repeated string job_id = 1;  // The job identifier.
}

// API -> Taskmaster queue jobs request message
message QueueJobsRequest {
    repeated JobSpec spec = 1;  // The list of jobs to be queued.
}

// Sub-message - job specification
message JobSpec {
    JobDevice device                        = 2;  // The device info.
    acquisition.JobSettings job_settings       = 3;  // The job parameters.
    string driver_type                      = 4;  // The device (driver) type.
    repeated acquisition.JobAction job_actions = 5;  // The list actions to be executed.
}



// Dataproxy -> Taskmaster get job request message
message GetJobRequest {
    string job_id = 1;  // The job identifier.
}

// Taskmaster -> API get job response message
message GetJobResponse {
    JobStatus status = 1;  // The status of the job
}

// Message used to notify DP that the job is done, sent by Taskmaster
message JobDoneNotification {
    JobSpec spec     = 1;  // The job specification.
    JobStatus status = 2;  // The status of the job
}

