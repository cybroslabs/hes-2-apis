// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: pbdataproxy.proto

package pbdataproxy

import (
	context "context"
	pbtaskmaster "github.com/cybroslabs/hes-2-apis/protobuf/pbtaskmaster"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataproxyService_NotifyJobFinished_FullMethodName = "/io.clbs.openhes.pbdataproxy.DataproxyService/NotifyJobFinished"
	DataproxyService_CreateBulk_FullMethodName        = "/io.clbs.openhes.pbdataproxy.DataproxyService/CreateBulk"
	DataproxyService_GetBulks_FullMethodName          = "/io.clbs.openhes.pbdataproxy.DataproxyService/GetBulks"
	DataproxyService_GetBulk_FullMethodName           = "/io.clbs.openhes.pbdataproxy.DataproxyService/GetBulk"
	DataproxyService_GetJob_FullMethodName            = "/io.clbs.openhes.pbdataproxy.DataproxyService/GetJob"
)

// DataproxyServiceClient is the client API for DataproxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataproxyServiceClient interface {
	// The method called by the Taskmaster to notify about finished job.
	NotifyJobFinished(ctx context.Context, in *pbtaskmaster.BulkJobEventData, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// The method called by the RestApi to start a new bulk of jobs.
	CreateBulk(ctx context.Context, in *pbtaskmaster.CreateBulksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// The method called by the RestApi to retrieve stored bulks.
	GetBulks(ctx context.Context, in *pbtaskmaster.GetBulksReuqest, opts ...grpc.CallOption) (*pbtaskmaster.GetBulksResponse, error)
	// The method called by the RestApi to retrieve single bulk.
	GetBulk(ctx context.Context, in *pbtaskmaster.GetBulkRequest, opts ...grpc.CallOption) (*pbtaskmaster.GetBulkResponse, error)
	// The method called by the RestApi to get the job status. The parameter contains the job identifier.
	GetJob(ctx context.Context, in *pbtaskmaster.GetJobRequest, opts ...grpc.CallOption) (*pbtaskmaster.GetJobResponse, error)
}

type dataproxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataproxyServiceClient(cc grpc.ClientConnInterface) DataproxyServiceClient {
	return &dataproxyServiceClient{cc}
}

func (c *dataproxyServiceClient) NotifyJobFinished(ctx context.Context, in *pbtaskmaster.BulkJobEventData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DataproxyService_NotifyJobFinished_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproxyServiceClient) CreateBulk(ctx context.Context, in *pbtaskmaster.CreateBulksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DataproxyService_CreateBulk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproxyServiceClient) GetBulks(ctx context.Context, in *pbtaskmaster.GetBulksReuqest, opts ...grpc.CallOption) (*pbtaskmaster.GetBulksResponse, error) {
	out := new(pbtaskmaster.GetBulksResponse)
	err := c.cc.Invoke(ctx, DataproxyService_GetBulks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproxyServiceClient) GetBulk(ctx context.Context, in *pbtaskmaster.GetBulkRequest, opts ...grpc.CallOption) (*pbtaskmaster.GetBulkResponse, error) {
	out := new(pbtaskmaster.GetBulkResponse)
	err := c.cc.Invoke(ctx, DataproxyService_GetBulk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproxyServiceClient) GetJob(ctx context.Context, in *pbtaskmaster.GetJobRequest, opts ...grpc.CallOption) (*pbtaskmaster.GetJobResponse, error) {
	out := new(pbtaskmaster.GetJobResponse)
	err := c.cc.Invoke(ctx, DataproxyService_GetJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataproxyServiceServer is the server API for DataproxyService service.
// All implementations must embed UnimplementedDataproxyServiceServer
// for forward compatibility
type DataproxyServiceServer interface {
	// The method called by the Taskmaster to notify about finished job.
	NotifyJobFinished(context.Context, *pbtaskmaster.BulkJobEventData) (*emptypb.Empty, error)
	// The method called by the RestApi to start a new bulk of jobs.
	CreateBulk(context.Context, *pbtaskmaster.CreateBulksRequest) (*emptypb.Empty, error)
	// The method called by the RestApi to retrieve stored bulks.
	GetBulks(context.Context, *pbtaskmaster.GetBulksReuqest) (*pbtaskmaster.GetBulksResponse, error)
	// The method called by the RestApi to retrieve single bulk.
	GetBulk(context.Context, *pbtaskmaster.GetBulkRequest) (*pbtaskmaster.GetBulkResponse, error)
	// The method called by the RestApi to get the job status. The parameter contains the job identifier.
	GetJob(context.Context, *pbtaskmaster.GetJobRequest) (*pbtaskmaster.GetJobResponse, error)
	mustEmbedUnimplementedDataproxyServiceServer()
}

// UnimplementedDataproxyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataproxyServiceServer struct {
}

func (UnimplementedDataproxyServiceServer) NotifyJobFinished(context.Context, *pbtaskmaster.BulkJobEventData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyJobFinished not implemented")
}
func (UnimplementedDataproxyServiceServer) CreateBulk(context.Context, *pbtaskmaster.CreateBulksRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBulk not implemented")
}
func (UnimplementedDataproxyServiceServer) GetBulks(context.Context, *pbtaskmaster.GetBulksReuqest) (*pbtaskmaster.GetBulksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulks not implemented")
}
func (UnimplementedDataproxyServiceServer) GetBulk(context.Context, *pbtaskmaster.GetBulkRequest) (*pbtaskmaster.GetBulkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulk not implemented")
}
func (UnimplementedDataproxyServiceServer) GetJob(context.Context, *pbtaskmaster.GetJobRequest) (*pbtaskmaster.GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedDataproxyServiceServer) mustEmbedUnimplementedDataproxyServiceServer() {}

// UnsafeDataproxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataproxyServiceServer will
// result in compilation errors.
type UnsafeDataproxyServiceServer interface {
	mustEmbedUnimplementedDataproxyServiceServer()
}

func RegisterDataproxyServiceServer(s grpc.ServiceRegistrar, srv DataproxyServiceServer) {
	s.RegisterService(&DataproxyService_ServiceDesc, srv)
}

func _DataproxyService_NotifyJobFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbtaskmaster.BulkJobEventData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproxyServiceServer).NotifyJobFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproxyService_NotifyJobFinished_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproxyServiceServer).NotifyJobFinished(ctx, req.(*pbtaskmaster.BulkJobEventData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproxyService_CreateBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbtaskmaster.CreateBulksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproxyServiceServer).CreateBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproxyService_CreateBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproxyServiceServer).CreateBulk(ctx, req.(*pbtaskmaster.CreateBulksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproxyService_GetBulks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbtaskmaster.GetBulksReuqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproxyServiceServer).GetBulks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproxyService_GetBulks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproxyServiceServer).GetBulks(ctx, req.(*pbtaskmaster.GetBulksReuqest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproxyService_GetBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbtaskmaster.GetBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproxyServiceServer).GetBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproxyService_GetBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproxyServiceServer).GetBulk(ctx, req.(*pbtaskmaster.GetBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproxyService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pbtaskmaster.GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproxyServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproxyService_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproxyServiceServer).GetJob(ctx, req.(*pbtaskmaster.GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataproxyService_ServiceDesc is the grpc.ServiceDesc for DataproxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataproxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.clbs.openhes.pbdataproxy.DataproxyService",
	HandlerType: (*DataproxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyJobFinished",
			Handler:    _DataproxyService_NotifyJobFinished_Handler,
		},
		{
			MethodName: "CreateBulk",
			Handler:    _DataproxyService_CreateBulk_Handler,
		},
		{
			MethodName: "GetBulks",
			Handler:    _DataproxyService_GetBulks_Handler,
		},
		{
			MethodName: "GetBulk",
			Handler:    _DataproxyService_GetBulk_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _DataproxyService_GetJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pbdataproxy.proto",
}
