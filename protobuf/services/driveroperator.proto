// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.services.driveroperator;

option go_package = "github.com/cybroslabs/hes-2-apis/gen/go/services/driveroperator";

// import "google/protobuf/empty.proto";
// import "google/protobuf/wrappers.proto";
// import "pbdriver-models.proto";
// import "pbdriveroperator-models.proto";

// The Driver Operator service definition.
// Those are the gRPC services that the Driver Operator provides for other components.
service DriverOperatorService {
    // The method called by the RestApi to get the list of drivers.
    rpc GetDrivers(google.protobuf.Empty) returns (ListOfDriverInfo);
    // The method called by the Driver to set the driver templates. The parameter contains the driver templates.
    rpc SetDriverTemplates(pbdriver.NegotiateRequest) returns (google.protobuf.Empty);
    // The method called by the RestApi to get the driver templates.
    rpc GetDriverTemplates(google.protobuf.StringValue) returns (pbdriver.DriverTemplates);

    // The method called by the Taskmaster to set the driver scale.
    rpc SetDriverScale(SetDriverScaleRequest) returns (google.protobuf.Empty);
    // The method called by the Taskmaster to get the driver scale.
    rpc GetDriverScale(GetDriverScaleRequest) returns (google.protobuf.UInt32Value);

    // The method called by the DeviceRegistry to start the driver in upgrade mode. It will provide structure upgrade between the driver versions.
    // The driver is started as Kubernetes job and ends when all the structures are upgraded; which is controlled by the DeviceRegistry.
    rpc StartUpgrade(StartUpgradeRequest) returns (google.protobuf.Empty);
}
