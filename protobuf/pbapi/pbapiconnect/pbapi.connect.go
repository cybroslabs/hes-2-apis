// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pbapi.proto

package pbapiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	pbapi "github.com/cybroslabs/hes-2-apis/protobuf/pbapi"
	pbdataproxymodels "github.com/cybroslabs/hes-2-apis/protobuf/pbdataproxymodels"
	pbdeviceregistrymodels "github.com/cybroslabs/hes-2-apis/protobuf/pbdeviceregistrymodels"
	pbdrivermodels "github.com/cybroslabs/hes-2-apis/protobuf/pbdrivermodels"
	pbdriveroperatormodels "github.com/cybroslabs/hes-2-apis/protobuf/pbdriveroperatormodels"
	pbtaskmastermodels "github.com/cybroslabs/hes-2-apis/protobuf/pbtaskmastermodels"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ApiServiceName is the fully-qualified name of the ApiService service.
	ApiServiceName = "io.clbs.openhes.pbapi.ApiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApiServiceCreateBulkProcedure is the fully-qualified name of the ApiService's CreateBulk RPC.
	ApiServiceCreateBulkProcedure = "/io.clbs.openhes.pbapi.ApiService/CreateBulk"
	// ApiServiceGetBulksProcedure is the fully-qualified name of the ApiService's GetBulks RPC.
	ApiServiceGetBulksProcedure = "/io.clbs.openhes.pbapi.ApiService/GetBulks"
	// ApiServiceGetBulkProcedure is the fully-qualified name of the ApiService's GetBulk RPC.
	ApiServiceGetBulkProcedure = "/io.clbs.openhes.pbapi.ApiService/GetBulk"
	// ApiServiceGetJobStatusProcedure is the fully-qualified name of the ApiService's GetJobStatus RPC.
	ApiServiceGetJobStatusProcedure = "/io.clbs.openhes.pbapi.ApiService/GetJobStatus"
	// ApiServiceCancelBulkProcedure is the fully-qualified name of the ApiService's CancelBulk RPC.
	ApiServiceCancelBulkProcedure = "/io.clbs.openhes.pbapi.ApiService/CancelBulk"
	// ApiServiceCancelJobsProcedure is the fully-qualified name of the ApiService's CancelJobs RPC.
	ApiServiceCancelJobsProcedure = "/io.clbs.openhes.pbapi.ApiService/CancelJobs"
	// ApiServiceGetDriversProcedure is the fully-qualified name of the ApiService's GetDrivers RPC.
	ApiServiceGetDriversProcedure = "/io.clbs.openhes.pbapi.ApiService/GetDrivers"
	// ApiServiceGetDriverTemplatesProcedure is the fully-qualified name of the ApiService's
	// GetDriverTemplates RPC.
	ApiServiceGetDriverTemplatesProcedure = "/io.clbs.openhes.pbapi.ApiService/GetDriverTemplates"
	// ApiServiceCreateCommunicationUnitProcedure is the fully-qualified name of the ApiService's
	// CreateCommunicationUnit RPC.
	ApiServiceCreateCommunicationUnitProcedure = "/io.clbs.openhes.pbapi.ApiService/CreateCommunicationUnit"
	// ApiServiceGetCommunicationUnitsProcedure is the fully-qualified name of the ApiService's
	// GetCommunicationUnits RPC.
	ApiServiceGetCommunicationUnitsProcedure = "/io.clbs.openhes.pbapi.ApiService/GetCommunicationUnits"
	// ApiServiceCreateDeviceProcedure is the fully-qualified name of the ApiService's CreateDevice RPC.
	ApiServiceCreateDeviceProcedure = "/io.clbs.openhes.pbapi.ApiService/CreateDevice"
	// ApiServiceGetDevicesProcedure is the fully-qualified name of the ApiService's GetDevices RPC.
	ApiServiceGetDevicesProcedure = "/io.clbs.openhes.pbapi.ApiService/GetDevices"
	// ApiServiceSetDeviceCommunicationUnitsProcedure is the fully-qualified name of the ApiService's
	// SetDeviceCommunicationUnits RPC.
	ApiServiceSetDeviceCommunicationUnitsProcedure = "/io.clbs.openhes.pbapi.ApiService/SetDeviceCommunicationUnits"
	// ApiServiceGetDevicesCommunicationUnitsProcedure is the fully-qualified name of the ApiService's
	// GetDevicesCommunicationUnits RPC.
	ApiServiceGetDevicesCommunicationUnitsProcedure = "/io.clbs.openhes.pbapi.ApiService/GetDevicesCommunicationUnits"
	// ApiServiceCreateDeviceGroupProcedure is the fully-qualified name of the ApiService's
	// CreateDeviceGroup RPC.
	ApiServiceCreateDeviceGroupProcedure = "/io.clbs.openhes.pbapi.ApiService/CreateDeviceGroup"
	// ApiServiceGetDeviceGroupsProcedure is the fully-qualified name of the ApiService's
	// GetDeviceGroups RPC.
	ApiServiceGetDeviceGroupsProcedure = "/io.clbs.openhes.pbapi.ApiService/GetDeviceGroups"
	// ApiServiceGetDeviceGroupProcedure is the fully-qualified name of the ApiService's GetDeviceGroup
	// RPC.
	ApiServiceGetDeviceGroupProcedure = "/io.clbs.openhes.pbapi.ApiService/GetDeviceGroup"
	// ApiServiceAddDevicesToGroupProcedure is the fully-qualified name of the ApiService's
	// AddDevicesToGroup RPC.
	ApiServiceAddDevicesToGroupProcedure = "/io.clbs.openhes.pbapi.ApiService/AddDevicesToGroup"
	// ApiServiceRemoveDevicesFromGroupProcedure is the fully-qualified name of the ApiService's
	// RemoveDevicesFromGroup RPC.
	ApiServiceRemoveDevicesFromGroupProcedure = "/io.clbs.openhes.pbapi.ApiService/RemoveDevicesFromGroup"
	// ApiServiceGetModemPoolsProcedure is the fully-qualified name of the ApiService's GetModemPools
	// RPC.
	ApiServiceGetModemPoolsProcedure = "/io.clbs.openhes.pbapi.ApiService/GetModemPools"
	// ApiServiceGetModemPoolProcedure is the fully-qualified name of the ApiService's GetModemPool RPC.
	ApiServiceGetModemPoolProcedure = "/io.clbs.openhes.pbapi.ApiService/GetModemPool"
	// ApiServiceCreateModemPoolProcedure is the fully-qualified name of the ApiService's
	// CreateModemPool RPC.
	ApiServiceCreateModemPoolProcedure = "/io.clbs.openhes.pbapi.ApiService/CreateModemPool"
	// ApiServiceUpdateModemPoolProcedure is the fully-qualified name of the ApiService's
	// UpdateModemPool RPC.
	ApiServiceUpdateModemPoolProcedure = "/io.clbs.openhes.pbapi.ApiService/UpdateModemPool"
	// ApiServiceDeleteModemPoolProcedure is the fully-qualified name of the ApiService's
	// DeleteModemPool RPC.
	ApiServiceDeleteModemPoolProcedure = "/io.clbs.openhes.pbapi.ApiService/DeleteModemPool"
	// ApiServiceCreateModemProcedure is the fully-qualified name of the ApiService's CreateModem RPC.
	ApiServiceCreateModemProcedure = "/io.clbs.openhes.pbapi.ApiService/CreateModem"
	// ApiServiceUpdateModemProcedure is the fully-qualified name of the ApiService's UpdateModem RPC.
	ApiServiceUpdateModemProcedure = "/io.clbs.openhes.pbapi.ApiService/UpdateModem"
	// ApiServiceDeleteModemProcedure is the fully-qualified name of the ApiService's DeleteModem RPC.
	ApiServiceDeleteModemProcedure = "/io.clbs.openhes.pbapi.ApiService/DeleteModem"
	// ApiServiceGetConfigProcedure is the fully-qualified name of the ApiService's GetConfig RPC.
	ApiServiceGetConfigProcedure = "/io.clbs.openhes.pbapi.ApiService/GetConfig"
	// ApiServiceSetConfigProcedure is the fully-qualified name of the ApiService's SetConfig RPC.
	ApiServiceSetConfigProcedure = "/io.clbs.openhes.pbapi.ApiService/SetConfig"
)

// ApiServiceClient is a client for the io.clbs.openhes.pbapi.ApiService service.
type ApiServiceClient interface {
	// @group: Bulks
	// @tag: acquisition
	// @tag: action
	// Starts a new bulk of jobs.
	CreateBulk(context.Context, *connect.Request[pbapi.PublicCreateBulkRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Bulks
	// Retrieves the list of bulks.
	GetBulks(context.Context, *connect.Request[pbdataproxymodels.GetBulksReuqest]) (*connect.Response[pbdataproxymodels.GetBulksResponse], error)
	// @group: Bulks
	// Retrieves the bulk info and status.
	GetBulk(context.Context, *connect.Request[pbdataproxymodels.GetBulkRequest]) (*connect.Response[pbdataproxymodels.GetBulkResponse], error)
	// @group: Bulks
	// Retrieves the job status.
	GetJobStatus(context.Context, *connect.Request[pbdataproxymodels.GetJobStatusRequest]) (*connect.Response[pbdataproxymodels.GetJobStatusResponse], error)
	// @group: Bulks
	// Cancels the bulk of jobs.
	CancelBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Bulks
	// Cancels the job(s) identified by the job identifier(s).
	CancelJobs(context.Context, *connect.Request[pbtaskmastermodels.CancelJobsRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Driver Info
	// Retrieves the list of drivers.
	GetDrivers(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pbdriveroperatormodels.GetDriversResponse], error)
	// @group: Driver Info
	// Retrieves the driver templates.
	GetDriverTemplates(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[pbdrivermodels.DriverTemplates], error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to register a new communication unit. The parameter contains the communication unit specification.
	CreateCommunicationUnit(context.Context, *connect.Request[pbdeviceregistrymodels.CreateCommunicationUnitRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	GetCommunicationUnits(context.Context, *connect.Request[pbdeviceregistrymodels.GetCommunicationUnitsRequest]) (*connect.Response[pbdeviceregistrymodels.GetCommunicationUnitsResponse], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to register a new device. The parameter contains the device specification.
	CreateDevice(context.Context, *connect.Request[pbdeviceregistrymodels.CreateDeviceRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	GetDevices(context.Context, *connect.Request[pbdeviceregistrymodels.GetDevicesRequest]) (*connect.Response[pbdeviceregistrymodels.GetDevicesResponse], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to replace ordered set of linked communication units.
	SetDeviceCommunicationUnits(context.Context, *connect.Request[pbdeviceregistrymodels.SetDeviceCommunicationUnitsRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get communication units definitions linked to the device(s).
	GetDevicesCommunicationUnits(context.Context, *connect.Request[pbdeviceregistrymodels.GetDevicesCommunicationUnitsRequest]) (*connect.Response[pbdeviceregistrymodels.GetDevicesCommunicationUnitsResponse], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to create a new device group. The parameter contains the device group specification.
	CreateDeviceGroup(context.Context, *connect.Request[pbdeviceregistrymodels.CreateDeviceGroupRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: devicegroup
	// The method returns a list of device groups.
	GetDeviceGroups(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pbdeviceregistrymodels.GetDeviceGroupsResponse], error)
	// @group: Devices
	// @tag: devicegroup
	// The method returns single device group.
	// @param The device group identifier.
	// @return The device group specification.
	GetDeviceGroup(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[pbdeviceregistrymodels.GetDeviceGroupResponse], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to add a new device to the device group. The parameter contains the device group specification.
	AddDevicesToGroup(context.Context, *connect.Request[pbdeviceregistrymodels.AddDevicesToGroupRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to remove a device from the device group. The parameter contains the device group specification.
	RemoveDevicesFromGroup(context.Context, *connect.Request[pbdeviceregistrymodels.RemoveDevicesFromGroupRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modempool
	// The method to get list of the modem pools.
	GetModemPools(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pbdeviceregistrymodels.GetModemPoolsResponse], error)
	// @group: Devices
	// @tag: modempool
	// The method to get the information about the modem pool. The method returns the modem pool information.
	GetModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[pbdeviceregistrymodels.GetModemPoolResponse], error)
	// @group: Devices
	// @tag: modempool
	// The method to create a new modem pool.
	CreateModemPool(context.Context, *connect.Request[pbdeviceregistrymodels.SetModemPoolRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modempool
	// The method to update the modem pool.
	UpdateModemPool(context.Context, *connect.Request[pbdeviceregistrymodels.SetModemPoolRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modempool
	// The method to delete the modem pool.
	DeleteModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modem
	// The method to create a new modem within the pool.
	CreateModem(context.Context, *connect.Request[pbdeviceregistrymodels.SetModemRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modem
	// The method to update the modem within the pool.
	UpdateModem(context.Context, *connect.Request[pbdeviceregistrymodels.SetModemRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modem
	// The method to delete the modem within the pool.
	DeleteModem(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Configuration
	// The method to get the system configuration.
	GetConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pbtaskmastermodels.SystemConfig], error)
	// @group: Configuration
	// The method to set the system configuration.
	SetConfig(context.Context, *connect.Request[pbtaskmastermodels.SystemConfig]) (*connect.Response[emptypb.Empty], error)
}

// NewApiServiceClient constructs a client for the io.clbs.openhes.pbapi.ApiService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ApiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	apiServiceMethods := pbapi.File_pbapi_proto.Services().ByName("ApiService").Methods()
	return &apiServiceClient{
		createBulk: connect.NewClient[pbapi.PublicCreateBulkRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceCreateBulkProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateBulk")),
			connect.WithClientOptions(opts...),
		),
		getBulks: connect.NewClient[pbdataproxymodels.GetBulksReuqest, pbdataproxymodels.GetBulksResponse](
			httpClient,
			baseURL+ApiServiceGetBulksProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetBulks")),
			connect.WithClientOptions(opts...),
		),
		getBulk: connect.NewClient[pbdataproxymodels.GetBulkRequest, pbdataproxymodels.GetBulkResponse](
			httpClient,
			baseURL+ApiServiceGetBulkProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetBulk")),
			connect.WithClientOptions(opts...),
		),
		getJobStatus: connect.NewClient[pbdataproxymodels.GetJobStatusRequest, pbdataproxymodels.GetJobStatusResponse](
			httpClient,
			baseURL+ApiServiceGetJobStatusProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetJobStatus")),
			connect.WithClientOptions(opts...),
		),
		cancelBulk: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceCancelBulkProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CancelBulk")),
			connect.WithClientOptions(opts...),
		),
		cancelJobs: connect.NewClient[pbtaskmastermodels.CancelJobsRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceCancelJobsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CancelJobs")),
			connect.WithClientOptions(opts...),
		),
		getDrivers: connect.NewClient[emptypb.Empty, pbdriveroperatormodels.GetDriversResponse](
			httpClient,
			baseURL+ApiServiceGetDriversProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDrivers")),
			connect.WithClientOptions(opts...),
		),
		getDriverTemplates: connect.NewClient[wrapperspb.StringValue, pbdrivermodels.DriverTemplates](
			httpClient,
			baseURL+ApiServiceGetDriverTemplatesProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDriverTemplates")),
			connect.WithClientOptions(opts...),
		),
		createCommunicationUnit: connect.NewClient[pbdeviceregistrymodels.CreateCommunicationUnitRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceCreateCommunicationUnitProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateCommunicationUnit")),
			connect.WithClientOptions(opts...),
		),
		getCommunicationUnits: connect.NewClient[pbdeviceregistrymodels.GetCommunicationUnitsRequest, pbdeviceregistrymodels.GetCommunicationUnitsResponse](
			httpClient,
			baseURL+ApiServiceGetCommunicationUnitsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetCommunicationUnits")),
			connect.WithClientOptions(opts...),
		),
		createDevice: connect.NewClient[pbdeviceregistrymodels.CreateDeviceRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceCreateDeviceProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateDevice")),
			connect.WithClientOptions(opts...),
		),
		getDevices: connect.NewClient[pbdeviceregistrymodels.GetDevicesRequest, pbdeviceregistrymodels.GetDevicesResponse](
			httpClient,
			baseURL+ApiServiceGetDevicesProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDevices")),
			connect.WithClientOptions(opts...),
		),
		setDeviceCommunicationUnits: connect.NewClient[pbdeviceregistrymodels.SetDeviceCommunicationUnitsRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceSetDeviceCommunicationUnitsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("SetDeviceCommunicationUnits")),
			connect.WithClientOptions(opts...),
		),
		getDevicesCommunicationUnits: connect.NewClient[pbdeviceregistrymodels.GetDevicesCommunicationUnitsRequest, pbdeviceregistrymodels.GetDevicesCommunicationUnitsResponse](
			httpClient,
			baseURL+ApiServiceGetDevicesCommunicationUnitsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDevicesCommunicationUnits")),
			connect.WithClientOptions(opts...),
		),
		createDeviceGroup: connect.NewClient[pbdeviceregistrymodels.CreateDeviceGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceCreateDeviceGroupProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateDeviceGroup")),
			connect.WithClientOptions(opts...),
		),
		getDeviceGroups: connect.NewClient[emptypb.Empty, pbdeviceregistrymodels.GetDeviceGroupsResponse](
			httpClient,
			baseURL+ApiServiceGetDeviceGroupsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceGroups")),
			connect.WithClientOptions(opts...),
		),
		getDeviceGroup: connect.NewClient[wrapperspb.StringValue, pbdeviceregistrymodels.GetDeviceGroupResponse](
			httpClient,
			baseURL+ApiServiceGetDeviceGroupProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceGroup")),
			connect.WithClientOptions(opts...),
		),
		addDevicesToGroup: connect.NewClient[pbdeviceregistrymodels.AddDevicesToGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceAddDevicesToGroupProcedure,
			connect.WithSchema(apiServiceMethods.ByName("AddDevicesToGroup")),
			connect.WithClientOptions(opts...),
		),
		removeDevicesFromGroup: connect.NewClient[pbdeviceregistrymodels.RemoveDevicesFromGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceRemoveDevicesFromGroupProcedure,
			connect.WithSchema(apiServiceMethods.ByName("RemoveDevicesFromGroup")),
			connect.WithClientOptions(opts...),
		),
		getModemPools: connect.NewClient[emptypb.Empty, pbdeviceregistrymodels.GetModemPoolsResponse](
			httpClient,
			baseURL+ApiServiceGetModemPoolsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetModemPools")),
			connect.WithClientOptions(opts...),
		),
		getModemPool: connect.NewClient[wrapperspb.StringValue, pbdeviceregistrymodels.GetModemPoolResponse](
			httpClient,
			baseURL+ApiServiceGetModemPoolProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetModemPool")),
			connect.WithClientOptions(opts...),
		),
		createModemPool: connect.NewClient[pbdeviceregistrymodels.SetModemPoolRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceCreateModemPoolProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateModemPool")),
			connect.WithClientOptions(opts...),
		),
		updateModemPool: connect.NewClient[pbdeviceregistrymodels.SetModemPoolRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateModemPoolProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateModemPool")),
			connect.WithClientOptions(opts...),
		),
		deleteModemPool: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceDeleteModemPoolProcedure,
			connect.WithSchema(apiServiceMethods.ByName("DeleteModemPool")),
			connect.WithClientOptions(opts...),
		),
		createModem: connect.NewClient[pbdeviceregistrymodels.SetModemRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceCreateModemProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateModem")),
			connect.WithClientOptions(opts...),
		),
		updateModem: connect.NewClient[pbdeviceregistrymodels.SetModemRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateModemProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateModem")),
			connect.WithClientOptions(opts...),
		),
		deleteModem: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceDeleteModemProcedure,
			connect.WithSchema(apiServiceMethods.ByName("DeleteModem")),
			connect.WithClientOptions(opts...),
		),
		getConfig: connect.NewClient[emptypb.Empty, pbtaskmastermodels.SystemConfig](
			httpClient,
			baseURL+ApiServiceGetConfigProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetConfig")),
			connect.WithClientOptions(opts...),
		),
		setConfig: connect.NewClient[pbtaskmastermodels.SystemConfig, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceSetConfigProcedure,
			connect.WithSchema(apiServiceMethods.ByName("SetConfig")),
			connect.WithClientOptions(opts...),
		),
	}
}

// apiServiceClient implements ApiServiceClient.
type apiServiceClient struct {
	createBulk                   *connect.Client[pbapi.PublicCreateBulkRequest, emptypb.Empty]
	getBulks                     *connect.Client[pbdataproxymodels.GetBulksReuqest, pbdataproxymodels.GetBulksResponse]
	getBulk                      *connect.Client[pbdataproxymodels.GetBulkRequest, pbdataproxymodels.GetBulkResponse]
	getJobStatus                 *connect.Client[pbdataproxymodels.GetJobStatusRequest, pbdataproxymodels.GetJobStatusResponse]
	cancelBulk                   *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	cancelJobs                   *connect.Client[pbtaskmastermodels.CancelJobsRequest, emptypb.Empty]
	getDrivers                   *connect.Client[emptypb.Empty, pbdriveroperatormodels.GetDriversResponse]
	getDriverTemplates           *connect.Client[wrapperspb.StringValue, pbdrivermodels.DriverTemplates]
	createCommunicationUnit      *connect.Client[pbdeviceregistrymodels.CreateCommunicationUnitRequest, emptypb.Empty]
	getCommunicationUnits        *connect.Client[pbdeviceregistrymodels.GetCommunicationUnitsRequest, pbdeviceregistrymodels.GetCommunicationUnitsResponse]
	createDevice                 *connect.Client[pbdeviceregistrymodels.CreateDeviceRequest, emptypb.Empty]
	getDevices                   *connect.Client[pbdeviceregistrymodels.GetDevicesRequest, pbdeviceregistrymodels.GetDevicesResponse]
	setDeviceCommunicationUnits  *connect.Client[pbdeviceregistrymodels.SetDeviceCommunicationUnitsRequest, emptypb.Empty]
	getDevicesCommunicationUnits *connect.Client[pbdeviceregistrymodels.GetDevicesCommunicationUnitsRequest, pbdeviceregistrymodels.GetDevicesCommunicationUnitsResponse]
	createDeviceGroup            *connect.Client[pbdeviceregistrymodels.CreateDeviceGroupRequest, emptypb.Empty]
	getDeviceGroups              *connect.Client[emptypb.Empty, pbdeviceregistrymodels.GetDeviceGroupsResponse]
	getDeviceGroup               *connect.Client[wrapperspb.StringValue, pbdeviceregistrymodels.GetDeviceGroupResponse]
	addDevicesToGroup            *connect.Client[pbdeviceregistrymodels.AddDevicesToGroupRequest, emptypb.Empty]
	removeDevicesFromGroup       *connect.Client[pbdeviceregistrymodels.RemoveDevicesFromGroupRequest, emptypb.Empty]
	getModemPools                *connect.Client[emptypb.Empty, pbdeviceregistrymodels.GetModemPoolsResponse]
	getModemPool                 *connect.Client[wrapperspb.StringValue, pbdeviceregistrymodels.GetModemPoolResponse]
	createModemPool              *connect.Client[pbdeviceregistrymodels.SetModemPoolRequest, emptypb.Empty]
	updateModemPool              *connect.Client[pbdeviceregistrymodels.SetModemPoolRequest, emptypb.Empty]
	deleteModemPool              *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	createModem                  *connect.Client[pbdeviceregistrymodels.SetModemRequest, emptypb.Empty]
	updateModem                  *connect.Client[pbdeviceregistrymodels.SetModemRequest, emptypb.Empty]
	deleteModem                  *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	getConfig                    *connect.Client[emptypb.Empty, pbtaskmastermodels.SystemConfig]
	setConfig                    *connect.Client[pbtaskmastermodels.SystemConfig, emptypb.Empty]
}

// CreateBulk calls io.clbs.openhes.pbapi.ApiService.CreateBulk.
func (c *apiServiceClient) CreateBulk(ctx context.Context, req *connect.Request[pbapi.PublicCreateBulkRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.createBulk.CallUnary(ctx, req)
}

// GetBulks calls io.clbs.openhes.pbapi.ApiService.GetBulks.
func (c *apiServiceClient) GetBulks(ctx context.Context, req *connect.Request[pbdataproxymodels.GetBulksReuqest]) (*connect.Response[pbdataproxymodels.GetBulksResponse], error) {
	return c.getBulks.CallUnary(ctx, req)
}

// GetBulk calls io.clbs.openhes.pbapi.ApiService.GetBulk.
func (c *apiServiceClient) GetBulk(ctx context.Context, req *connect.Request[pbdataproxymodels.GetBulkRequest]) (*connect.Response[pbdataproxymodels.GetBulkResponse], error) {
	return c.getBulk.CallUnary(ctx, req)
}

// GetJobStatus calls io.clbs.openhes.pbapi.ApiService.GetJobStatus.
func (c *apiServiceClient) GetJobStatus(ctx context.Context, req *connect.Request[pbdataproxymodels.GetJobStatusRequest]) (*connect.Response[pbdataproxymodels.GetJobStatusResponse], error) {
	return c.getJobStatus.CallUnary(ctx, req)
}

// CancelBulk calls io.clbs.openhes.pbapi.ApiService.CancelBulk.
func (c *apiServiceClient) CancelBulk(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.cancelBulk.CallUnary(ctx, req)
}

// CancelJobs calls io.clbs.openhes.pbapi.ApiService.CancelJobs.
func (c *apiServiceClient) CancelJobs(ctx context.Context, req *connect.Request[pbtaskmastermodels.CancelJobsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.cancelJobs.CallUnary(ctx, req)
}

// GetDrivers calls io.clbs.openhes.pbapi.ApiService.GetDrivers.
func (c *apiServiceClient) GetDrivers(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[pbdriveroperatormodels.GetDriversResponse], error) {
	return c.getDrivers.CallUnary(ctx, req)
}

// GetDriverTemplates calls io.clbs.openhes.pbapi.ApiService.GetDriverTemplates.
func (c *apiServiceClient) GetDriverTemplates(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[pbdrivermodels.DriverTemplates], error) {
	return c.getDriverTemplates.CallUnary(ctx, req)
}

// CreateCommunicationUnit calls io.clbs.openhes.pbapi.ApiService.CreateCommunicationUnit.
func (c *apiServiceClient) CreateCommunicationUnit(ctx context.Context, req *connect.Request[pbdeviceregistrymodels.CreateCommunicationUnitRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.createCommunicationUnit.CallUnary(ctx, req)
}

// GetCommunicationUnits calls io.clbs.openhes.pbapi.ApiService.GetCommunicationUnits.
func (c *apiServiceClient) GetCommunicationUnits(ctx context.Context, req *connect.Request[pbdeviceregistrymodels.GetCommunicationUnitsRequest]) (*connect.Response[pbdeviceregistrymodels.GetCommunicationUnitsResponse], error) {
	return c.getCommunicationUnits.CallUnary(ctx, req)
}

// CreateDevice calls io.clbs.openhes.pbapi.ApiService.CreateDevice.
func (c *apiServiceClient) CreateDevice(ctx context.Context, req *connect.Request[pbdeviceregistrymodels.CreateDeviceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.createDevice.CallUnary(ctx, req)
}

// GetDevices calls io.clbs.openhes.pbapi.ApiService.GetDevices.
func (c *apiServiceClient) GetDevices(ctx context.Context, req *connect.Request[pbdeviceregistrymodels.GetDevicesRequest]) (*connect.Response[pbdeviceregistrymodels.GetDevicesResponse], error) {
	return c.getDevices.CallUnary(ctx, req)
}

// SetDeviceCommunicationUnits calls io.clbs.openhes.pbapi.ApiService.SetDeviceCommunicationUnits.
func (c *apiServiceClient) SetDeviceCommunicationUnits(ctx context.Context, req *connect.Request[pbdeviceregistrymodels.SetDeviceCommunicationUnitsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setDeviceCommunicationUnits.CallUnary(ctx, req)
}

// GetDevicesCommunicationUnits calls io.clbs.openhes.pbapi.ApiService.GetDevicesCommunicationUnits.
func (c *apiServiceClient) GetDevicesCommunicationUnits(ctx context.Context, req *connect.Request[pbdeviceregistrymodels.GetDevicesCommunicationUnitsRequest]) (*connect.Response[pbdeviceregistrymodels.GetDevicesCommunicationUnitsResponse], error) {
	return c.getDevicesCommunicationUnits.CallUnary(ctx, req)
}

// CreateDeviceGroup calls io.clbs.openhes.pbapi.ApiService.CreateDeviceGroup.
func (c *apiServiceClient) CreateDeviceGroup(ctx context.Context, req *connect.Request[pbdeviceregistrymodels.CreateDeviceGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.createDeviceGroup.CallUnary(ctx, req)
}

// GetDeviceGroups calls io.clbs.openhes.pbapi.ApiService.GetDeviceGroups.
func (c *apiServiceClient) GetDeviceGroups(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[pbdeviceregistrymodels.GetDeviceGroupsResponse], error) {
	return c.getDeviceGroups.CallUnary(ctx, req)
}

// GetDeviceGroup calls io.clbs.openhes.pbapi.ApiService.GetDeviceGroup.
func (c *apiServiceClient) GetDeviceGroup(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[pbdeviceregistrymodels.GetDeviceGroupResponse], error) {
	return c.getDeviceGroup.CallUnary(ctx, req)
}

// AddDevicesToGroup calls io.clbs.openhes.pbapi.ApiService.AddDevicesToGroup.
func (c *apiServiceClient) AddDevicesToGroup(ctx context.Context, req *connect.Request[pbdeviceregistrymodels.AddDevicesToGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.addDevicesToGroup.CallUnary(ctx, req)
}

// RemoveDevicesFromGroup calls io.clbs.openhes.pbapi.ApiService.RemoveDevicesFromGroup.
func (c *apiServiceClient) RemoveDevicesFromGroup(ctx context.Context, req *connect.Request[pbdeviceregistrymodels.RemoveDevicesFromGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeDevicesFromGroup.CallUnary(ctx, req)
}

// GetModemPools calls io.clbs.openhes.pbapi.ApiService.GetModemPools.
func (c *apiServiceClient) GetModemPools(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[pbdeviceregistrymodels.GetModemPoolsResponse], error) {
	return c.getModemPools.CallUnary(ctx, req)
}

// GetModemPool calls io.clbs.openhes.pbapi.ApiService.GetModemPool.
func (c *apiServiceClient) GetModemPool(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[pbdeviceregistrymodels.GetModemPoolResponse], error) {
	return c.getModemPool.CallUnary(ctx, req)
}

// CreateModemPool calls io.clbs.openhes.pbapi.ApiService.CreateModemPool.
func (c *apiServiceClient) CreateModemPool(ctx context.Context, req *connect.Request[pbdeviceregistrymodels.SetModemPoolRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.createModemPool.CallUnary(ctx, req)
}

// UpdateModemPool calls io.clbs.openhes.pbapi.ApiService.UpdateModemPool.
func (c *apiServiceClient) UpdateModemPool(ctx context.Context, req *connect.Request[pbdeviceregistrymodels.SetModemPoolRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateModemPool.CallUnary(ctx, req)
}

// DeleteModemPool calls io.clbs.openhes.pbapi.ApiService.DeleteModemPool.
func (c *apiServiceClient) DeleteModemPool(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteModemPool.CallUnary(ctx, req)
}

// CreateModem calls io.clbs.openhes.pbapi.ApiService.CreateModem.
func (c *apiServiceClient) CreateModem(ctx context.Context, req *connect.Request[pbdeviceregistrymodels.SetModemRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.createModem.CallUnary(ctx, req)
}

// UpdateModem calls io.clbs.openhes.pbapi.ApiService.UpdateModem.
func (c *apiServiceClient) UpdateModem(ctx context.Context, req *connect.Request[pbdeviceregistrymodels.SetModemRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateModem.CallUnary(ctx, req)
}

// DeleteModem calls io.clbs.openhes.pbapi.ApiService.DeleteModem.
func (c *apiServiceClient) DeleteModem(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteModem.CallUnary(ctx, req)
}

// GetConfig calls io.clbs.openhes.pbapi.ApiService.GetConfig.
func (c *apiServiceClient) GetConfig(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[pbtaskmastermodels.SystemConfig], error) {
	return c.getConfig.CallUnary(ctx, req)
}

// SetConfig calls io.clbs.openhes.pbapi.ApiService.SetConfig.
func (c *apiServiceClient) SetConfig(ctx context.Context, req *connect.Request[pbtaskmastermodels.SystemConfig]) (*connect.Response[emptypb.Empty], error) {
	return c.setConfig.CallUnary(ctx, req)
}

// ApiServiceHandler is an implementation of the io.clbs.openhes.pbapi.ApiService service.
type ApiServiceHandler interface {
	// @group: Bulks
	// @tag: acquisition
	// @tag: action
	// Starts a new bulk of jobs.
	CreateBulk(context.Context, *connect.Request[pbapi.PublicCreateBulkRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Bulks
	// Retrieves the list of bulks.
	GetBulks(context.Context, *connect.Request[pbdataproxymodels.GetBulksReuqest]) (*connect.Response[pbdataproxymodels.GetBulksResponse], error)
	// @group: Bulks
	// Retrieves the bulk info and status.
	GetBulk(context.Context, *connect.Request[pbdataproxymodels.GetBulkRequest]) (*connect.Response[pbdataproxymodels.GetBulkResponse], error)
	// @group: Bulks
	// Retrieves the job status.
	GetJobStatus(context.Context, *connect.Request[pbdataproxymodels.GetJobStatusRequest]) (*connect.Response[pbdataproxymodels.GetJobStatusResponse], error)
	// @group: Bulks
	// Cancels the bulk of jobs.
	CancelBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Bulks
	// Cancels the job(s) identified by the job identifier(s).
	CancelJobs(context.Context, *connect.Request[pbtaskmastermodels.CancelJobsRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Driver Info
	// Retrieves the list of drivers.
	GetDrivers(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pbdriveroperatormodels.GetDriversResponse], error)
	// @group: Driver Info
	// Retrieves the driver templates.
	GetDriverTemplates(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[pbdrivermodels.DriverTemplates], error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to register a new communication unit. The parameter contains the communication unit specification.
	CreateCommunicationUnit(context.Context, *connect.Request[pbdeviceregistrymodels.CreateCommunicationUnitRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	GetCommunicationUnits(context.Context, *connect.Request[pbdeviceregistrymodels.GetCommunicationUnitsRequest]) (*connect.Response[pbdeviceregistrymodels.GetCommunicationUnitsResponse], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to register a new device. The parameter contains the device specification.
	CreateDevice(context.Context, *connect.Request[pbdeviceregistrymodels.CreateDeviceRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	GetDevices(context.Context, *connect.Request[pbdeviceregistrymodels.GetDevicesRequest]) (*connect.Response[pbdeviceregistrymodels.GetDevicesResponse], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to replace ordered set of linked communication units.
	SetDeviceCommunicationUnits(context.Context, *connect.Request[pbdeviceregistrymodels.SetDeviceCommunicationUnitsRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get communication units definitions linked to the device(s).
	GetDevicesCommunicationUnits(context.Context, *connect.Request[pbdeviceregistrymodels.GetDevicesCommunicationUnitsRequest]) (*connect.Response[pbdeviceregistrymodels.GetDevicesCommunicationUnitsResponse], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to create a new device group. The parameter contains the device group specification.
	CreateDeviceGroup(context.Context, *connect.Request[pbdeviceregistrymodels.CreateDeviceGroupRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: devicegroup
	// The method returns a list of device groups.
	GetDeviceGroups(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pbdeviceregistrymodels.GetDeviceGroupsResponse], error)
	// @group: Devices
	// @tag: devicegroup
	// The method returns single device group.
	// @param The device group identifier.
	// @return The device group specification.
	GetDeviceGroup(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[pbdeviceregistrymodels.GetDeviceGroupResponse], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to add a new device to the device group. The parameter contains the device group specification.
	AddDevicesToGroup(context.Context, *connect.Request[pbdeviceregistrymodels.AddDevicesToGroupRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to remove a device from the device group. The parameter contains the device group specification.
	RemoveDevicesFromGroup(context.Context, *connect.Request[pbdeviceregistrymodels.RemoveDevicesFromGroupRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modempool
	// The method to get list of the modem pools.
	GetModemPools(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pbdeviceregistrymodels.GetModemPoolsResponse], error)
	// @group: Devices
	// @tag: modempool
	// The method to get the information about the modem pool. The method returns the modem pool information.
	GetModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[pbdeviceregistrymodels.GetModemPoolResponse], error)
	// @group: Devices
	// @tag: modempool
	// The method to create a new modem pool.
	CreateModemPool(context.Context, *connect.Request[pbdeviceregistrymodels.SetModemPoolRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modempool
	// The method to update the modem pool.
	UpdateModemPool(context.Context, *connect.Request[pbdeviceregistrymodels.SetModemPoolRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modempool
	// The method to delete the modem pool.
	DeleteModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modem
	// The method to create a new modem within the pool.
	CreateModem(context.Context, *connect.Request[pbdeviceregistrymodels.SetModemRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modem
	// The method to update the modem within the pool.
	UpdateModem(context.Context, *connect.Request[pbdeviceregistrymodels.SetModemRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modem
	// The method to delete the modem within the pool.
	DeleteModem(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Configuration
	// The method to get the system configuration.
	GetConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pbtaskmastermodels.SystemConfig], error)
	// @group: Configuration
	// The method to set the system configuration.
	SetConfig(context.Context, *connect.Request[pbtaskmastermodels.SystemConfig]) (*connect.Response[emptypb.Empty], error)
}

// NewApiServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApiServiceHandler(svc ApiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	apiServiceMethods := pbapi.File_pbapi_proto.Services().ByName("ApiService").Methods()
	apiServiceCreateBulkHandler := connect.NewUnaryHandler(
		ApiServiceCreateBulkProcedure,
		svc.CreateBulk,
		connect.WithSchema(apiServiceMethods.ByName("CreateBulk")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetBulksHandler := connect.NewUnaryHandler(
		ApiServiceGetBulksProcedure,
		svc.GetBulks,
		connect.WithSchema(apiServiceMethods.ByName("GetBulks")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetBulkHandler := connect.NewUnaryHandler(
		ApiServiceGetBulkProcedure,
		svc.GetBulk,
		connect.WithSchema(apiServiceMethods.ByName("GetBulk")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetJobStatusHandler := connect.NewUnaryHandler(
		ApiServiceGetJobStatusProcedure,
		svc.GetJobStatus,
		connect.WithSchema(apiServiceMethods.ByName("GetJobStatus")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCancelBulkHandler := connect.NewUnaryHandler(
		ApiServiceCancelBulkProcedure,
		svc.CancelBulk,
		connect.WithSchema(apiServiceMethods.ByName("CancelBulk")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCancelJobsHandler := connect.NewUnaryHandler(
		ApiServiceCancelJobsProcedure,
		svc.CancelJobs,
		connect.WithSchema(apiServiceMethods.ByName("CancelJobs")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDriversHandler := connect.NewUnaryHandler(
		ApiServiceGetDriversProcedure,
		svc.GetDrivers,
		connect.WithSchema(apiServiceMethods.ByName("GetDrivers")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDriverTemplatesHandler := connect.NewUnaryHandler(
		ApiServiceGetDriverTemplatesProcedure,
		svc.GetDriverTemplates,
		connect.WithSchema(apiServiceMethods.ByName("GetDriverTemplates")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateCommunicationUnitHandler := connect.NewUnaryHandler(
		ApiServiceCreateCommunicationUnitProcedure,
		svc.CreateCommunicationUnit,
		connect.WithSchema(apiServiceMethods.ByName("CreateCommunicationUnit")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetCommunicationUnitsHandler := connect.NewUnaryHandler(
		ApiServiceGetCommunicationUnitsProcedure,
		svc.GetCommunicationUnits,
		connect.WithSchema(apiServiceMethods.ByName("GetCommunicationUnits")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateDeviceHandler := connect.NewUnaryHandler(
		ApiServiceCreateDeviceProcedure,
		svc.CreateDevice,
		connect.WithSchema(apiServiceMethods.ByName("CreateDevice")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDevicesHandler := connect.NewUnaryHandler(
		ApiServiceGetDevicesProcedure,
		svc.GetDevices,
		connect.WithSchema(apiServiceMethods.ByName("GetDevices")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceSetDeviceCommunicationUnitsHandler := connect.NewUnaryHandler(
		ApiServiceSetDeviceCommunicationUnitsProcedure,
		svc.SetDeviceCommunicationUnits,
		connect.WithSchema(apiServiceMethods.ByName("SetDeviceCommunicationUnits")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDevicesCommunicationUnitsHandler := connect.NewUnaryHandler(
		ApiServiceGetDevicesCommunicationUnitsProcedure,
		svc.GetDevicesCommunicationUnits,
		connect.WithSchema(apiServiceMethods.ByName("GetDevicesCommunicationUnits")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateDeviceGroupHandler := connect.NewUnaryHandler(
		ApiServiceCreateDeviceGroupProcedure,
		svc.CreateDeviceGroup,
		connect.WithSchema(apiServiceMethods.ByName("CreateDeviceGroup")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceGroupsHandler := connect.NewUnaryHandler(
		ApiServiceGetDeviceGroupsProcedure,
		svc.GetDeviceGroups,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceGroups")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceGroupHandler := connect.NewUnaryHandler(
		ApiServiceGetDeviceGroupProcedure,
		svc.GetDeviceGroup,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceGroup")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceAddDevicesToGroupHandler := connect.NewUnaryHandler(
		ApiServiceAddDevicesToGroupProcedure,
		svc.AddDevicesToGroup,
		connect.WithSchema(apiServiceMethods.ByName("AddDevicesToGroup")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceRemoveDevicesFromGroupHandler := connect.NewUnaryHandler(
		ApiServiceRemoveDevicesFromGroupProcedure,
		svc.RemoveDevicesFromGroup,
		connect.WithSchema(apiServiceMethods.ByName("RemoveDevicesFromGroup")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetModemPoolsHandler := connect.NewUnaryHandler(
		ApiServiceGetModemPoolsProcedure,
		svc.GetModemPools,
		connect.WithSchema(apiServiceMethods.ByName("GetModemPools")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetModemPoolHandler := connect.NewUnaryHandler(
		ApiServiceGetModemPoolProcedure,
		svc.GetModemPool,
		connect.WithSchema(apiServiceMethods.ByName("GetModemPool")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateModemPoolHandler := connect.NewUnaryHandler(
		ApiServiceCreateModemPoolProcedure,
		svc.CreateModemPool,
		connect.WithSchema(apiServiceMethods.ByName("CreateModemPool")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateModemPoolHandler := connect.NewUnaryHandler(
		ApiServiceUpdateModemPoolProcedure,
		svc.UpdateModemPool,
		connect.WithSchema(apiServiceMethods.ByName("UpdateModemPool")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceDeleteModemPoolHandler := connect.NewUnaryHandler(
		ApiServiceDeleteModemPoolProcedure,
		svc.DeleteModemPool,
		connect.WithSchema(apiServiceMethods.ByName("DeleteModemPool")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateModemHandler := connect.NewUnaryHandler(
		ApiServiceCreateModemProcedure,
		svc.CreateModem,
		connect.WithSchema(apiServiceMethods.ByName("CreateModem")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateModemHandler := connect.NewUnaryHandler(
		ApiServiceUpdateModemProcedure,
		svc.UpdateModem,
		connect.WithSchema(apiServiceMethods.ByName("UpdateModem")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceDeleteModemHandler := connect.NewUnaryHandler(
		ApiServiceDeleteModemProcedure,
		svc.DeleteModem,
		connect.WithSchema(apiServiceMethods.ByName("DeleteModem")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetConfigHandler := connect.NewUnaryHandler(
		ApiServiceGetConfigProcedure,
		svc.GetConfig,
		connect.WithSchema(apiServiceMethods.ByName("GetConfig")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceSetConfigHandler := connect.NewUnaryHandler(
		ApiServiceSetConfigProcedure,
		svc.SetConfig,
		connect.WithSchema(apiServiceMethods.ByName("SetConfig")),
		connect.WithHandlerOptions(opts...),
	)
	return "/io.clbs.openhes.pbapi.ApiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApiServiceCreateBulkProcedure:
			apiServiceCreateBulkHandler.ServeHTTP(w, r)
		case ApiServiceGetBulksProcedure:
			apiServiceGetBulksHandler.ServeHTTP(w, r)
		case ApiServiceGetBulkProcedure:
			apiServiceGetBulkHandler.ServeHTTP(w, r)
		case ApiServiceGetJobStatusProcedure:
			apiServiceGetJobStatusHandler.ServeHTTP(w, r)
		case ApiServiceCancelBulkProcedure:
			apiServiceCancelBulkHandler.ServeHTTP(w, r)
		case ApiServiceCancelJobsProcedure:
			apiServiceCancelJobsHandler.ServeHTTP(w, r)
		case ApiServiceGetDriversProcedure:
			apiServiceGetDriversHandler.ServeHTTP(w, r)
		case ApiServiceGetDriverTemplatesProcedure:
			apiServiceGetDriverTemplatesHandler.ServeHTTP(w, r)
		case ApiServiceCreateCommunicationUnitProcedure:
			apiServiceCreateCommunicationUnitHandler.ServeHTTP(w, r)
		case ApiServiceGetCommunicationUnitsProcedure:
			apiServiceGetCommunicationUnitsHandler.ServeHTTP(w, r)
		case ApiServiceCreateDeviceProcedure:
			apiServiceCreateDeviceHandler.ServeHTTP(w, r)
		case ApiServiceGetDevicesProcedure:
			apiServiceGetDevicesHandler.ServeHTTP(w, r)
		case ApiServiceSetDeviceCommunicationUnitsProcedure:
			apiServiceSetDeviceCommunicationUnitsHandler.ServeHTTP(w, r)
		case ApiServiceGetDevicesCommunicationUnitsProcedure:
			apiServiceGetDevicesCommunicationUnitsHandler.ServeHTTP(w, r)
		case ApiServiceCreateDeviceGroupProcedure:
			apiServiceCreateDeviceGroupHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceGroupsProcedure:
			apiServiceGetDeviceGroupsHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceGroupProcedure:
			apiServiceGetDeviceGroupHandler.ServeHTTP(w, r)
		case ApiServiceAddDevicesToGroupProcedure:
			apiServiceAddDevicesToGroupHandler.ServeHTTP(w, r)
		case ApiServiceRemoveDevicesFromGroupProcedure:
			apiServiceRemoveDevicesFromGroupHandler.ServeHTTP(w, r)
		case ApiServiceGetModemPoolsProcedure:
			apiServiceGetModemPoolsHandler.ServeHTTP(w, r)
		case ApiServiceGetModemPoolProcedure:
			apiServiceGetModemPoolHandler.ServeHTTP(w, r)
		case ApiServiceCreateModemPoolProcedure:
			apiServiceCreateModemPoolHandler.ServeHTTP(w, r)
		case ApiServiceUpdateModemPoolProcedure:
			apiServiceUpdateModemPoolHandler.ServeHTTP(w, r)
		case ApiServiceDeleteModemPoolProcedure:
			apiServiceDeleteModemPoolHandler.ServeHTTP(w, r)
		case ApiServiceCreateModemProcedure:
			apiServiceCreateModemHandler.ServeHTTP(w, r)
		case ApiServiceUpdateModemProcedure:
			apiServiceUpdateModemHandler.ServeHTTP(w, r)
		case ApiServiceDeleteModemProcedure:
			apiServiceDeleteModemHandler.ServeHTTP(w, r)
		case ApiServiceGetConfigProcedure:
			apiServiceGetConfigHandler.ServeHTTP(w, r)
		case ApiServiceSetConfigProcedure:
			apiServiceSetConfigHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApiServiceHandler struct{}

func (UnimplementedApiServiceHandler) CreateBulk(context.Context, *connect.Request[pbapi.PublicCreateBulkRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.CreateBulk is not implemented"))
}

func (UnimplementedApiServiceHandler) GetBulks(context.Context, *connect.Request[pbdataproxymodels.GetBulksReuqest]) (*connect.Response[pbdataproxymodels.GetBulksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.GetBulks is not implemented"))
}

func (UnimplementedApiServiceHandler) GetBulk(context.Context, *connect.Request[pbdataproxymodels.GetBulkRequest]) (*connect.Response[pbdataproxymodels.GetBulkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.GetBulk is not implemented"))
}

func (UnimplementedApiServiceHandler) GetJobStatus(context.Context, *connect.Request[pbdataproxymodels.GetJobStatusRequest]) (*connect.Response[pbdataproxymodels.GetJobStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.GetJobStatus is not implemented"))
}

func (UnimplementedApiServiceHandler) CancelBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.CancelBulk is not implemented"))
}

func (UnimplementedApiServiceHandler) CancelJobs(context.Context, *connect.Request[pbtaskmastermodels.CancelJobsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.CancelJobs is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDrivers(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pbdriveroperatormodels.GetDriversResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.GetDrivers is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDriverTemplates(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[pbdrivermodels.DriverTemplates], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.GetDriverTemplates is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateCommunicationUnit(context.Context, *connect.Request[pbdeviceregistrymodels.CreateCommunicationUnitRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.CreateCommunicationUnit is not implemented"))
}

func (UnimplementedApiServiceHandler) GetCommunicationUnits(context.Context, *connect.Request[pbdeviceregistrymodels.GetCommunicationUnitsRequest]) (*connect.Response[pbdeviceregistrymodels.GetCommunicationUnitsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.GetCommunicationUnits is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateDevice(context.Context, *connect.Request[pbdeviceregistrymodels.CreateDeviceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.CreateDevice is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDevices(context.Context, *connect.Request[pbdeviceregistrymodels.GetDevicesRequest]) (*connect.Response[pbdeviceregistrymodels.GetDevicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.GetDevices is not implemented"))
}

func (UnimplementedApiServiceHandler) SetDeviceCommunicationUnits(context.Context, *connect.Request[pbdeviceregistrymodels.SetDeviceCommunicationUnitsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.SetDeviceCommunicationUnits is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDevicesCommunicationUnits(context.Context, *connect.Request[pbdeviceregistrymodels.GetDevicesCommunicationUnitsRequest]) (*connect.Response[pbdeviceregistrymodels.GetDevicesCommunicationUnitsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.GetDevicesCommunicationUnits is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateDeviceGroup(context.Context, *connect.Request[pbdeviceregistrymodels.CreateDeviceGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.CreateDeviceGroup is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceGroups(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pbdeviceregistrymodels.GetDeviceGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.GetDeviceGroups is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceGroup(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[pbdeviceregistrymodels.GetDeviceGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.GetDeviceGroup is not implemented"))
}

func (UnimplementedApiServiceHandler) AddDevicesToGroup(context.Context, *connect.Request[pbdeviceregistrymodels.AddDevicesToGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.AddDevicesToGroup is not implemented"))
}

func (UnimplementedApiServiceHandler) RemoveDevicesFromGroup(context.Context, *connect.Request[pbdeviceregistrymodels.RemoveDevicesFromGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.RemoveDevicesFromGroup is not implemented"))
}

func (UnimplementedApiServiceHandler) GetModemPools(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pbdeviceregistrymodels.GetModemPoolsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.GetModemPools is not implemented"))
}

func (UnimplementedApiServiceHandler) GetModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[pbdeviceregistrymodels.GetModemPoolResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.GetModemPool is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateModemPool(context.Context, *connect.Request[pbdeviceregistrymodels.SetModemPoolRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.CreateModemPool is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateModemPool(context.Context, *connect.Request[pbdeviceregistrymodels.SetModemPoolRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.UpdateModemPool is not implemented"))
}

func (UnimplementedApiServiceHandler) DeleteModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.DeleteModemPool is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateModem(context.Context, *connect.Request[pbdeviceregistrymodels.SetModemRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.CreateModem is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateModem(context.Context, *connect.Request[pbdeviceregistrymodels.SetModemRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.UpdateModem is not implemented"))
}

func (UnimplementedApiServiceHandler) DeleteModem(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.DeleteModem is not implemented"))
}

func (UnimplementedApiServiceHandler) GetConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[pbtaskmastermodels.SystemConfig], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.GetConfig is not implemented"))
}

func (UnimplementedApiServiceHandler) SetConfig(context.Context, *connect.Request[pbtaskmastermodels.SystemConfig]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.pbapi.ApiService.SetConfig is not implemented"))
}
