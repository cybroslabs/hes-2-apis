// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file pbdriveroperator-models.proto (package io.clbs.openhes.pbdriveroperator, edition 2023)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_empty, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { ErrorCode } from "./pbdriver-models_pb";
import { file_pbdriver_models } from "./pbdriver-models_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file pbdriveroperator-models.proto.
 */
export const file_pbdriveroperator_models: GenFile = /*@__PURE__*/
  fileDesc("Ch1wYmRyaXZlcm9wZXJhdG9yLW1vZGVscy5wcm90bxIgaW8uY2xicy5vcGVuaGVzLnBiZHJpdmVyb3BlcmF0b3IiVQoVU2V0RHJpdmVyU2NhbGVSZXF1ZXN0EhUKDXRhc2ttYXN0ZXJfaWQYASABKAkSEwoLZHJpdmVyX3R5cGUYAiABKAkSEAoIcmVwbGljYXMYAyABKA0iQwoVR2V0RHJpdmVyU2NhbGVSZXF1ZXN0EhUKDXRhc2ttYXN0ZXJfaWQYASABKAkSEwoLZHJpdmVyX3R5cGUYAiABKAkiXgoTU3RhcnRVcGdyYWRlUmVxdWVzdBITCgtkcml2ZXJfdHlwZRgBIAEoCRIWCg5kcml2ZXJfdmVyc2lvbhgCIAEoCRIaChJkZXZpY2VyZWdpc3RyeV91cmwYAyABKAkiMAoZR2V0RHJpdmVyVGVtcGxhdGVzUmVxdWVzdBITCgtkcml2ZXJfdHlwZRgBIAEoCSIyCgpEcml2ZXJJbmZvEhMKC2RyaXZlcl90eXBlGAEgASgJEg8KB3ZlcnNpb24YAiABKAkiiAEKEkdldERyaXZlcnNSZXNwb25zZRIzCgZyZXN1bHQYASABKA4yIy5pby5jbGJzLm9wZW5oZXMucGJkcml2ZXIuRXJyb3JDb2RlEj0KB2RyaXZlcnMYAiADKAsyLC5pby5jbGJzLm9wZW5oZXMucGJkcml2ZXJvcGVyYXRvci5Ecml2ZXJJbmZvQkJaQGdpdGh1Yi5jb20vY3licm9zbGFicy9oZXMtMi1hcGlzL3Byb3RvYnVmL3BiZHJpdmVyb3BlcmF0b3Jtb2RlbHNiCGVkaXRpb25zcOgH", [file_google_protobuf_empty, file_google_protobuf_wrappers, file_pbdriver_models]);

/**
 * Taskmaster -> Driver Operator driver-scale change request message
 *
 * @generated from message io.clbs.openhes.pbdriveroperator.SetDriverScaleRequest
 */
export type SetDriverScaleRequest = Message<"io.clbs.openhes.pbdriveroperator.SetDriverScaleRequest"> & {
  /**
   * The Taskmaster identifier. It is statefulset so value must be either full pod name or suffix integer of the pod name. For example: taskmaster-0 or 0.
   *
   * @generated from field: string taskmaster_id = 1;
   */
  taskmasterId: string;

  /**
   * The driver unique identifier.
   *
   * @generated from field: string driver_type = 2;
   */
  driverType: string;

  /**
   * The number of replicas to scale to.
   *
   * @generated from field: uint32 replicas = 3;
   */
  replicas: number;
};

/**
 * Describes the message io.clbs.openhes.pbdriveroperator.SetDriverScaleRequest.
 * Use `create(SetDriverScaleRequestSchema)` to create a new message.
 */
export const SetDriverScaleRequestSchema: GenMessage<SetDriverScaleRequest> = /*@__PURE__*/
  messageDesc(file_pbdriveroperator_models, 0);

/**
 * Taskmaster -> Driver Operator get driver-scale message
 *
 * @generated from message io.clbs.openhes.pbdriveroperator.GetDriverScaleRequest
 */
export type GetDriverScaleRequest = Message<"io.clbs.openhes.pbdriveroperator.GetDriverScaleRequest"> & {
  /**
   * The Taskmaster identifier. It is statefulset so value must be either full pod name or suffix integer of the pod name. For example: taskmaster-0 or 0.
   *
   * @generated from field: string taskmaster_id = 1;
   */
  taskmasterId: string;

  /**
   * The driver unique identifier.
   *
   * @generated from field: string driver_type = 2;
   */
  driverType: string;
};

/**
 * Describes the message io.clbs.openhes.pbdriveroperator.GetDriverScaleRequest.
 * Use `create(GetDriverScaleRequestSchema)` to create a new message.
 */
export const GetDriverScaleRequestSchema: GenMessage<GetDriverScaleRequest> = /*@__PURE__*/
  messageDesc(file_pbdriveroperator_models, 1);

/**
 * @generated from message io.clbs.openhes.pbdriveroperator.StartUpgradeRequest
 */
export type StartUpgradeRequest = Message<"io.clbs.openhes.pbdriveroperator.StartUpgradeRequest"> & {
  /**
   * The driver unique identifier.
   *
   * @generated from field: string driver_type = 1;
   */
  driverType: string;

  /**
   * The driver version to be started. It must be a valid version of the driver and should be exactly +1 against the version of the data to be upgraded; or the major version can be +1 if current data version is the latest possible minor version.
   *
   * @generated from field: string driver_version = 2;
   */
  driverVersion: string;

  /**
   * The URL of the DeviceRegistry service the driver shall connect to.
   *
   * @generated from field: string deviceregistry_url = 3;
   */
  deviceregistryUrl: string;
};

/**
 * Describes the message io.clbs.openhes.pbdriveroperator.StartUpgradeRequest.
 * Use `create(StartUpgradeRequestSchema)` to create a new message.
 */
export const StartUpgradeRequestSchema: GenMessage<StartUpgradeRequest> = /*@__PURE__*/
  messageDesc(file_pbdriveroperator_models, 2);

/**
 * API -> Taskmaster request to get driver templates
 *
 * @generated from message io.clbs.openhes.pbdriveroperator.GetDriverTemplatesRequest
 */
export type GetDriverTemplatesRequest = Message<"io.clbs.openhes.pbdriveroperator.GetDriverTemplatesRequest"> & {
  /**
   * The driver unique identifier.
   *
   * @generated from field: string driver_type = 1;
   */
  driverType: string;
};

/**
 * Describes the message io.clbs.openhes.pbdriveroperator.GetDriverTemplatesRequest.
 * Use `create(GetDriverTemplatesRequestSchema)` to create a new message.
 */
export const GetDriverTemplatesRequestSchema: GenMessage<GetDriverTemplatesRequest> = /*@__PURE__*/
  messageDesc(file_pbdriveroperator_models, 3);

/**
 * Sub-message containing driver info
 *
 * @generated from message io.clbs.openhes.pbdriveroperator.DriverInfo
 */
export type DriverInfo = Message<"io.clbs.openhes.pbdriveroperator.DriverInfo"> & {
  /**
   * The driver unique identifier.
   *
   * @generated from field: string driver_type = 1;
   */
  driverType: string;

  /**
   * The version of the driver.
   *
   * @generated from field: string version = 2;
   */
  version: string;
};

/**
 * Describes the message io.clbs.openhes.pbdriveroperator.DriverInfo.
 * Use `create(DriverInfoSchema)` to create a new message.
 */
export const DriverInfoSchema: GenMessage<DriverInfo> = /*@__PURE__*/
  messageDesc(file_pbdriveroperator_models, 4);

/**
 * Taskmaster -> API get drivers response message
 *
 * @generated from message io.clbs.openhes.pbdriveroperator.GetDriversResponse
 */
export type GetDriversResponse = Message<"io.clbs.openhes.pbdriveroperator.GetDriversResponse"> & {
  /**
   * The result of the operation.
   *
   * @generated from field: io.clbs.openhes.pbdriver.ErrorCode result = 1;
   */
  result: ErrorCode;

  /**
   * The list of drivers.
   *
   * @generated from field: repeated io.clbs.openhes.pbdriveroperator.DriverInfo drivers = 2;
   */
  drivers: DriverInfo[];
};

/**
 * Describes the message io.clbs.openhes.pbdriveroperator.GetDriversResponse.
 * Use `create(GetDriversResponseSchema)` to create a new message.
 */
export const GetDriversResponseSchema: GenMessage<GetDriversResponse> = /*@__PURE__*/
  messageDesc(file_pbdriveroperator_models, 5);

