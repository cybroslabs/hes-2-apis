// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file pbtaskmaster-models.proto (package io.clbs.openhes.pbtaskmaster, edition 2023)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { ActionData, ActionResultCode, ApplicationProtocol, AttributeValue, ConnectionInfo, JobAction, JobErrorCode, JobSettings } from "./pbdriver-models_pb";
import { file_pbdriver_models } from "./pbdriver-models_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file pbtaskmaster-models.proto.
 */
export const file_pbtaskmaster_models: GenFile = /*@__PURE__*/
  fileDesc("ChlwYnRhc2ttYXN0ZXItbW9kZWxzLnByb3RvEhxpby5jbGJzLm9wZW5oZXMucGJ0YXNrbWFzdGVyImkKEFN0cmVhbUV2ZW50c0RhdGESTQoIam9iX2RvbmUYASABKAsyOS5pby5jbGJzLm9wZW5oZXMucGJ0YXNrbWFzdGVyLlN0cmVhbUV2ZW50c0RhdGFKb2JGaW5pc2hlZEgAQgYKBGRhdGEiLQobU3RyZWFtRXZlbnRzRGF0YUpvYkZpbmlzaGVkEg4KBmpvYl9pZBgBIAEoCSJXCg9DYWNoZVNldFJlcXVlc3QSCwoDa2V5GAEgASgJEjcKBXZhbHVlGAIgASgLMiguaW8uY2xicy5vcGVuaGVzLnBiZHJpdmVyLkF0dHJpYnV0ZVZhbHVlIh4KD0NhY2hlR2V0UmVxdWVzdBILCgNrZXkYASABKAkiSwoQQ2FjaGVHZXRSZXNwb25zZRI3CgV2YWx1ZRgCIAEoCzIoLmlvLmNsYnMub3Blbmhlcy5wYmRyaXZlci5BdHRyaWJ1dGVWYWx1ZSIjChFDYW5jZWxKb2JzUmVxdWVzdBIOCgZqb2JfaWQYASADKAkiRwoQUXVldWVKb2JzUmVxdWVzdBIzCgRzcGVjGAEgAygLMiUuaW8uY2xicy5vcGVuaGVzLnBidGFza21hc3Rlci5Kb2JTcGVjIs4BCgdKb2JTcGVjEjcKBmRldmljZRgCIAEoCzInLmlvLmNsYnMub3Blbmhlcy5wYnRhc2ttYXN0ZXIuSm9iRGV2aWNlEjsKDGpvYl9zZXR0aW5ncxgDIAEoCzIlLmlvLmNsYnMub3Blbmhlcy5wYmRyaXZlci5Kb2JTZXR0aW5ncxITCgtkcml2ZXJfdHlwZRgEIAEoCRI4Cgtqb2JfYWN0aW9ucxgFIAMoCzIjLmlvLmNsYnMub3Blbmhlcy5wYmRyaXZlci5Kb2JBY3Rpb24ilgMKCUpvYkRldmljZRIKCgJpZBgBIAEoCRIRCglkZXZpY2VfaWQYAiABKAkSEwoLZXh0ZXJuYWxfaWQYAyABKAkSWAoRZGV2aWNlX2F0dHJpYnV0ZXMYBCADKAsyPS5pby5jbGJzLm9wZW5oZXMucGJ0YXNrbWFzdGVyLkpvYkRldmljZS5EZXZpY2VBdHRyaWJ1dGVzRW50cnkSQQoPY29ubmVjdGlvbl9pbmZvGAUgAygLMiguaW8uY2xicy5vcGVuaGVzLnBiZHJpdmVyLkNvbm5lY3Rpb25JbmZvEkMKDGFwcF9wcm90b2NvbBgGIAEoDjItLmlvLmNsYnMub3Blbmhlcy5wYmRyaXZlci5BcHBsaWNhdGlvblByb3RvY29sEhAKCHRpbWV6b25lGAcgASgJGmEKFURldmljZUF0dHJpYnV0ZXNFbnRyeRILCgNrZXkYASABKAkSNwoFdmFsdWUYAiABKAsyKC5pby5jbGJzLm9wZW5oZXMucGJkcml2ZXIuQXR0cmlidXRlVmFsdWU6AjgBIh8KDUdldEpvYlJlcXVlc3QSDgoGam9iX2lkGAEgASgJIkkKDkdldEpvYlJlc3BvbnNlEjcKBnN0YXR1cxgBIAEoCzInLmlvLmNsYnMub3Blbmhlcy5wYnRhc2ttYXN0ZXIuSm9iU3RhdHVzIoMBChNKb2JEb25lTm90aWZpY2F0aW9uEjMKBHNwZWMYASABKAsyJS5pby5jbGJzLm9wZW5oZXMucGJ0YXNrbWFzdGVyLkpvYlNwZWMSNwoGc3RhdHVzGAIgASgLMicuaW8uY2xicy5vcGVuaGVzLnBidGFza21hc3Rlci5Kb2JTdGF0dXMi4wIKCUpvYlN0YXR1cxI7CgZzdGF0dXMYASABKA4yKy5pby5jbGJzLm9wZW5oZXMucGJ0YXNrbWFzdGVyLkpvYlN0YXR1c0NvZGUSNAoEY29kZRgCIAEoDjImLmlvLmNsYnMub3Blbmhlcy5wYmRyaXZlci5Kb2JFcnJvckNvZGUSOwoHcmVzdWx0cxgDIAMoCzIqLmlvLmNsYnMub3Blbmhlcy5wYnRhc2ttYXN0ZXIuQWN0aW9uUmVzdWx0Ei4KCmNyZWF0ZWRfYXQYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi4KCnN0YXJ0ZWRfYXQYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi8KC2ZpbmlzaGVkX2F0GAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIVCg1hdHRlbXB0c19kb25lGAcgASgFIpEBCgxBY3Rpb25SZXN1bHQSEQoJYWN0aW9uX2lkGAEgASgJEjoKBnN0YXR1cxgCIAEoDjIqLmlvLmNsYnMub3Blbmhlcy5wYmRyaXZlci5BY3Rpb25SZXN1bHRDb2RlEjIKBGRhdGEYAyABKAsyJC5pby5jbGJzLm9wZW5oZXMucGJkcml2ZXIuQWN0aW9uRGF0YSJkCgxTeXN0ZW1Db25maWcSFAoMbWF4X3JlcGxpY2FzGAEgASgFEiAKGG1heF9jYXNjYWRlX2RldmljZV9jb3VudBgCIAEoBRIcChRtYXhfc2xvdHNfcGVyX2RyaXZlchgDIAEoBSIeCgxKb2JFdmVudERhdGESDgoGam9iX2lkGAEgASgMKqEBCg1Kb2JTdGF0dXNDb2RlEhUKEUpPQl9TVEFUVVNfUVVFVUVEEAASFgoSSk9CX1NUQVRVU19SVU5OSU5HEAESGAoUSk9CX1NUQVRVU19DT01QTEVURUQQAhIVChFKT0JfU1RBVFVTX0ZBSUxFRBADEhgKFEpPQl9TVEFUVVNfQ0FOQ0VMTEVEEAQSFgoSSk9CX1NUQVRVU19FWFBJUkVEEAVCPlo8Z2l0aHViLmNvbS9jeWJyb3NsYWJzL2hlcy0yLWFwaXMvcHJvdG9idWYvcGJ0YXNrbWFzdGVybW9kZWxzYghlZGl0aW9uc3DoBw", [file_google_protobuf_empty, file_google_protobuf_timestamp, file_pbdriver_models]);

/**
 * Taskmaster -> Dataproxy event message
 *
 * @generated from message io.clbs.openhes.pbtaskmaster.StreamEventsData
 */
export type StreamEventsData = Message<"io.clbs.openhes.pbtaskmaster.StreamEventsData"> & {
  /**
   * @generated from oneof io.clbs.openhes.pbtaskmaster.StreamEventsData.data
   */
  data: {
    /**
     * @generated from field: io.clbs.openhes.pbtaskmaster.StreamEventsDataJobFinished job_done = 1;
     */
    value: StreamEventsDataJobFinished;
    case: "jobDone";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message io.clbs.openhes.pbtaskmaster.StreamEventsData.
 * Use `create(StreamEventsDataSchema)` to create a new message.
 */
export const StreamEventsDataSchema: GenMessage<StreamEventsData> = /*@__PURE__*/
  messageDesc(file_pbtaskmaster_models, 0);

/**
 * Sub-message - job-finished event data
 *
 * @generated from message io.clbs.openhes.pbtaskmaster.StreamEventsDataJobFinished
 */
export type StreamEventsDataJobFinished = Message<"io.clbs.openhes.pbtaskmaster.StreamEventsDataJobFinished"> & {
  /**
   * @generated from field: string job_id = 1;
   */
  jobId: string;
};

/**
 * Describes the message io.clbs.openhes.pbtaskmaster.StreamEventsDataJobFinished.
 * Use `create(StreamEventsDataJobFinishedSchema)` to create a new message.
 */
export const StreamEventsDataJobFinishedSchema: GenMessage<StreamEventsDataJobFinished> = /*@__PURE__*/
  messageDesc(file_pbtaskmaster_models, 1);

/**
 * Driver -> Taskmaster cache set request message
 *
 * @generated from message io.clbs.openhes.pbtaskmaster.CacheSetRequest
 */
export type CacheSetRequest = Message<"io.clbs.openhes.pbtaskmaster.CacheSetRequest"> & {
  /**
   * The key of the cache entry. The key is unique within the driver type.
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * The value of the cache entry.
   *
   * @generated from field: io.clbs.openhes.pbdriver.AttributeValue value = 2;
   */
  value?: AttributeValue;
};

/**
 * Describes the message io.clbs.openhes.pbtaskmaster.CacheSetRequest.
 * Use `create(CacheSetRequestSchema)` to create a new message.
 */
export const CacheSetRequestSchema: GenMessage<CacheSetRequest> = /*@__PURE__*/
  messageDesc(file_pbtaskmaster_models, 2);

/**
 * Driver -> Taskmaster cache get request message
 *
 * @generated from message io.clbs.openhes.pbtaskmaster.CacheGetRequest
 */
export type CacheGetRequest = Message<"io.clbs.openhes.pbtaskmaster.CacheGetRequest"> & {
  /**
   * The key of the cache entry. The key is unique within the driver type.
   *
   * @generated from field: string key = 1;
   */
  key: string;
};

/**
 * Describes the message io.clbs.openhes.pbtaskmaster.CacheGetRequest.
 * Use `create(CacheGetRequestSchema)` to create a new message.
 */
export const CacheGetRequestSchema: GenMessage<CacheGetRequest> = /*@__PURE__*/
  messageDesc(file_pbtaskmaster_models, 3);

/**
 * Taskmaster -> Driver cache get response message
 *
 * @generated from message io.clbs.openhes.pbtaskmaster.CacheGetResponse
 */
export type CacheGetResponse = Message<"io.clbs.openhes.pbtaskmaster.CacheGetResponse"> & {
  /**
   * The value of the cache entry.
   *
   * @generated from field: io.clbs.openhes.pbdriver.AttributeValue value = 2;
   */
  value?: AttributeValue;
};

/**
 * Describes the message io.clbs.openhes.pbtaskmaster.CacheGetResponse.
 * Use `create(CacheGetResponseSchema)` to create a new message.
 */
export const CacheGetResponseSchema: GenMessage<CacheGetResponse> = /*@__PURE__*/
  messageDesc(file_pbtaskmaster_models, 4);

/**
 * API -> Taskmaster cancel job request message
 *
 * @generated from message io.clbs.openhes.pbtaskmaster.CancelJobsRequest
 */
export type CancelJobsRequest = Message<"io.clbs.openhes.pbtaskmaster.CancelJobsRequest"> & {
  /**
   * The job identifier.
   *
   * @generated from field: repeated string job_id = 1;
   */
  jobId: string[];
};

/**
 * Describes the message io.clbs.openhes.pbtaskmaster.CancelJobsRequest.
 * Use `create(CancelJobsRequestSchema)` to create a new message.
 */
export const CancelJobsRequestSchema: GenMessage<CancelJobsRequest> = /*@__PURE__*/
  messageDesc(file_pbtaskmaster_models, 5);

/**
 * API -> Taskmaster queue jobs request message
 *
 * @generated from message io.clbs.openhes.pbtaskmaster.QueueJobsRequest
 */
export type QueueJobsRequest = Message<"io.clbs.openhes.pbtaskmaster.QueueJobsRequest"> & {
  /**
   * The list of jobs to be queued.
   *
   * @generated from field: repeated io.clbs.openhes.pbtaskmaster.JobSpec spec = 1;
   */
  spec: JobSpec[];
};

/**
 * Describes the message io.clbs.openhes.pbtaskmaster.QueueJobsRequest.
 * Use `create(QueueJobsRequestSchema)` to create a new message.
 */
export const QueueJobsRequestSchema: GenMessage<QueueJobsRequest> = /*@__PURE__*/
  messageDesc(file_pbtaskmaster_models, 6);

/**
 * Sub-message - job specification
 *
 * @generated from message io.clbs.openhes.pbtaskmaster.JobSpec
 */
export type JobSpec = Message<"io.clbs.openhes.pbtaskmaster.JobSpec"> & {
  /**
   * The device info.
   *
   * @generated from field: io.clbs.openhes.pbtaskmaster.JobDevice device = 2;
   */
  device?: JobDevice;

  /**
   * The job parameters.
   *
   * @generated from field: io.clbs.openhes.pbdriver.JobSettings job_settings = 3;
   */
  jobSettings?: JobSettings;

  /**
   * The device (driver) type.
   *
   * @generated from field: string driver_type = 4;
   */
  driverType: string;

  /**
   * The list actions to be executed.
   *
   * @generated from field: repeated io.clbs.openhes.pbdriver.JobAction job_actions = 5;
   */
  jobActions: JobAction[];
};

/**
 * Describes the message io.clbs.openhes.pbtaskmaster.JobSpec.
 * Use `create(JobSpecSchema)` to create a new message.
 */
export const JobSpecSchema: GenMessage<JobSpec> = /*@__PURE__*/
  messageDesc(file_pbtaskmaster_models, 7);

/**
 * Sub-message representing a single device info.
 *
 * @generated from message io.clbs.openhes.pbtaskmaster.JobDevice
 */
export type JobDevice = Message<"io.clbs.openhes.pbtaskmaster.JobDevice"> & {
  /**
   * The device (job) identifier.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The device identifier. If set then all below is loaded from the device registry.
   *
   * @generated from field: string device_id = 2;
   */
  deviceId: string;

  /**
   * The external identifier.
   *
   * @generated from field: string external_id = 3;
   */
  externalId: string;

  /**
   * The connection attributes to the device.
   *
   * @generated from field: map<string, io.clbs.openhes.pbdriver.AttributeValue> device_attributes = 4;
   */
  deviceAttributes: { [key: string]: AttributeValue };

  /**
   * The conenction (device) parameters.
   *
   * @generated from field: repeated io.clbs.openhes.pbdriver.ConnectionInfo connection_info = 5;
   */
  connectionInfo: ConnectionInfo[];

  /**
   * The application protocol.
   *
   * @generated from field: io.clbs.openhes.pbdriver.ApplicationProtocol app_protocol = 6;
   */
  appProtocol: ApplicationProtocol;

  /**
   * The timezone related to the device, e.g. "America/New_York", "Europe/Prague", "CET", "GMT", "Etc/GMT+2".
   *
   * @generated from field: string timezone = 7;
   */
  timezone: string;
};

/**
 * Describes the message io.clbs.openhes.pbtaskmaster.JobDevice.
 * Use `create(JobDeviceSchema)` to create a new message.
 */
export const JobDeviceSchema: GenMessage<JobDevice> = /*@__PURE__*/
  messageDesc(file_pbtaskmaster_models, 8);

/**
 * Dataproxy -> Taskmaster get job request message
 *
 * @generated from message io.clbs.openhes.pbtaskmaster.GetJobRequest
 */
export type GetJobRequest = Message<"io.clbs.openhes.pbtaskmaster.GetJobRequest"> & {
  /**
   * The job identifier.
   *
   * @generated from field: string job_id = 1;
   */
  jobId: string;
};

/**
 * Describes the message io.clbs.openhes.pbtaskmaster.GetJobRequest.
 * Use `create(GetJobRequestSchema)` to create a new message.
 */
export const GetJobRequestSchema: GenMessage<GetJobRequest> = /*@__PURE__*/
  messageDesc(file_pbtaskmaster_models, 9);

/**
 * Taskmaster -> API get job response message
 *
 * @generated from message io.clbs.openhes.pbtaskmaster.GetJobResponse
 */
export type GetJobResponse = Message<"io.clbs.openhes.pbtaskmaster.GetJobResponse"> & {
  /**
   * The status of the job
   *
   * @generated from field: io.clbs.openhes.pbtaskmaster.JobStatus status = 1;
   */
  status?: JobStatus;
};

/**
 * Describes the message io.clbs.openhes.pbtaskmaster.GetJobResponse.
 * Use `create(GetJobResponseSchema)` to create a new message.
 */
export const GetJobResponseSchema: GenMessage<GetJobResponse> = /*@__PURE__*/
  messageDesc(file_pbtaskmaster_models, 10);

/**
 * Message used to notify DP that the job is done, sent by Taskmaster
 *
 * @generated from message io.clbs.openhes.pbtaskmaster.JobDoneNotification
 */
export type JobDoneNotification = Message<"io.clbs.openhes.pbtaskmaster.JobDoneNotification"> & {
  /**
   * The job specification.
   *
   * @generated from field: io.clbs.openhes.pbtaskmaster.JobSpec spec = 1;
   */
  spec?: JobSpec;

  /**
   * The status of the job
   *
   * @generated from field: io.clbs.openhes.pbtaskmaster.JobStatus status = 2;
   */
  status?: JobStatus;
};

/**
 * Describes the message io.clbs.openhes.pbtaskmaster.JobDoneNotification.
 * Use `create(JobDoneNotificationSchema)` to create a new message.
 */
export const JobDoneNotificationSchema: GenMessage<JobDoneNotification> = /*@__PURE__*/
  messageDesc(file_pbtaskmaster_models, 11);

/**
 * Sub-message containing job status info
 *
 * @generated from message io.clbs.openhes.pbtaskmaster.JobStatus
 */
export type JobStatus = Message<"io.clbs.openhes.pbtaskmaster.JobStatus"> & {
  /**
   * The status of the job.
   *
   * @generated from field: io.clbs.openhes.pbtaskmaster.JobStatusCode status = 1;
   */
  status: JobStatusCode;

  /**
   * The error code of the job.
   *
   * @generated from field: io.clbs.openhes.pbdriver.JobErrorCode code = 2;
   */
  code: JobErrorCode;

  /**
   * The result data for all job actions.
   *
   * @generated from field: repeated io.clbs.openhes.pbtaskmaster.ActionResult results = 3;
   */
  results: ActionResult[];

  /**
   * The creation timestamp of the job.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  /**
   * The start timestamp of the job.
   *
   * @generated from field: google.protobuf.Timestamp started_at = 5;
   */
  startedAt?: Timestamp;

  /**
   * The finish timestamp of the job.
   *
   * @generated from field: google.protobuf.Timestamp finished_at = 6;
   */
  finishedAt?: Timestamp;

  /**
   * The number of attempts already done.
   *
   * @generated from field: int32 attempts_done = 7;
   */
  attemptsDone: number;
};

/**
 * Describes the message io.clbs.openhes.pbtaskmaster.JobStatus.
 * Use `create(JobStatusSchema)` to create a new message.
 */
export const JobStatusSchema: GenMessage<JobStatus> = /*@__PURE__*/
  messageDesc(file_pbtaskmaster_models, 12);

/**
 * Sub-message containing action result for a single action.
 *
 * @generated from message io.clbs.openhes.pbtaskmaster.ActionResult
 */
export type ActionResult = Message<"io.clbs.openhes.pbtaskmaster.ActionResult"> & {
  /**
   * The action identifier.
   *
   * @generated from field: string action_id = 1;
   */
  actionId: string;

  /**
   * The status of the action.
   *
   * @generated from field: io.clbs.openhes.pbdriver.ActionResultCode status = 2;
   */
  status: ActionResultCode;

  /**
   * The action result data.
   *
   * @generated from field: io.clbs.openhes.pbdriver.ActionData data = 3;
   */
  data?: ActionData;
};

/**
 * Describes the message io.clbs.openhes.pbtaskmaster.ActionResult.
 * Use `create(ActionResultSchema)` to create a new message.
 */
export const ActionResultSchema: GenMessage<ActionResult> = /*@__PURE__*/
  messageDesc(file_pbtaskmaster_models, 13);

/**
 * API <-> Taskmaster request/response for system configuration
 *
 * @generated from message io.clbs.openhes.pbtaskmaster.SystemConfig
 */
export type SystemConfig = Message<"io.clbs.openhes.pbtaskmaster.SystemConfig"> & {
  /**
   * The maximum number of replicas for the driver.
   *    0 represents no active replicas will run, effectively disabling acquisition
   *   >0 represents the maximum number of replicas per driver
   *
   * @generated from field: int32 max_replicas = 1;
   */
  maxReplicas: number;

  /**
   * The maximum number of cascade devices for the driver. Minimum is 1.
   *
   * @generated from field: int32 max_cascade_device_count = 2;
   */
  maxCascadeDeviceCount: number;

  /**
   * The maximum number of slots per driver
   *   -1 represents unlimited number of slots, effecticaly using maximum number of slots supported by driver
   *    0 represents no active slots will run, effectively disabling acquisition
   *   >0 represents the maximum number of slots per driver, the number of slots never exceeds the number of slots supported by driver
   *
   * @generated from field: int32 max_slots_per_driver = 3;
   */
  maxSlotsPerDriver: number;
};

/**
 * Describes the message io.clbs.openhes.pbtaskmaster.SystemConfig.
 * Use `create(SystemConfigSchema)` to create a new message.
 */
export const SystemConfigSchema: GenMessage<SystemConfig> = /*@__PURE__*/
  messageDesc(file_pbtaskmaster_models, 14);

/**
 * Taskmaster -> Dataproxy job/action progress update message
 *
 * @generated from message io.clbs.openhes.pbtaskmaster.JobEventData
 */
export type JobEventData = Message<"io.clbs.openhes.pbtaskmaster.JobEventData"> & {
  /**
   * The job identifier.
   *
   * @generated from field: bytes job_id = 1;
   */
  jobId: Uint8Array;
};

/**
 * Describes the message io.clbs.openhes.pbtaskmaster.JobEventData.
 * Use `create(JobEventDataSchema)` to create a new message.
 */
export const JobEventDataSchema: GenMessage<JobEventData> = /*@__PURE__*/
  messageDesc(file_pbtaskmaster_models, 15);

/**
 * Job statuses
 *
 * @generated from enum io.clbs.openhes.pbtaskmaster.JobStatusCode
 */
export enum JobStatusCode {
  /**
   * The job is waiting in the queue
   *
   * @generated from enum value: JOB_STATUS_QUEUED = 0;
   */
  JOB_STATUS_QUEUED = 0,

  /**
   * The job is running
   *
   * @generated from enum value: JOB_STATUS_RUNNING = 1;
   */
  JOB_STATUS_RUNNING = 1,

  /**
   * The job is completed
   *
   * @generated from enum value: JOB_STATUS_COMPLETED = 2;
   */
  JOB_STATUS_COMPLETED = 2,

  /**
   * The job is failed
   *
   * @generated from enum value: JOB_STATUS_FAILED = 3;
   */
  JOB_STATUS_FAILED = 3,

  /**
   * The job is cancelled
   *
   * @generated from enum value: JOB_STATUS_CANCELLED = 4;
   */
  JOB_STATUS_CANCELLED = 4,

  /**
   * The job has expired
   *
   * @generated from enum value: JOB_STATUS_EXPIRED = 5;
   */
  JOB_STATUS_EXPIRED = 5,
}

/**
 * Describes the enum io.clbs.openhes.pbtaskmaster.JobStatusCode.
 */
export const JobStatusCodeSchema: GenEnum<JobStatusCode> = /*@__PURE__*/
  enumDesc(file_pbtaskmaster_models, 0);

