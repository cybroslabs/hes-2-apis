// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.1
// source: pbdriveroperator.proto

package pbdriveroperator

import (
	pbdriver "github.com/cybroslabs/hes-2-apis/protobuf/pbdriver"
	pbtaskmaster "github.com/cybroslabs/hes-2-apis/protobuf/pbtaskmaster"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Taskmaster -> Driver Operator driver-scale change request message
type SetDriverScaleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverType    string `protobuf:"bytes,1,opt,name=driver_type,json=driverType,proto3" json:"driver_type,omitempty"`          // The driver unique identifier.
	Replicas      uint32 `protobuf:"varint,2,opt,name=replicas,proto3" json:"replicas,omitempty"`                               // The number of replicas to scale to.
	TaskmasterUrl string `protobuf:"bytes,3,opt,name=taskmaster_url,json=taskmasterUrl,proto3" json:"taskmaster_url,omitempty"` // The URL of the Taskmaster service the driver shall connect to.
}

func (x *SetDriverScaleRequest) Reset() {
	*x = SetDriverScaleRequest{}
	mi := &file_pbdriveroperator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDriverScaleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDriverScaleRequest) ProtoMessage() {}

func (x *SetDriverScaleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriveroperator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDriverScaleRequest.ProtoReflect.Descriptor instead.
func (*SetDriverScaleRequest) Descriptor() ([]byte, []int) {
	return file_pbdriveroperator_proto_rawDescGZIP(), []int{0}
}

func (x *SetDriverScaleRequest) GetDriverType() string {
	if x != nil {
		return x.DriverType
	}
	return ""
}

func (x *SetDriverScaleRequest) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *SetDriverScaleRequest) GetTaskmasterUrl() string {
	if x != nil {
		return x.TaskmasterUrl
	}
	return ""
}

// Taskmaster -> Driver Operator get driver-scale message
type GetDriverScaleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverType string `protobuf:"bytes,1,opt,name=driver_type,json=driverType,proto3" json:"driver_type,omitempty"` // The driver unique identifier.
	Replicas   uint32 `protobuf:"varint,2,opt,name=replicas,proto3" json:"replicas,omitempty"`                      // The number of replicas to scale to.
}

func (x *GetDriverScaleRequest) Reset() {
	*x = GetDriverScaleRequest{}
	mi := &file_pbdriveroperator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDriverScaleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDriverScaleRequest) ProtoMessage() {}

func (x *GetDriverScaleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriveroperator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDriverScaleRequest.ProtoReflect.Descriptor instead.
func (*GetDriverScaleRequest) Descriptor() ([]byte, []int) {
	return file_pbdriveroperator_proto_rawDescGZIP(), []int{1}
}

func (x *GetDriverScaleRequest) GetDriverType() string {
	if x != nil {
		return x.DriverType
	}
	return ""
}

func (x *GetDriverScaleRequest) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

type StartUpgradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriverType        string `protobuf:"bytes,1,opt,name=driver_type,json=driverType,proto3" json:"driver_type,omitempty"`                      // The driver unique identifier.
	DriverVersion     string `protobuf:"bytes,2,opt,name=driver_version,json=driverVersion,proto3" json:"driver_version,omitempty"`             // The driver version to be started. It must be a valid version of the driver and should be exactly +1 against the version of the data to be upgraded; or the major version can be +1 if current data version is the latest possible minor version.
	DeviceregistryUrl string `protobuf:"bytes,3,opt,name=deviceregistry_url,json=deviceregistryUrl,proto3" json:"deviceregistry_url,omitempty"` // The URL of the DeviceRegistry service the driver shall connect to.
}

func (x *StartUpgradeRequest) Reset() {
	*x = StartUpgradeRequest{}
	mi := &file_pbdriveroperator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartUpgradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartUpgradeRequest) ProtoMessage() {}

func (x *StartUpgradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbdriveroperator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartUpgradeRequest.ProtoReflect.Descriptor instead.
func (*StartUpgradeRequest) Descriptor() ([]byte, []int) {
	return file_pbdriveroperator_proto_rawDescGZIP(), []int{2}
}

func (x *StartUpgradeRequest) GetDriverType() string {
	if x != nil {
		return x.DriverType
	}
	return ""
}

func (x *StartUpgradeRequest) GetDriverVersion() string {
	if x != nil {
		return x.DriverVersion
	}
	return ""
}

func (x *StartUpgradeRequest) GetDeviceregistryUrl() string {
	if x != nil {
		return x.DeviceregistryUrl
	}
	return ""
}

var File_pbdriveroperator_proto protoreflect.FileDescriptor

var file_pbdriveroperator_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x15, 0x53,
	0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x22, 0x54, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x8c,
	0x01, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x32, 0x94, 0x04,
	0x0a, 0x15, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x78, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x0e, 0x53, 0x65, 0x74,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53,
	0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x37,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x79, 0x62, 0x72, 0x6f, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x68, 0x65,
	0x73, 0x2d, 0x32, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbdriveroperator_proto_rawDescOnce sync.Once
	file_pbdriveroperator_proto_rawDescData = file_pbdriveroperator_proto_rawDesc
)

func file_pbdriveroperator_proto_rawDescGZIP() []byte {
	file_pbdriveroperator_proto_rawDescOnce.Do(func() {
		file_pbdriveroperator_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbdriveroperator_proto_rawDescData)
	})
	return file_pbdriveroperator_proto_rawDescData
}

var file_pbdriveroperator_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pbdriveroperator_proto_goTypes = []any{
	(*SetDriverScaleRequest)(nil),                  // 0: io.clbs.openhes.pbdriveroperator.SetDriverScaleRequest
	(*GetDriverScaleRequest)(nil),                  // 1: io.clbs.openhes.pbdriveroperator.GetDriverScaleRequest
	(*StartUpgradeRequest)(nil),                    // 2: io.clbs.openhes.pbdriveroperator.StartUpgradeRequest
	(*emptypb.Empty)(nil),                          // 3: google.protobuf.Empty
	(*pbtaskmaster.GetDriverTemplatesRequest)(nil), // 4: io.clbs.openhes.pbtaskmaster.GetDriverTemplatesRequest
	(*pbtaskmaster.GetDriversResponse)(nil),        // 5: io.clbs.openhes.pbtaskmaster.GetDriversResponse
	(*pbdriver.DriverTemplates)(nil),               // 6: io.clbs.openhes.pbdriver.DriverTemplates
	(*wrapperspb.UInt32Value)(nil),                 // 7: google.protobuf.UInt32Value
}
var file_pbdriveroperator_proto_depIdxs = []int32{
	3, // 0: io.clbs.openhes.pbdriveroperator.DriverOperatorService.GetDrivers:input_type -> google.protobuf.Empty
	4, // 1: io.clbs.openhes.pbdriveroperator.DriverOperatorService.GetDriverTemplates:input_type -> io.clbs.openhes.pbtaskmaster.GetDriverTemplatesRequest
	0, // 2: io.clbs.openhes.pbdriveroperator.DriverOperatorService.SetDriverScale:input_type -> io.clbs.openhes.pbdriveroperator.SetDriverScaleRequest
	1, // 3: io.clbs.openhes.pbdriveroperator.DriverOperatorService.GetDriverScale:input_type -> io.clbs.openhes.pbdriveroperator.GetDriverScaleRequest
	2, // 4: io.clbs.openhes.pbdriveroperator.DriverOperatorService.StartUpgrade:input_type -> io.clbs.openhes.pbdriveroperator.StartUpgradeRequest
	5, // 5: io.clbs.openhes.pbdriveroperator.DriverOperatorService.GetDrivers:output_type -> io.clbs.openhes.pbtaskmaster.GetDriversResponse
	6, // 6: io.clbs.openhes.pbdriveroperator.DriverOperatorService.GetDriverTemplates:output_type -> io.clbs.openhes.pbdriver.DriverTemplates
	3, // 7: io.clbs.openhes.pbdriveroperator.DriverOperatorService.SetDriverScale:output_type -> google.protobuf.Empty
	7, // 8: io.clbs.openhes.pbdriveroperator.DriverOperatorService.GetDriverScale:output_type -> google.protobuf.UInt32Value
	3, // 9: io.clbs.openhes.pbdriveroperator.DriverOperatorService.StartUpgrade:output_type -> google.protobuf.Empty
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pbdriveroperator_proto_init() }
func file_pbdriveroperator_proto_init() {
	if File_pbdriveroperator_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbdriveroperator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pbdriveroperator_proto_goTypes,
		DependencyIndexes: file_pbdriveroperator_proto_depIdxs,
		MessageInfos:      file_pbdriveroperator_proto_msgTypes,
	}.Build()
	File_pbdriveroperator_proto = out.File
	file_pbdriveroperator_proto_rawDesc = nil
	file_pbdriveroperator_proto_goTypes = nil
	file_pbdriveroperator_proto_depIdxs = nil
}
