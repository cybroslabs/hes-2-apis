// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: common/fields.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The filter operator.
type FilterOperator int32

const (
	FilterOperator_EQUAL                 FilterOperator = 0  // Single operand operator for text, integer, number, boolean fields.
	FilterOperator_NOT_EQUAL             FilterOperator = 1  // Single operand operator for text, integer, number, boolean fields.
	FilterOperator_GREATER_THAN          FilterOperator = 2  // Single operand operator for integer, number fields.
	FilterOperator_GREATER_THAN_OR_EQUAL FilterOperator = 3  // Single operand operator for integer, number  fields.
	FilterOperator_LESS_THAN             FilterOperator = 4  // Single operand operator for integer, number fields.
	FilterOperator_LESS_THAN_OR_EQUAL    FilterOperator = 5  // Single operand operator for integer, number fields.
	FilterOperator_CONTAINS              FilterOperator = 6  // Single operand operator for text fields.
	FilterOperator_NOT_CONTAINS          FilterOperator = 7  // Single operand operator for text fields.
	FilterOperator_STARTS_WITH           FilterOperator = 8  // Single operand operator for text fields.
	FilterOperator_ENDS_WITH             FilterOperator = 9  // Single operand operator for text fields.
	FilterOperator_IN                    FilterOperator = 10 // Multiple operand operator for text, integer, number, boolean fields.
	FilterOperator_NOT_IN                FilterOperator = 11 // Multiple operand operator for text, integer, number, boolean fields.
	FilterOperator_BETWEEN               FilterOperator = 12 // Two operand operator for integer, number fields.
	FilterOperator_IS_NULL               FilterOperator = 13 // No operand operator.
	FilterOperator_IS_NOT_NULL           FilterOperator = 14 // No operand operator.
)

// Enum value maps for FilterOperator.
var (
	FilterOperator_name = map[int32]string{
		0:  "EQUAL",
		1:  "NOT_EQUAL",
		2:  "GREATER_THAN",
		3:  "GREATER_THAN_OR_EQUAL",
		4:  "LESS_THAN",
		5:  "LESS_THAN_OR_EQUAL",
		6:  "CONTAINS",
		7:  "NOT_CONTAINS",
		8:  "STARTS_WITH",
		9:  "ENDS_WITH",
		10: "IN",
		11: "NOT_IN",
		12: "BETWEEN",
		13: "IS_NULL",
		14: "IS_NOT_NULL",
	}
	FilterOperator_value = map[string]int32{
		"EQUAL":                 0,
		"NOT_EQUAL":             1,
		"GREATER_THAN":          2,
		"GREATER_THAN_OR_EQUAL": 3,
		"LESS_THAN":             4,
		"LESS_THAN_OR_EQUAL":    5,
		"CONTAINS":              6,
		"NOT_CONTAINS":          7,
		"STARTS_WITH":           8,
		"ENDS_WITH":             9,
		"IN":                    10,
		"NOT_IN":                11,
		"BETWEEN":               12,
		"IS_NULL":               13,
		"IS_NOT_NULL":           14,
	}
)

func (x FilterOperator) Enum() *FilterOperator {
	p := new(FilterOperator)
	*p = x
	return p
}

func (x FilterOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_common_fields_proto_enumTypes[0].Descriptor()
}

func (FilterOperator) Type() protoreflect.EnumType {
	return &file_common_fields_proto_enumTypes[0]
}

func (x FilterOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Enum representing the field data type.
type FieldDataType int32

const (
	FieldDataType_TEXT      FieldDataType = 0 // The text data type.
	FieldDataType_INTEGER   FieldDataType = 1 // The integer data type.
	FieldDataType_DOUBLE    FieldDataType = 2 // The double data type.
	FieldDataType_BOOLEAN   FieldDataType = 3 // The boolean data type.
	FieldDataType_TIMESTAMP FieldDataType = 4 // The timestamp data type.
	FieldDataType_BINARY    FieldDataType = 5 // The binary data type.
)

// Enum value maps for FieldDataType.
var (
	FieldDataType_name = map[int32]string{
		0: "TEXT",
		1: "INTEGER",
		2: "DOUBLE",
		3: "BOOLEAN",
		4: "TIMESTAMP",
		5: "BINARY",
	}
	FieldDataType_value = map[string]int32{
		"TEXT":      0,
		"INTEGER":   1,
		"DOUBLE":    2,
		"BOOLEAN":   3,
		"TIMESTAMP": 4,
		"BINARY":    5,
	}
)

func (x FieldDataType) Enum() *FieldDataType {
	p := new(FieldDataType)
	*p = x
	return p
}

func (x FieldDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_fields_proto_enumTypes[1].Descriptor()
}

func (FieldDataType) Type() protoreflect.EnumType {
	return &file_common_fields_proto_enumTypes[1]
}

func (x FieldDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Enum representing the field display format.
type FieldDisplayFormat int32

const (
	FieldDisplayFormat_DEFAULT   FieldDisplayFormat = 0 // The default display format.
	FieldDisplayFormat_DURATION  FieldDisplayFormat = 1 // The duration display format, e.g., 1h 30m. Data type must be integer or number; unit must be milliseconds.
	FieldDisplayFormat_INTERVAL  FieldDisplayFormat = 2 // The interval display format.
	FieldDisplayFormat_DATE      FieldDisplayFormat = 3 // The date display format with local timezone. Data type must be timestamp or string.
	FieldDisplayFormat_UTC_DATE  FieldDisplayFormat = 4 // The date display format with in UTC timezone. Data type must be timestamp or string.
	FieldDisplayFormat_MONTH     FieldDisplayFormat = 5 // The month display format.
	FieldDisplayFormat_DAYOFWEEK FieldDisplayFormat = 6 // The day of week display format.
	FieldDisplayFormat_TIMEOFDAY FieldDisplayFormat = 7 // The time of day display format.
	FieldDisplayFormat_MONEY     FieldDisplayFormat = 8 // The money display format.
)

// Enum value maps for FieldDisplayFormat.
var (
	FieldDisplayFormat_name = map[int32]string{
		0: "DEFAULT",
		1: "DURATION",
		2: "INTERVAL",
		3: "DATE",
		4: "UTC_DATE",
		5: "MONTH",
		6: "DAYOFWEEK",
		7: "TIMEOFDAY",
		8: "MONEY",
	}
	FieldDisplayFormat_value = map[string]int32{
		"DEFAULT":   0,
		"DURATION":  1,
		"INTERVAL":  2,
		"DATE":      3,
		"UTC_DATE":  4,
		"MONTH":     5,
		"DAYOFWEEK": 6,
		"TIMEOFDAY": 7,
		"MONEY":     8,
	}
)

func (x FieldDisplayFormat) Enum() *FieldDisplayFormat {
	p := new(FieldDisplayFormat)
	*p = x
	return p
}

func (x FieldDisplayFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldDisplayFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_common_fields_proto_enumTypes[2].Descriptor()
}

func (FieldDisplayFormat) Type() protoreflect.EnumType {
	return &file_common_fields_proto_enumTypes[2]
}

func (x FieldDisplayFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// The listing selector.
type ListSelector struct {
	state                  protoimpl.MessageState   `protogen:"opaque.v1"`
	xxx_hidden_PageSize    uint32                   `protobuf:"varint,1,opt,name=page_size,json=pageSize"`
	xxx_hidden_Offset      uint32                   `protobuf:"varint,2,opt,name=offset"`
	xxx_hidden_SortBy      *[]*ListSelectorSortBy   `protobuf:"bytes,3,rep,name=sort_by,json=sortBy"`
	xxx_hidden_FilterBy    *[]*ListSelectorFilterBy `protobuf:"bytes,4,rep,name=filter_by,json=filterBy"`
	xxx_hidden_Fields      []string                 `protobuf:"bytes,5,rep,name=fields"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ListSelector) Reset() {
	*x = ListSelector{}
	mi := &file_common_fields_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelector) ProtoMessage() {}

func (x *ListSelector) ProtoReflect() protoreflect.Message {
	mi := &file_common_fields_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListSelector) GetPageSize() uint32 {
	if x != nil {
		return x.xxx_hidden_PageSize
	}
	return 0
}

func (x *ListSelector) GetOffset() uint32 {
	if x != nil {
		return x.xxx_hidden_Offset
	}
	return 0
}

func (x *ListSelector) GetSortBy() []*ListSelectorSortBy {
	if x != nil {
		if x.xxx_hidden_SortBy != nil {
			return *x.xxx_hidden_SortBy
		}
	}
	return nil
}

func (x *ListSelector) GetFilterBy() []*ListSelectorFilterBy {
	if x != nil {
		if x.xxx_hidden_FilterBy != nil {
			return *x.xxx_hidden_FilterBy
		}
	}
	return nil
}

func (x *ListSelector) GetFields() []string {
	if x != nil {
		return x.xxx_hidden_Fields
	}
	return nil
}

func (x *ListSelector) SetPageSize(v uint32) {
	x.xxx_hidden_PageSize = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *ListSelector) SetOffset(v uint32) {
	x.xxx_hidden_Offset = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *ListSelector) SetSortBy(v []*ListSelectorSortBy) {
	x.xxx_hidden_SortBy = &v
}

func (x *ListSelector) SetFilterBy(v []*ListSelectorFilterBy) {
	x.xxx_hidden_FilterBy = &v
}

func (x *ListSelector) SetFields(v []string) {
	x.xxx_hidden_Fields = v
}

func (x *ListSelector) HasPageSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ListSelector) HasOffset() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ListSelector) ClearPageSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_PageSize = 0
}

func (x *ListSelector) ClearOffset() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Offset = 0
}

type ListSelector_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	PageSize *uint32
	Offset   *uint32
	SortBy   []*ListSelectorSortBy
	FilterBy []*ListSelectorFilterBy
	// FIXME: This needs to be designed properly.
	Fields []string
}

func (b0 ListSelector_builder) Build() *ListSelector {
	m0 := &ListSelector{}
	b, x := &b0, m0
	_, _ = b, x
	if b.PageSize != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_PageSize = *b.PageSize
	}
	if b.Offset != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Offset = *b.Offset
	}
	x.xxx_hidden_SortBy = &b.SortBy
	x.xxx_hidden_FilterBy = &b.FilterBy
	x.xxx_hidden_Fields = b.Fields
	return m0
}

// The sorting criteria.
type ListSelectorSortBy struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FieldId     *string                `protobuf:"bytes,1,opt,name=field_id,json=fieldId"`
	xxx_hidden_Desc        bool                   `protobuf:"varint,2,opt,name=desc,def=0"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

// Default values for ListSelectorSortBy fields.
const (
	Default_ListSelectorSortBy_Desc = bool(false)
)

func (x *ListSelectorSortBy) Reset() {
	*x = ListSelectorSortBy{}
	mi := &file_common_fields_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSelectorSortBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelectorSortBy) ProtoMessage() {}

func (x *ListSelectorSortBy) ProtoReflect() protoreflect.Message {
	mi := &file_common_fields_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListSelectorSortBy) GetFieldId() string {
	if x != nil {
		if x.xxx_hidden_FieldId != nil {
			return *x.xxx_hidden_FieldId
		}
		return ""
	}
	return ""
}

func (x *ListSelectorSortBy) GetDesc() bool {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Desc
		}
	}
	return Default_ListSelectorSortBy_Desc
}

func (x *ListSelectorSortBy) SetFieldId(v string) {
	x.xxx_hidden_FieldId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *ListSelectorSortBy) SetDesc(v bool) {
	x.xxx_hidden_Desc = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *ListSelectorSortBy) HasFieldId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ListSelectorSortBy) HasDesc() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ListSelectorSortBy) ClearFieldId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_FieldId = nil
}

func (x *ListSelectorSortBy) ClearDesc() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
}

type ListSelectorSortBy_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	FieldId *string
	Desc    *bool
}

func (b0 ListSelectorSortBy_builder) Build() *ListSelectorSortBy {
	m0 := &ListSelectorSortBy{}
	b, x := &b0, m0
	_, _ = b, x
	if b.FieldId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_FieldId = b.FieldId
	}
	if b.Desc != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Desc = *b.Desc
	}
	return m0
}

// The filtering criteria.
//
// Depending on the operator, the 'text', 'integer', 'number', 'boolean' or 'date' field should be used.
// - No value must be set for operators: 'IS_NULL', 'IS_NOT_NULL'.
// - One value must be set for single operand operators: 'EQUAL', 'NOT_EQUAL', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'CONTAINS', 'NOT_CONTAINS', 'STARTS_WITH', 'ENDS_WITH'.
// - Two values must be set for two operand operators: 'BETWEEN'.
// - Any number of values can be set for generic operators: 'IN', 'NOT_IN'.
//
// Field type determines the data type and only related field should be used. Other fields shall not be set and will be ignored by the system.
type ListSelectorFilterBy struct {
	state                  protoimpl.MessageState    `protogen:"opaque.v1"`
	xxx_hidden_FieldId     *string                   `protobuf:"bytes,1,opt,name=field_id,json=fieldId"`
	xxx_hidden_Operator    FilterOperator            `protobuf:"varint,2,opt,name=operator,enum=io.clbs.openhes.models.common.FilterOperator"`
	xxx_hidden_Text        []string                  `protobuf:"bytes,3,rep,name=text"`
	xxx_hidden_Integer     []int64                   `protobuf:"zigzag64,4,rep,packed,name=integer"`
	xxx_hidden_Number      []float64                 `protobuf:"fixed64,5,rep,packed,name=number"`
	xxx_hidden_Boolean     []bool                    `protobuf:"varint,6,rep,packed,name=boolean"`
	xxx_hidden_Date        *[]*timestamppb.Timestamp `protobuf:"bytes,7,rep,name=date"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ListSelectorFilterBy) Reset() {
	*x = ListSelectorFilterBy{}
	mi := &file_common_fields_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSelectorFilterBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelectorFilterBy) ProtoMessage() {}

func (x *ListSelectorFilterBy) ProtoReflect() protoreflect.Message {
	mi := &file_common_fields_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListSelectorFilterBy) GetFieldId() string {
	if x != nil {
		if x.xxx_hidden_FieldId != nil {
			return *x.xxx_hidden_FieldId
		}
		return ""
	}
	return ""
}

func (x *ListSelectorFilterBy) GetOperator() FilterOperator {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Operator
		}
	}
	return FilterOperator_EQUAL
}

func (x *ListSelectorFilterBy) GetText() []string {
	if x != nil {
		return x.xxx_hidden_Text
	}
	return nil
}

func (x *ListSelectorFilterBy) GetInteger() []int64 {
	if x != nil {
		return x.xxx_hidden_Integer
	}
	return nil
}

func (x *ListSelectorFilterBy) GetNumber() []float64 {
	if x != nil {
		return x.xxx_hidden_Number
	}
	return nil
}

func (x *ListSelectorFilterBy) GetBoolean() []bool {
	if x != nil {
		return x.xxx_hidden_Boolean
	}
	return nil
}

func (x *ListSelectorFilterBy) GetDate() []*timestamppb.Timestamp {
	if x != nil {
		if x.xxx_hidden_Date != nil {
			return *x.xxx_hidden_Date
		}
	}
	return nil
}

func (x *ListSelectorFilterBy) SetFieldId(v string) {
	x.xxx_hidden_FieldId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *ListSelectorFilterBy) SetOperator(v FilterOperator) {
	x.xxx_hidden_Operator = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *ListSelectorFilterBy) SetText(v []string) {
	x.xxx_hidden_Text = v
}

func (x *ListSelectorFilterBy) SetInteger(v []int64) {
	x.xxx_hidden_Integer = v
}

func (x *ListSelectorFilterBy) SetNumber(v []float64) {
	x.xxx_hidden_Number = v
}

func (x *ListSelectorFilterBy) SetBoolean(v []bool) {
	x.xxx_hidden_Boolean = v
}

func (x *ListSelectorFilterBy) SetDate(v []*timestamppb.Timestamp) {
	x.xxx_hidden_Date = &v
}

func (x *ListSelectorFilterBy) HasFieldId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ListSelectorFilterBy) HasOperator() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ListSelectorFilterBy) ClearFieldId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_FieldId = nil
}

func (x *ListSelectorFilterBy) ClearOperator() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Operator = FilterOperator_EQUAL
}

type ListSelectorFilterBy_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	FieldId  *string
	Operator *FilterOperator
	Text     []string
	Integer  []int64
	Number   []float64
	Boolean  []bool
	Date     []*timestamppb.Timestamp
}

func (b0 ListSelectorFilterBy_builder) Build() *ListSelectorFilterBy {
	m0 := &ListSelectorFilterBy{}
	b, x := &b0, m0
	_, _ = b, x
	if b.FieldId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_FieldId = b.FieldId
	}
	if b.Operator != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_Operator = *b.Operator
	}
	x.xxx_hidden_Text = b.Text
	x.xxx_hidden_Integer = b.Integer
	x.xxx_hidden_Number = b.Number
	x.xxx_hidden_Boolean = b.Boolean
	x.xxx_hidden_Date = &b.Date
	return m0
}

// Data descriptor for listing methods.
type ListDescriptor struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Fields *[]*FieldDescriptor    `protobuf:"bytes,1,rep,name=fields"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListDescriptor) Reset() {
	*x = ListDescriptor{}
	mi := &file_common_fields_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDescriptor) ProtoMessage() {}

func (x *ListDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_common_fields_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListDescriptor) GetFields() []*FieldDescriptor {
	if x != nil {
		if x.xxx_hidden_Fields != nil {
			return *x.xxx_hidden_Fields
		}
	}
	return nil
}

func (x *ListDescriptor) SetFields(v []*FieldDescriptor) {
	x.xxx_hidden_Fields = &v
}

type ListDescriptor_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Fields []*FieldDescriptor
}

func (b0 ListDescriptor_builder) Build() *ListDescriptor {
	m0 := &ListDescriptor{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Fields = &b.Fields
	return m0
}

// The field descriptor.
type FieldDescriptor struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FieldId      *string                `protobuf:"bytes,1,opt,name=field_id,json=fieldId"`
	xxx_hidden_Label        *string                `protobuf:"bytes,2,opt,name=label"`
	xxx_hidden_GroupId      *string                `protobuf:"bytes,6,opt,name=group_id,json=groupId"`
	xxx_hidden_DataType     FieldDataType          `protobuf:"varint,3,opt,name=data_type,json=dataType,enum=io.clbs.openhes.models.common.FieldDataType"`
	xxx_hidden_Format       FieldDisplayFormat     `protobuf:"varint,4,opt,name=format,enum=io.clbs.openhes.models.common.FieldDisplayFormat"`
	xxx_hidden_Unit         *string                `protobuf:"bytes,5,opt,name=unit"`
	xxx_hidden_Precision    int32                  `protobuf:"varint,8,opt,name=precision"`
	xxx_hidden_Tooltip      *string                `protobuf:"bytes,9,opt,name=tooltip"`
	xxx_hidden_Required     bool                   `protobuf:"varint,11,opt,name=required"`
	xxx_hidden_Editable     bool                   `protobuf:"varint,12,opt,name=editable"`
	xxx_hidden_Visible      bool                   `protobuf:"varint,13,opt,name=visible"`
	xxx_hidden_MultiValue   bool                   `protobuf:"varint,14,opt,name=multi_value,json=multiValue"`
	xxx_hidden_Validation   *FieldValidation       `protobuf:"bytes,15,opt,name=validation"`
	xxx_hidden_DefaultValue *FieldValue            `protobuf:"bytes,16,opt,name=default_value,json=defaultValue"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *FieldDescriptor) Reset() {
	*x = FieldDescriptor{}
	mi := &file_common_fields_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldDescriptor) ProtoMessage() {}

func (x *FieldDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_common_fields_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FieldDescriptor) GetFieldId() string {
	if x != nil {
		if x.xxx_hidden_FieldId != nil {
			return *x.xxx_hidden_FieldId
		}
		return ""
	}
	return ""
}

func (x *FieldDescriptor) GetLabel() string {
	if x != nil {
		if x.xxx_hidden_Label != nil {
			return *x.xxx_hidden_Label
		}
		return ""
	}
	return ""
}

func (x *FieldDescriptor) GetGroupId() string {
	if x != nil {
		if x.xxx_hidden_GroupId != nil {
			return *x.xxx_hidden_GroupId
		}
		return ""
	}
	return ""
}

func (x *FieldDescriptor) GetDataType() FieldDataType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_DataType
		}
	}
	return FieldDataType_TEXT
}

func (x *FieldDescriptor) GetFormat() FieldDisplayFormat {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 4) {
			return x.xxx_hidden_Format
		}
	}
	return FieldDisplayFormat_DEFAULT
}

func (x *FieldDescriptor) GetUnit() string {
	if x != nil {
		if x.xxx_hidden_Unit != nil {
			return *x.xxx_hidden_Unit
		}
		return ""
	}
	return ""
}

func (x *FieldDescriptor) GetPrecision() int32 {
	if x != nil {
		return x.xxx_hidden_Precision
	}
	return 0
}

func (x *FieldDescriptor) GetTooltip() string {
	if x != nil {
		if x.xxx_hidden_Tooltip != nil {
			return *x.xxx_hidden_Tooltip
		}
		return ""
	}
	return ""
}

func (x *FieldDescriptor) GetRequired() bool {
	if x != nil {
		return x.xxx_hidden_Required
	}
	return false
}

func (x *FieldDescriptor) GetEditable() bool {
	if x != nil {
		return x.xxx_hidden_Editable
	}
	return false
}

func (x *FieldDescriptor) GetVisible() bool {
	if x != nil {
		return x.xxx_hidden_Visible
	}
	return false
}

func (x *FieldDescriptor) GetMultiValue() bool {
	if x != nil {
		return x.xxx_hidden_MultiValue
	}
	return false
}

func (x *FieldDescriptor) GetValidation() *FieldValidation {
	if x != nil {
		return x.xxx_hidden_Validation
	}
	return nil
}

func (x *FieldDescriptor) GetDefaultValue() *FieldValue {
	if x != nil {
		return x.xxx_hidden_DefaultValue
	}
	return nil
}

func (x *FieldDescriptor) SetFieldId(v string) {
	x.xxx_hidden_FieldId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 14)
}

func (x *FieldDescriptor) SetLabel(v string) {
	x.xxx_hidden_Label = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 14)
}

func (x *FieldDescriptor) SetGroupId(v string) {
	x.xxx_hidden_GroupId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 14)
}

func (x *FieldDescriptor) SetDataType(v FieldDataType) {
	x.xxx_hidden_DataType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 14)
}

func (x *FieldDescriptor) SetFormat(v FieldDisplayFormat) {
	x.xxx_hidden_Format = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 14)
}

func (x *FieldDescriptor) SetUnit(v string) {
	x.xxx_hidden_Unit = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 14)
}

func (x *FieldDescriptor) SetPrecision(v int32) {
	x.xxx_hidden_Precision = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 14)
}

func (x *FieldDescriptor) SetTooltip(v string) {
	x.xxx_hidden_Tooltip = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 14)
}

func (x *FieldDescriptor) SetRequired(v bool) {
	x.xxx_hidden_Required = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 14)
}

func (x *FieldDescriptor) SetEditable(v bool) {
	x.xxx_hidden_Editable = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 14)
}

func (x *FieldDescriptor) SetVisible(v bool) {
	x.xxx_hidden_Visible = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 14)
}

func (x *FieldDescriptor) SetMultiValue(v bool) {
	x.xxx_hidden_MultiValue = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 14)
}

func (x *FieldDescriptor) SetValidation(v *FieldValidation) {
	x.xxx_hidden_Validation = v
}

func (x *FieldDescriptor) SetDefaultValue(v *FieldValue) {
	x.xxx_hidden_DefaultValue = v
}

func (x *FieldDescriptor) HasFieldId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *FieldDescriptor) HasLabel() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *FieldDescriptor) HasGroupId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *FieldDescriptor) HasDataType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *FieldDescriptor) HasFormat() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *FieldDescriptor) HasUnit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *FieldDescriptor) HasPrecision() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *FieldDescriptor) HasTooltip() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *FieldDescriptor) HasRequired() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *FieldDescriptor) HasEditable() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *FieldDescriptor) HasVisible() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *FieldDescriptor) HasMultiValue() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 11)
}

func (x *FieldDescriptor) HasValidation() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Validation != nil
}

func (x *FieldDescriptor) HasDefaultValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DefaultValue != nil
}

func (x *FieldDescriptor) ClearFieldId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_FieldId = nil
}

func (x *FieldDescriptor) ClearLabel() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Label = nil
}

func (x *FieldDescriptor) ClearGroupId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_GroupId = nil
}

func (x *FieldDescriptor) ClearDataType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_DataType = FieldDataType_TEXT
}

func (x *FieldDescriptor) ClearFormat() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Format = FieldDisplayFormat_DEFAULT
}

func (x *FieldDescriptor) ClearUnit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Unit = nil
}

func (x *FieldDescriptor) ClearPrecision() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Precision = 0
}

func (x *FieldDescriptor) ClearTooltip() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_Tooltip = nil
}

func (x *FieldDescriptor) ClearRequired() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_Required = false
}

func (x *FieldDescriptor) ClearEditable() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_Editable = false
}

func (x *FieldDescriptor) ClearVisible() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_Visible = false
}

func (x *FieldDescriptor) ClearMultiValue() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 11)
	x.xxx_hidden_MultiValue = false
}

func (x *FieldDescriptor) ClearValidation() {
	x.xxx_hidden_Validation = nil
}

func (x *FieldDescriptor) ClearDefaultValue() {
	x.xxx_hidden_DefaultValue = nil
}

type FieldDescriptor_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	FieldId      *string
	Label        *string
	GroupId      *string
	DataType     *FieldDataType
	Format       *FieldDisplayFormat
	Unit         *string
	Precision    *int32
	Tooltip      *string
	Required     *bool
	Editable     *bool
	Visible      *bool
	MultiValue   *bool
	Validation   *FieldValidation
	DefaultValue *FieldValue
}

func (b0 FieldDescriptor_builder) Build() *FieldDescriptor {
	m0 := &FieldDescriptor{}
	b, x := &b0, m0
	_, _ = b, x
	if b.FieldId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 14)
		x.xxx_hidden_FieldId = b.FieldId
	}
	if b.Label != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 14)
		x.xxx_hidden_Label = b.Label
	}
	if b.GroupId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 14)
		x.xxx_hidden_GroupId = b.GroupId
	}
	if b.DataType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 14)
		x.xxx_hidden_DataType = *b.DataType
	}
	if b.Format != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 14)
		x.xxx_hidden_Format = *b.Format
	}
	if b.Unit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 14)
		x.xxx_hidden_Unit = b.Unit
	}
	if b.Precision != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 14)
		x.xxx_hidden_Precision = *b.Precision
	}
	if b.Tooltip != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 14)
		x.xxx_hidden_Tooltip = b.Tooltip
	}
	if b.Required != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 14)
		x.xxx_hidden_Required = *b.Required
	}
	if b.Editable != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 14)
		x.xxx_hidden_Editable = *b.Editable
	}
	if b.Visible != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 14)
		x.xxx_hidden_Visible = *b.Visible
	}
	if b.MultiValue != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 14)
		x.xxx_hidden_MultiValue = *b.MultiValue
	}
	x.xxx_hidden_Validation = b.Validation
	x.xxx_hidden_DefaultValue = b.DefaultValue
	return m0
}

// The field descriptor for simplified cases (e.g., for in-driver definitions).
type FieldSimpleDescriptor struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FieldId      *string                `protobuf:"bytes,1,opt,name=field_id,json=fieldId"`
	xxx_hidden_Label        *string                `protobuf:"bytes,2,opt,name=label"`
	xxx_hidden_DataType     FieldDataType          `protobuf:"varint,3,opt,name=data_type,json=dataType,enum=io.clbs.openhes.models.common.FieldDataType"`
	xxx_hidden_Tooltip      *string                `protobuf:"bytes,9,opt,name=tooltip"`
	xxx_hidden_Required     bool                   `protobuf:"varint,11,opt,name=required"`
	xxx_hidden_Validation   *FieldValidation       `protobuf:"bytes,15,opt,name=validation"`
	xxx_hidden_DefaultValue *FieldValue            `protobuf:"bytes,16,opt,name=default_value,json=defaultValue"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *FieldSimpleDescriptor) Reset() {
	*x = FieldSimpleDescriptor{}
	mi := &file_common_fields_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldSimpleDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldSimpleDescriptor) ProtoMessage() {}

func (x *FieldSimpleDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_common_fields_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FieldSimpleDescriptor) GetFieldId() string {
	if x != nil {
		if x.xxx_hidden_FieldId != nil {
			return *x.xxx_hidden_FieldId
		}
		return ""
	}
	return ""
}

func (x *FieldSimpleDescriptor) GetLabel() string {
	if x != nil {
		if x.xxx_hidden_Label != nil {
			return *x.xxx_hidden_Label
		}
		return ""
	}
	return ""
}

func (x *FieldSimpleDescriptor) GetDataType() FieldDataType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_DataType
		}
	}
	return FieldDataType_TEXT
}

func (x *FieldSimpleDescriptor) GetTooltip() string {
	if x != nil {
		if x.xxx_hidden_Tooltip != nil {
			return *x.xxx_hidden_Tooltip
		}
		return ""
	}
	return ""
}

func (x *FieldSimpleDescriptor) GetRequired() bool {
	if x != nil {
		return x.xxx_hidden_Required
	}
	return false
}

func (x *FieldSimpleDescriptor) GetValidation() *FieldValidation {
	if x != nil {
		return x.xxx_hidden_Validation
	}
	return nil
}

func (x *FieldSimpleDescriptor) GetDefaultValue() *FieldValue {
	if x != nil {
		return x.xxx_hidden_DefaultValue
	}
	return nil
}

func (x *FieldSimpleDescriptor) SetFieldId(v string) {
	x.xxx_hidden_FieldId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *FieldSimpleDescriptor) SetLabel(v string) {
	x.xxx_hidden_Label = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *FieldSimpleDescriptor) SetDataType(v FieldDataType) {
	x.xxx_hidden_DataType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *FieldSimpleDescriptor) SetTooltip(v string) {
	x.xxx_hidden_Tooltip = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *FieldSimpleDescriptor) SetRequired(v bool) {
	x.xxx_hidden_Required = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *FieldSimpleDescriptor) SetValidation(v *FieldValidation) {
	x.xxx_hidden_Validation = v
}

func (x *FieldSimpleDescriptor) SetDefaultValue(v *FieldValue) {
	x.xxx_hidden_DefaultValue = v
}

func (x *FieldSimpleDescriptor) HasFieldId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *FieldSimpleDescriptor) HasLabel() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *FieldSimpleDescriptor) HasDataType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *FieldSimpleDescriptor) HasTooltip() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *FieldSimpleDescriptor) HasRequired() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *FieldSimpleDescriptor) HasValidation() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Validation != nil
}

func (x *FieldSimpleDescriptor) HasDefaultValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_DefaultValue != nil
}

func (x *FieldSimpleDescriptor) ClearFieldId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_FieldId = nil
}

func (x *FieldSimpleDescriptor) ClearLabel() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Label = nil
}

func (x *FieldSimpleDescriptor) ClearDataType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_DataType = FieldDataType_TEXT
}

func (x *FieldSimpleDescriptor) ClearTooltip() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Tooltip = nil
}

func (x *FieldSimpleDescriptor) ClearRequired() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Required = false
}

func (x *FieldSimpleDescriptor) ClearValidation() {
	x.xxx_hidden_Validation = nil
}

func (x *FieldSimpleDescriptor) ClearDefaultValue() {
	x.xxx_hidden_DefaultValue = nil
}

type FieldSimpleDescriptor_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	FieldId      *string
	Label        *string
	DataType     *FieldDataType
	Tooltip      *string
	Required     *bool
	Validation   *FieldValidation
	DefaultValue *FieldValue
}

func (b0 FieldSimpleDescriptor_builder) Build() *FieldSimpleDescriptor {
	m0 := &FieldSimpleDescriptor{}
	b, x := &b0, m0
	_, _ = b, x
	if b.FieldId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_FieldId = b.FieldId
	}
	if b.Label != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_Label = b.Label
	}
	if b.DataType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_DataType = *b.DataType
	}
	if b.Tooltip != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_Tooltip = b.Tooltip
	}
	if b.Required != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_Required = *b.Required
	}
	x.xxx_hidden_Validation = b.Validation
	x.xxx_hidden_DefaultValue = b.DefaultValue
	return m0
}

// Validation rules for the field.
type FieldValidation struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Re          *string                `protobuf:"bytes,1,opt,name=re"`
	xxx_hidden_MinLength   int32                  `protobuf:"varint,2,opt,name=min_length,json=minLength"`
	xxx_hidden_MaxLength   int32                  `protobuf:"varint,3,opt,name=max_length,json=maxLength"`
	xxx_hidden_MinInteger  int64                  `protobuf:"zigzag64,4,opt,name=min_integer,json=minInteger"`
	xxx_hidden_MaxInteger  int64                  `protobuf:"zigzag64,5,opt,name=max_integer,json=maxInteger"`
	xxx_hidden_MinNumber   float64                `protobuf:"fixed64,6,opt,name=min_number,json=minNumber"`
	xxx_hidden_MaxNumber   float64                `protobuf:"fixed64,7,opt,name=max_number,json=maxNumber"`
	xxx_hidden_Options     map[string]*anypb.Any  `protobuf:"bytes,8,rep,name=options" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FieldValidation) Reset() {
	*x = FieldValidation{}
	mi := &file_common_fields_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldValidation) ProtoMessage() {}

func (x *FieldValidation) ProtoReflect() protoreflect.Message {
	mi := &file_common_fields_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FieldValidation) GetRe() string {
	if x != nil {
		if x.xxx_hidden_Re != nil {
			return *x.xxx_hidden_Re
		}
		return ""
	}
	return ""
}

func (x *FieldValidation) GetMinLength() int32 {
	if x != nil {
		return x.xxx_hidden_MinLength
	}
	return 0
}

func (x *FieldValidation) GetMaxLength() int32 {
	if x != nil {
		return x.xxx_hidden_MaxLength
	}
	return 0
}

func (x *FieldValidation) GetMinInteger() int64 {
	if x != nil {
		return x.xxx_hidden_MinInteger
	}
	return 0
}

func (x *FieldValidation) GetMaxInteger() int64 {
	if x != nil {
		return x.xxx_hidden_MaxInteger
	}
	return 0
}

func (x *FieldValidation) GetMinNumber() float64 {
	if x != nil {
		return x.xxx_hidden_MinNumber
	}
	return 0
}

func (x *FieldValidation) GetMaxNumber() float64 {
	if x != nil {
		return x.xxx_hidden_MaxNumber
	}
	return 0
}

func (x *FieldValidation) GetOptions() map[string]*anypb.Any {
	if x != nil {
		return x.xxx_hidden_Options
	}
	return nil
}

func (x *FieldValidation) SetRe(v string) {
	x.xxx_hidden_Re = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 8)
}

func (x *FieldValidation) SetMinLength(v int32) {
	x.xxx_hidden_MinLength = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 8)
}

func (x *FieldValidation) SetMaxLength(v int32) {
	x.xxx_hidden_MaxLength = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 8)
}

func (x *FieldValidation) SetMinInteger(v int64) {
	x.xxx_hidden_MinInteger = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 8)
}

func (x *FieldValidation) SetMaxInteger(v int64) {
	x.xxx_hidden_MaxInteger = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 8)
}

func (x *FieldValidation) SetMinNumber(v float64) {
	x.xxx_hidden_MinNumber = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 8)
}

func (x *FieldValidation) SetMaxNumber(v float64) {
	x.xxx_hidden_MaxNumber = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 8)
}

func (x *FieldValidation) SetOptions(v map[string]*anypb.Any) {
	x.xxx_hidden_Options = v
}

func (x *FieldValidation) HasRe() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *FieldValidation) HasMinLength() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *FieldValidation) HasMaxLength() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *FieldValidation) HasMinInteger() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *FieldValidation) HasMaxInteger() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *FieldValidation) HasMinNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *FieldValidation) HasMaxNumber() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *FieldValidation) ClearRe() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Re = nil
}

func (x *FieldValidation) ClearMinLength() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_MinLength = 0
}

func (x *FieldValidation) ClearMaxLength() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_MaxLength = 0
}

func (x *FieldValidation) ClearMinInteger() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_MinInteger = 0
}

func (x *FieldValidation) ClearMaxInteger() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_MaxInteger = 0
}

func (x *FieldValidation) ClearMinNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_MinNumber = 0
}

func (x *FieldValidation) ClearMaxNumber() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_MaxNumber = 0
}

type FieldValidation_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Re         *string
	MinLength  *int32
	MaxLength  *int32
	MinInteger *int64
	MaxInteger *int64
	MinNumber  *float64
	MaxNumber  *float64
	Options    map[string]*anypb.Any
}

func (b0 FieldValidation_builder) Build() *FieldValidation {
	m0 := &FieldValidation{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Re != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 8)
		x.xxx_hidden_Re = b.Re
	}
	if b.MinLength != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 8)
		x.xxx_hidden_MinLength = *b.MinLength
	}
	if b.MaxLength != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 8)
		x.xxx_hidden_MaxLength = *b.MaxLength
	}
	if b.MinInteger != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 8)
		x.xxx_hidden_MinInteger = *b.MinInteger
	}
	if b.MaxInteger != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 8)
		x.xxx_hidden_MaxInteger = *b.MaxInteger
	}
	if b.MinNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 8)
		x.xxx_hidden_MinNumber = *b.MinNumber
	}
	if b.MaxNumber != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 8)
		x.xxx_hidden_MaxNumber = *b.MaxNumber
	}
	x.xxx_hidden_Options = b.Options
	return m0
}

type FieldValue struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Kind isFieldValue_Kind      `protobuf_oneof:"kind"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FieldValue) Reset() {
	*x = FieldValue{}
	mi := &file_common_fields_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldValue) ProtoMessage() {}

func (x *FieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_common_fields_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FieldValue) GetTextValue() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Kind.(*fieldValue_TextValue); ok {
			return x.TextValue
		}
	}
	return ""
}

func (x *FieldValue) GetIntegerValue() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Kind.(*fieldValue_IntegerValue); ok {
			return x.IntegerValue
		}
	}
	return 0
}

func (x *FieldValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Kind.(*fieldValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *FieldValue) GetBinaryValue() []byte {
	if x != nil {
		if x, ok := x.xxx_hidden_Kind.(*fieldValue_BinaryValue); ok {
			return x.BinaryValue
		}
	}
	return nil
}

func (x *FieldValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.xxx_hidden_Kind.(*fieldValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *FieldValue) GetDateValue() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.xxx_hidden_Kind.(*fieldValue_DateValue); ok {
			return x.DateValue
		}
	}
	return nil
}

func (x *FieldValue) SetTextValue(v string) {
	x.xxx_hidden_Kind = &fieldValue_TextValue{v}
}

func (x *FieldValue) SetIntegerValue(v int64) {
	x.xxx_hidden_Kind = &fieldValue_IntegerValue{v}
}

func (x *FieldValue) SetDoubleValue(v float64) {
	x.xxx_hidden_Kind = &fieldValue_DoubleValue{v}
}

func (x *FieldValue) SetBinaryValue(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Kind = &fieldValue_BinaryValue{v}
}

func (x *FieldValue) SetBoolValue(v bool) {
	x.xxx_hidden_Kind = &fieldValue_BoolValue{v}
}

func (x *FieldValue) SetDateValue(v *timestamppb.Timestamp) {
	if v == nil {
		x.xxx_hidden_Kind = nil
		return
	}
	x.xxx_hidden_Kind = &fieldValue_DateValue{v}
}

func (x *FieldValue) HasKind() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Kind != nil
}

func (x *FieldValue) HasTextValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Kind.(*fieldValue_TextValue)
	return ok
}

func (x *FieldValue) HasIntegerValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Kind.(*fieldValue_IntegerValue)
	return ok
}

func (x *FieldValue) HasDoubleValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Kind.(*fieldValue_DoubleValue)
	return ok
}

func (x *FieldValue) HasBinaryValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Kind.(*fieldValue_BinaryValue)
	return ok
}

func (x *FieldValue) HasBoolValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Kind.(*fieldValue_BoolValue)
	return ok
}

func (x *FieldValue) HasDateValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Kind.(*fieldValue_DateValue)
	return ok
}

func (x *FieldValue) ClearKind() {
	x.xxx_hidden_Kind = nil
}

func (x *FieldValue) ClearTextValue() {
	if _, ok := x.xxx_hidden_Kind.(*fieldValue_TextValue); ok {
		x.xxx_hidden_Kind = nil
	}
}

func (x *FieldValue) ClearIntegerValue() {
	if _, ok := x.xxx_hidden_Kind.(*fieldValue_IntegerValue); ok {
		x.xxx_hidden_Kind = nil
	}
}

func (x *FieldValue) ClearDoubleValue() {
	if _, ok := x.xxx_hidden_Kind.(*fieldValue_DoubleValue); ok {
		x.xxx_hidden_Kind = nil
	}
}

func (x *FieldValue) ClearBinaryValue() {
	if _, ok := x.xxx_hidden_Kind.(*fieldValue_BinaryValue); ok {
		x.xxx_hidden_Kind = nil
	}
}

func (x *FieldValue) ClearBoolValue() {
	if _, ok := x.xxx_hidden_Kind.(*fieldValue_BoolValue); ok {
		x.xxx_hidden_Kind = nil
	}
}

func (x *FieldValue) ClearDateValue() {
	if _, ok := x.xxx_hidden_Kind.(*fieldValue_DateValue); ok {
		x.xxx_hidden_Kind = nil
	}
}

const FieldValue_Kind_not_set_case case_FieldValue_Kind = 0
const FieldValue_TextValue_case case_FieldValue_Kind = 1
const FieldValue_IntegerValue_case case_FieldValue_Kind = 2
const FieldValue_DoubleValue_case case_FieldValue_Kind = 3
const FieldValue_BinaryValue_case case_FieldValue_Kind = 4
const FieldValue_BoolValue_case case_FieldValue_Kind = 5
const FieldValue_DateValue_case case_FieldValue_Kind = 6

func (x *FieldValue) WhichKind() case_FieldValue_Kind {
	if x == nil {
		return FieldValue_Kind_not_set_case
	}
	switch x.xxx_hidden_Kind.(type) {
	case *fieldValue_TextValue:
		return FieldValue_TextValue_case
	case *fieldValue_IntegerValue:
		return FieldValue_IntegerValue_case
	case *fieldValue_DoubleValue:
		return FieldValue_DoubleValue_case
	case *fieldValue_BinaryValue:
		return FieldValue_BinaryValue_case
	case *fieldValue_BoolValue:
		return FieldValue_BoolValue_case
	case *fieldValue_DateValue:
		return FieldValue_DateValue_case
	default:
		return FieldValue_Kind_not_set_case
	}
}

type FieldValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Kind:
	TextValue    *string
	IntegerValue *int64
	DoubleValue  *float64
	BinaryValue  []byte
	BoolValue    *bool
	DateValue    *timestamppb.Timestamp
	// -- end of xxx_hidden_Kind
}

func (b0 FieldValue_builder) Build() *FieldValue {
	m0 := &FieldValue{}
	b, x := &b0, m0
	_, _ = b, x
	if b.TextValue != nil {
		x.xxx_hidden_Kind = &fieldValue_TextValue{*b.TextValue}
	}
	if b.IntegerValue != nil {
		x.xxx_hidden_Kind = &fieldValue_IntegerValue{*b.IntegerValue}
	}
	if b.DoubleValue != nil {
		x.xxx_hidden_Kind = &fieldValue_DoubleValue{*b.DoubleValue}
	}
	if b.BinaryValue != nil {
		x.xxx_hidden_Kind = &fieldValue_BinaryValue{b.BinaryValue}
	}
	if b.BoolValue != nil {
		x.xxx_hidden_Kind = &fieldValue_BoolValue{*b.BoolValue}
	}
	if b.DateValue != nil {
		x.xxx_hidden_Kind = &fieldValue_DateValue{b.DateValue}
	}
	return m0
}

type case_FieldValue_Kind protoreflect.FieldNumber

func (x case_FieldValue_Kind) String() string {
	md := file_common_fields_proto_msgTypes[7].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isFieldValue_Kind interface {
	isFieldValue_Kind()
}

type fieldValue_TextValue struct {
	TextValue string `protobuf:"bytes,1,opt,name=text_value,json=textValue,oneof"` // Represents a string-typed value.
}

type fieldValue_IntegerValue struct {
	IntegerValue int64 `protobuf:"varint,2,opt,name=integer_value,json=integerValue,oneof"` // Represents a integer-typed value.
}

type fieldValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,oneof"` // Represents a double-typed value.
}

type fieldValue_BinaryValue struct {
	BinaryValue []byte `protobuf:"bytes,4,opt,name=binary_value,json=binaryValue,oneof"` // Represents a binary-typed value.
}

type fieldValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,oneof"` // Represents a boolean-typed value.
}

type fieldValue_DateValue struct {
	DateValue *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date_value,json=dateValue,oneof"` // Represents a date-typed value.
}

func (*fieldValue_TextValue) isFieldValue_Kind() {}

func (*fieldValue_IntegerValue) isFieldValue_Kind() {}

func (*fieldValue_DoubleValue) isFieldValue_Kind() {}

func (*fieldValue_BinaryValue) isFieldValue_Kind() {}

func (*fieldValue_BoolValue) isFieldValue_Kind() {}

func (*fieldValue_DateValue) isFieldValue_Kind() {}

var File_common_fields_proto protoreflect.FileDescriptor

var file_common_fields_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf9, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x12, 0x50, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x4a, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x8c, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x12, 0x52, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x08, 0x52, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x58, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0xd2, 0x04, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x49, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6f,
	0x6c, 0x74, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6f, 0x6c,
	0x74, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe9, 0x02, 0x0a, 0x15, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x49, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x88, 0x03, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x50, 0x0a, 0x0c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x02,
	0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f,
	0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3b, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x2a, 0xfd, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41,
	0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x16, 0x0a,
	0x12, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x53, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x53, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x52, 0x54, 0x53, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e, 0x44, 0x53, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x10, 0x09, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x0a, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x45, 0x54,
	0x57, 0x45, 0x45, 0x4e, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x0e, 0x2a, 0x5a, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c,
	0x45, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x05,
	0x2a, 0x89, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x54,
	0x43, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54,
	0x48, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x59, 0x4f, 0x46, 0x57, 0x45, 0x45, 0x4b,
	0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x46, 0x44, 0x41, 0x59, 0x10,
	0x07, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x08, 0x42, 0x30, 0x5a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x79, 0x62, 0x72, 0x6f,
	0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x68, 0x65, 0x73, 0x2d, 0x32, 0x2d, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x08,
	0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
}

var file_common_fields_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_common_fields_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_common_fields_proto_goTypes = []any{
	(FilterOperator)(0),           // 0: io.clbs.openhes.models.common.FilterOperator
	(FieldDataType)(0),            // 1: io.clbs.openhes.models.common.FieldDataType
	(FieldDisplayFormat)(0),       // 2: io.clbs.openhes.models.common.FieldDisplayFormat
	(*ListSelector)(nil),          // 3: io.clbs.openhes.models.common.ListSelector
	(*ListSelectorSortBy)(nil),    // 4: io.clbs.openhes.models.common.ListSelectorSortBy
	(*ListSelectorFilterBy)(nil),  // 5: io.clbs.openhes.models.common.ListSelectorFilterBy
	(*ListDescriptor)(nil),        // 6: io.clbs.openhes.models.common.ListDescriptor
	(*FieldDescriptor)(nil),       // 7: io.clbs.openhes.models.common.FieldDescriptor
	(*FieldSimpleDescriptor)(nil), // 8: io.clbs.openhes.models.common.FieldSimpleDescriptor
	(*FieldValidation)(nil),       // 9: io.clbs.openhes.models.common.FieldValidation
	(*FieldValue)(nil),            // 10: io.clbs.openhes.models.common.FieldValue
	nil,                           // 11: io.clbs.openhes.models.common.FieldValidation.OptionsEntry
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
	(*anypb.Any)(nil),             // 13: google.protobuf.Any
}
var file_common_fields_proto_depIdxs = []int32{
	4,  // 0: io.clbs.openhes.models.common.ListSelector.sort_by:type_name -> io.clbs.openhes.models.common.ListSelectorSortBy
	5,  // 1: io.clbs.openhes.models.common.ListSelector.filter_by:type_name -> io.clbs.openhes.models.common.ListSelectorFilterBy
	0,  // 2: io.clbs.openhes.models.common.ListSelectorFilterBy.operator:type_name -> io.clbs.openhes.models.common.FilterOperator
	12, // 3: io.clbs.openhes.models.common.ListSelectorFilterBy.date:type_name -> google.protobuf.Timestamp
	7,  // 4: io.clbs.openhes.models.common.ListDescriptor.fields:type_name -> io.clbs.openhes.models.common.FieldDescriptor
	1,  // 5: io.clbs.openhes.models.common.FieldDescriptor.data_type:type_name -> io.clbs.openhes.models.common.FieldDataType
	2,  // 6: io.clbs.openhes.models.common.FieldDescriptor.format:type_name -> io.clbs.openhes.models.common.FieldDisplayFormat
	9,  // 7: io.clbs.openhes.models.common.FieldDescriptor.validation:type_name -> io.clbs.openhes.models.common.FieldValidation
	10, // 8: io.clbs.openhes.models.common.FieldDescriptor.default_value:type_name -> io.clbs.openhes.models.common.FieldValue
	1,  // 9: io.clbs.openhes.models.common.FieldSimpleDescriptor.data_type:type_name -> io.clbs.openhes.models.common.FieldDataType
	9,  // 10: io.clbs.openhes.models.common.FieldSimpleDescriptor.validation:type_name -> io.clbs.openhes.models.common.FieldValidation
	10, // 11: io.clbs.openhes.models.common.FieldSimpleDescriptor.default_value:type_name -> io.clbs.openhes.models.common.FieldValue
	11, // 12: io.clbs.openhes.models.common.FieldValidation.options:type_name -> io.clbs.openhes.models.common.FieldValidation.OptionsEntry
	12, // 13: io.clbs.openhes.models.common.FieldValue.date_value:type_name -> google.protobuf.Timestamp
	13, // 14: io.clbs.openhes.models.common.FieldValidation.OptionsEntry.value:type_name -> google.protobuf.Any
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_common_fields_proto_init() }
func file_common_fields_proto_init() {
	if File_common_fields_proto != nil {
		return
	}
	file_common_fields_proto_msgTypes[7].OneofWrappers = []any{
		(*fieldValue_TextValue)(nil),
		(*fieldValue_IntegerValue)(nil),
		(*fieldValue_DoubleValue)(nil),
		(*fieldValue_BinaryValue)(nil),
		(*fieldValue_BoolValue)(nil),
		(*fieldValue_DateValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_fields_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_fields_proto_goTypes,
		DependencyIndexes: file_common_fields_proto_depIdxs,
		EnumInfos:         file_common_fields_proto_enumTypes,
		MessageInfos:      file_common_fields_proto_msgTypes,
	}.Build()
	File_common_fields_proto = out.File
	file_common_fields_proto_rawDesc = nil
	file_common_fields_proto_goTypes = nil
	file_common_fields_proto_depIdxs = nil
}
