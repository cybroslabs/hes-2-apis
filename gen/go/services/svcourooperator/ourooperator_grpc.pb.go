// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/svcourooperator/ourooperator.proto

package svcourooperator

import (
	context "context"
	acquisition "github.com/cybroslabs/hes-2-apis/gen/go/acquisition"
	system "github.com/cybroslabs/hes-2-apis/gen/go/system"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OuroOperatorService_ListDrivers_FullMethodName                = "/io.clbs.openhes.services.svcourooperator.OuroOperatorService/ListDrivers"
	OuroOperatorService_SetDriver_FullMethodName                  = "/io.clbs.openhes.services.svcourooperator.OuroOperatorService/SetDriver"
	OuroOperatorService_GetDriver_FullMethodName                  = "/io.clbs.openhes.services.svcourooperator.OuroOperatorService/GetDriver"
	OuroOperatorService_SetDriverScale_FullMethodName             = "/io.clbs.openhes.services.svcourooperator.OuroOperatorService/SetDriverScale"
	OuroOperatorService_GetDriverScale_FullMethodName             = "/io.clbs.openhes.services.svcourooperator.OuroOperatorService/GetDriverScale"
	OuroOperatorService_GetApplicationConfig_FullMethodName       = "/io.clbs.openhes.services.svcourooperator.OuroOperatorService/GetApplicationConfig"
	OuroOperatorService_UpdateApplicationConfig_FullMethodName    = "/io.clbs.openhes.services.svcourooperator.OuroOperatorService/UpdateApplicationConfig"
	OuroOperatorService_SynchronizeComponentConfig_FullMethodName = "/io.clbs.openhes.services.svcourooperator.OuroOperatorService/SynchronizeComponentConfig"
	OuroOperatorService_StartUpgrade_FullMethodName               = "/io.clbs.openhes.services.svcourooperator.OuroOperatorService/StartUpgrade"
)

// OuroOperatorServiceClient is the client API for OuroOperatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Ouro Operator service definition.
// Those are the gRPC services that the Ouro Operator provides for other components.
type OuroOperatorServiceClient interface {
	// The method called by the RestApi to get the list of drivers.
	ListDrivers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*acquisition.ListOfDriver, error)
	// The method called by the Driver to set the driver templates. The parameter contains the driver templates.
	SetDriver(ctx context.Context, in *acquisition.Driver, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// The method called by the RestApi to get the driver templates.
	GetDriver(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Driver, error)
	// The method called by the Taskmaster to set the driver scale.
	SetDriverScale(ctx context.Context, in *acquisition.SetDriverScaleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// The method called by the Taskmaster to get the driver scale.
	GetDriverScale(ctx context.Context, in *acquisition.GetDriverScaleRequest, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error)
	// Gets the application configuration, stored in the Kubernetes.
	GetApplicationConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*system.ApplicationConfigDescriptor, error)
	// Updates the application configuration. The missing fields in the request will be kept unchanged.
	UpdateApplicationConfig(ctx context.Context, in *system.ApplicationConfig, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Synchronizes the application's component configuration. The input value shall contain all the default values and also all known keys (with null values).
	// The output value will contain currently set values inlcuding detauls which are not set.
	// The missing values in the defaults will be deleted if has been set previously in the application configuration.
	SynchronizeComponentConfig(ctx context.Context, in *system.ComponentConfigDescriptor, opts ...grpc.CallOption) (*system.ComponentConfig, error)
	// The method called by the DeviceRegistry to start the driver in upgrade mode. It will provide structure upgrade between the driver versions.
	// The driver is started as Kubernetes job and ends when all the structures are upgraded; which is controlled by the DeviceRegistry.
	StartUpgrade(ctx context.Context, in *acquisition.StartUpgradeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ouroOperatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOuroOperatorServiceClient(cc grpc.ClientConnInterface) OuroOperatorServiceClient {
	return &ouroOperatorServiceClient{cc}
}

func (c *ouroOperatorServiceClient) ListDrivers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*acquisition.ListOfDriver, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDriver)
	err := c.cc.Invoke(ctx, OuroOperatorService_ListDrivers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ouroOperatorServiceClient) SetDriver(ctx context.Context, in *acquisition.Driver, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OuroOperatorService_SetDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ouroOperatorServiceClient) GetDriver(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Driver, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.Driver)
	err := c.cc.Invoke(ctx, OuroOperatorService_GetDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ouroOperatorServiceClient) SetDriverScale(ctx context.Context, in *acquisition.SetDriverScaleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OuroOperatorService_SetDriverScale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ouroOperatorServiceClient) GetDriverScale(ctx context.Context, in *acquisition.GetDriverScaleRequest, opts ...grpc.CallOption) (*wrapperspb.UInt32Value, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.UInt32Value)
	err := c.cc.Invoke(ctx, OuroOperatorService_GetDriverScale_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ouroOperatorServiceClient) GetApplicationConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*system.ApplicationConfigDescriptor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(system.ApplicationConfigDescriptor)
	err := c.cc.Invoke(ctx, OuroOperatorService_GetApplicationConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ouroOperatorServiceClient) UpdateApplicationConfig(ctx context.Context, in *system.ApplicationConfig, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OuroOperatorService_UpdateApplicationConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ouroOperatorServiceClient) SynchronizeComponentConfig(ctx context.Context, in *system.ComponentConfigDescriptor, opts ...grpc.CallOption) (*system.ComponentConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(system.ComponentConfig)
	err := c.cc.Invoke(ctx, OuroOperatorService_SynchronizeComponentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ouroOperatorServiceClient) StartUpgrade(ctx context.Context, in *acquisition.StartUpgradeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OuroOperatorService_StartUpgrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OuroOperatorServiceServer is the server API for OuroOperatorService service.
// All implementations must embed UnimplementedOuroOperatorServiceServer
// for forward compatibility.
//
// The Ouro Operator service definition.
// Those are the gRPC services that the Ouro Operator provides for other components.
type OuroOperatorServiceServer interface {
	// The method called by the RestApi to get the list of drivers.
	ListDrivers(context.Context, *emptypb.Empty) (*acquisition.ListOfDriver, error)
	// The method called by the Driver to set the driver templates. The parameter contains the driver templates.
	SetDriver(context.Context, *acquisition.Driver) (*emptypb.Empty, error)
	// The method called by the RestApi to get the driver templates.
	GetDriver(context.Context, *wrapperspb.StringValue) (*acquisition.Driver, error)
	// The method called by the Taskmaster to set the driver scale.
	SetDriverScale(context.Context, *acquisition.SetDriverScaleRequest) (*emptypb.Empty, error)
	// The method called by the Taskmaster to get the driver scale.
	GetDriverScale(context.Context, *acquisition.GetDriverScaleRequest) (*wrapperspb.UInt32Value, error)
	// Gets the application configuration, stored in the Kubernetes.
	GetApplicationConfig(context.Context, *emptypb.Empty) (*system.ApplicationConfigDescriptor, error)
	// Updates the application configuration. The missing fields in the request will be kept unchanged.
	UpdateApplicationConfig(context.Context, *system.ApplicationConfig) (*emptypb.Empty, error)
	// Synchronizes the application's component configuration. The input value shall contain all the default values and also all known keys (with null values).
	// The output value will contain currently set values inlcuding detauls which are not set.
	// The missing values in the defaults will be deleted if has been set previously in the application configuration.
	SynchronizeComponentConfig(context.Context, *system.ComponentConfigDescriptor) (*system.ComponentConfig, error)
	// The method called by the DeviceRegistry to start the driver in upgrade mode. It will provide structure upgrade between the driver versions.
	// The driver is started as Kubernetes job and ends when all the structures are upgraded; which is controlled by the DeviceRegistry.
	StartUpgrade(context.Context, *acquisition.StartUpgradeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedOuroOperatorServiceServer()
}

// UnimplementedOuroOperatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOuroOperatorServiceServer struct{}

func (UnimplementedOuroOperatorServiceServer) ListDrivers(context.Context, *emptypb.Empty) (*acquisition.ListOfDriver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrivers not implemented")
}
func (UnimplementedOuroOperatorServiceServer) SetDriver(context.Context, *acquisition.Driver) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDriver not implemented")
}
func (UnimplementedOuroOperatorServiceServer) GetDriver(context.Context, *wrapperspb.StringValue) (*acquisition.Driver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriver not implemented")
}
func (UnimplementedOuroOperatorServiceServer) SetDriverScale(context.Context, *acquisition.SetDriverScaleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDriverScale not implemented")
}
func (UnimplementedOuroOperatorServiceServer) GetDriverScale(context.Context, *acquisition.GetDriverScaleRequest) (*wrapperspb.UInt32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriverScale not implemented")
}
func (UnimplementedOuroOperatorServiceServer) GetApplicationConfig(context.Context, *emptypb.Empty) (*system.ApplicationConfigDescriptor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationConfig not implemented")
}
func (UnimplementedOuroOperatorServiceServer) UpdateApplicationConfig(context.Context, *system.ApplicationConfig) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationConfig not implemented")
}
func (UnimplementedOuroOperatorServiceServer) SynchronizeComponentConfig(context.Context, *system.ComponentConfigDescriptor) (*system.ComponentConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SynchronizeComponentConfig not implemented")
}
func (UnimplementedOuroOperatorServiceServer) StartUpgrade(context.Context, *acquisition.StartUpgradeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartUpgrade not implemented")
}
func (UnimplementedOuroOperatorServiceServer) mustEmbedUnimplementedOuroOperatorServiceServer() {}
func (UnimplementedOuroOperatorServiceServer) testEmbeddedByValue()                             {}

// UnsafeOuroOperatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OuroOperatorServiceServer will
// result in compilation errors.
type UnsafeOuroOperatorServiceServer interface {
	mustEmbedUnimplementedOuroOperatorServiceServer()
}

func RegisterOuroOperatorServiceServer(s grpc.ServiceRegistrar, srv OuroOperatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedOuroOperatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OuroOperatorService_ServiceDesc, srv)
}

func _OuroOperatorService_ListDrivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OuroOperatorServiceServer).ListDrivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OuroOperatorService_ListDrivers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OuroOperatorServiceServer).ListDrivers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OuroOperatorService_SetDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.Driver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OuroOperatorServiceServer).SetDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OuroOperatorService_SetDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OuroOperatorServiceServer).SetDriver(ctx, req.(*acquisition.Driver))
	}
	return interceptor(ctx, in, info, handler)
}

func _OuroOperatorService_GetDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OuroOperatorServiceServer).GetDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OuroOperatorService_GetDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OuroOperatorServiceServer).GetDriver(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _OuroOperatorService_SetDriverScale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetDriverScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OuroOperatorServiceServer).SetDriverScale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OuroOperatorService_SetDriverScale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OuroOperatorServiceServer).SetDriverScale(ctx, req.(*acquisition.SetDriverScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OuroOperatorService_GetDriverScale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.GetDriverScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OuroOperatorServiceServer).GetDriverScale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OuroOperatorService_GetDriverScale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OuroOperatorServiceServer).GetDriverScale(ctx, req.(*acquisition.GetDriverScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OuroOperatorService_GetApplicationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OuroOperatorServiceServer).GetApplicationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OuroOperatorService_GetApplicationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OuroOperatorServiceServer).GetApplicationConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OuroOperatorService_UpdateApplicationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(system.ApplicationConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OuroOperatorServiceServer).UpdateApplicationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OuroOperatorService_UpdateApplicationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OuroOperatorServiceServer).UpdateApplicationConfig(ctx, req.(*system.ApplicationConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _OuroOperatorService_SynchronizeComponentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(system.ComponentConfigDescriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OuroOperatorServiceServer).SynchronizeComponentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OuroOperatorService_SynchronizeComponentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OuroOperatorServiceServer).SynchronizeComponentConfig(ctx, req.(*system.ComponentConfigDescriptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _OuroOperatorService_StartUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.StartUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OuroOperatorServiceServer).StartUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OuroOperatorService_StartUpgrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OuroOperatorServiceServer).StartUpgrade(ctx, req.(*acquisition.StartUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OuroOperatorService_ServiceDesc is the grpc.ServiceDesc for OuroOperatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OuroOperatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.clbs.openhes.services.svcourooperator.OuroOperatorService",
	HandlerType: (*OuroOperatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDrivers",
			Handler:    _OuroOperatorService_ListDrivers_Handler,
		},
		{
			MethodName: "SetDriver",
			Handler:    _OuroOperatorService_SetDriver_Handler,
		},
		{
			MethodName: "GetDriver",
			Handler:    _OuroOperatorService_GetDriver_Handler,
		},
		{
			MethodName: "SetDriverScale",
			Handler:    _OuroOperatorService_SetDriverScale_Handler,
		},
		{
			MethodName: "GetDriverScale",
			Handler:    _OuroOperatorService_GetDriverScale_Handler,
		},
		{
			MethodName: "GetApplicationConfig",
			Handler:    _OuroOperatorService_GetApplicationConfig_Handler,
		},
		{
			MethodName: "UpdateApplicationConfig",
			Handler:    _OuroOperatorService_UpdateApplicationConfig_Handler,
		},
		{
			MethodName: "SynchronizeComponentConfig",
			Handler:    _OuroOperatorService_SynchronizeComponentConfig_Handler,
		},
		{
			MethodName: "StartUpgrade",
			Handler:    _OuroOperatorService_StartUpgrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/svcourooperator/ourooperator.proto",
}
