// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/svcapi/api.proto

package svcapiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	acquisition "github.com/cybroslabs/hes-2-apis/gen/go/acquisition"
	common "github.com/cybroslabs/hes-2-apis/gen/go/common"
	svcapi "github.com/cybroslabs/hes-2-apis/gen/go/services/svcapi"
	system "github.com/cybroslabs/hes-2-apis/gen/go/system"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ApiServiceName is the fully-qualified name of the ApiService service.
	ApiServiceName = "io.clbs.openhes.services.svcapi.ApiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApiServiceCreateBulkProcedure is the fully-qualified name of the ApiService's CreateBulk RPC.
	ApiServiceCreateBulkProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateBulk"
	// ApiServiceListBulksProcedure is the fully-qualified name of the ApiService's ListBulks RPC.
	ApiServiceListBulksProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListBulks"
	// ApiServiceGetBulkProcedure is the fully-qualified name of the ApiService's GetBulk RPC.
	ApiServiceGetBulkProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetBulk"
	// ApiServiceCancelBulkProcedure is the fully-qualified name of the ApiService's CancelBulk RPC.
	ApiServiceCancelBulkProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CancelBulk"
	// ApiServiceListDriversProcedure is the fully-qualified name of the ApiService's ListDrivers RPC.
	ApiServiceListDriversProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListDrivers"
	// ApiServiceGetDriverProcedure is the fully-qualified name of the ApiService's GetDriver RPC.
	ApiServiceGetDriverProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDriver"
	// ApiServiceCreateCommunicationUnitProcedure is the fully-qualified name of the ApiService's
	// CreateCommunicationUnit RPC.
	ApiServiceCreateCommunicationUnitProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateCommunicationUnit"
	// ApiServiceListCommunicationUnitsProcedure is the fully-qualified name of the ApiService's
	// ListCommunicationUnits RPC.
	ApiServiceListCommunicationUnitsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListCommunicationUnits"
	// ApiServiceGetCommunicationUnitProcedure is the fully-qualified name of the ApiService's
	// GetCommunicationUnit RPC.
	ApiServiceGetCommunicationUnitProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetCommunicationUnit"
	// ApiServiceCreateCommunicationUnitBusProcedure is the fully-qualified name of the ApiService's
	// CreateCommunicationUnitBus RPC.
	ApiServiceCreateCommunicationUnitBusProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateCommunicationUnitBus"
	// ApiServiceListCommunicationUnitBusesProcedure is the fully-qualified name of the ApiService's
	// ListCommunicationUnitBuses RPC.
	ApiServiceListCommunicationUnitBusesProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListCommunicationUnitBuses"
	// ApiServiceAddCommunicationUnitsToBusProcedure is the fully-qualified name of the ApiService's
	// AddCommunicationUnitsToBus RPC.
	ApiServiceAddCommunicationUnitsToBusProcedure = "/io.clbs.openhes.services.svcapi.ApiService/AddCommunicationUnitsToBus"
	// ApiServiceRemoveCommunicationUnitsFromBusProcedure is the fully-qualified name of the
	// ApiService's RemoveCommunicationUnitsFromBus RPC.
	ApiServiceRemoveCommunicationUnitsFromBusProcedure = "/io.clbs.openhes.services.svcapi.ApiService/RemoveCommunicationUnitsFromBus"
	// ApiServiceCreateDeviceProcedure is the fully-qualified name of the ApiService's CreateDevice RPC.
	ApiServiceCreateDeviceProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateDevice"
	// ApiServiceListDevicesProcedure is the fully-qualified name of the ApiService's ListDevices RPC.
	ApiServiceListDevicesProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListDevices"
	// ApiServiceGetDeviceProcedure is the fully-qualified name of the ApiService's GetDevice RPC.
	ApiServiceGetDeviceProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDevice"
	// ApiServiceSetDeviceCommunicationUnitsProcedure is the fully-qualified name of the ApiService's
	// SetDeviceCommunicationUnits RPC.
	ApiServiceSetDeviceCommunicationUnitsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/SetDeviceCommunicationUnits"
	// ApiServiceGetDeviceCommunicationUnitsProcedure is the fully-qualified name of the ApiService's
	// GetDeviceCommunicationUnits RPC.
	ApiServiceGetDeviceCommunicationUnitsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceCommunicationUnits"
	// ApiServiceCreateDeviceGroupProcedure is the fully-qualified name of the ApiService's
	// CreateDeviceGroup RPC.
	ApiServiceCreateDeviceGroupProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateDeviceGroup"
	// ApiServiceListDeviceGroupsProcedure is the fully-qualified name of the ApiService's
	// ListDeviceGroups RPC.
	ApiServiceListDeviceGroupsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListDeviceGroups"
	// ApiServiceGetDeviceGroupProcedure is the fully-qualified name of the ApiService's GetDeviceGroup
	// RPC.
	ApiServiceGetDeviceGroupProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceGroup"
	// ApiServiceAddDevicesToGroupProcedure is the fully-qualified name of the ApiService's
	// AddDevicesToGroup RPC.
	ApiServiceAddDevicesToGroupProcedure = "/io.clbs.openhes.services.svcapi.ApiService/AddDevicesToGroup"
	// ApiServiceRemoveDevicesFromGroupProcedure is the fully-qualified name of the ApiService's
	// RemoveDevicesFromGroup RPC.
	ApiServiceRemoveDevicesFromGroupProcedure = "/io.clbs.openhes.services.svcapi.ApiService/RemoveDevicesFromGroup"
	// ApiServiceListModemPoolsProcedure is the fully-qualified name of the ApiService's ListModemPools
	// RPC.
	ApiServiceListModemPoolsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListModemPools"
	// ApiServiceGetModemPoolProcedure is the fully-qualified name of the ApiService's GetModemPool RPC.
	ApiServiceGetModemPoolProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetModemPool"
	// ApiServiceCreateModemPoolProcedure is the fully-qualified name of the ApiService's
	// CreateModemPool RPC.
	ApiServiceCreateModemPoolProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateModemPool"
	// ApiServiceUpdateModemPoolProcedure is the fully-qualified name of the ApiService's
	// UpdateModemPool RPC.
	ApiServiceUpdateModemPoolProcedure = "/io.clbs.openhes.services.svcapi.ApiService/UpdateModemPool"
	// ApiServiceDeleteModemPoolProcedure is the fully-qualified name of the ApiService's
	// DeleteModemPool RPC.
	ApiServiceDeleteModemPoolProcedure = "/io.clbs.openhes.services.svcapi.ApiService/DeleteModemPool"
	// ApiServiceCreateModemProcedure is the fully-qualified name of the ApiService's CreateModem RPC.
	ApiServiceCreateModemProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateModem"
	// ApiServiceUpdateModemProcedure is the fully-qualified name of the ApiService's UpdateModem RPC.
	ApiServiceUpdateModemProcedure = "/io.clbs.openhes.services.svcapi.ApiService/UpdateModem"
	// ApiServiceDeleteModemProcedure is the fully-qualified name of the ApiService's DeleteModem RPC.
	ApiServiceDeleteModemProcedure = "/io.clbs.openhes.services.svcapi.ApiService/DeleteModem"
	// ApiServiceGetConfigProcedure is the fully-qualified name of the ApiService's GetConfig RPC.
	ApiServiceGetConfigProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetConfig"
	// ApiServiceSetConfigProcedure is the fully-qualified name of the ApiService's SetConfig RPC.
	ApiServiceSetConfigProcedure = "/io.clbs.openhes.services.svcapi.ApiService/SetConfig"
)

// ApiServiceClient is a client for the io.clbs.openhes.services.svcapi.ApiService service.
type ApiServiceClient interface {
	// @group: Bulks
	// @tag: acquisition
	// @tag: action
	// Starts a new bulk of jobs.
	CreateBulk(context.Context, *connect.Request[acquisition.CreateBulkRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Bulks
	// Retrieves the list of bulks.
	ListBulks(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfBulk], error)
	// @group: Bulks
	// Retrieves the bulk info and status.
	GetBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Bulk], error)
	// @group: Bulks
	// Cancels the bulk of jobs.
	CancelBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Driver Info
	// Retrieves the list of drivers.
	ListDrivers(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDriver], error)
	// @group: Driver Info
	// Retrieves the driver.
	GetDriver(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Driver], error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to register a new communication unit. The parameter contains the communication unit specification.
	CreateCommunicationUnit(context.Context, *connect.Request[acquisition.CreateCommunicationUnitRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	ListCommunicationUnits(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfCommunicationUnit], error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	GetCommunicationUnit(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.CommunicationUnit], error)
	// @group: Devices
	// @tag: communicationunitbus
	CreateCommunicationUnitBus(context.Context, *connect.Request[acquisition.CreateCommunicationUnitBusRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: communicationunitbus
	ListCommunicationUnitBuses(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfCommunicationUnitBus], error)
	// @group: Devices
	// @tag: communicationunitbus
	AddCommunicationUnitsToBus(context.Context, *connect.Request[acquisition.AddCommunicationUnitsToBusRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: communicationunitbus
	RemoveCommunicationUnitsFromBus(context.Context, *connect.Request[acquisition.RemoveCommunicationUnitsFromBusRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to register a new device. The parameter contains the device specification.
	CreateDevice(context.Context, *connect.Request[acquisition.CreateDeviceRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	ListDevices(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDevice], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	GetDevice(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Device], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to replace ordered set of linked communication units.
	SetDeviceCommunicationUnits(context.Context, *connect.Request[acquisition.SetDeviceCommunicationUnitsRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get communication units definitions linked to the device(s).
	GetDeviceCommunicationUnits(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ListOfDeviceCommunicationUnit], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to create a new device group. The parameter contains the device group specification.
	CreateDeviceGroup(context.Context, *connect.Request[acquisition.CreateDeviceGroupRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: devicegroup
	// The method returns a list of device groups.
	ListDeviceGroups(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceGroup], error)
	// @group: Devices
	// @tag: devicegroup
	// The method returns single device group.
	// @param The device group identifier.
	// @return The device group specification.
	GetDeviceGroup(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceGroup], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to add a new device to the device group. The parameter contains the device group specification.
	AddDevicesToGroup(context.Context, *connect.Request[acquisition.AddDevicesToGroupRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to remove a device from the device group. The parameter contains the device group specification.
	RemoveDevicesFromGroup(context.Context, *connect.Request[acquisition.RemoveDevicesFromGroupRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modempool
	// The method to get list of the modem pools.
	ListModemPools(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfModemPool], error)
	// @group: Devices
	// @tag: modempool
	// The method to get the information about the modem pool. The method returns the modem pool information.
	GetModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ModemPool], error)
	// @group: Devices
	// @tag: modempool
	// The method to create a new modem pool.
	CreateModemPool(context.Context, *connect.Request[acquisition.SetModemPoolRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: modempool
	// The method to update the modem pool.
	UpdateModemPool(context.Context, *connect.Request[acquisition.SetModemPoolRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modempool
	// The method to delete the modem pool.
	DeleteModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modem
	// The method to create a new modem within the pool.
	CreateModem(context.Context, *connect.Request[acquisition.SetModemRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: modem
	// The method to update the modem within the pool.
	UpdateModem(context.Context, *connect.Request[acquisition.SetModemRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modem
	// The method to delete the modem.
	DeleteModem(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Configuration
	// The method to get the system configuration.
	GetConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[system.SystemConfig], error)
	// @group: Configuration
	// The method to set the system configuration.
	SetConfig(context.Context, *connect.Request[system.SystemConfig]) (*connect.Response[emptypb.Empty], error)
}

// NewApiServiceClient constructs a client for the io.clbs.openhes.services.svcapi.ApiService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ApiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	apiServiceMethods := svcapi.File_services_svcapi_api_proto.Services().ByName("ApiService").Methods()
	return &apiServiceClient{
		createBulk: connect.NewClient[acquisition.CreateBulkRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateBulkProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateBulk")),
			connect.WithClientOptions(opts...),
		),
		listBulks: connect.NewClient[common.ListSelector, acquisition.ListOfBulk](
			httpClient,
			baseURL+ApiServiceListBulksProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListBulks")),
			connect.WithClientOptions(opts...),
		),
		getBulk: connect.NewClient[wrapperspb.StringValue, acquisition.Bulk](
			httpClient,
			baseURL+ApiServiceGetBulkProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetBulk")),
			connect.WithClientOptions(opts...),
		),
		cancelBulk: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceCancelBulkProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CancelBulk")),
			connect.WithClientOptions(opts...),
		),
		listDrivers: connect.NewClient[common.ListSelector, acquisition.ListOfDriver](
			httpClient,
			baseURL+ApiServiceListDriversProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListDrivers")),
			connect.WithClientOptions(opts...),
		),
		getDriver: connect.NewClient[wrapperspb.StringValue, acquisition.Driver](
			httpClient,
			baseURL+ApiServiceGetDriverProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDriver")),
			connect.WithClientOptions(opts...),
		),
		createCommunicationUnit: connect.NewClient[acquisition.CreateCommunicationUnitRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateCommunicationUnitProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateCommunicationUnit")),
			connect.WithClientOptions(opts...),
		),
		listCommunicationUnits: connect.NewClient[common.ListSelector, acquisition.ListOfCommunicationUnit](
			httpClient,
			baseURL+ApiServiceListCommunicationUnitsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListCommunicationUnits")),
			connect.WithClientOptions(opts...),
		),
		getCommunicationUnit: connect.NewClient[wrapperspb.StringValue, acquisition.CommunicationUnit](
			httpClient,
			baseURL+ApiServiceGetCommunicationUnitProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetCommunicationUnit")),
			connect.WithClientOptions(opts...),
		),
		createCommunicationUnitBus: connect.NewClient[acquisition.CreateCommunicationUnitBusRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateCommunicationUnitBusProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateCommunicationUnitBus")),
			connect.WithClientOptions(opts...),
		),
		listCommunicationUnitBuses: connect.NewClient[common.ListSelector, acquisition.ListOfCommunicationUnitBus](
			httpClient,
			baseURL+ApiServiceListCommunicationUnitBusesProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListCommunicationUnitBuses")),
			connect.WithClientOptions(opts...),
		),
		addCommunicationUnitsToBus: connect.NewClient[acquisition.AddCommunicationUnitsToBusRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceAddCommunicationUnitsToBusProcedure,
			connect.WithSchema(apiServiceMethods.ByName("AddCommunicationUnitsToBus")),
			connect.WithClientOptions(opts...),
		),
		removeCommunicationUnitsFromBus: connect.NewClient[acquisition.RemoveCommunicationUnitsFromBusRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceRemoveCommunicationUnitsFromBusProcedure,
			connect.WithSchema(apiServiceMethods.ByName("RemoveCommunicationUnitsFromBus")),
			connect.WithClientOptions(opts...),
		),
		createDevice: connect.NewClient[acquisition.CreateDeviceRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateDeviceProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateDevice")),
			connect.WithClientOptions(opts...),
		),
		listDevices: connect.NewClient[common.ListSelector, acquisition.ListOfDevice](
			httpClient,
			baseURL+ApiServiceListDevicesProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListDevices")),
			connect.WithClientOptions(opts...),
		),
		getDevice: connect.NewClient[wrapperspb.StringValue, acquisition.Device](
			httpClient,
			baseURL+ApiServiceGetDeviceProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDevice")),
			connect.WithClientOptions(opts...),
		),
		setDeviceCommunicationUnits: connect.NewClient[acquisition.SetDeviceCommunicationUnitsRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceSetDeviceCommunicationUnitsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("SetDeviceCommunicationUnits")),
			connect.WithClientOptions(opts...),
		),
		getDeviceCommunicationUnits: connect.NewClient[wrapperspb.StringValue, acquisition.ListOfDeviceCommunicationUnit](
			httpClient,
			baseURL+ApiServiceGetDeviceCommunicationUnitsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceCommunicationUnits")),
			connect.WithClientOptions(opts...),
		),
		createDeviceGroup: connect.NewClient[acquisition.CreateDeviceGroupRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateDeviceGroupProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateDeviceGroup")),
			connect.WithClientOptions(opts...),
		),
		listDeviceGroups: connect.NewClient[common.ListSelector, acquisition.ListOfDeviceGroup](
			httpClient,
			baseURL+ApiServiceListDeviceGroupsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListDeviceGroups")),
			connect.WithClientOptions(opts...),
		),
		getDeviceGroup: connect.NewClient[wrapperspb.StringValue, acquisition.DeviceGroup](
			httpClient,
			baseURL+ApiServiceGetDeviceGroupProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceGroup")),
			connect.WithClientOptions(opts...),
		),
		addDevicesToGroup: connect.NewClient[acquisition.AddDevicesToGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceAddDevicesToGroupProcedure,
			connect.WithSchema(apiServiceMethods.ByName("AddDevicesToGroup")),
			connect.WithClientOptions(opts...),
		),
		removeDevicesFromGroup: connect.NewClient[acquisition.RemoveDevicesFromGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceRemoveDevicesFromGroupProcedure,
			connect.WithSchema(apiServiceMethods.ByName("RemoveDevicesFromGroup")),
			connect.WithClientOptions(opts...),
		),
		listModemPools: connect.NewClient[common.ListSelector, acquisition.ListOfModemPool](
			httpClient,
			baseURL+ApiServiceListModemPoolsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListModemPools")),
			connect.WithClientOptions(opts...),
		),
		getModemPool: connect.NewClient[wrapperspb.StringValue, acquisition.ModemPool](
			httpClient,
			baseURL+ApiServiceGetModemPoolProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetModemPool")),
			connect.WithClientOptions(opts...),
		),
		createModemPool: connect.NewClient[acquisition.SetModemPoolRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateModemPoolProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateModemPool")),
			connect.WithClientOptions(opts...),
		),
		updateModemPool: connect.NewClient[acquisition.SetModemPoolRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateModemPoolProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateModemPool")),
			connect.WithClientOptions(opts...),
		),
		deleteModemPool: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceDeleteModemPoolProcedure,
			connect.WithSchema(apiServiceMethods.ByName("DeleteModemPool")),
			connect.WithClientOptions(opts...),
		),
		createModem: connect.NewClient[acquisition.SetModemRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateModemProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateModem")),
			connect.WithClientOptions(opts...),
		),
		updateModem: connect.NewClient[acquisition.SetModemRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateModemProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateModem")),
			connect.WithClientOptions(opts...),
		),
		deleteModem: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceDeleteModemProcedure,
			connect.WithSchema(apiServiceMethods.ByName("DeleteModem")),
			connect.WithClientOptions(opts...),
		),
		getConfig: connect.NewClient[emptypb.Empty, system.SystemConfig](
			httpClient,
			baseURL+ApiServiceGetConfigProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetConfig")),
			connect.WithClientOptions(opts...),
		),
		setConfig: connect.NewClient[system.SystemConfig, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceSetConfigProcedure,
			connect.WithSchema(apiServiceMethods.ByName("SetConfig")),
			connect.WithClientOptions(opts...),
		),
	}
}

// apiServiceClient implements ApiServiceClient.
type apiServiceClient struct {
	createBulk                      *connect.Client[acquisition.CreateBulkRequest, wrapperspb.StringValue]
	listBulks                       *connect.Client[common.ListSelector, acquisition.ListOfBulk]
	getBulk                         *connect.Client[wrapperspb.StringValue, acquisition.Bulk]
	cancelBulk                      *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	listDrivers                     *connect.Client[common.ListSelector, acquisition.ListOfDriver]
	getDriver                       *connect.Client[wrapperspb.StringValue, acquisition.Driver]
	createCommunicationUnit         *connect.Client[acquisition.CreateCommunicationUnitRequest, wrapperspb.StringValue]
	listCommunicationUnits          *connect.Client[common.ListSelector, acquisition.ListOfCommunicationUnit]
	getCommunicationUnit            *connect.Client[wrapperspb.StringValue, acquisition.CommunicationUnit]
	createCommunicationUnitBus      *connect.Client[acquisition.CreateCommunicationUnitBusRequest, wrapperspb.StringValue]
	listCommunicationUnitBuses      *connect.Client[common.ListSelector, acquisition.ListOfCommunicationUnitBus]
	addCommunicationUnitsToBus      *connect.Client[acquisition.AddCommunicationUnitsToBusRequest, emptypb.Empty]
	removeCommunicationUnitsFromBus *connect.Client[acquisition.RemoveCommunicationUnitsFromBusRequest, emptypb.Empty]
	createDevice                    *connect.Client[acquisition.CreateDeviceRequest, wrapperspb.StringValue]
	listDevices                     *connect.Client[common.ListSelector, acquisition.ListOfDevice]
	getDevice                       *connect.Client[wrapperspb.StringValue, acquisition.Device]
	setDeviceCommunicationUnits     *connect.Client[acquisition.SetDeviceCommunicationUnitsRequest, emptypb.Empty]
	getDeviceCommunicationUnits     *connect.Client[wrapperspb.StringValue, acquisition.ListOfDeviceCommunicationUnit]
	createDeviceGroup               *connect.Client[acquisition.CreateDeviceGroupRequest, wrapperspb.StringValue]
	listDeviceGroups                *connect.Client[common.ListSelector, acquisition.ListOfDeviceGroup]
	getDeviceGroup                  *connect.Client[wrapperspb.StringValue, acquisition.DeviceGroup]
	addDevicesToGroup               *connect.Client[acquisition.AddDevicesToGroupRequest, emptypb.Empty]
	removeDevicesFromGroup          *connect.Client[acquisition.RemoveDevicesFromGroupRequest, emptypb.Empty]
	listModemPools                  *connect.Client[common.ListSelector, acquisition.ListOfModemPool]
	getModemPool                    *connect.Client[wrapperspb.StringValue, acquisition.ModemPool]
	createModemPool                 *connect.Client[acquisition.SetModemPoolRequest, wrapperspb.StringValue]
	updateModemPool                 *connect.Client[acquisition.SetModemPoolRequest, emptypb.Empty]
	deleteModemPool                 *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	createModem                     *connect.Client[acquisition.SetModemRequest, wrapperspb.StringValue]
	updateModem                     *connect.Client[acquisition.SetModemRequest, emptypb.Empty]
	deleteModem                     *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	getConfig                       *connect.Client[emptypb.Empty, system.SystemConfig]
	setConfig                       *connect.Client[system.SystemConfig, emptypb.Empty]
}

// CreateBulk calls io.clbs.openhes.services.svcapi.ApiService.CreateBulk.
func (c *apiServiceClient) CreateBulk(ctx context.Context, req *connect.Request[acquisition.CreateBulkRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createBulk.CallUnary(ctx, req)
}

// ListBulks calls io.clbs.openhes.services.svcapi.ApiService.ListBulks.
func (c *apiServiceClient) ListBulks(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfBulk], error) {
	return c.listBulks.CallUnary(ctx, req)
}

// GetBulk calls io.clbs.openhes.services.svcapi.ApiService.GetBulk.
func (c *apiServiceClient) GetBulk(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Bulk], error) {
	return c.getBulk.CallUnary(ctx, req)
}

// CancelBulk calls io.clbs.openhes.services.svcapi.ApiService.CancelBulk.
func (c *apiServiceClient) CancelBulk(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.cancelBulk.CallUnary(ctx, req)
}

// ListDrivers calls io.clbs.openhes.services.svcapi.ApiService.ListDrivers.
func (c *apiServiceClient) ListDrivers(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDriver], error) {
	return c.listDrivers.CallUnary(ctx, req)
}

// GetDriver calls io.clbs.openhes.services.svcapi.ApiService.GetDriver.
func (c *apiServiceClient) GetDriver(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Driver], error) {
	return c.getDriver.CallUnary(ctx, req)
}

// CreateCommunicationUnit calls io.clbs.openhes.services.svcapi.ApiService.CreateCommunicationUnit.
func (c *apiServiceClient) CreateCommunicationUnit(ctx context.Context, req *connect.Request[acquisition.CreateCommunicationUnitRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createCommunicationUnit.CallUnary(ctx, req)
}

// ListCommunicationUnits calls io.clbs.openhes.services.svcapi.ApiService.ListCommunicationUnits.
func (c *apiServiceClient) ListCommunicationUnits(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfCommunicationUnit], error) {
	return c.listCommunicationUnits.CallUnary(ctx, req)
}

// GetCommunicationUnit calls io.clbs.openhes.services.svcapi.ApiService.GetCommunicationUnit.
func (c *apiServiceClient) GetCommunicationUnit(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.CommunicationUnit], error) {
	return c.getCommunicationUnit.CallUnary(ctx, req)
}

// CreateCommunicationUnitBus calls
// io.clbs.openhes.services.svcapi.ApiService.CreateCommunicationUnitBus.
func (c *apiServiceClient) CreateCommunicationUnitBus(ctx context.Context, req *connect.Request[acquisition.CreateCommunicationUnitBusRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createCommunicationUnitBus.CallUnary(ctx, req)
}

// ListCommunicationUnitBuses calls
// io.clbs.openhes.services.svcapi.ApiService.ListCommunicationUnitBuses.
func (c *apiServiceClient) ListCommunicationUnitBuses(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfCommunicationUnitBus], error) {
	return c.listCommunicationUnitBuses.CallUnary(ctx, req)
}

// AddCommunicationUnitsToBus calls
// io.clbs.openhes.services.svcapi.ApiService.AddCommunicationUnitsToBus.
func (c *apiServiceClient) AddCommunicationUnitsToBus(ctx context.Context, req *connect.Request[acquisition.AddCommunicationUnitsToBusRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.addCommunicationUnitsToBus.CallUnary(ctx, req)
}

// RemoveCommunicationUnitsFromBus calls
// io.clbs.openhes.services.svcapi.ApiService.RemoveCommunicationUnitsFromBus.
func (c *apiServiceClient) RemoveCommunicationUnitsFromBus(ctx context.Context, req *connect.Request[acquisition.RemoveCommunicationUnitsFromBusRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeCommunicationUnitsFromBus.CallUnary(ctx, req)
}

// CreateDevice calls io.clbs.openhes.services.svcapi.ApiService.CreateDevice.
func (c *apiServiceClient) CreateDevice(ctx context.Context, req *connect.Request[acquisition.CreateDeviceRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createDevice.CallUnary(ctx, req)
}

// ListDevices calls io.clbs.openhes.services.svcapi.ApiService.ListDevices.
func (c *apiServiceClient) ListDevices(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDevice], error) {
	return c.listDevices.CallUnary(ctx, req)
}

// GetDevice calls io.clbs.openhes.services.svcapi.ApiService.GetDevice.
func (c *apiServiceClient) GetDevice(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Device], error) {
	return c.getDevice.CallUnary(ctx, req)
}

// SetDeviceCommunicationUnits calls
// io.clbs.openhes.services.svcapi.ApiService.SetDeviceCommunicationUnits.
func (c *apiServiceClient) SetDeviceCommunicationUnits(ctx context.Context, req *connect.Request[acquisition.SetDeviceCommunicationUnitsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setDeviceCommunicationUnits.CallUnary(ctx, req)
}

// GetDeviceCommunicationUnits calls
// io.clbs.openhes.services.svcapi.ApiService.GetDeviceCommunicationUnits.
func (c *apiServiceClient) GetDeviceCommunicationUnits(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ListOfDeviceCommunicationUnit], error) {
	return c.getDeviceCommunicationUnits.CallUnary(ctx, req)
}

// CreateDeviceGroup calls io.clbs.openhes.services.svcapi.ApiService.CreateDeviceGroup.
func (c *apiServiceClient) CreateDeviceGroup(ctx context.Context, req *connect.Request[acquisition.CreateDeviceGroupRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createDeviceGroup.CallUnary(ctx, req)
}

// ListDeviceGroups calls io.clbs.openhes.services.svcapi.ApiService.ListDeviceGroups.
func (c *apiServiceClient) ListDeviceGroups(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceGroup], error) {
	return c.listDeviceGroups.CallUnary(ctx, req)
}

// GetDeviceGroup calls io.clbs.openhes.services.svcapi.ApiService.GetDeviceGroup.
func (c *apiServiceClient) GetDeviceGroup(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceGroup], error) {
	return c.getDeviceGroup.CallUnary(ctx, req)
}

// AddDevicesToGroup calls io.clbs.openhes.services.svcapi.ApiService.AddDevicesToGroup.
func (c *apiServiceClient) AddDevicesToGroup(ctx context.Context, req *connect.Request[acquisition.AddDevicesToGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.addDevicesToGroup.CallUnary(ctx, req)
}

// RemoveDevicesFromGroup calls io.clbs.openhes.services.svcapi.ApiService.RemoveDevicesFromGroup.
func (c *apiServiceClient) RemoveDevicesFromGroup(ctx context.Context, req *connect.Request[acquisition.RemoveDevicesFromGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeDevicesFromGroup.CallUnary(ctx, req)
}

// ListModemPools calls io.clbs.openhes.services.svcapi.ApiService.ListModemPools.
func (c *apiServiceClient) ListModemPools(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfModemPool], error) {
	return c.listModemPools.CallUnary(ctx, req)
}

// GetModemPool calls io.clbs.openhes.services.svcapi.ApiService.GetModemPool.
func (c *apiServiceClient) GetModemPool(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ModemPool], error) {
	return c.getModemPool.CallUnary(ctx, req)
}

// CreateModemPool calls io.clbs.openhes.services.svcapi.ApiService.CreateModemPool.
func (c *apiServiceClient) CreateModemPool(ctx context.Context, req *connect.Request[acquisition.SetModemPoolRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createModemPool.CallUnary(ctx, req)
}

// UpdateModemPool calls io.clbs.openhes.services.svcapi.ApiService.UpdateModemPool.
func (c *apiServiceClient) UpdateModemPool(ctx context.Context, req *connect.Request[acquisition.SetModemPoolRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateModemPool.CallUnary(ctx, req)
}

// DeleteModemPool calls io.clbs.openhes.services.svcapi.ApiService.DeleteModemPool.
func (c *apiServiceClient) DeleteModemPool(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteModemPool.CallUnary(ctx, req)
}

// CreateModem calls io.clbs.openhes.services.svcapi.ApiService.CreateModem.
func (c *apiServiceClient) CreateModem(ctx context.Context, req *connect.Request[acquisition.SetModemRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createModem.CallUnary(ctx, req)
}

// UpdateModem calls io.clbs.openhes.services.svcapi.ApiService.UpdateModem.
func (c *apiServiceClient) UpdateModem(ctx context.Context, req *connect.Request[acquisition.SetModemRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateModem.CallUnary(ctx, req)
}

// DeleteModem calls io.clbs.openhes.services.svcapi.ApiService.DeleteModem.
func (c *apiServiceClient) DeleteModem(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteModem.CallUnary(ctx, req)
}

// GetConfig calls io.clbs.openhes.services.svcapi.ApiService.GetConfig.
func (c *apiServiceClient) GetConfig(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[system.SystemConfig], error) {
	return c.getConfig.CallUnary(ctx, req)
}

// SetConfig calls io.clbs.openhes.services.svcapi.ApiService.SetConfig.
func (c *apiServiceClient) SetConfig(ctx context.Context, req *connect.Request[system.SystemConfig]) (*connect.Response[emptypb.Empty], error) {
	return c.setConfig.CallUnary(ctx, req)
}

// ApiServiceHandler is an implementation of the io.clbs.openhes.services.svcapi.ApiService service.
type ApiServiceHandler interface {
	// @group: Bulks
	// @tag: acquisition
	// @tag: action
	// Starts a new bulk of jobs.
	CreateBulk(context.Context, *connect.Request[acquisition.CreateBulkRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Bulks
	// Retrieves the list of bulks.
	ListBulks(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfBulk], error)
	// @group: Bulks
	// Retrieves the bulk info and status.
	GetBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Bulk], error)
	// @group: Bulks
	// Cancels the bulk of jobs.
	CancelBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Driver Info
	// Retrieves the list of drivers.
	ListDrivers(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDriver], error)
	// @group: Driver Info
	// Retrieves the driver.
	GetDriver(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Driver], error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to register a new communication unit. The parameter contains the communication unit specification.
	CreateCommunicationUnit(context.Context, *connect.Request[acquisition.CreateCommunicationUnitRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	ListCommunicationUnits(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfCommunicationUnit], error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	GetCommunicationUnit(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.CommunicationUnit], error)
	// @group: Devices
	// @tag: communicationunitbus
	CreateCommunicationUnitBus(context.Context, *connect.Request[acquisition.CreateCommunicationUnitBusRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: communicationunitbus
	ListCommunicationUnitBuses(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfCommunicationUnitBus], error)
	// @group: Devices
	// @tag: communicationunitbus
	AddCommunicationUnitsToBus(context.Context, *connect.Request[acquisition.AddCommunicationUnitsToBusRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: communicationunitbus
	RemoveCommunicationUnitsFromBus(context.Context, *connect.Request[acquisition.RemoveCommunicationUnitsFromBusRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to register a new device. The parameter contains the device specification.
	CreateDevice(context.Context, *connect.Request[acquisition.CreateDeviceRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	ListDevices(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDevice], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	GetDevice(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Device], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to replace ordered set of linked communication units.
	SetDeviceCommunicationUnits(context.Context, *connect.Request[acquisition.SetDeviceCommunicationUnitsRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get communication units definitions linked to the device(s).
	GetDeviceCommunicationUnits(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ListOfDeviceCommunicationUnit], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to create a new device group. The parameter contains the device group specification.
	CreateDeviceGroup(context.Context, *connect.Request[acquisition.CreateDeviceGroupRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: devicegroup
	// The method returns a list of device groups.
	ListDeviceGroups(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceGroup], error)
	// @group: Devices
	// @tag: devicegroup
	// The method returns single device group.
	// @param The device group identifier.
	// @return The device group specification.
	GetDeviceGroup(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceGroup], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to add a new device to the device group. The parameter contains the device group specification.
	AddDevicesToGroup(context.Context, *connect.Request[acquisition.AddDevicesToGroupRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to remove a device from the device group. The parameter contains the device group specification.
	RemoveDevicesFromGroup(context.Context, *connect.Request[acquisition.RemoveDevicesFromGroupRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modempool
	// The method to get list of the modem pools.
	ListModemPools(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfModemPool], error)
	// @group: Devices
	// @tag: modempool
	// The method to get the information about the modem pool. The method returns the modem pool information.
	GetModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ModemPool], error)
	// @group: Devices
	// @tag: modempool
	// The method to create a new modem pool.
	CreateModemPool(context.Context, *connect.Request[acquisition.SetModemPoolRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: modempool
	// The method to update the modem pool.
	UpdateModemPool(context.Context, *connect.Request[acquisition.SetModemPoolRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modempool
	// The method to delete the modem pool.
	DeleteModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modem
	// The method to create a new modem within the pool.
	CreateModem(context.Context, *connect.Request[acquisition.SetModemRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: modem
	// The method to update the modem within the pool.
	UpdateModem(context.Context, *connect.Request[acquisition.SetModemRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modem
	// The method to delete the modem.
	DeleteModem(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Configuration
	// The method to get the system configuration.
	GetConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[system.SystemConfig], error)
	// @group: Configuration
	// The method to set the system configuration.
	SetConfig(context.Context, *connect.Request[system.SystemConfig]) (*connect.Response[emptypb.Empty], error)
}

// NewApiServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApiServiceHandler(svc ApiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	apiServiceMethods := svcapi.File_services_svcapi_api_proto.Services().ByName("ApiService").Methods()
	apiServiceCreateBulkHandler := connect.NewUnaryHandler(
		ApiServiceCreateBulkProcedure,
		svc.CreateBulk,
		connect.WithSchema(apiServiceMethods.ByName("CreateBulk")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListBulksHandler := connect.NewUnaryHandler(
		ApiServiceListBulksProcedure,
		svc.ListBulks,
		connect.WithSchema(apiServiceMethods.ByName("ListBulks")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetBulkHandler := connect.NewUnaryHandler(
		ApiServiceGetBulkProcedure,
		svc.GetBulk,
		connect.WithSchema(apiServiceMethods.ByName("GetBulk")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCancelBulkHandler := connect.NewUnaryHandler(
		ApiServiceCancelBulkProcedure,
		svc.CancelBulk,
		connect.WithSchema(apiServiceMethods.ByName("CancelBulk")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListDriversHandler := connect.NewUnaryHandler(
		ApiServiceListDriversProcedure,
		svc.ListDrivers,
		connect.WithSchema(apiServiceMethods.ByName("ListDrivers")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDriverHandler := connect.NewUnaryHandler(
		ApiServiceGetDriverProcedure,
		svc.GetDriver,
		connect.WithSchema(apiServiceMethods.ByName("GetDriver")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateCommunicationUnitHandler := connect.NewUnaryHandler(
		ApiServiceCreateCommunicationUnitProcedure,
		svc.CreateCommunicationUnit,
		connect.WithSchema(apiServiceMethods.ByName("CreateCommunicationUnit")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListCommunicationUnitsHandler := connect.NewUnaryHandler(
		ApiServiceListCommunicationUnitsProcedure,
		svc.ListCommunicationUnits,
		connect.WithSchema(apiServiceMethods.ByName("ListCommunicationUnits")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetCommunicationUnitHandler := connect.NewUnaryHandler(
		ApiServiceGetCommunicationUnitProcedure,
		svc.GetCommunicationUnit,
		connect.WithSchema(apiServiceMethods.ByName("GetCommunicationUnit")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateCommunicationUnitBusHandler := connect.NewUnaryHandler(
		ApiServiceCreateCommunicationUnitBusProcedure,
		svc.CreateCommunicationUnitBus,
		connect.WithSchema(apiServiceMethods.ByName("CreateCommunicationUnitBus")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListCommunicationUnitBusesHandler := connect.NewUnaryHandler(
		ApiServiceListCommunicationUnitBusesProcedure,
		svc.ListCommunicationUnitBuses,
		connect.WithSchema(apiServiceMethods.ByName("ListCommunicationUnitBuses")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceAddCommunicationUnitsToBusHandler := connect.NewUnaryHandler(
		ApiServiceAddCommunicationUnitsToBusProcedure,
		svc.AddCommunicationUnitsToBus,
		connect.WithSchema(apiServiceMethods.ByName("AddCommunicationUnitsToBus")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceRemoveCommunicationUnitsFromBusHandler := connect.NewUnaryHandler(
		ApiServiceRemoveCommunicationUnitsFromBusProcedure,
		svc.RemoveCommunicationUnitsFromBus,
		connect.WithSchema(apiServiceMethods.ByName("RemoveCommunicationUnitsFromBus")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateDeviceHandler := connect.NewUnaryHandler(
		ApiServiceCreateDeviceProcedure,
		svc.CreateDevice,
		connect.WithSchema(apiServiceMethods.ByName("CreateDevice")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListDevicesHandler := connect.NewUnaryHandler(
		ApiServiceListDevicesProcedure,
		svc.ListDevices,
		connect.WithSchema(apiServiceMethods.ByName("ListDevices")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceHandler := connect.NewUnaryHandler(
		ApiServiceGetDeviceProcedure,
		svc.GetDevice,
		connect.WithSchema(apiServiceMethods.ByName("GetDevice")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceSetDeviceCommunicationUnitsHandler := connect.NewUnaryHandler(
		ApiServiceSetDeviceCommunicationUnitsProcedure,
		svc.SetDeviceCommunicationUnits,
		connect.WithSchema(apiServiceMethods.ByName("SetDeviceCommunicationUnits")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceCommunicationUnitsHandler := connect.NewUnaryHandler(
		ApiServiceGetDeviceCommunicationUnitsProcedure,
		svc.GetDeviceCommunicationUnits,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceCommunicationUnits")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateDeviceGroupHandler := connect.NewUnaryHandler(
		ApiServiceCreateDeviceGroupProcedure,
		svc.CreateDeviceGroup,
		connect.WithSchema(apiServiceMethods.ByName("CreateDeviceGroup")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListDeviceGroupsHandler := connect.NewUnaryHandler(
		ApiServiceListDeviceGroupsProcedure,
		svc.ListDeviceGroups,
		connect.WithSchema(apiServiceMethods.ByName("ListDeviceGroups")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceGroupHandler := connect.NewUnaryHandler(
		ApiServiceGetDeviceGroupProcedure,
		svc.GetDeviceGroup,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceGroup")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceAddDevicesToGroupHandler := connect.NewUnaryHandler(
		ApiServiceAddDevicesToGroupProcedure,
		svc.AddDevicesToGroup,
		connect.WithSchema(apiServiceMethods.ByName("AddDevicesToGroup")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceRemoveDevicesFromGroupHandler := connect.NewUnaryHandler(
		ApiServiceRemoveDevicesFromGroupProcedure,
		svc.RemoveDevicesFromGroup,
		connect.WithSchema(apiServiceMethods.ByName("RemoveDevicesFromGroup")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListModemPoolsHandler := connect.NewUnaryHandler(
		ApiServiceListModemPoolsProcedure,
		svc.ListModemPools,
		connect.WithSchema(apiServiceMethods.ByName("ListModemPools")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetModemPoolHandler := connect.NewUnaryHandler(
		ApiServiceGetModemPoolProcedure,
		svc.GetModemPool,
		connect.WithSchema(apiServiceMethods.ByName("GetModemPool")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateModemPoolHandler := connect.NewUnaryHandler(
		ApiServiceCreateModemPoolProcedure,
		svc.CreateModemPool,
		connect.WithSchema(apiServiceMethods.ByName("CreateModemPool")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateModemPoolHandler := connect.NewUnaryHandler(
		ApiServiceUpdateModemPoolProcedure,
		svc.UpdateModemPool,
		connect.WithSchema(apiServiceMethods.ByName("UpdateModemPool")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceDeleteModemPoolHandler := connect.NewUnaryHandler(
		ApiServiceDeleteModemPoolProcedure,
		svc.DeleteModemPool,
		connect.WithSchema(apiServiceMethods.ByName("DeleteModemPool")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateModemHandler := connect.NewUnaryHandler(
		ApiServiceCreateModemProcedure,
		svc.CreateModem,
		connect.WithSchema(apiServiceMethods.ByName("CreateModem")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateModemHandler := connect.NewUnaryHandler(
		ApiServiceUpdateModemProcedure,
		svc.UpdateModem,
		connect.WithSchema(apiServiceMethods.ByName("UpdateModem")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceDeleteModemHandler := connect.NewUnaryHandler(
		ApiServiceDeleteModemProcedure,
		svc.DeleteModem,
		connect.WithSchema(apiServiceMethods.ByName("DeleteModem")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetConfigHandler := connect.NewUnaryHandler(
		ApiServiceGetConfigProcedure,
		svc.GetConfig,
		connect.WithSchema(apiServiceMethods.ByName("GetConfig")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceSetConfigHandler := connect.NewUnaryHandler(
		ApiServiceSetConfigProcedure,
		svc.SetConfig,
		connect.WithSchema(apiServiceMethods.ByName("SetConfig")),
		connect.WithHandlerOptions(opts...),
	)
	return "/io.clbs.openhes.services.svcapi.ApiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApiServiceCreateBulkProcedure:
			apiServiceCreateBulkHandler.ServeHTTP(w, r)
		case ApiServiceListBulksProcedure:
			apiServiceListBulksHandler.ServeHTTP(w, r)
		case ApiServiceGetBulkProcedure:
			apiServiceGetBulkHandler.ServeHTTP(w, r)
		case ApiServiceCancelBulkProcedure:
			apiServiceCancelBulkHandler.ServeHTTP(w, r)
		case ApiServiceListDriversProcedure:
			apiServiceListDriversHandler.ServeHTTP(w, r)
		case ApiServiceGetDriverProcedure:
			apiServiceGetDriverHandler.ServeHTTP(w, r)
		case ApiServiceCreateCommunicationUnitProcedure:
			apiServiceCreateCommunicationUnitHandler.ServeHTTP(w, r)
		case ApiServiceListCommunicationUnitsProcedure:
			apiServiceListCommunicationUnitsHandler.ServeHTTP(w, r)
		case ApiServiceGetCommunicationUnitProcedure:
			apiServiceGetCommunicationUnitHandler.ServeHTTP(w, r)
		case ApiServiceCreateCommunicationUnitBusProcedure:
			apiServiceCreateCommunicationUnitBusHandler.ServeHTTP(w, r)
		case ApiServiceListCommunicationUnitBusesProcedure:
			apiServiceListCommunicationUnitBusesHandler.ServeHTTP(w, r)
		case ApiServiceAddCommunicationUnitsToBusProcedure:
			apiServiceAddCommunicationUnitsToBusHandler.ServeHTTP(w, r)
		case ApiServiceRemoveCommunicationUnitsFromBusProcedure:
			apiServiceRemoveCommunicationUnitsFromBusHandler.ServeHTTP(w, r)
		case ApiServiceCreateDeviceProcedure:
			apiServiceCreateDeviceHandler.ServeHTTP(w, r)
		case ApiServiceListDevicesProcedure:
			apiServiceListDevicesHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceProcedure:
			apiServiceGetDeviceHandler.ServeHTTP(w, r)
		case ApiServiceSetDeviceCommunicationUnitsProcedure:
			apiServiceSetDeviceCommunicationUnitsHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceCommunicationUnitsProcedure:
			apiServiceGetDeviceCommunicationUnitsHandler.ServeHTTP(w, r)
		case ApiServiceCreateDeviceGroupProcedure:
			apiServiceCreateDeviceGroupHandler.ServeHTTP(w, r)
		case ApiServiceListDeviceGroupsProcedure:
			apiServiceListDeviceGroupsHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceGroupProcedure:
			apiServiceGetDeviceGroupHandler.ServeHTTP(w, r)
		case ApiServiceAddDevicesToGroupProcedure:
			apiServiceAddDevicesToGroupHandler.ServeHTTP(w, r)
		case ApiServiceRemoveDevicesFromGroupProcedure:
			apiServiceRemoveDevicesFromGroupHandler.ServeHTTP(w, r)
		case ApiServiceListModemPoolsProcedure:
			apiServiceListModemPoolsHandler.ServeHTTP(w, r)
		case ApiServiceGetModemPoolProcedure:
			apiServiceGetModemPoolHandler.ServeHTTP(w, r)
		case ApiServiceCreateModemPoolProcedure:
			apiServiceCreateModemPoolHandler.ServeHTTP(w, r)
		case ApiServiceUpdateModemPoolProcedure:
			apiServiceUpdateModemPoolHandler.ServeHTTP(w, r)
		case ApiServiceDeleteModemPoolProcedure:
			apiServiceDeleteModemPoolHandler.ServeHTTP(w, r)
		case ApiServiceCreateModemProcedure:
			apiServiceCreateModemHandler.ServeHTTP(w, r)
		case ApiServiceUpdateModemProcedure:
			apiServiceUpdateModemHandler.ServeHTTP(w, r)
		case ApiServiceDeleteModemProcedure:
			apiServiceDeleteModemHandler.ServeHTTP(w, r)
		case ApiServiceGetConfigProcedure:
			apiServiceGetConfigHandler.ServeHTTP(w, r)
		case ApiServiceSetConfigProcedure:
			apiServiceSetConfigHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApiServiceHandler struct{}

func (UnimplementedApiServiceHandler) CreateBulk(context.Context, *connect.Request[acquisition.CreateBulkRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateBulk is not implemented"))
}

func (UnimplementedApiServiceHandler) ListBulks(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfBulk], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListBulks is not implemented"))
}

func (UnimplementedApiServiceHandler) GetBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Bulk], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetBulk is not implemented"))
}

func (UnimplementedApiServiceHandler) CancelBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CancelBulk is not implemented"))
}

func (UnimplementedApiServiceHandler) ListDrivers(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDriver], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListDrivers is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDriver(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Driver], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDriver is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateCommunicationUnit(context.Context, *connect.Request[acquisition.CreateCommunicationUnitRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateCommunicationUnit is not implemented"))
}

func (UnimplementedApiServiceHandler) ListCommunicationUnits(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfCommunicationUnit], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListCommunicationUnits is not implemented"))
}

func (UnimplementedApiServiceHandler) GetCommunicationUnit(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.CommunicationUnit], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetCommunicationUnit is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateCommunicationUnitBus(context.Context, *connect.Request[acquisition.CreateCommunicationUnitBusRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateCommunicationUnitBus is not implemented"))
}

func (UnimplementedApiServiceHandler) ListCommunicationUnitBuses(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfCommunicationUnitBus], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListCommunicationUnitBuses is not implemented"))
}

func (UnimplementedApiServiceHandler) AddCommunicationUnitsToBus(context.Context, *connect.Request[acquisition.AddCommunicationUnitsToBusRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.AddCommunicationUnitsToBus is not implemented"))
}

func (UnimplementedApiServiceHandler) RemoveCommunicationUnitsFromBus(context.Context, *connect.Request[acquisition.RemoveCommunicationUnitsFromBusRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.RemoveCommunicationUnitsFromBus is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateDevice(context.Context, *connect.Request[acquisition.CreateDeviceRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateDevice is not implemented"))
}

func (UnimplementedApiServiceHandler) ListDevices(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDevice], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListDevices is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDevice(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Device], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDevice is not implemented"))
}

func (UnimplementedApiServiceHandler) SetDeviceCommunicationUnits(context.Context, *connect.Request[acquisition.SetDeviceCommunicationUnitsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.SetDeviceCommunicationUnits is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceCommunicationUnits(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ListOfDeviceCommunicationUnit], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDeviceCommunicationUnits is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateDeviceGroup(context.Context, *connect.Request[acquisition.CreateDeviceGroupRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateDeviceGroup is not implemented"))
}

func (UnimplementedApiServiceHandler) ListDeviceGroups(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceGroup], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListDeviceGroups is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceGroup(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceGroup], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDeviceGroup is not implemented"))
}

func (UnimplementedApiServiceHandler) AddDevicesToGroup(context.Context, *connect.Request[acquisition.AddDevicesToGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.AddDevicesToGroup is not implemented"))
}

func (UnimplementedApiServiceHandler) RemoveDevicesFromGroup(context.Context, *connect.Request[acquisition.RemoveDevicesFromGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.RemoveDevicesFromGroup is not implemented"))
}

func (UnimplementedApiServiceHandler) ListModemPools(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfModemPool], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListModemPools is not implemented"))
}

func (UnimplementedApiServiceHandler) GetModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ModemPool], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetModemPool is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateModemPool(context.Context, *connect.Request[acquisition.SetModemPoolRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateModemPool is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateModemPool(context.Context, *connect.Request[acquisition.SetModemPoolRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.UpdateModemPool is not implemented"))
}

func (UnimplementedApiServiceHandler) DeleteModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.DeleteModemPool is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateModem(context.Context, *connect.Request[acquisition.SetModemRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateModem is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateModem(context.Context, *connect.Request[acquisition.SetModemRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.UpdateModem is not implemented"))
}

func (UnimplementedApiServiceHandler) DeleteModem(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.DeleteModem is not implemented"))
}

func (UnimplementedApiServiceHandler) GetConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[system.SystemConfig], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetConfig is not implemented"))
}

func (UnimplementedApiServiceHandler) SetConfig(context.Context, *connect.Request[system.SystemConfig]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.SetConfig is not implemented"))
}
