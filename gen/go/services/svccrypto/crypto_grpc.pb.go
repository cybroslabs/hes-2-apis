// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/svccrypto/crypto.proto

package svccrypto

import (
	context "context"
	crypto "github.com/cybroslabs/hes-2-apis/gen/go/crypto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CryproService_Dlms_FullMethodName = "/io.clbs.openhes.services.svccrypto.CryproService/Dlms"
)

// CryproServiceClient is the client API for CryproService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Deviceregistry service definition.
type CryproServiceClient interface {
	// Initialize the crypto service stream-based RPC for DLMS frames.
	Dlms(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[crypto.DlmsIn, crypto.DlmsOut], error)
}

type cryproServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCryproServiceClient(cc grpc.ClientConnInterface) CryproServiceClient {
	return &cryproServiceClient{cc}
}

func (c *cryproServiceClient) Dlms(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[crypto.DlmsIn, crypto.DlmsOut], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CryproService_ServiceDesc.Streams[0], CryproService_Dlms_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[crypto.DlmsIn, crypto.DlmsOut]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CryproService_DlmsClient = grpc.BidiStreamingClient[crypto.DlmsIn, crypto.DlmsOut]

// CryproServiceServer is the server API for CryproService service.
// All implementations must embed UnimplementedCryproServiceServer
// for forward compatibility.
//
// The Deviceregistry service definition.
type CryproServiceServer interface {
	// Initialize the crypto service stream-based RPC for DLMS frames.
	Dlms(grpc.BidiStreamingServer[crypto.DlmsIn, crypto.DlmsOut]) error
	mustEmbedUnimplementedCryproServiceServer()
}

// UnimplementedCryproServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCryproServiceServer struct{}

func (UnimplementedCryproServiceServer) Dlms(grpc.BidiStreamingServer[crypto.DlmsIn, crypto.DlmsOut]) error {
	return status.Errorf(codes.Unimplemented, "method Dlms not implemented")
}
func (UnimplementedCryproServiceServer) mustEmbedUnimplementedCryproServiceServer() {}
func (UnimplementedCryproServiceServer) testEmbeddedByValue()                       {}

// UnsafeCryproServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryproServiceServer will
// result in compilation errors.
type UnsafeCryproServiceServer interface {
	mustEmbedUnimplementedCryproServiceServer()
}

func RegisterCryproServiceServer(s grpc.ServiceRegistrar, srv CryproServiceServer) {
	// If the following call pancis, it indicates UnimplementedCryproServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CryproService_ServiceDesc, srv)
}

func _CryproService_Dlms_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CryproServiceServer).Dlms(&grpc.GenericServerStream[crypto.DlmsIn, crypto.DlmsOut]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CryproService_DlmsServer = grpc.BidiStreamingServer[crypto.DlmsIn, crypto.DlmsOut]

// CryproService_ServiceDesc is the grpc.ServiceDesc for CryproService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryproService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.clbs.openhes.services.svccrypto.CryproService",
	HandlerType: (*CryproServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Dlms",
			Handler:       _CryproService_Dlms_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services/svccrypto/crypto.proto",
}
