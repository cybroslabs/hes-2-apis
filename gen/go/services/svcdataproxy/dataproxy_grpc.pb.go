// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/svcdataproxy/dataproxy.proto

package svcdataproxy

import (
	context "context"
	acquisition "github.com/cybroslabs/hes-2-apis/gen/go/acquisition"
	common "github.com/cybroslabs/hes-2-apis/gen/go/common"
	system "github.com/cybroslabs/hes-2-apis/gen/go/system"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataproxyService_ListBulks_FullMethodName                     = "/io.clbs.openhes.services.svcdataproxy.DataproxyService/ListBulks"
	DataproxyService_ListBulkJobs_FullMethodName                  = "/io.clbs.openhes.services.svcdataproxy.DataproxyService/ListBulkJobs"
	DataproxyService_GetBulkJob_FullMethodName                    = "/io.clbs.openhes.services.svcdataproxy.DataproxyService/GetBulkJob"
	DataproxyService_CancelBulk_FullMethodName                    = "/io.clbs.openhes.services.svcdataproxy.DataproxyService/CancelBulk"
	DataproxyService_CreateProxyBulk_FullMethodName               = "/io.clbs.openhes.services.svcdataproxy.DataproxyService/CreateProxyBulk"
	DataproxyService_GetProxyBulk_FullMethodName                  = "/io.clbs.openhes.services.svcdataproxy.DataproxyService/GetProxyBulk"
	DataproxyService_CreateBulk_FullMethodName                    = "/io.clbs.openhes.services.svcdataproxy.DataproxyService/CreateBulk"
	DataproxyService_GetBulk_FullMethodName                       = "/io.clbs.openhes.services.svcdataproxy.DataproxyService/GetBulk"
	DataproxyService_GetConfig_FullMethodName                     = "/io.clbs.openhes.services.svcdataproxy.DataproxyService/GetConfig"
	DataproxyService_SetConfig_FullMethodName                     = "/io.clbs.openhes.services.svcdataproxy.DataproxyService/SetConfig"
	DataproxyService_GetMeterDataRegisters_FullMethodName         = "/io.clbs.openhes.services.svcdataproxy.DataproxyService/GetMeterDataRegisters"
	DataproxyService_GetMeterDataProfiles_FullMethodName          = "/io.clbs.openhes.services.svcdataproxy.DataproxyService/GetMeterDataProfiles"
	DataproxyService_GetMeterDataIrregularProfiles_FullMethodName = "/io.clbs.openhes.services.svcdataproxy.DataproxyService/GetMeterDataIrregularProfiles"
	DataproxyService_GetMeterEvents_FullMethodName                = "/io.clbs.openhes.services.svcdataproxy.DataproxyService/GetMeterEvents"
)

// DataproxyServiceClient is the client API for DataproxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Dataproxy related service definition.
type DataproxyServiceClient interface {
	// @group: Bulks
	// Retrieves the list of bulks. The list of bulks is paginated. The page size is defined in the request. The page number is 0-based.
	// The list contains both the proxy bulks and the regular bulks.
	ListBulks(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfBulk, error)
	// @group: Bulks
	// Retrieves the list of jobs. The list of jobs is paginated. The page size is defined in the request. The page number is 0-based.
	// The listing can be used for both proxy bulks and regular bulks.
	ListBulkJobs(ctx context.Context, in *acquisition.ListBulkJobsRequest, opts ...grpc.CallOption) (*acquisition.ListOfBulkJob, error)
	// @group: Bulks
	// Retrieves the job status. It can be used for jobs related to both proxy and regular bulks.
	GetBulkJob(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.BulkJob, error)
	// @group: Bulks
	// Cancels the bulk of jobs. It can be used for both proxy and regular bulks.
	CancelBulk(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Bulks
	// Starts a new proxy bulk. The proxy bolk is a collection of jobs where each job represents a single device. Devices must be fully defined in the request.
	CreateProxyBulk(ctx context.Context, in *acquisition.CreateProxyBulkRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Bulks
	// Retrieves the proxy bulk info and status.
	GetProxyBulk(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.ProxyBulk, error)
	// @group: Bulks
	// Starts a new bulk. The bulk is a collection of jobs where each jobs represents a single device. Devices that are part of the bulk are identified either as a list of registered device identifiers or as a group identifier.
	CreateBulk(ctx context.Context, in *acquisition.CreateBulkRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Bulks
	// Retrieves the bulk info and status.
	GetBulk(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Bulk, error)
	// The method called by the RestApi to get the system configuration.
	GetConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*system.SystemConfig, error)
	// The method called by the RestApi to set the system configuration.
	SetConfig(ctx context.Context, in *system.SystemConfig, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Meter Data
	// The method to stream out register-typed meter data.
	GetMeterDataRegisters(ctx context.Context, in *acquisition.GetMeterDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[acquisition.RegisterValues], error)
	// @group: Meter Data
	// The method to stream out profile-typed meter data.
	GetMeterDataProfiles(ctx context.Context, in *acquisition.GetMeterDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[acquisition.ProfileValues], error)
	// @group: Meter Data
	// The method to stream out profile-typed meter data.
	GetMeterDataIrregularProfiles(ctx context.Context, in *acquisition.GetMeterDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[acquisition.IrregularProfileValues], error)
	// @group: Meter Events
	// The method to stream out profile-typed meter data.
	GetMeterEvents(ctx context.Context, in *acquisition.GetMeterEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[acquisition.EventRecords], error)
}

type dataproxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataproxyServiceClient(cc grpc.ClientConnInterface) DataproxyServiceClient {
	return &dataproxyServiceClient{cc}
}

func (c *dataproxyServiceClient) ListBulks(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfBulk, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfBulk)
	err := c.cc.Invoke(ctx, DataproxyService_ListBulks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproxyServiceClient) ListBulkJobs(ctx context.Context, in *acquisition.ListBulkJobsRequest, opts ...grpc.CallOption) (*acquisition.ListOfBulkJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfBulkJob)
	err := c.cc.Invoke(ctx, DataproxyService_ListBulkJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproxyServiceClient) GetBulkJob(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.BulkJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.BulkJob)
	err := c.cc.Invoke(ctx, DataproxyService_GetBulkJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproxyServiceClient) CancelBulk(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DataproxyService_CancelBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproxyServiceClient) CreateProxyBulk(ctx context.Context, in *acquisition.CreateProxyBulkRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, DataproxyService_CreateProxyBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproxyServiceClient) GetProxyBulk(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.ProxyBulk, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ProxyBulk)
	err := c.cc.Invoke(ctx, DataproxyService_GetProxyBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproxyServiceClient) CreateBulk(ctx context.Context, in *acquisition.CreateBulkRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, DataproxyService_CreateBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproxyServiceClient) GetBulk(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Bulk, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.Bulk)
	err := c.cc.Invoke(ctx, DataproxyService_GetBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproxyServiceClient) GetConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*system.SystemConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(system.SystemConfig)
	err := c.cc.Invoke(ctx, DataproxyService_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproxyServiceClient) SetConfig(ctx context.Context, in *system.SystemConfig, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DataproxyService_SetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataproxyServiceClient) GetMeterDataRegisters(ctx context.Context, in *acquisition.GetMeterDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[acquisition.RegisterValues], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataproxyService_ServiceDesc.Streams[0], DataproxyService_GetMeterDataRegisters_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[acquisition.GetMeterDataRequest, acquisition.RegisterValues]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataproxyService_GetMeterDataRegistersClient = grpc.ServerStreamingClient[acquisition.RegisterValues]

func (c *dataproxyServiceClient) GetMeterDataProfiles(ctx context.Context, in *acquisition.GetMeterDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[acquisition.ProfileValues], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataproxyService_ServiceDesc.Streams[1], DataproxyService_GetMeterDataProfiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[acquisition.GetMeterDataRequest, acquisition.ProfileValues]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataproxyService_GetMeterDataProfilesClient = grpc.ServerStreamingClient[acquisition.ProfileValues]

func (c *dataproxyServiceClient) GetMeterDataIrregularProfiles(ctx context.Context, in *acquisition.GetMeterDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[acquisition.IrregularProfileValues], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataproxyService_ServiceDesc.Streams[2], DataproxyService_GetMeterDataIrregularProfiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[acquisition.GetMeterDataRequest, acquisition.IrregularProfileValues]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataproxyService_GetMeterDataIrregularProfilesClient = grpc.ServerStreamingClient[acquisition.IrregularProfileValues]

func (c *dataproxyServiceClient) GetMeterEvents(ctx context.Context, in *acquisition.GetMeterEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[acquisition.EventRecords], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataproxyService_ServiceDesc.Streams[3], DataproxyService_GetMeterEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[acquisition.GetMeterEventsRequest, acquisition.EventRecords]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataproxyService_GetMeterEventsClient = grpc.ServerStreamingClient[acquisition.EventRecords]

// DataproxyServiceServer is the server API for DataproxyService service.
// All implementations must embed UnimplementedDataproxyServiceServer
// for forward compatibility.
//
// The Dataproxy related service definition.
type DataproxyServiceServer interface {
	// @group: Bulks
	// Retrieves the list of bulks. The list of bulks is paginated. The page size is defined in the request. The page number is 0-based.
	// The list contains both the proxy bulks and the regular bulks.
	ListBulks(context.Context, *common.ListSelector) (*acquisition.ListOfBulk, error)
	// @group: Bulks
	// Retrieves the list of jobs. The list of jobs is paginated. The page size is defined in the request. The page number is 0-based.
	// The listing can be used for both proxy bulks and regular bulks.
	ListBulkJobs(context.Context, *acquisition.ListBulkJobsRequest) (*acquisition.ListOfBulkJob, error)
	// @group: Bulks
	// Retrieves the job status. It can be used for jobs related to both proxy and regular bulks.
	GetBulkJob(context.Context, *wrapperspb.StringValue) (*acquisition.BulkJob, error)
	// @group: Bulks
	// Cancels the bulk of jobs. It can be used for both proxy and regular bulks.
	CancelBulk(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Bulks
	// Starts a new proxy bulk. The proxy bolk is a collection of jobs where each job represents a single device. Devices must be fully defined in the request.
	CreateProxyBulk(context.Context, *acquisition.CreateProxyBulkRequest) (*wrapperspb.StringValue, error)
	// @group: Bulks
	// Retrieves the proxy bulk info and status.
	GetProxyBulk(context.Context, *wrapperspb.StringValue) (*acquisition.ProxyBulk, error)
	// @group: Bulks
	// Starts a new bulk. The bulk is a collection of jobs where each jobs represents a single device. Devices that are part of the bulk are identified either as a list of registered device identifiers or as a group identifier.
	CreateBulk(context.Context, *acquisition.CreateBulkRequest) (*wrapperspb.StringValue, error)
	// @group: Bulks
	// Retrieves the bulk info and status.
	GetBulk(context.Context, *wrapperspb.StringValue) (*acquisition.Bulk, error)
	// The method called by the RestApi to get the system configuration.
	GetConfig(context.Context, *emptypb.Empty) (*system.SystemConfig, error)
	// The method called by the RestApi to set the system configuration.
	SetConfig(context.Context, *system.SystemConfig) (*emptypb.Empty, error)
	// @group: Meter Data
	// The method to stream out register-typed meter data.
	GetMeterDataRegisters(*acquisition.GetMeterDataRequest, grpc.ServerStreamingServer[acquisition.RegisterValues]) error
	// @group: Meter Data
	// The method to stream out profile-typed meter data.
	GetMeterDataProfiles(*acquisition.GetMeterDataRequest, grpc.ServerStreamingServer[acquisition.ProfileValues]) error
	// @group: Meter Data
	// The method to stream out profile-typed meter data.
	GetMeterDataIrregularProfiles(*acquisition.GetMeterDataRequest, grpc.ServerStreamingServer[acquisition.IrregularProfileValues]) error
	// @group: Meter Events
	// The method to stream out profile-typed meter data.
	GetMeterEvents(*acquisition.GetMeterEventsRequest, grpc.ServerStreamingServer[acquisition.EventRecords]) error
	mustEmbedUnimplementedDataproxyServiceServer()
}

// UnimplementedDataproxyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataproxyServiceServer struct{}

func (UnimplementedDataproxyServiceServer) ListBulks(context.Context, *common.ListSelector) (*acquisition.ListOfBulk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBulks not implemented")
}
func (UnimplementedDataproxyServiceServer) ListBulkJobs(context.Context, *acquisition.ListBulkJobsRequest) (*acquisition.ListOfBulkJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBulkJobs not implemented")
}
func (UnimplementedDataproxyServiceServer) GetBulkJob(context.Context, *wrapperspb.StringValue) (*acquisition.BulkJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulkJob not implemented")
}
func (UnimplementedDataproxyServiceServer) CancelBulk(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBulk not implemented")
}
func (UnimplementedDataproxyServiceServer) CreateProxyBulk(context.Context, *acquisition.CreateProxyBulkRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProxyBulk not implemented")
}
func (UnimplementedDataproxyServiceServer) GetProxyBulk(context.Context, *wrapperspb.StringValue) (*acquisition.ProxyBulk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProxyBulk not implemented")
}
func (UnimplementedDataproxyServiceServer) CreateBulk(context.Context, *acquisition.CreateBulkRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBulk not implemented")
}
func (UnimplementedDataproxyServiceServer) GetBulk(context.Context, *wrapperspb.StringValue) (*acquisition.Bulk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulk not implemented")
}
func (UnimplementedDataproxyServiceServer) GetConfig(context.Context, *emptypb.Empty) (*system.SystemConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedDataproxyServiceServer) SetConfig(context.Context, *system.SystemConfig) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedDataproxyServiceServer) GetMeterDataRegisters(*acquisition.GetMeterDataRequest, grpc.ServerStreamingServer[acquisition.RegisterValues]) error {
	return status.Errorf(codes.Unimplemented, "method GetMeterDataRegisters not implemented")
}
func (UnimplementedDataproxyServiceServer) GetMeterDataProfiles(*acquisition.GetMeterDataRequest, grpc.ServerStreamingServer[acquisition.ProfileValues]) error {
	return status.Errorf(codes.Unimplemented, "method GetMeterDataProfiles not implemented")
}
func (UnimplementedDataproxyServiceServer) GetMeterDataIrregularProfiles(*acquisition.GetMeterDataRequest, grpc.ServerStreamingServer[acquisition.IrregularProfileValues]) error {
	return status.Errorf(codes.Unimplemented, "method GetMeterDataIrregularProfiles not implemented")
}
func (UnimplementedDataproxyServiceServer) GetMeterEvents(*acquisition.GetMeterEventsRequest, grpc.ServerStreamingServer[acquisition.EventRecords]) error {
	return status.Errorf(codes.Unimplemented, "method GetMeterEvents not implemented")
}
func (UnimplementedDataproxyServiceServer) mustEmbedUnimplementedDataproxyServiceServer() {}
func (UnimplementedDataproxyServiceServer) testEmbeddedByValue()                          {}

// UnsafeDataproxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataproxyServiceServer will
// result in compilation errors.
type UnsafeDataproxyServiceServer interface {
	mustEmbedUnimplementedDataproxyServiceServer()
}

func RegisterDataproxyServiceServer(s grpc.ServiceRegistrar, srv DataproxyServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataproxyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataproxyService_ServiceDesc, srv)
}

func _DataproxyService_ListBulks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproxyServiceServer).ListBulks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproxyService_ListBulks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproxyServiceServer).ListBulks(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproxyService_ListBulkJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.ListBulkJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproxyServiceServer).ListBulkJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproxyService_ListBulkJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproxyServiceServer).ListBulkJobs(ctx, req.(*acquisition.ListBulkJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproxyService_GetBulkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproxyServiceServer).GetBulkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproxyService_GetBulkJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproxyServiceServer).GetBulkJob(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproxyService_CancelBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproxyServiceServer).CancelBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproxyService_CancelBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproxyServiceServer).CancelBulk(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproxyService_CreateProxyBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateProxyBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproxyServiceServer).CreateProxyBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproxyService_CreateProxyBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproxyServiceServer).CreateProxyBulk(ctx, req.(*acquisition.CreateProxyBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproxyService_GetProxyBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproxyServiceServer).GetProxyBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproxyService_GetProxyBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproxyServiceServer).GetProxyBulk(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproxyService_CreateBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproxyServiceServer).CreateBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproxyService_CreateBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproxyServiceServer).CreateBulk(ctx, req.(*acquisition.CreateBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproxyService_GetBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproxyServiceServer).GetBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproxyService_GetBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproxyServiceServer).GetBulk(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproxyService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproxyServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproxyService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproxyServiceServer).GetConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproxyService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(system.SystemConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataproxyServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataproxyService_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataproxyServiceServer).SetConfig(ctx, req.(*system.SystemConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataproxyService_GetMeterDataRegisters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(acquisition.GetMeterDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataproxyServiceServer).GetMeterDataRegisters(m, &grpc.GenericServerStream[acquisition.GetMeterDataRequest, acquisition.RegisterValues]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataproxyService_GetMeterDataRegistersServer = grpc.ServerStreamingServer[acquisition.RegisterValues]

func _DataproxyService_GetMeterDataProfiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(acquisition.GetMeterDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataproxyServiceServer).GetMeterDataProfiles(m, &grpc.GenericServerStream[acquisition.GetMeterDataRequest, acquisition.ProfileValues]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataproxyService_GetMeterDataProfilesServer = grpc.ServerStreamingServer[acquisition.ProfileValues]

func _DataproxyService_GetMeterDataIrregularProfiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(acquisition.GetMeterDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataproxyServiceServer).GetMeterDataIrregularProfiles(m, &grpc.GenericServerStream[acquisition.GetMeterDataRequest, acquisition.IrregularProfileValues]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataproxyService_GetMeterDataIrregularProfilesServer = grpc.ServerStreamingServer[acquisition.IrregularProfileValues]

func _DataproxyService_GetMeterEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(acquisition.GetMeterEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataproxyServiceServer).GetMeterEvents(m, &grpc.GenericServerStream[acquisition.GetMeterEventsRequest, acquisition.EventRecords]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataproxyService_GetMeterEventsServer = grpc.ServerStreamingServer[acquisition.EventRecords]

// DataproxyService_ServiceDesc is the grpc.ServiceDesc for DataproxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataproxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.clbs.openhes.services.svcdataproxy.DataproxyService",
	HandlerType: (*DataproxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBulks",
			Handler:    _DataproxyService_ListBulks_Handler,
		},
		{
			MethodName: "ListBulkJobs",
			Handler:    _DataproxyService_ListBulkJobs_Handler,
		},
		{
			MethodName: "GetBulkJob",
			Handler:    _DataproxyService_GetBulkJob_Handler,
		},
		{
			MethodName: "CancelBulk",
			Handler:    _DataproxyService_CancelBulk_Handler,
		},
		{
			MethodName: "CreateProxyBulk",
			Handler:    _DataproxyService_CreateProxyBulk_Handler,
		},
		{
			MethodName: "GetProxyBulk",
			Handler:    _DataproxyService_GetProxyBulk_Handler,
		},
		{
			MethodName: "CreateBulk",
			Handler:    _DataproxyService_CreateBulk_Handler,
		},
		{
			MethodName: "GetBulk",
			Handler:    _DataproxyService_GetBulk_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _DataproxyService_GetConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _DataproxyService_SetConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMeterDataRegisters",
			Handler:       _DataproxyService_GetMeterDataRegisters_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMeterDataProfiles",
			Handler:       _DataproxyService_GetMeterDataProfiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMeterDataIrregularProfiles",
			Handler:       _DataproxyService_GetMeterDataIrregularProfiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMeterEvents",
			Handler:       _DataproxyService_GetMeterEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/svcdataproxy/dataproxy.proto",
}
