// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: system/main.proto

package system

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SystemConfig struct {
	state                            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_MaxReplicas           int32                  `protobuf:"varint,1,opt,name=max_replicas,json=maxReplicas"`
	xxx_hidden_MaxCascadeDeviceCount int32                  `protobuf:"varint,2,opt,name=max_cascade_device_count,json=maxCascadeDeviceCount"`
	xxx_hidden_MaxSlotsPerDriver     int32                  `protobuf:"varint,3,opt,name=max_slots_per_driver,json=maxSlotsPerDriver"`
	xxx_hidden_MinReplicas           map[string]int32       `protobuf:"bytes,4,rep,name=min_replicas,json=minReplicas" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	XXX_raceDetectHookData           protoimpl.RaceDetectHookData
	XXX_presence                     [1]uint32
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *SystemConfig) Reset() {
	*x = SystemConfig{}
	mi := &file_system_main_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemConfig) ProtoMessage() {}

func (x *SystemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_system_main_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SystemConfig) GetMaxReplicas() int32 {
	if x != nil {
		return x.xxx_hidden_MaxReplicas
	}
	return 0
}

func (x *SystemConfig) GetMaxCascadeDeviceCount() int32 {
	if x != nil {
		return x.xxx_hidden_MaxCascadeDeviceCount
	}
	return 0
}

func (x *SystemConfig) GetMaxSlotsPerDriver() int32 {
	if x != nil {
		return x.xxx_hidden_MaxSlotsPerDriver
	}
	return 0
}

func (x *SystemConfig) GetMinReplicas() map[string]int32 {
	if x != nil {
		return x.xxx_hidden_MinReplicas
	}
	return nil
}

func (x *SystemConfig) SetMaxReplicas(v int32) {
	x.xxx_hidden_MaxReplicas = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *SystemConfig) SetMaxCascadeDeviceCount(v int32) {
	x.xxx_hidden_MaxCascadeDeviceCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *SystemConfig) SetMaxSlotsPerDriver(v int32) {
	x.xxx_hidden_MaxSlotsPerDriver = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *SystemConfig) SetMinReplicas(v map[string]int32) {
	x.xxx_hidden_MinReplicas = v
}

func (x *SystemConfig) HasMaxReplicas() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SystemConfig) HasMaxCascadeDeviceCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SystemConfig) HasMaxSlotsPerDriver() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *SystemConfig) ClearMaxReplicas() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_MaxReplicas = 0
}

func (x *SystemConfig) ClearMaxCascadeDeviceCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_MaxCascadeDeviceCount = 0
}

func (x *SystemConfig) ClearMaxSlotsPerDriver() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_MaxSlotsPerDriver = 0
}

type SystemConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The maximum number of replicas for all drivers.
	//
	//	 0 represents no active replicas will run, effectively disabling acquisition
	//	>0 represents the maximum number of replicas per driver
	MaxReplicas *int32
	// The maximum number of cascade devices for the driver. Minimum is 1.
	MaxCascadeDeviceCount *int32
	// The maximum number of slots per driver
	//
	//	-1 represents unlimited number of slots, effecticaly using maximum number of slots supported by driver
	//	 0 represents no active slots will run, effectively disabling acquisition
	//	>0 represents the maximum number of slots per driver, the number of slots never exceeds the number of slots supported by driver
	MaxSlotsPerDriver *int32
	// The minimum number of replicas per type of driver.
	// The key is the driver type, the value is the minimum number of replicas.
	// The minimum replicas is guaranteed to be running at all times even if the total number of replicas exceeds the maximum number of replicas set in max_replicas.
	MinReplicas map[string]int32
}

func (b0 SystemConfig_builder) Build() *SystemConfig {
	m0 := &SystemConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.MaxReplicas != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_MaxReplicas = *b.MaxReplicas
	}
	if b.MaxCascadeDeviceCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_MaxCascadeDeviceCount = *b.MaxCascadeDeviceCount
	}
	if b.MaxSlotsPerDriver != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_MaxSlotsPerDriver = *b.MaxSlotsPerDriver
	}
	x.xxx_hidden_MinReplicas = b.MinReplicas
	return m0
}

var File_system_main_proto protoreflect.FileDescriptor

var file_system_main_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x22, 0xbc, 0x02, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61,
	0x73, 0x63, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x73,
	0x63, 0x61, 0x64, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d,
	0x61, 0x78, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x50, 0x65, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x5f, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x79, 0x62, 0x72, 0x6f, 0x73, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x68, 0x65, 0x73, 0x2d, 0x32,
	0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
})

var file_system_main_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_system_main_proto_goTypes = []any{
	(*SystemConfig)(nil), // 0: io.clbs.openhes.models.system.SystemConfig
	nil,                  // 1: io.clbs.openhes.models.system.SystemConfig.MinReplicasEntry
}
var file_system_main_proto_depIdxs = []int32{
	1, // 0: io.clbs.openhes.models.system.SystemConfig.min_replicas:type_name -> io.clbs.openhes.models.system.SystemConfig.MinReplicasEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_system_main_proto_init() }
func file_system_main_proto_init() {
	if File_system_main_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_system_main_proto_rawDesc), len(file_system_main_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_system_main_proto_goTypes,
		DependencyIndexes: file_system_main_proto_depIdxs,
		MessageInfos:      file_system_main_proto_msgTypes,
	}.Build()
	File_system_main_proto = out.File
	file_system_main_proto_goTypes = nil
	file_system_main_proto_depIdxs = nil
}
