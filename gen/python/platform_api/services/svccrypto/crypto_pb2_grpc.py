# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from crypto import crypto_pb2 as crypto_dot_crypto__pb2


class CryproServiceStub(object):
    """The Deviceregistry service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Dlms = channel.stream_stream(
                '/io.clbs.openhes.services.svccrypto.CryproService/Dlms',
                request_serializer=crypto_dot_crypto__pb2.DlmsIn.SerializeToString,
                response_deserializer=crypto_dot_crypto__pb2.DlmsOut.FromString,
                _registered_method=True)


class CryproServiceServicer(object):
    """The Deviceregistry service definition.
    """

    def Dlms(self, request_iterator, context):
        """Initialize the crypto service stream-based RPC for DLMS frames.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CryproServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Dlms': grpc.stream_stream_rpc_method_handler(
                    servicer.Dlms,
                    request_deserializer=crypto_dot_crypto__pb2.DlmsIn.FromString,
                    response_serializer=crypto_dot_crypto__pb2.DlmsOut.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.clbs.openhes.services.svccrypto.CryproService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('io.clbs.openhes.services.svccrypto.CryproService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CryproService(object):
    """The Deviceregistry service definition.
    """

    @staticmethod
    def Dlms(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/io.clbs.openhes.services.svccrypto.CryproService/Dlms',
            crypto_dot_crypto__pb2.DlmsIn.SerializeToString,
            crypto_dot_crypto__pb2.DlmsOut.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
