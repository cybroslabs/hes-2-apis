// @generated by protoc-gen-es v2.4.0 with parameter "target=ts,json_types=true"
// @generated from file common/fields.proto (package io.clbs.openhes.models.common, edition 2023)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Duration, DurationJson, Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file common/fields.proto.
 */
export const file_common_fields: GenFile = /*@__PURE__*/
  fileDesc("ChNjb21tb24vZmllbGRzLnByb3RvEh1pby5jbGJzLm9wZW5oZXMubW9kZWxzLmNvbW1vbiLNAQoMTGlzdFNlbGVjdG9yEhEKCXBhZ2Vfc2l6ZRgBIAEoDRIOCgZvZmZzZXQYAiABKA0SQgoHc29ydF9ieRgDIAMoCzIxLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuY29tbW9uLkxpc3RTZWxlY3RvclNvcnRCeRJGCglmaWx0ZXJfYnkYBCADKAsyMy5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmNvbW1vbi5MaXN0U2VsZWN0b3JGaWx0ZXJCeRIOCgZmaWVsZHMYBSADKAkiOwoSTGlzdFNlbGVjdG9yU29ydEJ5EhAKCGZpZWxkX2lkGAEgASgJEhMKBGRlc2MYAiABKAg6BWZhbHNlIpQCChRMaXN0U2VsZWN0b3JGaWx0ZXJCeRIQCghmaWVsZF9pZBgBIAEoCRI/CghvcGVyYXRvchgCIAEoDjItLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuY29tbW9uLkZpbHRlck9wZXJhdG9yEj8KCWRhdGFfdHlwZRgDIAEoDjIsLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuY29tbW9uLkZpZWxkRGF0YVR5cGUSDAoEdGV4dBgEIAMoCRIPCgdpbnRlZ2VyGAUgAygSEg4KBm51bWJlchgGIAMoARIPCgdib29sZWFuGAcgAygIEigKBGRhdGUYCCADKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIuwDCg9GaWVsZERlc2NyaXB0b3ISEAoIZmllbGRfaWQYASABKAkSDwoHanNfcGF0aBgSIAEoCRINCgVsYWJlbBgCIAEoCRIQCghncm91cF9pZBgGIAEoCRI/CglkYXRhX3R5cGUYAyABKA4yLC5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmNvbW1vbi5GaWVsZERhdGFUeXBlEkEKBmZvcm1hdBgEIAEoDjIxLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuY29tbW9uLkZpZWxkRGlzcGxheUZvcm1hdBIMCgR1bml0GAUgASgJEhEKCXByZWNpc2lvbhgIIAEoBRIPCgd0b29sdGlwGAkgASgJEhAKCHJlcXVpcmVkGAsgASgIEhAKCGVkaXRhYmxlGAwgASgIEg8KB3Zpc2libGUYDSABKAgSEwoLbXVsdGlfdmFsdWUYDiABKAgSDwoHc2VjdXJlZBgPIAEoCBJCCgp2YWxpZGF0aW9uGBAgASgLMi4uaW8uY2xicy5vcGVuaGVzLm1vZGVscy5jb21tb24uRmllbGRWYWxpZGF0aW9uEkAKDWRlZmF1bHRfdmFsdWUYESABKAsyKS5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmNvbW1vbi5GaWVsZFZhbHVlIpUCCg9GaWVsZFZhbGlkYXRpb24SCgoCcmUYASABKAkSEgoKbWluX2xlbmd0aBgCIAEoBRISCgptYXhfbGVuZ3RoGAMgASgFEhMKC21pbl9pbnRlZ2VyGAQgASgSEhMKC21heF9pbnRlZ2VyGAUgASgSEhIKCm1pbl9udW1iZXIYBiABKAESEgoKbWF4X251bWJlchgHIAEoARJMCgdvcHRpb25zGAggAygLMjsuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5jb21tb24uRmllbGRWYWxpZGF0aW9uLk9wdGlvbnNFbnRyeRouCgxPcHRpb25zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASLyAQoKRmllbGRWYWx1ZRIWCgxzdHJpbmdfdmFsdWUYASABKAlIABIXCg1pbnRlZ2VyX3ZhbHVlGAIgASgDSAASFgoMZG91YmxlX3ZhbHVlGAMgASgBSAASFgoMYmluYXJ5X3ZhbHVlGAQgASgMSAASFAoKYm9vbF92YWx1ZRgFIAEoCEgAEjAKCmRhdGVfdmFsdWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wSAASMwoOZHVyYXRpb25fdmFsdWUYByABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25IAEIGCgRraW5kIrsBCgtGaWVsZFZhbHVlcxJOCgphdHRyaWJ1dGVzGAEgAygLMjouaW8uY2xicy5vcGVuaGVzLm1vZGVscy5jb21tb24uRmllbGRWYWx1ZXMuQXR0cmlidXRlc0VudHJ5GlwKD0F0dHJpYnV0ZXNFbnRyeRILCgNrZXkYASABKAkSOAoFdmFsdWUYAiABKAsyKS5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmNvbW1vbi5GaWVsZFZhbHVlOgI4ASJhChBMaXN0T2ZGaWVsZFZhbHVlEjgKBWl0ZW1zGAEgAygLMikuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5jb21tb24uRmllbGRWYWx1ZRITCgt0b3RhbF9jb3VudBgCIAEoBSJrChVMaXN0T2ZGaWVsZERlc2NyaXB0b3ISPQoFaXRlbXMYASADKAsyLi5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmNvbW1vbi5GaWVsZERlc2NyaXB0b3ISEwoLdG90YWxfY291bnQYAiABKAUq/QEKDkZpbHRlck9wZXJhdG9yEgkKBUVRVUFMEAASDQoJTk9UX0VRVUFMEAESEAoMR1JFQVRFUl9USEFOEAISGQoVR1JFQVRFUl9USEFOX09SX0VRVUFMEAMSDQoJTEVTU19USEFOEAQSFgoSTEVTU19USEFOX09SX0VRVUFMEAUSDAoIQ09OVEFJTlMQBhIQCgxOT1RfQ09OVEFJTlMQBxIPCgtTVEFSVFNfV0lUSBAIEg0KCUVORFNfV0lUSBAJEgYKAklOEAoSCgoGTk9UX0lOEAsSCwoHQkVUV0VFThAMEgsKB0lTX05VTEwQDRIPCgtJU19OT1RfTlVMTBAOKmgKDUZpZWxkRGF0YVR5cGUSCAoEVEVYVBAAEgsKB0lOVEVHRVIQARIKCgZET1VCTEUQAhIKCgZCSU5BUlkQAxILCgdCT09MRUFOEAQSDQoJVElNRVNUQU1QEAUSDAoIRFVSQVRJT04QBiqMAQoSRmllbGREaXNwbGF5Rm9ybWF0EgsKB0RFRkFVTFQQABINCglEQVRFX09OTFkQARIQCgxVVENfREFURVRJTUUQAhIRCg1VVENfREFURV9PTkxZEAMSDQoJVElNRU9GREFZEAQSCQoFTU9ORVkQBRIMCghQQVNTV09SRBAGEg0KCU1VTFRJTElORRAHQjBaLmdpdGh1Yi5jb20vY3licm9zbGFicy9oZXMtMi1hcGlzL2dlbi9nby9jb21tb25iCGVkaXRpb25zcOgH", [file_google_protobuf_timestamp, file_google_protobuf_duration]);

/**
 * The listing selector.
 *
 * @generated from message io.clbs.openhes.models.common.ListSelector
 */
export type ListSelector = Message<"io.clbs.openhes.models.common.ListSelector"> & {
  /**
   * The number of items per page.
   *
   * @generated from field: uint32 page_size = 1;
   */
  pageSize: number;

  /**
   * The offset of the first item to return, zero based.
   * @values: any non-negative integer
   * @example: 15
   *
   * @generated from field: uint32 offset = 2;
   */
  offset: number;

  /**
   * The sorting criteria.
   *
   * @generated from field: repeated io.clbs.openhes.models.common.ListSelectorSortBy sort_by = 3;
   */
  sortBy: ListSelectorSortBy[];

  /**
   * The filtering criteria.
   *
   * @generated from field: repeated io.clbs.openhes.models.common.ListSelectorFilterBy filter_by = 4;
   */
  filterBy: ListSelectorFilterBy[];

  /**
   * FIXME: This needs to be designed properly.
   *
   * The list of additional fields to be returned.
   *
   * @generated from field: repeated string fields = 5;
   */
  fields: string[];
};

/**
 * The listing selector.
 *
 * @generated from message io.clbs.openhes.models.common.ListSelector
 */
export type ListSelectorJson = {
  /**
   * The number of items per page.
   *
   * @generated from field: uint32 page_size = 1;
   */
  pageSize?: number;

  /**
   * The offset of the first item to return, zero based.
   * @values: any non-negative integer
   * @example: 15
   *
   * @generated from field: uint32 offset = 2;
   */
  offset?: number;

  /**
   * The sorting criteria.
   *
   * @generated from field: repeated io.clbs.openhes.models.common.ListSelectorSortBy sort_by = 3;
   */
  sortBy?: ListSelectorSortByJson[];

  /**
   * The filtering criteria.
   *
   * @generated from field: repeated io.clbs.openhes.models.common.ListSelectorFilterBy filter_by = 4;
   */
  filterBy?: ListSelectorFilterByJson[];

  /**
   * FIXME: This needs to be designed properly.
   *
   * The list of additional fields to be returned.
   *
   * @generated from field: repeated string fields = 5;
   */
  fields?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.common.ListSelector.
 * Use `create(ListSelectorSchema)` to create a new message.
 */
export const ListSelectorSchema: GenMessage<ListSelector, ListSelectorJson> = /*@__PURE__*/
  messageDesc(file_common_fields, 0);

/**
 * The sorting criteria.
 *
 * @generated from message io.clbs.openhes.models.common.ListSelectorSortBy
 */
export type ListSelectorSortBy = Message<"io.clbs.openhes.models.common.ListSelectorSortBy"> & {
  /**
   * Field id.
   *
   * @generated from field: string field_id = 1;
   */
  fieldId: string;

  /**
   * Set to true to sort in descending order.
   *
   * @generated from field: bool desc = 2 [default = false];
   */
  desc: boolean;
};

/**
 * The sorting criteria.
 *
 * @generated from message io.clbs.openhes.models.common.ListSelectorSortBy
 */
export type ListSelectorSortByJson = {
  /**
   * Field id.
   *
   * @generated from field: string field_id = 1;
   */
  fieldId?: string;

  /**
   * Set to true to sort in descending order.
   *
   * @generated from field: bool desc = 2 [default = false];
   */
  desc?: boolean;
};

/**
 * Describes the message io.clbs.openhes.models.common.ListSelectorSortBy.
 * Use `create(ListSelectorSortBySchema)` to create a new message.
 */
export const ListSelectorSortBySchema: GenMessage<ListSelectorSortBy, ListSelectorSortByJson> = /*@__PURE__*/
  messageDesc(file_common_fields, 1);

/**
 * The filtering criteria.
 *
 * Depending on the operator, the `text`, `integer`, `number`, `boolean` or `date` field should be used.
 * - **No value** must be set for operators: `IS_NULL`, `IS_NOT_NULL`.
 * - Exactly **One value** must be set for single operand operators: `EQUAL`, `NOT_EQUAL`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `CONTAINS`, `NOT_CONTAINS`, `STARTS_WITH`, `ENDS_WITH`.
 * - Exactly **Two values** must be set for two operand operators: `BETWEEN`.
 * - **Zero or more** values can be set for generic operators: `IN`, `NOT_IN`.
 *
 * Field type determines the data type and only related field should be used. Other fields shall not be set and will be ignored by the system.
 *
 * @generated from message io.clbs.openhes.models.common.ListSelectorFilterBy
 */
export type ListSelectorFilterBy = Message<"io.clbs.openhes.models.common.ListSelectorFilterBy"> & {
  /**
   * Field id.
   *
   * @generated from field: string field_id = 1;
   */
  fieldId: string;

  /**
   * The filter operator.
   *
   * @generated from field: io.clbs.openhes.models.common.FilterOperator operator = 2;
   */
  operator: FilterOperator;

  /**
   * The data type of the field.
   *
   * @generated from field: io.clbs.openhes.models.common.FieldDataType data_type = 3;
   */
  dataType: FieldDataType;

  /**
   * The text-typed value(s) used for filtering.
   *
   * @generated from field: repeated string text = 4;
   */
  text: string[];

  /**
   * The integer-typed value(s) used for filtering.
   *
   * @generated from field: repeated sint64 integer = 5;
   */
  integer: bigint[];

  /**
   * The number-typed value(s) used for filtering.
   *
   * @generated from field: repeated double number = 6;
   */
  number: number[];

  /**
   * The boolean-typed value(s) used for filtering.
   *
   * @generated from field: repeated bool boolean = 7;
   */
  boolean: boolean[];

  /**
   * The date-typed value(s) used for filtering.
   *
   * @generated from field: repeated google.protobuf.Timestamp date = 8;
   */
  date: Timestamp[];
};

/**
 * The filtering criteria.
 *
 * Depending on the operator, the `text`, `integer`, `number`, `boolean` or `date` field should be used.
 * - **No value** must be set for operators: `IS_NULL`, `IS_NOT_NULL`.
 * - Exactly **One value** must be set for single operand operators: `EQUAL`, `NOT_EQUAL`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `CONTAINS`, `NOT_CONTAINS`, `STARTS_WITH`, `ENDS_WITH`.
 * - Exactly **Two values** must be set for two operand operators: `BETWEEN`.
 * - **Zero or more** values can be set for generic operators: `IN`, `NOT_IN`.
 *
 * Field type determines the data type and only related field should be used. Other fields shall not be set and will be ignored by the system.
 *
 * @generated from message io.clbs.openhes.models.common.ListSelectorFilterBy
 */
export type ListSelectorFilterByJson = {
  /**
   * Field id.
   *
   * @generated from field: string field_id = 1;
   */
  fieldId?: string;

  /**
   * The filter operator.
   *
   * @generated from field: io.clbs.openhes.models.common.FilterOperator operator = 2;
   */
  operator?: FilterOperatorJson;

  /**
   * The data type of the field.
   *
   * @generated from field: io.clbs.openhes.models.common.FieldDataType data_type = 3;
   */
  dataType?: FieldDataTypeJson;

  /**
   * The text-typed value(s) used for filtering.
   *
   * @generated from field: repeated string text = 4;
   */
  text?: string[];

  /**
   * The integer-typed value(s) used for filtering.
   *
   * @generated from field: repeated sint64 integer = 5;
   */
  integer?: string[];

  /**
   * The number-typed value(s) used for filtering.
   *
   * @generated from field: repeated double number = 6;
   */
  number?: (number | "NaN" | "Infinity" | "-Infinity")[];

  /**
   * The boolean-typed value(s) used for filtering.
   *
   * @generated from field: repeated bool boolean = 7;
   */
  boolean?: boolean[];

  /**
   * The date-typed value(s) used for filtering.
   *
   * @generated from field: repeated google.protobuf.Timestamp date = 8;
   */
  date?: TimestampJson[];
};

/**
 * Describes the message io.clbs.openhes.models.common.ListSelectorFilterBy.
 * Use `create(ListSelectorFilterBySchema)` to create a new message.
 */
export const ListSelectorFilterBySchema: GenMessage<ListSelectorFilterBy, ListSelectorFilterByJson> = /*@__PURE__*/
  messageDesc(file_common_fields, 2);

/**
 * The field descriptor.
 *
 * @generated from message io.clbs.openhes.models.common.FieldDescriptor
 */
export type FieldDescriptor = Message<"io.clbs.openhes.models.common.FieldDescriptor"> & {
  /**
   * Unique identifier for the field
   *
   * @generated from field: string field_id = 1;
   */
  fieldId: string;

  /**
   * The path to the field in the JSON data model
   *
   * @generated from field: string js_path = 18;
   */
  jsPath: string;

  /**
   * Label displayed for the field
   *
   * @generated from field: string label = 2;
   */
  label: string;

  /**
   * Group (section) identifier for the field
   *
   * @generated from field: string group_id = 6;
   */
  groupId: string;

  /**
   * Data type of the field (e.g., text, double)
   *
   * @generated from field: io.clbs.openhes.models.common.FieldDataType data_type = 3;
   */
  dataType: FieldDataType;

  /**
   * Display format (e.g., 1h 30m)
   *
   * @generated from field: io.clbs.openhes.models.common.FieldDisplayFormat format = 4;
   */
  format: FieldDisplayFormat;

  /**
   * Unit to display (e.g., kWh, USD)
   *
   * @generated from field: string unit = 5;
   */
  unit: string;

  /**
   * Decimal precision for double numbers
   *
   * @generated from field: int32 precision = 8;
   */
  precision: number;

  /**
   * Tooltip or hint text
   *
   * @generated from field: string tooltip = 9;
   */
  tooltip: string;

  /**
   * Whether the field is mandatory
   *
   * @generated from field: bool required = 11;
   */
  required: boolean;

  /**
   * Whether the field is editable
   *
   * @generated from field: bool editable = 12;
   */
  editable: boolean;

  /**
   * Whether the field is visible
   *
   * @generated from field: bool visible = 13;
   */
  visible: boolean;

  /**
   * Whether the field can have multiple values
   *
   * @generated from field: bool multi_value = 14;
   */
  multiValue: boolean;

  /**
   * Whether the field shall be handled as a security fields (e.g., password, certificate input area, ...)
   *
   * @generated from field: bool secured = 15;
   */
  secured: boolean;

  /**
   * Validation rules for the field
   *
   * @generated from field: io.clbs.openhes.models.common.FieldValidation validation = 16;
   */
  validation?: FieldValidation;

  /**
   * The default value of the attribute, it does not support multi-value fields
   *
   * @generated from field: io.clbs.openhes.models.common.FieldValue default_value = 17;
   */
  defaultValue?: FieldValue;
};

/**
 * The field descriptor.
 *
 * @generated from message io.clbs.openhes.models.common.FieldDescriptor
 */
export type FieldDescriptorJson = {
  /**
   * Unique identifier for the field
   *
   * @generated from field: string field_id = 1;
   */
  fieldId?: string;

  /**
   * The path to the field in the JSON data model
   *
   * @generated from field: string js_path = 18;
   */
  jsPath?: string;

  /**
   * Label displayed for the field
   *
   * @generated from field: string label = 2;
   */
  label?: string;

  /**
   * Group (section) identifier for the field
   *
   * @generated from field: string group_id = 6;
   */
  groupId?: string;

  /**
   * Data type of the field (e.g., text, double)
   *
   * @generated from field: io.clbs.openhes.models.common.FieldDataType data_type = 3;
   */
  dataType?: FieldDataTypeJson;

  /**
   * Display format (e.g., 1h 30m)
   *
   * @generated from field: io.clbs.openhes.models.common.FieldDisplayFormat format = 4;
   */
  format?: FieldDisplayFormatJson;

  /**
   * Unit to display (e.g., kWh, USD)
   *
   * @generated from field: string unit = 5;
   */
  unit?: string;

  /**
   * Decimal precision for double numbers
   *
   * @generated from field: int32 precision = 8;
   */
  precision?: number;

  /**
   * Tooltip or hint text
   *
   * @generated from field: string tooltip = 9;
   */
  tooltip?: string;

  /**
   * Whether the field is mandatory
   *
   * @generated from field: bool required = 11;
   */
  required?: boolean;

  /**
   * Whether the field is editable
   *
   * @generated from field: bool editable = 12;
   */
  editable?: boolean;

  /**
   * Whether the field is visible
   *
   * @generated from field: bool visible = 13;
   */
  visible?: boolean;

  /**
   * Whether the field can have multiple values
   *
   * @generated from field: bool multi_value = 14;
   */
  multiValue?: boolean;

  /**
   * Whether the field shall be handled as a security fields (e.g., password, certificate input area, ...)
   *
   * @generated from field: bool secured = 15;
   */
  secured?: boolean;

  /**
   * Validation rules for the field
   *
   * @generated from field: io.clbs.openhes.models.common.FieldValidation validation = 16;
   */
  validation?: FieldValidationJson;

  /**
   * The default value of the attribute, it does not support multi-value fields
   *
   * @generated from field: io.clbs.openhes.models.common.FieldValue default_value = 17;
   */
  defaultValue?: FieldValueJson;
};

/**
 * Describes the message io.clbs.openhes.models.common.FieldDescriptor.
 * Use `create(FieldDescriptorSchema)` to create a new message.
 */
export const FieldDescriptorSchema: GenMessage<FieldDescriptor, FieldDescriptorJson> = /*@__PURE__*/
  messageDesc(file_common_fields, 3);

/**
 * Validation rules for the field.
 *
 * @generated from message io.clbs.openhes.models.common.FieldValidation
 */
export type FieldValidation = Message<"io.clbs.openhes.models.common.FieldValidation"> & {
  /**
   * Regular expression describing input format. If not set then any value of given type can be used. It can be used for string, int or double fields only.
   *
   * @generated from field: string re = 1;
   */
  re: string;

  /**
   * The minimum length. It's used for string fields only.
   *
   * @generated from field: int32 min_length = 2;
   */
  minLength: number;

  /**
   * The maximum length. It's used for string fields only.
   *
   * @generated from field: int32 max_length = 3;
   */
  maxLength: number;

  /**
   * The minimum value. It's used for integer fields only.
   *
   * @generated from field: sint64 min_integer = 4;
   */
  minInteger: bigint;

  /**
   * The maximum value. It's used for integer fields only.
   *
   * @generated from field: sint64 max_integer = 5;
   */
  maxInteger: bigint;

  /**
   * The minimum value. It's used for number fields only.
   *
   * @generated from field: double min_number = 6;
   */
  minNumber: number;

  /**
   * The maximum value. It's used for number fields only.
   *
   * @generated from field: double max_number = 7;
   */
  maxNumber: number;

  /**
   * The list of allowed values to be set (key-value pairs). The key here represents the field value to be set and the value here represents the label to be displayed.
   *
   * @generated from field: map<string, string> options = 8;
   */
  options: { [key: string]: string };
};

/**
 * Validation rules for the field.
 *
 * @generated from message io.clbs.openhes.models.common.FieldValidation
 */
export type FieldValidationJson = {
  /**
   * Regular expression describing input format. If not set then any value of given type can be used. It can be used for string, int or double fields only.
   *
   * @generated from field: string re = 1;
   */
  re?: string;

  /**
   * The minimum length. It's used for string fields only.
   *
   * @generated from field: int32 min_length = 2;
   */
  minLength?: number;

  /**
   * The maximum length. It's used for string fields only.
   *
   * @generated from field: int32 max_length = 3;
   */
  maxLength?: number;

  /**
   * The minimum value. It's used for integer fields only.
   *
   * @generated from field: sint64 min_integer = 4;
   */
  minInteger?: string;

  /**
   * The maximum value. It's used for integer fields only.
   *
   * @generated from field: sint64 max_integer = 5;
   */
  maxInteger?: string;

  /**
   * The minimum value. It's used for number fields only.
   *
   * @generated from field: double min_number = 6;
   */
  minNumber?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * The maximum value. It's used for number fields only.
   *
   * @generated from field: double max_number = 7;
   */
  maxNumber?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * The list of allowed values to be set (key-value pairs). The key here represents the field value to be set and the value here represents the label to be displayed.
   *
   * @generated from field: map<string, string> options = 8;
   */
  options?: { [key: string]: string };
};

/**
 * Describes the message io.clbs.openhes.models.common.FieldValidation.
 * Use `create(FieldValidationSchema)` to create a new message.
 */
export const FieldValidationSchema: GenMessage<FieldValidation, FieldValidationJson> = /*@__PURE__*/
  messageDesc(file_common_fields, 4);

/**
 * @generated from message io.clbs.openhes.models.common.FieldValue
 */
export type FieldValue = Message<"io.clbs.openhes.models.common.FieldValue"> & {
  /**
   * @generated from oneof io.clbs.openhes.models.common.FieldValue.kind
   */
  kind: {
    /**
     * Represents a string-typed value.
     *
     * @generated from field: string string_value = 1;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * Represents a 64-bit integer-typed value.
     *
     * @generated from field: int64 integer_value = 2;
     */
    value: bigint;
    case: "integerValue";
  } | {
    /**
     * Represents a 64-bit double-typed value.
     *
     * @generated from field: double double_value = 3;
     */
    value: number;
    case: "doubleValue";
  } | {
    /**
     * Represents a binary-typed value.
     *
     * @generated from field: bytes binary_value = 4;
     */
    value: Uint8Array;
    case: "binaryValue";
  } | {
    /**
     * Represents a boolean-typed value.
     *
     * @generated from field: bool bool_value = 5;
     */
    value: boolean;
    case: "boolValue";
  } | {
    /**
     * Represents a date-typed value.
     *
     * @generated from field: google.protobuf.Timestamp date_value = 6;
     */
    value: Timestamp;
    case: "dateValue";
  } | {
    /**
     * Represents a duration-typed value.
     *
     * @generated from field: google.protobuf.Duration duration_value = 7;
     */
    value: Duration;
    case: "durationValue";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message io.clbs.openhes.models.common.FieldValue
 */
export type FieldValueJson = {
  /**
   * Represents a string-typed value.
   *
   * @generated from field: string string_value = 1;
   */
  stringValue?: string;

  /**
   * Represents a 64-bit integer-typed value.
   *
   * @generated from field: int64 integer_value = 2;
   */
  integerValue?: string;

  /**
   * Represents a 64-bit double-typed value.
   *
   * @generated from field: double double_value = 3;
   */
  doubleValue?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * Represents a binary-typed value.
   *
   * @generated from field: bytes binary_value = 4;
   */
  binaryValue?: string;

  /**
   * Represents a boolean-typed value.
   *
   * @generated from field: bool bool_value = 5;
   */
  boolValue?: boolean;

  /**
   * Represents a date-typed value.
   *
   * @generated from field: google.protobuf.Timestamp date_value = 6;
   */
  dateValue?: TimestampJson;

  /**
   * Represents a duration-typed value.
   *
   * @generated from field: google.protobuf.Duration duration_value = 7;
   */
  durationValue?: DurationJson;
};

/**
 * Describes the message io.clbs.openhes.models.common.FieldValue.
 * Use `create(FieldValueSchema)` to create a new message.
 */
export const FieldValueSchema: GenMessage<FieldValue, FieldValueJson> = /*@__PURE__*/
  messageDesc(file_common_fields, 5);

/**
 * @generated from message io.clbs.openhes.models.common.FieldValues
 */
export type FieldValues = Message<"io.clbs.openhes.models.common.FieldValues"> & {
  /**
   * The field values.
   *
   * @generated from field: map<string, io.clbs.openhes.models.common.FieldValue> attributes = 1;
   */
  attributes: { [key: string]: FieldValue };
};

/**
 * @generated from message io.clbs.openhes.models.common.FieldValues
 */
export type FieldValuesJson = {
  /**
   * The field values.
   *
   * @generated from field: map<string, io.clbs.openhes.models.common.FieldValue> attributes = 1;
   */
  attributes?: { [key: string]: FieldValueJson };
};

/**
 * Describes the message io.clbs.openhes.models.common.FieldValues.
 * Use `create(FieldValuesSchema)` to create a new message.
 */
export const FieldValuesSchema: GenMessage<FieldValues, FieldValuesJson> = /*@__PURE__*/
  messageDesc(file_common_fields, 6);

/**
 * @generated from message io.clbs.openhes.models.common.ListOfFieldValue
 */
export type ListOfFieldValue = Message<"io.clbs.openhes.models.common.ListOfFieldValue"> & {
  /**
   * The list of field values.
   *
   * @generated from field: repeated io.clbs.openhes.models.common.FieldValue items = 1;
   */
  items: FieldValue[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * @generated from message io.clbs.openhes.models.common.ListOfFieldValue
 */
export type ListOfFieldValueJson = {
  /**
   * The list of field values.
   *
   * @generated from field: repeated io.clbs.openhes.models.common.FieldValue items = 1;
   */
  items?: FieldValueJson[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.common.ListOfFieldValue.
 * Use `create(ListOfFieldValueSchema)` to create a new message.
 */
export const ListOfFieldValueSchema: GenMessage<ListOfFieldValue, ListOfFieldValueJson> = /*@__PURE__*/
  messageDesc(file_common_fields, 7);

/**
 * @generated from message io.clbs.openhes.models.common.ListOfFieldDescriptor
 */
export type ListOfFieldDescriptor = Message<"io.clbs.openhes.models.common.ListOfFieldDescriptor"> & {
  /**
   * The list of field descriptors.
   *
   * @generated from field: repeated io.clbs.openhes.models.common.FieldDescriptor items = 1;
   */
  items: FieldDescriptor[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * @generated from message io.clbs.openhes.models.common.ListOfFieldDescriptor
 */
export type ListOfFieldDescriptorJson = {
  /**
   * The list of field descriptors.
   *
   * @generated from field: repeated io.clbs.openhes.models.common.FieldDescriptor items = 1;
   */
  items?: FieldDescriptorJson[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.common.ListOfFieldDescriptor.
 * Use `create(ListOfFieldDescriptorSchema)` to create a new message.
 */
export const ListOfFieldDescriptorSchema: GenMessage<ListOfFieldDescriptor, ListOfFieldDescriptorJson> = /*@__PURE__*/
  messageDesc(file_common_fields, 8);

/**
 * The filter operator.
 *
 * @generated from enum io.clbs.openhes.models.common.FilterOperator
 */
export enum FilterOperator {
  /**
   * Single operand operator for text, integer, number, boolean, date fields.
   *
   * @generated from enum value: EQUAL = 0;
   */
  EQUAL = 0,

  /**
   * Single operand operator for text, integer, number, boolean, date fields.
   *
   * @generated from enum value: NOT_EQUAL = 1;
   */
  NOT_EQUAL = 1,

  /**
   * Single operand operator for integer, number, date fields.
   *
   * @generated from enum value: GREATER_THAN = 2;
   */
  GREATER_THAN = 2,

  /**
   * Single operand operator for integer, number, date fields.
   *
   * @generated from enum value: GREATER_THAN_OR_EQUAL = 3;
   */
  GREATER_THAN_OR_EQUAL = 3,

  /**
   * Single operand operator for integer, number, date fields.
   *
   * @generated from enum value: LESS_THAN = 4;
   */
  LESS_THAN = 4,

  /**
   * Single operand operator for integer, number, date fields.
   *
   * @generated from enum value: LESS_THAN_OR_EQUAL = 5;
   */
  LESS_THAN_OR_EQUAL = 5,

  /**
   * Single operand operator for text fields.
   *
   * @generated from enum value: CONTAINS = 6;
   */
  CONTAINS = 6,

  /**
   * Single operand operator for text fields.
   *
   * @generated from enum value: NOT_CONTAINS = 7;
   */
  NOT_CONTAINS = 7,

  /**
   * Single operand operator for text fields.
   *
   * @generated from enum value: STARTS_WITH = 8;
   */
  STARTS_WITH = 8,

  /**
   * Single operand operator for text fields.
   *
   * @generated from enum value: ENDS_WITH = 9;
   */
  ENDS_WITH = 9,

  /**
   * Multiple operand operator for text, integer, number, boolean fields.
   *
   * @generated from enum value: IN = 10;
   */
  IN = 10,

  /**
   * Multiple operand operator for text, integer, number, boolean fields.
   *
   * @generated from enum value: NOT_IN = 11;
   */
  NOT_IN = 11,

  /**
   * Two operand operator for integer, number, date fields.
   *
   * @generated from enum value: BETWEEN = 12;
   */
  BETWEEN = 12,

  /**
   * No operand operator. For both null and empty string.
   *
   * @generated from enum value: IS_NULL = 13;
   */
  IS_NULL = 13,

  /**
   * No operand operator. For both null and empty string.
   *
   * @generated from enum value: IS_NOT_NULL = 14;
   */
  IS_NOT_NULL = 14,
}

/**
 * The filter operator.
 *
 * @generated from enum io.clbs.openhes.models.common.FilterOperator
 */
export type FilterOperatorJson = "EQUAL" | "NOT_EQUAL" | "GREATER_THAN" | "GREATER_THAN_OR_EQUAL" | "LESS_THAN" | "LESS_THAN_OR_EQUAL" | "CONTAINS" | "NOT_CONTAINS" | "STARTS_WITH" | "ENDS_WITH" | "IN" | "NOT_IN" | "BETWEEN" | "IS_NULL" | "IS_NOT_NULL";

/**
 * Describes the enum io.clbs.openhes.models.common.FilterOperator.
 */
export const FilterOperatorSchema: GenEnum<FilterOperator, FilterOperatorJson> = /*@__PURE__*/
  enumDesc(file_common_fields, 0);

/**
 * Enum representing the field data type.
 *
 * @generated from enum io.clbs.openhes.models.common.FieldDataType
 */
export enum FieldDataType {
  /**
   * The text data type.
   *
   * @generated from enum value: TEXT = 0;
   */
  TEXT = 0,

  /**
   * The integer data type.
   *
   * @generated from enum value: INTEGER = 1;
   */
  INTEGER = 1,

  /**
   * The double data type.
   *
   * @generated from enum value: DOUBLE = 2;
   */
  DOUBLE = 2,

  /**
   * The binary data type.
   *
   * @generated from enum value: BINARY = 3;
   */
  BINARY = 3,

  /**
   * The boolean data type.
   *
   * @generated from enum value: BOOLEAN = 4;
   */
  BOOLEAN = 4,

  /**
   * The timestamp data type, represented by google.protobuf.Timestamp.
   *
   * @generated from enum value: TIMESTAMP = 5;
   */
  TIMESTAMP = 5,

  /**
   * The duration data type, represented by google.protobuf.Duration.
   *
   * @generated from enum value: DURATION = 6;
   */
  DURATION = 6,
}

/**
 * Enum representing the field data type.
 *
 * @generated from enum io.clbs.openhes.models.common.FieldDataType
 */
export type FieldDataTypeJson = "TEXT" | "INTEGER" | "DOUBLE" | "BINARY" | "BOOLEAN" | "TIMESTAMP" | "DURATION";

/**
 * Describes the enum io.clbs.openhes.models.common.FieldDataType.
 */
export const FieldDataTypeSchema: GenEnum<FieldDataType, FieldDataTypeJson> = /*@__PURE__*/
  enumDesc(file_common_fields, 1);

/**
 * Enum representing the field display format.
 *
 * @generated from enum io.clbs.openhes.models.common.FieldDisplayFormat
 */
export enum FieldDisplayFormat {
  /**
   * The default display format. The GUI shows text, int, double, date-time or duration in the default format.
   *
   * @generated from enum value: DEFAULT = 0;
   */
  DEFAULT = 0,

  /**
   * The date-only display format of local date-time. Data type must be TIMESTAMP or string.
   *
   * @generated from enum value: DATE_ONLY = 1;
   */
  DATE_ONLY = 1,

  /**
   * The date-time display format with in UTC timezone. Data type must be TIMESTAMP or string.
   *
   * @generated from enum value: UTC_DATETIME = 2;
   */
  UTC_DATETIME = 2,

  /**
   * The date display format with in UTC timezone. Data type must be TIMESTAMP or string.
   *
   * @generated from enum value: UTC_DATE_ONLY = 3;
   */
  UTC_DATE_ONLY = 3,

  /**
   * The time of day display format hh:mm:ss, e.g. 12:30:00. Data type must be INTEGER in milliseconds.
   *
   * @generated from enum value: TIMEOFDAY = 4;
   */
  TIMEOFDAY = 4,

  /**
   * The money display format. The unit must be set to the currency code, ISO 4217 standard (e.g. USD, EUR, ...). Data type must be DOUBLE or INTEGER.
   *
   * @generated from enum value: MONEY = 5;
   */
  MONEY = 5,

  /**
   * The password display format. Data type must be TEXT. The GUI must always display six starts (******) not to reveal the actual password length.
   *
   * @generated from enum value: PASSWORD = 6;
   */
  PASSWORD = 6,

  /**
   * The multiline-string display format. Data type must be TEXT.
   *
   * @generated from enum value: MULTILINE = 7;
   */
  MULTILINE = 7,
}

/**
 * Enum representing the field display format.
 *
 * @generated from enum io.clbs.openhes.models.common.FieldDisplayFormat
 */
export type FieldDisplayFormatJson = "DEFAULT" | "DATE_ONLY" | "UTC_DATETIME" | "UTC_DATE_ONLY" | "TIMEOFDAY" | "MONEY" | "PASSWORD" | "MULTILINE";

/**
 * Describes the enum io.clbs.openhes.models.common.FieldDisplayFormat.
 */
export const FieldDisplayFormatSchema: GenEnum<FieldDisplayFormat, FieldDisplayFormatJson> = /*@__PURE__*/
  enumDesc(file_common_fields, 2);

