// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file acquisition/shared.proto (package io.clbs.openhes.models.acquisition, edition 2023)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Empty, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_common_metadata } from "../common/metadata_pb";
import type { ListOfString } from "../common/types_pb";
import { file_common_types } from "../common/types_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file acquisition/shared.proto.
 */
export const file_acquisition_shared: GenFile = /*@__PURE__*/
  fileDesc("ChhhY3F1aXNpdGlvbi9zaGFyZWQucHJvdG8SImlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24i0gEKC0pvYlNldHRpbmdzEhQKDG1heF9kdXJhdGlvbhgBIAEoAxJBCghwcmlvcml0eRgCIAEoDjIvLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uSm9iUHJpb3JpdHkSEAoIYXR0ZW1wdHMYAyADKAUSEwoLcmV0cnlfZGVsYXkYBCABKAMSEwoLZGVmZXJfc3RhcnQYBSABKAQSLgoKZXhwaXJlc19hdBgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiiQwKCUpvYkFjdGlvbhIRCglhY3Rpb25faWQYASABKAkSUQoKYXR0cmlidXRlcxgCIAMoCzI9LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uSm9iQWN0aW9uLkF0dHJpYnV0ZXNFbnRyeRJNCgxnZXRfcmVnaXN0ZXIYAyABKAsyNS5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkFjdGlvbkdldFJlZ2lzdGVySAASYAoWZ2V0X3BlcmlvZGljYWxfcHJvZmlsZRgEIAEoCzI+LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQWN0aW9uR2V0UGVyaW9kaWNhbFByb2ZpbGVIABJeChVnZXRfaXJyZWd1bGFyX3Byb2ZpbGUYBSABKAsyPS5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkFjdGlvbkdldElycmVndWxhclByb2ZpbGVIABJJCgpnZXRfZXZlbnRzGAYgASgLMjMuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5BY3Rpb25HZXRFdmVudHNIABJHCglnZXRfY2xvY2sYByABKAsyMi5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkFjdGlvbkdldENsb2NrSAASSQoKc3luY19jbG9jaxgIIAEoCzIzLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQWN0aW9uU3luY0Nsb2NrSAASUgoPZ2V0X3JlbGF5X3N0YXRlGAkgASgLMjcuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5BY3Rpb25HZXRSZWxheVN0YXRlSAASUgoPc2V0X3JlbGF5X3N0YXRlGAogASgLMjcuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5BY3Rpb25TZXRSZWxheVN0YXRlSAASYAoWZ2V0X2Rpc2Nvbm5lY3Rvcl9zdGF0ZRgLIAEoCzI+LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQWN0aW9uR2V0RGlzY29ubmVjdG9yU3RhdGVIABJgChZzZXRfZGlzY29ubmVjdG9yX3N0YXRlGAwgASgLMj4uaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5BY3Rpb25TZXREaXNjb25uZWN0b3JTdGF0ZUgAEkMKB2dldF90b3UYDSABKAsyMC5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkFjdGlvbkdldFRvdUgAEkMKB3NldF90b3UYDiABKAsyMC5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkFjdGlvblNldFRvdUgAEksKC2dldF9saW1pdGVyGA8gASgLMjQuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5BY3Rpb25HZXRMaW1pdGVySAASSwoLc2V0X2xpbWl0ZXIYECABKAsyNC5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkFjdGlvblNldExpbWl0ZXJIABJcChRyZXNldF9iaWxsaW5nX3BlcmlvZBgRIAEoCzI8LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQWN0aW9uUmVzZXRCaWxsaW5nUGVyaW9kSAASRwoJZndfdXBkYXRlGBIgASgLMjIuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5BY3Rpb25Gd1VwZGF0ZUgAGmUKD0F0dHJpYnV0ZXNFbnRyeRILCgNrZXkYASABKAkSQQoFdmFsdWUYAiABKAsyMi5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkF0dHJpYnV0ZVZhbHVlOgI4AUIICgZhY3Rpb24iTgoPTGlzdE9mSm9iRGV2aWNlEjsKBGxpc3QYBSADKAsyLS5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkpvYkRldmljZSJSChFMaXN0T2ZKb2JEZXZpY2VJZBI9CgRsaXN0GAUgAygLMi8uaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5Kb2JEZXZpY2VJZCIsCgtKb2JEZXZpY2VJZBIKCgJpZBgBIAEoCRIRCglkZXZpY2VfaWQYAiABKAkiugMKCUpvYkRldmljZRIKCgJpZBgBIAEoCRIRCglkZXZpY2VfaWQYAiABKAkSEwoLZXh0ZXJuYWxfaWQYAyABKAkSXgoRZGV2aWNlX2F0dHJpYnV0ZXMYBCADKAsyQy5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkpvYkRldmljZS5EZXZpY2VBdHRyaWJ1dGVzRW50cnkSSwoPY29ubmVjdGlvbl9pbmZvGAUgAygLMjIuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5Db25uZWN0aW9uSW5mbxJNCgxhcHBfcHJvdG9jb2wYBiABKA4yNy5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkFwcGxpY2F0aW9uUHJvdG9jb2wSEAoIdGltZXpvbmUYByABKAkaawoVRGV2aWNlQXR0cmlidXRlc0VudHJ5EgsKA2tleRgBIAEoCRJBCgV2YWx1ZRgCIAEoCzIyLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQXR0cmlidXRlVmFsdWU6AjgBIp4CCglNb2RlbUluZm8SCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRIPCgdhdF9pbml0GAMgASgJEg8KB2F0X3Rlc3QYBCABKAkSEQoJYXRfY29uZmlnGAUgASgJEg8KB2F0X2RpYWwYBiABKAkSEQoJYXRfaGFuZ3VwGAcgASgJEhEKCWF0X2VzY2FwZRgIIAEoCRIOCgZhdF9kc3IYCSABKAgSFwoPY29ubmVjdF90aW1lb3V0GAogASgNEk4KBXRjcGlwGAsgASgLMj0uaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5Db25uZWN0aW9uVHlwZURpcmVjdFRjcElwSABCEgoQbW9kZW1fY29ubmVjdGlvbiK9AgoMU2VyaWFsQ29uZmlnEksKCWJhdWRfcmF0ZRgBIAEoDjI4LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uU2VyaWFsQ29uZmlnQmF1ZFJhdGUSRgoGcGFyaXR5GAIgASgOMjYuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5TZXJpYWxDb25maWdQYXJpdHkSSwoJZGF0YV9iaXRzGAMgASgOMjguaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5TZXJpYWxDb25maWdEYXRhQml0cxJLCglzdG9wX2JpdHMYBCABKA4yOC5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLlNlcmlhbENvbmZpZ1N0b3BCaXRzIogDCg5Db25uZWN0aW9uSW5mbxJOCgV0Y3BpcBgBIAEoCzI9LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQ29ubmVjdGlvblR5cGVEaXJlY3RUY3BJcEgAElEKCm1vZGVtX3Bvb2wYAiABKAsyOy5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkNvbm5lY3Rpb25UeXBlTW9kZW1Qb29sSAASXAoOc2VyaWFsX292ZXJfaXAYAyABKAsyQi5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkNvbm5lY3Rpb25UeXBlQ29udHJvbGxlZFNlcmlhbEgAEksKDWxpbmtfcHJvdG9jb2wYBCABKA4yNC5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkRhdGFMaW5rUHJvdG9jb2wSGgoSY3VzdG9tX2dyb3VwaW5nX2lkGAUgASgJQgwKCmNvbm5lY3Rpb24iSAoZQ29ubmVjdGlvblR5cGVEaXJlY3RUY3BJcBIMCgRob3N0GAEgASgJEgwKBHBvcnQYAiABKA0SDwoHdGltZW91dBgDIAEoBSJ4ChdDb25uZWN0aW9uVHlwZU1vZGVtUG9vbBIOCgZudW1iZXIYASABKAkSDwoHcG9vbF9pZBgCIAEoCRI8CgVtb2RlbRgEIAEoCzItLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uTW9kZW1JbmZvIjgKGkNvbm5lY3Rpb25UeXBlU2VyaWFsRGlyZWN0EgwKBGhvc3QYASABKAkSDAoEcG9ydBgCIAEoDSJPChhDb25uZWN0aW9uVHlwZVNlcmlhbE1veGESDAoEaG9zdBgBIAEoCRIQCghkYXRhUG9ydBgCIAEoDRITCgtjb21tYW5kUG9ydBgDIAEoDSLBAQobQXBwbGljYXRpb25Qcm90b2NvbFRlbXBsYXRlEgoKAmlkGAEgASgJEkkKCHByb3RvY29sGAIgASgOMjcuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5BcHBsaWNhdGlvblByb3RvY29sEksKCmF0dHJpYnV0ZXMYAyADKAsyNy5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkF0dHJpYnV0ZURlZmluaXRpb24igAIKEERhdGFMaW5rVGVtcGxhdGUSSwoNbGlua19wcm90b2NvbBgBIAEoDjI0LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uRGF0YUxpbmtQcm90b2NvbBJSChFhcHBfcHJvdG9jb2xfcmVmcxgCIAMoDjI3LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQXBwbGljYXRpb25Qcm90b2NvbBJLCgphdHRyaWJ1dGVzGAMgAygLMjcuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5BdHRyaWJ1dGVEZWZpbml0aW9uIqUBChVDb21tdW5pY2F0aW9uVGVtcGxhdGUSQwoEdHlwZRgBIAEoDjI1LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQ29tbXVuaWNhdGlvblR5cGUSRwoJZGF0YWxpbmtzGAIgAygLMjQuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5EYXRhTGlua1RlbXBsYXRlIi8KE0FjY2Vzc0xldmVsVGVtcGxhdGUSCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCSLBAwoPRHJpdmVyVGVtcGxhdGVzEloKF2NvbW11bmljYXRpb25fdGVtcGxhdGVzGAEgAygLMjkuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5Db21tdW5pY2F0aW9uVGVtcGxhdGUSVgoNYXBwX3Byb3RvY29scxgCIAMoCzI/LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQXBwbGljYXRpb25Qcm90b2NvbFRlbXBsYXRlElIKEWFjdGlvbl9hdHRyaWJ1dGVzGAMgAygLMjcuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5Kb2JBY3Rpb25BdHRyaWJ1dGVzElEKEGFjY2Vzc190ZW1wbGF0ZXMYBCADKAsyNy5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkFjY2Vzc0xldmVsVGVtcGxhdGUSUwoSYWN0aW9uX2NvbnN0cmFpbnRzGAUgASgLMjcuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5Kb2JBY3Rpb25Db250cmFpbnRzIrsBChRBY3Rpb25Qcm9ncmVzc1VwZGF0ZRIOCgZqb2JfaWQYASABKAkSEQoJYWN0aW9uX2lkGAIgASgJEkIKBGNvZGUYAyABKA4yNC5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkFjdGlvblJlc3VsdENvZGUSPAoEZGF0YRgEIAEoCzIuLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQWN0aW9uRGF0YSJ1ChFKb2JQcm9ncmVzc1VwZGF0ZRIOCgZqb2JfaWQYASABKAkSPgoEY29kZRgCIAEoDjIwLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uSm9iRXJyb3JDb2RlEhAKCGR1cmF0aW9uGAMgASgDIssBCgpBY3Rpb25EYXRhEigKBm5vZGF0YRgBIAEoCzIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eUgAEkUKCGJpbGxpbmdzGAIgASgLMjEuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5CaWxsaW5nVmFsdWVzSAASRAoHcHJvZmlsZRgDIAEoCzIxLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uUHJvZmlsZVZhbHVlc0gAQgYKBGRhdGEibgoNUHJvZmlsZVZhbHVlcxIOCgZwZXJpb2QYASABKAUSDAoEdW5pdBgCIAEoCRI/CgZibG9ja3MYAyADKAsyLy5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLlByb2ZpbGVCbG9rIoUBCgtQcm9maWxlQmxvaxIzCg9zdGFydF90aW1lc3RhbXAYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEkEKBnZhbHVlcxgCIAMoCzIxLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uTWVhc3VyZWRWYWx1ZSJRCg1CaWxsaW5nVmFsdWVzEkAKBnZhbHVlcxgBIAMoCzIwLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQmlsbGluZ1ZhbHVlIo0BCgxCaWxsaW5nVmFsdWUSLQoJdGltZXN0YW1wGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIMCgR1bml0GAIgASgJEkAKBXZhbHVlGAMgASgLMjEuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5NZWFzdXJlZFZhbHVlIucBCg1NZWFzdXJlZFZhbHVlEg4KBnN0YXR1cxgBIAEoAxIQCghleHBvbmVudBgCIAEoBRIWCgxkb3VibGVfdmFsdWUYAyABKAFIABITCglpbnRfdmFsdWUYBCABKANIABITCglzdHJfdmFsdWUYBSABKAlIABI1Cg90aW1lc3RhbXBfdmFsdWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wSAASHAoSdGltZXN0YW1wX3R6X3ZhbHVlGAcgASgJSAASFAoKYm9vbF92YWx1ZRgIIAEoCEgAQgcKBXZhbHVlIt4CChNBdHRyaWJ1dGVEZWZpbml0aW9uEgwKBG5hbWUYASABKAkSEwoLZGVzY3JpcHRpb24YAiABKAkSPwoEdHlwZRgDIAEoDjIxLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQXR0cmlidXRlVHlwZRIRCgltYW5kYXRvcnkYBCABKAgSSQoNZGVmYXVsdF92YWx1ZRgFIAEoCzIyLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQXR0cmlidXRlVmFsdWUSVQoHb3B0aW9ucxgGIAMoCzJELmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQXR0cmlidXRlRGVmaW5pdGlvbi5PcHRpb25zRW50cnkaLgoMT3B0aW9uc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEioAEKE0pvYkFjdGlvbkF0dHJpYnV0ZXMSPAoEdHlwZRgBIAEoDjIuLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQWN0aW9uVHlwZRJLCgphdHRyaWJ1dGVzGAIgAygLMjcuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5BdHRyaWJ1dGVEZWZpbml0aW9uIs0BCh5Db25uZWN0aW9uVHlwZUNvbnRyb2xsZWRTZXJpYWwSUAoGZGlyZWN0GAEgASgLMj4uaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5Db25uZWN0aW9uVHlwZVNlcmlhbERpcmVjdEgAEkwKBG1veGEYAiABKAsyPC5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkNvbm5lY3Rpb25UeXBlU2VyaWFsTW94YUgAQgsKCWNvbnZlcnRlciITChFBY3Rpb25HZXRSZWdpc3RlciJuChpBY3Rpb25HZXRQZXJpb2RpY2FsUHJvZmlsZRIoCgRmcm9tGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBImCgJ0bxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAibQoZQWN0aW9uR2V0SXJyZWd1bGFyUHJvZmlsZRIoCgRmcm9tGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBImCgJ0bxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiYwoPQWN0aW9uR2V0RXZlbnRzEigKBGZyb20YASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEiYKAnRvGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCIQCg5BY3Rpb25HZXRDbG9jayIRCg9BY3Rpb25TeW5jQ2xvY2siFQoTQWN0aW9uR2V0UmVsYXlTdGF0ZSIVChNBY3Rpb25TZXRSZWxheVN0YXRlIhwKGkFjdGlvbkdldERpc2Nvbm5lY3RvclN0YXRlIhwKGkFjdGlvblNldERpc2Nvbm5lY3RvclN0YXRlIg4KDEFjdGlvbkdldFRvdSIOCgxBY3Rpb25TZXRUb3UiEgoQQWN0aW9uR2V0TGltaXRlciISChBBY3Rpb25TZXRMaW1pdGVyIhoKGEFjdGlvblJlc2V0QmlsbGluZ1BlcmlvZCIQCg5BY3Rpb25Gd1VwZGF0ZSKJAQoOQXR0cmlidXRlVmFsdWUSEwoJc3RyX3ZhbHVlGAEgASgJSAASEwoJaW50X3ZhbHVlGAIgASgDSAASFgoMZG91YmxlX3ZhbHVlGAMgASgBSAASFgoMYmluYXJ5X3ZhbHVlGAQgASgMSAASFAoKYm9vbF92YWx1ZRgFIAEoCEgAQgcKBXZhbHVlIrADChNKb2JBY3Rpb25Db250cmFpbnRzEnAKFmdldF9yZWdpc3Rlcl90eXBlX25hbWUYASADKAsyUC5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkpvYkFjdGlvbkNvbnRyYWludHMuR2V0UmVnaXN0ZXJUeXBlTmFtZUVudHJ5EnwKHGdldF9yZWdpc3Rlcl90eXBlX2F0dHJpYnV0ZXMYAiADKAsyVi5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkpvYkFjdGlvbkNvbnRyYWludHMuR2V0UmVnaXN0ZXJUeXBlQXR0cmlidXRlc0VudHJ5GjoKGEdldFJlZ2lzdGVyVHlwZU5hbWVFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGm0KHkdldFJlZ2lzdGVyVHlwZUF0dHJpYnV0ZXNFbnRyeRILCgNrZXkYASABKAkSOgoFdmFsdWUYAiABKAsyKy5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmNvbW1vbi5MaXN0T2ZTdHJpbmc6AjgBIlgKB0J1bGtKb2ISDgoGam9iX2lkGAEgASgJEj0KBnN0YXR1cxgCIAEoCzItLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uSm9iU3RhdHVzIvkCCglKb2JTdGF0dXMSQQoGc3RhdHVzGAEgASgOMjEuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5Kb2JTdGF0dXNDb2RlEj4KBGNvZGUYAiABKA4yMC5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkpvYkVycm9yQ29kZRJBCgdyZXN1bHRzGAMgAygLMjAuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5BY3Rpb25SZXN1bHQSLgoKY3JlYXRlZF9hdBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoKc3RhcnRlZF9hdBgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLwoLZmluaXNoZWRfYXQYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhUKDWF0dGVtcHRzX2RvbmUYByABKAUi2gMKDFN0YXJ0Sm9iRGF0YRJhChFkZXZpY2VfYXR0cmlidXRlcxgBIAMoCzJGLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uU3RhcnRKb2JEYXRhLkRldmljZUF0dHJpYnV0ZXNFbnRyeRIOCgZqb2JfaWQYAiABKAkSRQoMam9iX3NldHRpbmdzGAMgASgLMi8uaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5Kb2JTZXR0aW5ncxJCCgtqb2JfYWN0aW9ucxgEIAMoCzItLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uSm9iQWN0aW9uEk0KDGFwcF9wcm90b2NvbBgFIAEoDjI3LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQXBwbGljYXRpb25Qcm90b2NvbBIQCgh0aW1lem9uZRgGIAEoCRprChVEZXZpY2VBdHRyaWJ1dGVzRW50cnkSCwoDa2V5GAEgASgJEkEKBXZhbHVlGAIgASgLMjIuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5BdHRyaWJ1dGVWYWx1ZToCOAEiIgoQQ2FuY2VsSm9iUmVxdWVzdBIOCgZqb2JfaWQYASABKAkijQMKFERldmljZUNvbm5lY3Rpb25JbmZvEk4KEmNvbW11bmljYXRpb25fdW5pdBgBIAEoCzIyLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQ29ubmVjdGlvbkluZm8STQoMYXBwX3Byb3RvY29sGAIgASgOMjcuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5BcHBsaWNhdGlvblByb3RvY29sEmkKEWRldmljZV9hdHRyaWJ1dGVzGAMgAygLMk4uaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5EZXZpY2VDb25uZWN0aW9uSW5mby5EZXZpY2VBdHRyaWJ1dGVzRW50cnkaawoVRGV2aWNlQXR0cmlidXRlc0VudHJ5EgsKA2tleRgBIAEoCRJBCgV2YWx1ZRgCIAEoCzIyLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQXR0cmlidXRlVmFsdWU6AjgBIk8KD0xpc3RPZk1vZGVtSW5mbxI8CgVpdGVtcxgBIAMoCzItLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uTW9kZW1JbmZvIl8KFExpc3RPZkNvbm5lY3Rpb25JbmZvEkcKBWl0ZW1zGAEgAygLMjguaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5EZXZpY2VDb25uZWN0aW9uSW5mbyKlAQoMQWN0aW9uUmVzdWx0EhEKCWFjdGlvbl9pZBgBIAEoCRJECgZzdGF0dXMYAiABKA4yNC5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkFjdGlvblJlc3VsdENvZGUSPAoEZGF0YRgDIAEoCzIuLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQWN0aW9uRGF0YSIeCgxKb2JFdmVudERhdGESDgoGam9iX2lkGAEgASgMIkIKEUdldERldmljZXNSZXF1ZXN0EgoKAmlkGAEgASgJEhMKC2V4dGVybmFsX2lkGAIgASgJEgwKBG5hbWUYAyABKAki5gIKCkRldmljZVNwZWMSCgoCaWQYASABKAkSEwoLZXh0ZXJuYWxfaWQYAiABKAkSDAoEbmFtZRgDIAEoCRJSCgphdHRyaWJ1dGVzGAQgAygLMj4uaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5EZXZpY2VTcGVjLkF0dHJpYnV0ZXNFbnRyeRJcChdjb21tdW5pY2F0aW9uX3VuaXRfbGluaxgFIAMoCzI7LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uRGV2aWNlQ29tbXVuaWNhdGlvblVuaXQSEAoIdGltZXpvbmUYBiABKAkaZQoPQXR0cmlidXRlc0VudHJ5EgsKA2tleRgBIAEoCRJBCgV2YWx1ZRgCIAEoCzIyLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uQXR0cmlidXRlVmFsdWU6AjgBIt4BChdHZXREZXZpY2VHcm91cHNSZXNwb25zZRJXCgZncm91cHMYASADKAsyRy5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkdldERldmljZUdyb3Vwc1Jlc3BvbnNlLkdyb3Vwc0VudHJ5GmoKC0dyb3Vwc0VudHJ5EgsKA2tleRgBIAEoCRJKCgV2YWx1ZRgCIAEoCzI7LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uRGV2aWNlR3JvdXBPdmVydmlld1NwZWM6AjgBIkgKF0RldmljZUdyb3VwT3ZlcnZpZXdTcGVjEgoKAmlkGAEgASgJEhMKC2V4dGVybmFsX2lkGAIgASgJEgwKBG5hbWUYAyABKAkihwEKF0RldmljZUNvbW11bmljYXRpb25Vbml0Eh0KFWNvbW11bmljYXRpb25fdW5pdF9pZBgBIAEoCRJNCgxhcHBfcHJvdG9jb2wYAiABKA4yNy5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkFwcGxpY2F0aW9uUHJvdG9jb2wiYwoUR2V0TW9kZW1Qb29sUmVzcG9uc2USPQoGbW9kZW1zGAEgAygLMi0uaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5Nb2RlbUluZm8SDAoEbmFtZRgCIAEoCSLoAQoHSm9iU3BlYxI9CgZkZXZpY2UYAiABKAsyLS5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkpvYkRldmljZRJFCgxqb2Jfc2V0dGluZ3MYAyABKAsyLy5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkpvYlNldHRpbmdzEhMKC2RyaXZlcl90eXBlGAQgASgJEkIKC2pvYl9hY3Rpb25zGAUgAygLMi0uaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi5Kb2JBY3Rpb24ijwEKE0pvYkRvbmVOb3RpZmljYXRpb24SOQoEc3BlYxgBIAEoCzIrLmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24uSm9iU3BlYxI9CgZzdGF0dXMYAiABKAsyLS5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLkpvYlN0YXR1cyIwChlHZXREcml2ZXJUZW1wbGF0ZXNSZXF1ZXN0EhMKC2RyaXZlcl90eXBlGAEgASgJIjIKCkRyaXZlckluZm8SEwoLZHJpdmVyX3R5cGUYASABKAkSDwoHdmVyc2lvbhgCIAEoCSrBAQoLSm9iUHJpb3JpdHkSEgoOSk9CX1BSSU9SSVRZXzAQABISCg5KT0JfUFJJT1JJVFlfMRABEhIKDkpPQl9QUklPUklUWV8yEAISEgoOSk9CX1BSSU9SSVRZXzMQAxISCg5KT0JfUFJJT1JJVFlfNBAEEhIKDkpPQl9QUklPUklUWV81EAUSEgoOSk9CX1BSSU9SSVRZXzYQBhISCg5KT0JfUFJJT1JJVFlfNxAHEhIKDkpPQl9QUklPUklUWV84EAgqaQoSU2VyaWFsQ29uZmlnUGFyaXR5Eg8KC1BBUklUWV9OT05FEAASDwoLUEFSSVRZX0VWRU4QARIOCgpQQVJJVFlfT0REEAISDwoLUEFSSVRZX01BUksQAxIQCgxQQVJJVFlfU1BBQ0UQBCrLAgoUU2VyaWFsQ29uZmlnQmF1ZFJhdGUSEQoNQkFVRF9SQVRFXzExMBAAEhEKDUJBVURfUkFURV8zMDAQARIRCg1CQVVEX1JBVEVfNjAwEAISEgoOQkFVRF9SQVRFXzEyMDAQAxISCg5CQVVEX1JBVEVfMjQwMBAEEhIKDkJBVURfUkFURV80ODAwEAUSEgoOQkFVRF9SQVRFXzk2MDAQBhITCg9CQVVEX1JBVEVfMTQ0MDAQBxITCg9CQVVEX1JBVEVfMTkyMDAQCBITCg9CQVVEX1JBVEVfMzg0MDAQCRITCg9CQVVEX1JBVEVfNTc2MDAQChIUChBCQVVEX1JBVEVfMTE1MjAwEAsSFAoQQkFVRF9SQVRFXzIzMDQwMBAMEhQKEEJBVURfUkFURV80NjA4MDAQDRIUChBCQVVEX1JBVEVfOTIxNjAwEA4qWgoUU2VyaWFsQ29uZmlnRGF0YUJpdHMSDwoLREFUQV9CSVRTXzUQABIPCgtEQVRBX0JJVFNfNhABEg8KC0RBVEFfQklUU183EAISDwoLREFUQV9CSVRTXzgQAypLChRTZXJpYWxDb25maWdTdG9wQml0cxIPCgtTVE9QX0JJVFNfMRAAEhEKDVNUT1BfQklUU18xXzUQARIPCgtTVE9QX0JJVFNfMhACKsoBChFDb21tdW5pY2F0aW9uVHlwZRIcChhDT01NVU5JQ0FUSU9OX1RZUEVfVENQSVAQABIhCh1DT01NVU5JQ0FUSU9OX1RZUEVfTU9ERU1fUE9PTBABEikKJUNPTU1VTklDQVRJT05fVFlQRV9TRVJJQUxfTElORV9ESVJFQ1QQAhInCiNDT01NVU5JQ0FUSU9OX1RZUEVfU0VSSUFMX0xJTkVfTU9YQRADEiAKHENPTU1VTklDQVRJT05fVFlQRV9MSVNURU5JTkcQYyqnAQoQRGF0YUxpbmtQcm90b2NvbBIaChZMSU5LUFJPVE9fSUVDXzYyMDU2XzIxEAASEgoOTElOS1BST1RPX0hETEMQARIbChdMSU5LUFJPVE9fQ09TRU1fV1JBUFBFUhACEhQKEExJTktQUk9UT19NT0RCVVMQAxISCg5MSU5LUFJPVE9fTUJVUxAEEhwKGExJTktQUk9UT19OT1RfQVBQTElDQUJMRRBjKq4BChNBcHBsaWNhdGlvblByb3RvY29sEhkKFUFQUFBST1RPX0lFQ182MjA1Nl8yMRAAEhQKEEFQUFBST1RPX0RMTVNfU04QARIUChBBUFBQUk9UT19ETE1TX0xOEAISEQoNQVBQUFJPVE9fU0NUTRADEhMKD0FQUFBST1RPX0xJUzIwMBAEEhUKEUFQUFBST1RPX0FOU0lfQzEyEAUSEQoNQVBQUFJPVE9fTVFUVBAGKtABCg1BdHRyaWJ1dGVUeXBlEhYKEkFUVFJJQlVURV9UWVBFX0lOVBAAEhkKFUFUVFJJQlVURV9UWVBFX1NUUklORxABEhkKFUFUVFJJQlVURV9UWVBFX0RPVUJMRRACEhkKFUFUVFJJQlVURV9UWVBFX0JJTkFSWRADEhwKGEFUVFJJQlVURV9UWVBFX1RJTUVTVEFNUBAEEh8KG0FUVFJJQlVURV9UWVBFX1RJTUVTVEFNUF9UWhAFEhcKE0FUVFJJQlVURV9UWVBFX0JPT0wQBiqLBAoKQWN0aW9uVHlwZRIcChhBQ1RJT05fVFlQRV9HRVRfUkVHSVNURVIQABImCiJBQ1RJT05fVFlQRV9HRVRfUEVSSU9ESUNBTF9QUk9GSUxFEAESJQohQUNUSU9OX1RZUEVfR0VUX0lSUkVHVUxBUl9QUk9GSUxFEAISGgoWQUNUSU9OX1RZUEVfR0VUX0VWRU5UUxADEhkKFUFDVElPTl9UWVBFX0dFVF9DTE9DSxAKEhoKFkFDVElPTl9UWVBFX1NZTkNfQ0xPQ0sQCxIfChtBQ1RJT05fVFlQRV9HRVRfUkVMQVlfU1RBVEUQFBIfChtBQ1RJT05fVFlQRV9TRVRfUkVMQVlfU1RBVEUQFRImCiJBQ1RJT05fVFlQRV9HRVRfRElTQ09OTkVDVE9SX1NUQVRFEBYSJgoiQUNUSU9OX1RZUEVfU0VUX0RJU0NPTk5FQ1RPUl9TVEFURRAXEhcKE0FDVElPTl9UWVBFX0dFVF9UT1UQGBIXChNBQ1RJT05fVFlQRV9TRVRfVE9VEBkSGwoXQUNUSU9OX1RZUEVfR0VUX0xJTUlURVIQGhIbChdBQ1RJT05fVFlQRV9TRVRfTElNSVRFUhAbEiQKIEFDVElPTl9UWVBFX1JFU0VUX0JJTExJTkdfUEVSSU9EECgSGQoVQUNUSU9OX1RZUEVfRldfVVBEQVRFEDIqiwEKEEFjdGlvblJlc3VsdENvZGUSGAoURVJST1JfQ09ERV9BQ1RJT05fT0sQABIhCh1FUlJPUl9DT0RFX0FDVElPTl9VTlNVUFBPUlRFRBABEh0KGUVSUk9SX0NPREVfQUNUSU9OX1BFTkRJTkcQAxIbChdFUlJPUl9DT0RFX0FDVElPTl9FUlJPUhAFKpcBCgxKb2JFcnJvckNvZGUSFwoTSk9CX0VSUk9SX0NPREVfTk9ORRAAEhcKE0pPQl9FUlJPUl9DT0RFX0JVU1kQARIYChRKT0JfRVJST1JfQ09ERV9FUlJPUhAFEiEKHUpPQl9FUlJPUl9DT0RFX0FMUkVBRFlfRVhJU1RTEAgSGAoUSk9CX0VSUk9SX0NPREVfRkFUQUwQCSqQAQoOQnVsa1N0YXR1c0NvZGUSFgoSQlVMS19TVEFUVVNfUVVFVUVEEAASFwoTQlVMS19TVEFUVVNfUlVOTklORxABEhkKFUJVTEtfU1RBVFVTX0NPTVBMRVRFRBACEhkKFUJVTEtfU1RBVFVTX0NBTkNFTExFRBADEhcKE0JVTEtfU1RBVFVTX0VYUElSRUQQBCqhAQoNSm9iU3RhdHVzQ29kZRIVChFKT0JfU1RBVFVTX1FVRVVFRBAAEhYKEkpPQl9TVEFUVVNfUlVOTklORxABEhgKFEpPQl9TVEFUVVNfQ09NUExFVEVEEAISFQoRSk9CX1NUQVRVU19GQUlMRUQQAxIYChRKT0JfU1RBVFVTX0NBTkNFTExFRBAEEhYKEkpPQl9TVEFUVVNfRVhQSVJFRBAFQjVaM2dpdGh1Yi5jb20vY3licm9zbGFicy9oZXMtMi1hcGlzL2dlbi9nby9hY3F1aXNpdGlvbmIIZWRpdGlvbnNw6Ac", [file_google_protobuf_empty, file_google_protobuf_timestamp, file_common_metadata, file_common_types]);

/**
 * Sub-message containing job parameters
 *
 * @generated from message io.clbs.openhes.models.acquisition.JobSettings
 */
export type JobSettings = Message<"io.clbs.openhes.models.acquisition.JobSettings"> & {
  /**
   * Maximum duration of the job attempt in miliseconds. This is related to the real time for the driver.
   *
   * @generated from field: int64 max_duration = 1;
   */
  maxDuration: bigint;

  /**
   * Priority of the job.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobPriority priority = 2;
   */
  priority: JobPriority;

  /**
   * Maximum number of attempts, 1 is the minimum.
   *
   * @generated from field: repeated int32 attempts = 3;
   */
  attempts: number[];

  /**
   * Delay in miliseconds between two attempts.
   *
   * @generated from field: int64 retry_delay = 4;
   */
  retryDelay: bigint;

  /**
   * Number of miliseconds to wait before starting the job.
   *
   * @generated from field: uint64 defer_start = 5;
   */
  deferStart: bigint;

  /**
   * The timestamp when the job expires.
   *
   * @generated from field: google.protobuf.Timestamp expires_at = 6;
   */
  expiresAt?: Timestamp;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.JobSettings.
 * Use `create(JobSettingsSchema)` to create a new message.
 */
export const JobSettingsSchema: GenMessage<JobSettings> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 0);

/**
 * Sub-message containing job action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.JobAction
 */
export type JobAction = Message<"io.clbs.openhes.models.acquisition.JobAction"> & {
  /**
   * The action identifier.
   *
   * @generated from field: string action_id = 1;
   */
  actionId: string;

  /**
   * The action attributes.
   *
   * @generated from field: map<string, io.clbs.openhes.models.acquisition.AttributeValue> attributes = 2;
   */
  attributes: { [key: string]: AttributeValue };

  /**
   * @generated from oneof io.clbs.openhes.models.acquisition.JobAction.action
   */
  action: {
    /**
     * The get register action specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ActionGetRegister get_register = 3;
     */
    value: ActionGetRegister;
    case: "getRegister";
  } | {
    /**
     * The get periodical profile action specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ActionGetPeriodicalProfile get_periodical_profile = 4;
     */
    value: ActionGetPeriodicalProfile;
    case: "getPeriodicalProfile";
  } | {
    /**
     * The get irregular profile action specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ActionGetIrregularProfile get_irregular_profile = 5;
     */
    value: ActionGetIrregularProfile;
    case: "getIrregularProfile";
  } | {
    /**
     * The get events action specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ActionGetEvents get_events = 6;
     */
    value: ActionGetEvents;
    case: "getEvents";
  } | {
    /**
     * The get clock action specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ActionGetClock get_clock = 7;
     */
    value: ActionGetClock;
    case: "getClock";
  } | {
    /**
     * The sync clock action specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ActionSyncClock sync_clock = 8;
     */
    value: ActionSyncClock;
    case: "syncClock";
  } | {
    /**
     * The get relay state action specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ActionGetRelayState get_relay_state = 9;
     */
    value: ActionGetRelayState;
    case: "getRelayState";
  } | {
    /**
     * The set relay state action specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ActionSetRelayState set_relay_state = 10;
     */
    value: ActionSetRelayState;
    case: "setRelayState";
  } | {
    /**
     * The get disconnector state action specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ActionGetDisconnectorState get_disconnector_state = 11;
     */
    value: ActionGetDisconnectorState;
    case: "getDisconnectorState";
  } | {
    /**
     * The set disconnector state action specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ActionSetDisconnectorState set_disconnector_state = 12;
     */
    value: ActionSetDisconnectorState;
    case: "setDisconnectorState";
  } | {
    /**
     * The get tou action specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ActionGetTou get_tou = 13;
     */
    value: ActionGetTou;
    case: "getTou";
  } | {
    /**
     * The set tou action specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ActionSetTou set_tou = 14;
     */
    value: ActionSetTou;
    case: "setTou";
  } | {
    /**
     * The get limiter action specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ActionGetLimiter get_limiter = 15;
     */
    value: ActionGetLimiter;
    case: "getLimiter";
  } | {
    /**
     * The set limiter action specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ActionSetLimiter set_limiter = 16;
     */
    value: ActionSetLimiter;
    case: "setLimiter";
  } | {
    /**
     * The reset billing period action specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ActionResetBillingPeriod reset_billing_period = 17;
     */
    value: ActionResetBillingPeriod;
    case: "resetBillingPeriod";
  } | {
    /**
     * The firmware update action specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ActionFwUpdate fw_update = 18;
     */
    value: ActionFwUpdate;
    case: "fwUpdate";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.JobAction.
 * Use `create(JobActionSchema)` to create a new message.
 */
export const JobActionSchema: GenMessage<JobAction> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 1);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfJobDevice
 */
export type ListOfJobDevice = Message<"io.clbs.openhes.models.acquisition.ListOfJobDevice"> & {
  /**
   * The list of devices in the bulk.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.JobDevice list = 5;
   */
  list: JobDevice[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfJobDevice.
 * Use `create(ListOfJobDeviceSchema)` to create a new message.
 */
export const ListOfJobDeviceSchema: GenMessage<ListOfJobDevice> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 2);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfJobDeviceId
 */
export type ListOfJobDeviceId = Message<"io.clbs.openhes.models.acquisition.ListOfJobDeviceId"> & {
  /**
   * The list of devices in the bulk.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.JobDeviceId list = 5;
   */
  list: JobDeviceId[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfJobDeviceId.
 * Use `create(ListOfJobDeviceIdSchema)` to create a new message.
 */
export const ListOfJobDeviceIdSchema: GenMessage<ListOfJobDeviceId> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 3);

/**
 * @generated from message io.clbs.openhes.models.acquisition.JobDeviceId
 */
export type JobDeviceId = Message<"io.clbs.openhes.models.acquisition.JobDeviceId"> & {
  /**
   * The device's job identifier within the parent bulk.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The device identifier.
   *
   * @generated from field: string device_id = 2;
   */
  deviceId: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.JobDeviceId.
 * Use `create(JobDeviceIdSchema)` to create a new message.
 */
export const JobDeviceIdSchema: GenMessage<JobDeviceId> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 4);

/**
 * Sub-message representing a single job-device info.
 *
 * @generated from message io.clbs.openhes.models.acquisition.JobDevice
 */
export type JobDevice = Message<"io.clbs.openhes.models.acquisition.JobDevice"> & {
  /**
   * The device (job) identifier.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The device identifier. If set then all below is loaded from the device registry.
   *
   * @generated from field: string device_id = 2;
   */
  deviceId: string;

  /**
   * The external identifier.
   *
   * @generated from field: string external_id = 3;
   */
  externalId: string;

  /**
   * The connection attributes to the device.
   *
   * @generated from field: map<string, io.clbs.openhes.models.acquisition.AttributeValue> device_attributes = 4;
   */
  deviceAttributes: { [key: string]: AttributeValue };

  /**
   * The conenction (device) parameters.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.ConnectionInfo connection_info = 5;
   */
  connectionInfo: ConnectionInfo[];

  /**
   * The application protocol.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ApplicationProtocol app_protocol = 6;
   */
  appProtocol: ApplicationProtocol;

  /**
   * The timezone related to the device, e.g. "America/New_York", "Europe/Prague", "CET", "GMT", "Etc/GMT+2".
   *
   * @generated from field: string timezone = 7;
   */
  timezone: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.JobDevice.
 * Use `create(JobDeviceSchema)` to create a new message.
 */
export const JobDeviceSchema: GenMessage<JobDevice> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 5);

/**
 * Sub-message containing modem connection info
 *
 * @generated from message io.clbs.openhes.models.acquisition.ModemInfo
 */
export type ModemInfo = Message<"io.clbs.openhes.models.acquisition.ModemInfo"> & {
  /**
   * The modem identifier. It is automatically generated during creation.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The name of the modem.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The modem initialization command.
   *
   * @generated from field: string at_init = 3;
   */
  atInit: string;

  /**
   * The modem test command.
   *
   * @generated from field: string at_test = 4;
   */
  atTest: string;

  /**
   * The modem configuration command.
   *
   * @generated from field: string at_config = 5;
   */
  atConfig: string;

  /**
   * The modem dial command.
   *
   * @generated from field: string at_dial = 6;
   */
  atDial: string;

  /**
   * The modem hangup command.
   *
   * @generated from field: string at_hangup = 7;
   */
  atHangup: string;

  /**
   * The modem escape command.
   *
   * @generated from field: string at_escape = 8;
   */
  atEscape: string;

  /**
   * The modem DSR command.
   *
   * @generated from field: bool at_dsr = 9;
   */
  atDsr: boolean;

  /**
   * The modem connection timeout.
   *
   * @generated from field: uint32 connect_timeout = 10;
   */
  connectTimeout: number;

  /**
   * The modem connection description.
   *
   * @generated from oneof io.clbs.openhes.models.acquisition.ModemInfo.modem_connection
   */
  modemConnection: {
    /**
     * The TCP connection type. The modem has either TCP or there is a IP-to-serial converter which handles the serial configuration so no additional serial configuration is needed.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ConnectionTypeDirectTcpIp tcpip = 11;
     */
    value: ConnectionTypeDirectTcpIp;
    case: "tcpip";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ModemInfo.
 * Use `create(ModemInfoSchema)` to create a new message.
 */
export const ModemInfoSchema: GenMessage<ModemInfo> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 6);

/**
 * Sub-message containing serial port configuration
 *
 * @generated from message io.clbs.openhes.models.acquisition.SerialConfig
 */
export type SerialConfig = Message<"io.clbs.openhes.models.acquisition.SerialConfig"> & {
  /**
   * The baud rate.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.SerialConfigBaudRate baud_rate = 1;
   */
  baudRate: SerialConfigBaudRate;

  /**
   * The parity.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.SerialConfigParity parity = 2;
   */
  parity: SerialConfigParity;

  /**
   * The data bits.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.SerialConfigDataBits data_bits = 3;
   */
  dataBits: SerialConfigDataBits;

  /**
   * The stop bits.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.SerialConfigStopBits stop_bits = 4;
   */
  stopBits: SerialConfigStopBits;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.SerialConfig.
 * Use `create(SerialConfigSchema)` to create a new message.
 */
export const SerialConfigSchema: GenMessage<SerialConfig> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 7);

/**
 * Sub-message containing connection info
 *
 * @generated from message io.clbs.openhes.models.acquisition.ConnectionInfo
 */
export type ConnectionInfo = Message<"io.clbs.openhes.models.acquisition.ConnectionInfo"> & {
  /**
   * The entrypoint connection description. It can be either direct TCP, a modem from a pool or a direct serial line over IP (using IP-to-serial converter).
   *
   * @generated from oneof io.clbs.openhes.models.acquisition.ConnectionInfo.connection
   */
  connection: {
    /**
     * The TCP connection type.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ConnectionTypeDirectTcpIp tcpip = 1;
     */
    value: ConnectionTypeDirectTcpIp;
    case: "tcpip";
  } | {
    /**
     * The phone connection type.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ConnectionTypeModemPool modem_pool = 2;
     */
    value: ConnectionTypeModemPool;
    case: "modemPool";
  } | {
    /**
     * The serial over IP connection type.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ConnectionTypeControlledSerial serial_over_ip = 3;
     */
    value: ConnectionTypeControlledSerial;
    case: "serialOverIp";
  } | { case: undefined; value?: undefined };

  /**
   * The data link protocol.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DataLinkProtocol link_protocol = 4;
   */
  linkProtocol: DataLinkProtocol;

  /**
   * The custom group ID to link jobs together. If not set then jobs are grouped by group-key defined based on the connection type.
   *
   * @generated from field: string custom_grouping_id = 5;
   */
  customGroupingId: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ConnectionInfo.
 * Use `create(ConnectionInfoSchema)` to create a new message.
 */
export const ConnectionInfoSchema: GenMessage<ConnectionInfo> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 8);

/**
 * Sub-message containing connection info for TCP connection type
 *
 * @generated from message io.clbs.openhes.models.acquisition.ConnectionTypeDirectTcpIp
 */
export type ConnectionTypeDirectTcpIp = Message<"io.clbs.openhes.models.acquisition.ConnectionTypeDirectTcpIp"> & {
  /**
   * The host name or IP address of the device to connect to.
   *
   * @generated from field: string host = 1;
   */
  host: string;

  /**
   * The TCP port number of the device to connect to.
   *
   * @generated from field: uint32 port = 2;
   */
  port: number;

  /**
   * The timeout in miliseconds for the connection.
   *
   * @generated from field: int32 timeout = 3;
   */
  timeout: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ConnectionTypeDirectTcpIp.
 * Use `create(ConnectionTypeDirectTcpIpSchema)` to create a new message.
 */
export const ConnectionTypeDirectTcpIpSchema: GenMessage<ConnectionTypeDirectTcpIp> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 9);

/**
 * Sub-message containing connection info for phone line (modem) connection type
 *
 * @generated from message io.clbs.openhes.models.acquisition.ConnectionTypeModemPool
 */
export type ConnectionTypeModemPool = Message<"io.clbs.openhes.models.acquisition.ConnectionTypeModemPool"> & {
  /**
   * The phone number of the device to connect to.
   *
   * @generated from field: string number = 1;
   */
  number: string;

  /**
   * The modem pool identifier. The pool is a group of modems that can be used to connect to the device. Final modem is selected by the Taskmaster at the time of the job start.
   *
   * @generated from field: string pool_id = 2;
   */
  poolId: string;

  /**
   * The modem device assigned to the job. This is filled only and only when the connection type is modem. The value is assigned by the Taskmaster when to job is being started. Driver is required to use this modem device to connect to the meter only and only for the time of this job!
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemInfo modem = 4;
   */
  modem?: ModemInfo;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ConnectionTypeModemPool.
 * Use `create(ConnectionTypeModemPoolSchema)` to create a new message.
 */
export const ConnectionTypeModemPoolSchema: GenMessage<ConnectionTypeModemPool> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 10);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ConnectionTypeSerialDirect
 */
export type ConnectionTypeSerialDirect = Message<"io.clbs.openhes.models.acquisition.ConnectionTypeSerialDirect"> & {
  /**
   * The host name or IP address of the device to connect to.
   *
   * @generated from field: string host = 1;
   */
  host: string;

  /**
   * The TCP port number of the device to connect to.
   *
   * @generated from field: uint32 port = 2;
   */
  port: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ConnectionTypeSerialDirect.
 * Use `create(ConnectionTypeSerialDirectSchema)` to create a new message.
 */
export const ConnectionTypeSerialDirectSchema: GenMessage<ConnectionTypeSerialDirect> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 11);

/**
 * Sub-message containing connection info for controlled-serial line (Moxa) connection type
 *
 * @generated from message io.clbs.openhes.models.acquisition.ConnectionTypeSerialMoxa
 */
export type ConnectionTypeSerialMoxa = Message<"io.clbs.openhes.models.acquisition.ConnectionTypeSerialMoxa"> & {
  /**
   * The host name or IP address of the device to connect to.
   *
   * @generated from field: string host = 1;
   */
  host: string;

  /**
   * The TCP port number of the device to connect to - data port.
   *
   * @generated from field: uint32 dataPort = 2;
   */
  dataPort: number;

  /**
   * The TCP port number of the device to connect to - command port.
   *
   * @generated from field: uint32 commandPort = 3;
   */
  commandPort: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ConnectionTypeSerialMoxa.
 * Use `create(ConnectionTypeSerialMoxaSchema)` to create a new message.
 */
export const ConnectionTypeSerialMoxaSchema: GenMessage<ConnectionTypeSerialMoxa> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 12);

/**
 * Sub-message containing destription for one application protocol, e.g. DLMS_SN.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ApplicationProtocolTemplate
 */
export type ApplicationProtocolTemplate = Message<"io.clbs.openhes.models.acquisition.ApplicationProtocolTemplate"> & {
  /**
   * Unique identifier of the application protocol.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The application protocol.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ApplicationProtocol protocol = 2;
   */
  protocol: ApplicationProtocol;

  /**
   * The list of attribute definitions for the protocol.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.AttributeDefinition attributes = 3;
   */
  attributes: AttributeDefinition[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ApplicationProtocolTemplate.
 * Use `create(ApplicationProtocolTemplateSchema)` to create a new message.
 */
export const ApplicationProtocolTemplateSchema: GenMessage<ApplicationProtocolTemplate> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 13);

/**
 * Sub-message containing destription for one data link protocol, e.g. HDLC.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DataLinkTemplate
 */
export type DataLinkTemplate = Message<"io.clbs.openhes.models.acquisition.DataLinkTemplate"> & {
  /**
   * The data link protocol.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DataLinkProtocol link_protocol = 1;
   */
  linkProtocol: DataLinkProtocol;

  /**
   * The list of application protocol identifiers supported by the driver.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.ApplicationProtocol app_protocol_refs = 2;
   */
  appProtocolRefs: ApplicationProtocol[];

  /**
   * The list of attribute definitions related to given data link type (see link_protocol property) and all those will be instantiated for each device.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.AttributeDefinition attributes = 3;
   */
  attributes: AttributeDefinition[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DataLinkTemplate.
 * Use `create(DataLinkTemplateSchema)` to create a new message.
 */
export const DataLinkTemplateSchema: GenMessage<DataLinkTemplate> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 14);

/**
 * Sub-message containing destription for one communication type, e.g. TCP/IP.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CommunicationTemplate
 */
export type CommunicationTemplate = Message<"io.clbs.openhes.models.acquisition.CommunicationTemplate"> & {
  /**
   * The type of the communication.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.CommunicationType type = 1;
   */
  type: CommunicationType;

  /**
   * The list of data link protocols and their app protocols supported by the driver.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DataLinkTemplate datalinks = 2;
   */
  datalinks: DataLinkTemplate[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CommunicationTemplate.
 * Use `create(CommunicationTemplateSchema)` to create a new message.
 */
export const CommunicationTemplateSchema: GenMessage<CommunicationTemplate> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 15);

/**
 * Sub-message containing access level definition
 *
 * @generated from message io.clbs.openhes.models.acquisition.AccessLevelTemplate
 */
export type AccessLevelTemplate = Message<"io.clbs.openhes.models.acquisition.AccessLevelTemplate"> & {
  /**
   * The access level identifier, such as "1", "G", "16" or similar.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The access level name. Should be in English and unique for given driver, e.g. "Management", "Public".
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.AccessLevelTemplate.
 * Use `create(AccessLevelTemplateSchema)` to create a new message.
 */
export const AccessLevelTemplateSchema: GenMessage<AccessLevelTemplate> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 16);

/**
 * Sub-message in driver negotiation request
 *
 * @generated from message io.clbs.openhes.models.acquisition.DriverTemplates
 */
export type DriverTemplates = Message<"io.clbs.openhes.models.acquisition.DriverTemplates"> & {
  /**
   * The templates of the communication options. Every template represents an option how the drivers allows to communicate. The driver can support multiple communication templates.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.CommunicationTemplate communication_templates = 1;
   */
  communicationTemplates: CommunicationTemplate[];

  /**
   * The templates of the application protocols supported by the driver.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.ApplicationProtocolTemplate app_protocols = 2;
   */
  appProtocols: ApplicationProtocolTemplate[];

  /**
   * The templates of the job actions for all supported action types. It must contain every action type supported by the driver once and only once.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.JobActionAttributes action_attributes = 3;
   */
  actionAttributes: JobActionAttributes[];

  /**
   * The templates of the access levels supported by the driver.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.AccessLevelTemplate access_templates = 4;
   */
  accessTemplates: AccessLevelTemplate[];

  /**
   * The templates of the job actions constraints.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobActionContraints action_constraints = 5;
   */
  actionConstraints?: JobActionContraints;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DriverTemplates.
 * Use `create(DriverTemplatesSchema)` to create a new message.
 */
export const DriverTemplatesSchema: GenMessage<DriverTemplates> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 17);

/**
 * Sub-message containing action progress update
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionProgressUpdate
 */
export type ActionProgressUpdate = Message<"io.clbs.openhes.models.acquisition.ActionProgressUpdate"> & {
  /**
   * The job identifier.
   *
   * @generated from field: string job_id = 1;
   */
  jobId: string;

  /**
   * The action identifier.
   *
   * @generated from field: string action_id = 2;
   */
  actionId: string;

  /**
   * The status related to the action.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ActionResultCode code = 3;
   */
  code: ActionResultCode;

  /**
   * The action result data. Shall be empty if the code is not OK.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ActionData data = 4;
   */
  data?: ActionData;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionProgressUpdate.
 * Use `create(ActionProgressUpdateSchema)` to create a new message.
 */
export const ActionProgressUpdateSchema: GenMessage<ActionProgressUpdate> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 18);

/**
 * Sub-message containing job progress update
 *
 * @generated from message io.clbs.openhes.models.acquisition.JobProgressUpdate
 */
export type JobProgressUpdate = Message<"io.clbs.openhes.models.acquisition.JobProgressUpdate"> & {
  /**
   * The job identifier.
   *
   * @generated from field: string job_id = 1;
   */
  jobId: string;

  /**
   * The status related to the job and or action update message.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobErrorCode code = 2;
   */
  code: JobErrorCode;

  /**
   * The duration of the job in miliseconds.
   *
   * @generated from field: int64 duration = 3;
   */
  duration: bigint;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.JobProgressUpdate.
 * Use `create(JobProgressUpdateSchema)` to create a new message.
 */
export const JobProgressUpdateSchema: GenMessage<JobProgressUpdate> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 19);

/**
 * Sub-message containing action-based variant of data values
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionData
 */
export type ActionData = Message<"io.clbs.openhes.models.acquisition.ActionData"> & {
  /**
   * @generated from oneof io.clbs.openhes.models.acquisition.ActionData.data
   */
  data: {
    /**
     * No data
     *
     * @generated from field: google.protobuf.Empty nodata = 1;
     */
    value: Empty;
    case: "nodata";
  } | {
    /**
     * Register values
     *
     * @generated from field: io.clbs.openhes.models.acquisition.BillingValues billings = 2;
     */
    value: BillingValues;
    case: "billings";
  } | {
    /**
     * Profile values
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ProfileValues profile = 3;
     */
    value: ProfileValues;
    case: "profile";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionData.
 * Use `create(ActionDataSchema)` to create a new message.
 */
export const ActionDataSchema: GenMessage<ActionData> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 20);

/**
 * Sub-message containing profile-typed values
 *
 * @generated from message io.clbs.openhes.models.acquisition.ProfileValues
 */
export type ProfileValues = Message<"io.clbs.openhes.models.acquisition.ProfileValues"> & {
  /**
   * The period of the profile values.
   *
   * @generated from field: int32 period = 1;
   */
  period: number;

  /**
   * The unit of the profile values.
   *
   * @generated from field: string unit = 2;
   */
  unit: string;

  /**
   * The list of continuous profile blocks.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.ProfileBlok blocks = 3;
   */
  blocks: ProfileBlok[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ProfileValues.
 * Use `create(ProfileValuesSchema)` to create a new message.
 */
export const ProfileValuesSchema: GenMessage<ProfileValues> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 21);

/**
 * Sub-message containing a single profile block
 *
 * @generated from message io.clbs.openhes.models.acquisition.ProfileBlok
 */
export type ProfileBlok = Message<"io.clbs.openhes.models.acquisition.ProfileBlok"> & {
  /**
   * The start timestamp of the block.
   *
   * @generated from field: google.protobuf.Timestamp start_timestamp = 1;
   */
  startTimestamp?: Timestamp;

  /**
   * The list of profile values. Values are ordered by timestamp.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.MeasuredValue values = 2;
   */
  values: MeasuredValue[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ProfileBlok.
 * Use `create(ProfileBlokSchema)` to create a new message.
 */
export const ProfileBlokSchema: GenMessage<ProfileBlok> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 22);

/**
 * Sub-message containing billing-typed values
 *
 * @generated from message io.clbs.openhes.models.acquisition.BillingValues
 */
export type BillingValues = Message<"io.clbs.openhes.models.acquisition.BillingValues"> & {
  /**
   * The list of register values.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.BillingValue values = 1;
   */
  values: BillingValue[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.BillingValues.
 * Use `create(BillingValuesSchema)` to create a new message.
 */
export const BillingValuesSchema: GenMessage<BillingValues> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 23);

/**
 * Sub-message containing billing-typed value
 *
 * @generated from message io.clbs.openhes.models.acquisition.BillingValue
 */
export type BillingValue = Message<"io.clbs.openhes.models.acquisition.BillingValue"> & {
  /**
   * The timestamp of the value.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * The unit of the value.
   *
   * @generated from field: string unit = 2;
   */
  unit: string;

  /**
   * The value.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.MeasuredValue value = 3;
   */
  value?: MeasuredValue;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.BillingValue.
 * Use `create(BillingValueSchema)` to create a new message.
 */
export const BillingValueSchema: GenMessage<BillingValue> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 24);

/**
 * Sub-message containing measured value
 *
 * @generated from message io.clbs.openhes.models.acquisition.MeasuredValue
 */
export type MeasuredValue = Message<"io.clbs.openhes.models.acquisition.MeasuredValue"> & {
  /**
   * The status of the value.
   *
   * @generated from field: int64 status = 1;
   */
  status: bigint;

  /**
   * The exponent of the value. It's used to calculate the real value as value * 10^exponent for double and int values.
   *
   * @generated from field: int32 exponent = 2;
   */
  exponent: number;

  /**
   * @generated from oneof io.clbs.openhes.models.acquisition.MeasuredValue.value
   */
  value: {
    /**
     * The double-typed value.
     *
     * @generated from field: double double_value = 3;
     */
    value: number;
    case: "doubleValue";
  } | {
    /**
     * The integer-typed value.
     *
     * @generated from field: int64 int_value = 4;
     */
    value: bigint;
    case: "intValue";
  } | {
    /**
     * The string-typed value.
     *
     * @generated from field: string str_value = 5;
     */
    value: string;
    case: "strValue";
  } | {
    /**
     * The timestamp-typed value.
     *
     * @generated from field: google.protobuf.Timestamp timestamp_value = 6;
     */
    value: Timestamp;
    case: "timestampValue";
  } | {
    /**
     * The timestamp with timezone-typed value, stored as string in ISO-8601.
     *
     * @generated from field: string timestamp_tz_value = 7;
     */
    value: string;
    case: "timestampTzValue";
  } | {
    /**
     * The boolean-typed value.
     *
     * @generated from field: bool bool_value = 8;
     */
    value: boolean;
    case: "boolValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.MeasuredValue.
 * Use `create(MeasuredValueSchema)` to create a new message.
 */
export const MeasuredValueSchema: GenMessage<MeasuredValue> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 25);

/**
 * Sub-message containing attribute definition
 *
 * @generated from message io.clbs.openhes.models.acquisition.AttributeDefinition
 */
export type AttributeDefinition = Message<"io.clbs.openhes.models.acquisition.AttributeDefinition"> & {
  /**
   * The name of the attribute.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The description of the attribute.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * The type of the attribute.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.AttributeType type = 3;
   */
  type: AttributeType;

  /**
   * The attribute is mandatory or not.
   *
   * @generated from field: bool mandatory = 4;
   */
  mandatory: boolean;

  /**
   * The default value of the attribute.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.AttributeValue default_value = 5;
   */
  defaultValue?: AttributeValue;

  /**
   * Optional. The list of values (represented by keys) that can be set. The value is the human-readable description in English (translations are applies using i18 or similar framework outside of the templates). If no values is defined then any value is allowed.
   *
   * @generated from field: map<string, string> options = 6;
   */
  options: { [key: string]: string };
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.AttributeDefinition.
 * Use `create(AttributeDefinitionSchema)` to create a new message.
 */
export const AttributeDefinitionSchema: GenMessage<AttributeDefinition> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 26);

/**
 * Sub-message containing job action attributes
 *
 * @generated from message io.clbs.openhes.models.acquisition.JobActionAttributes
 */
export type JobActionAttributes = Message<"io.clbs.openhes.models.acquisition.JobActionAttributes"> & {
  /**
   * The type of action for which this instance of the template is defined.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ActionType type = 1;
   */
  type: ActionType;

  /**
   * The template of the action attributes. It is represented as a list of attribute definitions.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.AttributeDefinition attributes = 2;
   */
  attributes: AttributeDefinition[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.JobActionAttributes.
 * Use `create(JobActionAttributesSchema)` to create a new message.
 */
export const JobActionAttributesSchema: GenMessage<JobActionAttributes> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 27);

/**
 * Sub-message containing connection info for controlled-serial line over IP (e.g. Moxa) connection type
 *
 * @generated from message io.clbs.openhes.models.acquisition.ConnectionTypeControlledSerial
 */
export type ConnectionTypeControlledSerial = Message<"io.clbs.openhes.models.acquisition.ConnectionTypeControlledSerial"> & {
  /**
   * IP-to-serial converter description.
   *
   * @generated from oneof io.clbs.openhes.models.acquisition.ConnectionTypeControlledSerial.converter
   */
  converter: {
    /**
     * The simple direct serial connection type.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ConnectionTypeSerialDirect direct = 1;
     */
    value: ConnectionTypeSerialDirect;
    case: "direct";
  } | {
    /**
     * The Moxa connection type.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ConnectionTypeSerialMoxa moxa = 2;
     */
    value: ConnectionTypeSerialMoxa;
    case: "moxa";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ConnectionTypeControlledSerial.
 * Use `create(ConnectionTypeControlledSerialSchema)` to create a new message.
 */
export const ConnectionTypeControlledSerialSchema: GenMessage<ConnectionTypeControlledSerial> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 28);

/**
 * Sub-message containing get register action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionGetRegister
 */
export type ActionGetRegister = Message<"io.clbs.openhes.models.acquisition.ActionGetRegister"> & {
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionGetRegister.
 * Use `create(ActionGetRegisterSchema)` to create a new message.
 */
export const ActionGetRegisterSchema: GenMessage<ActionGetRegister> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 29);

/**
 * Sub-message containing get periodical profile action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionGetPeriodicalProfile
 */
export type ActionGetPeriodicalProfile = Message<"io.clbs.openhes.models.acquisition.ActionGetPeriodicalProfile"> & {
  /**
   * The start timestamp of the profile.
   *
   * @generated from field: google.protobuf.Timestamp from = 1;
   */
  from?: Timestamp;

  /**
   * The end timestamp of the profile.
   *
   * @generated from field: google.protobuf.Timestamp to = 2;
   */
  to?: Timestamp;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionGetPeriodicalProfile.
 * Use `create(ActionGetPeriodicalProfileSchema)` to create a new message.
 */
export const ActionGetPeriodicalProfileSchema: GenMessage<ActionGetPeriodicalProfile> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 30);

/**
 * Sub-message containing get irregular profile action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionGetIrregularProfile
 */
export type ActionGetIrregularProfile = Message<"io.clbs.openhes.models.acquisition.ActionGetIrregularProfile"> & {
  /**
   * The start timestamp of the profile.
   *
   * @generated from field: google.protobuf.Timestamp from = 1;
   */
  from?: Timestamp;

  /**
   * The end timestamp of the profile.
   *
   * @generated from field: google.protobuf.Timestamp to = 2;
   */
  to?: Timestamp;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionGetIrregularProfile.
 * Use `create(ActionGetIrregularProfileSchema)` to create a new message.
 */
export const ActionGetIrregularProfileSchema: GenMessage<ActionGetIrregularProfile> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 31);

/**
 * Sub-message containing get events action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionGetEvents
 */
export type ActionGetEvents = Message<"io.clbs.openhes.models.acquisition.ActionGetEvents"> & {
  /**
   * The start timestamp of the profile.
   *
   * @generated from field: google.protobuf.Timestamp from = 1;
   */
  from?: Timestamp;

  /**
   * The end timestamp of the profile.
   *
   * @generated from field: google.protobuf.Timestamp to = 2;
   */
  to?: Timestamp;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionGetEvents.
 * Use `create(ActionGetEventsSchema)` to create a new message.
 */
export const ActionGetEventsSchema: GenMessage<ActionGetEvents> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 32);

/**
 * Sub-message containing get clock action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionGetClock
 */
export type ActionGetClock = Message<"io.clbs.openhes.models.acquisition.ActionGetClock"> & {
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionGetClock.
 * Use `create(ActionGetClockSchema)` to create a new message.
 */
export const ActionGetClockSchema: GenMessage<ActionGetClock> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 33);

/**
 * Sub-message containing sync clock action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionSyncClock
 */
export type ActionSyncClock = Message<"io.clbs.openhes.models.acquisition.ActionSyncClock"> & {
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionSyncClock.
 * Use `create(ActionSyncClockSchema)` to create a new message.
 */
export const ActionSyncClockSchema: GenMessage<ActionSyncClock> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 34);

/**
 * Sub-message containing get relay state action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionGetRelayState
 */
export type ActionGetRelayState = Message<"io.clbs.openhes.models.acquisition.ActionGetRelayState"> & {
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionGetRelayState.
 * Use `create(ActionGetRelayStateSchema)` to create a new message.
 */
export const ActionGetRelayStateSchema: GenMessage<ActionGetRelayState> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 35);

/**
 * Sub-message containing set relay state action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionSetRelayState
 */
export type ActionSetRelayState = Message<"io.clbs.openhes.models.acquisition.ActionSetRelayState"> & {
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionSetRelayState.
 * Use `create(ActionSetRelayStateSchema)` to create a new message.
 */
export const ActionSetRelayStateSchema: GenMessage<ActionSetRelayState> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 36);

/**
 * Sub-message containing get disconnector state action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionGetDisconnectorState
 */
export type ActionGetDisconnectorState = Message<"io.clbs.openhes.models.acquisition.ActionGetDisconnectorState"> & {
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionGetDisconnectorState.
 * Use `create(ActionGetDisconnectorStateSchema)` to create a new message.
 */
export const ActionGetDisconnectorStateSchema: GenMessage<ActionGetDisconnectorState> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 37);

/**
 * Sub-message containing set disconnector state action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionSetDisconnectorState
 */
export type ActionSetDisconnectorState = Message<"io.clbs.openhes.models.acquisition.ActionSetDisconnectorState"> & {
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionSetDisconnectorState.
 * Use `create(ActionSetDisconnectorStateSchema)` to create a new message.
 */
export const ActionSetDisconnectorStateSchema: GenMessage<ActionSetDisconnectorState> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 38);

/**
 * Sub-message containing get tou action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionGetTou
 */
export type ActionGetTou = Message<"io.clbs.openhes.models.acquisition.ActionGetTou"> & {
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionGetTou.
 * Use `create(ActionGetTouSchema)` to create a new message.
 */
export const ActionGetTouSchema: GenMessage<ActionGetTou> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 39);

/**
 * Sub-message containing set tou action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionSetTou
 */
export type ActionSetTou = Message<"io.clbs.openhes.models.acquisition.ActionSetTou"> & {
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionSetTou.
 * Use `create(ActionSetTouSchema)` to create a new message.
 */
export const ActionSetTouSchema: GenMessage<ActionSetTou> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 40);

/**
 * Sub-message containing get limiter action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionGetLimiter
 */
export type ActionGetLimiter = Message<"io.clbs.openhes.models.acquisition.ActionGetLimiter"> & {
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionGetLimiter.
 * Use `create(ActionGetLimiterSchema)` to create a new message.
 */
export const ActionGetLimiterSchema: GenMessage<ActionGetLimiter> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 41);

/**
 * Sub-message containing set limiter action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionSetLimiter
 */
export type ActionSetLimiter = Message<"io.clbs.openhes.models.acquisition.ActionSetLimiter"> & {
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionSetLimiter.
 * Use `create(ActionSetLimiterSchema)` to create a new message.
 */
export const ActionSetLimiterSchema: GenMessage<ActionSetLimiter> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 42);

/**
 * Sub-message containing reset billing period action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionResetBillingPeriod
 */
export type ActionResetBillingPeriod = Message<"io.clbs.openhes.models.acquisition.ActionResetBillingPeriod"> & {
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionResetBillingPeriod.
 * Use `create(ActionResetBillingPeriodSchema)` to create a new message.
 */
export const ActionResetBillingPeriodSchema: GenMessage<ActionResetBillingPeriod> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 43);

/**
 * Sub-message containing firmware update action specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionFwUpdate
 */
export type ActionFwUpdate = Message<"io.clbs.openhes.models.acquisition.ActionFwUpdate"> & {
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionFwUpdate.
 * Use `create(ActionFwUpdateSchema)` to create a new message.
 */
export const ActionFwUpdateSchema: GenMessage<ActionFwUpdate> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 44);

/**
 * Sub-message containing single attribute value specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.AttributeValue
 */
export type AttributeValue = Message<"io.clbs.openhes.models.acquisition.AttributeValue"> & {
  /**
   * @generated from oneof io.clbs.openhes.models.acquisition.AttributeValue.value
   */
  value: {
    /**
     * The string-typed value.
     *
     * @generated from field: string str_value = 1;
     */
    value: string;
    case: "strValue";
  } | {
    /**
     * The integer-typed value.
     *
     * @generated from field: int64 int_value = 2;
     */
    value: bigint;
    case: "intValue";
  } | {
    /**
     * The double-typed value.
     *
     * @generated from field: double double_value = 3;
     */
    value: number;
    case: "doubleValue";
  } | {
    /**
     * The binary-typed value.
     *
     * @generated from field: bytes binary_value = 4;
     */
    value: Uint8Array;
    case: "binaryValue";
  } | {
    /**
     * The boolean-typed value.
     *
     * @generated from field: bool bool_value = 5;
     */
    value: boolean;
    case: "boolValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.AttributeValue.
 * Use `create(AttributeValueSchema)` to create a new message.
 */
export const AttributeValueSchema: GenMessage<AttributeValue> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 45);

/**
 * Sub-message containing constraints for job actions.
 *
 * @generated from message io.clbs.openhes.models.acquisition.JobActionContraints
 */
export type JobActionContraints = Message<"io.clbs.openhes.models.acquisition.JobActionContraints"> & {
  /**
   * Contains all the register types & their names in the English language. For example: [gen]="Generic Register", [vqi]="Quality VQI Register"
   * Action: ACTION_TYPE_GET_REGISTER
   *
   * @generated from field: map<string, string> get_register_type_name = 1;
   */
  getRegisterTypeName: { [key: string]: string };

  /**
   * Contains all the register types & their attributes. For example: [gen]=["attribute1", "attribute2"], [vqi]=["attribute1", "attribute3"]
   * See JobActionAttributes for the attribute definitions.
   * Action: ACTION_TYPE_GET_REGISTER
   *
   * @generated from field: map<string, io.clbs.openhes.models.common.ListOfString> get_register_type_attributes = 2;
   */
  getRegisterTypeAttributes: { [key: string]: ListOfString };
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.JobActionContraints.
 * Use `create(JobActionContraintsSchema)` to create a new message.
 */
export const JobActionContraintsSchema: GenMessage<JobActionContraints> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 46);

/**
 * @generated from message io.clbs.openhes.models.acquisition.BulkJob
 */
export type BulkJob = Message<"io.clbs.openhes.models.acquisition.BulkJob"> & {
  /**
   * The job identifier.
   *
   * @generated from field: string job_id = 1;
   */
  jobId: string;

  /**
   * The job status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobStatus status = 2;
   */
  status?: JobStatus;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.BulkJob.
 * Use `create(BulkJobSchema)` to create a new message.
 */
export const BulkJobSchema: GenMessage<BulkJob> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 47);

/**
 * Sub-message containing job status info
 *
 * @generated from message io.clbs.openhes.models.acquisition.JobStatus
 */
export type JobStatus = Message<"io.clbs.openhes.models.acquisition.JobStatus"> & {
  /**
   * The status of the job.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobStatusCode status = 1;
   */
  status: JobStatusCode;

  /**
   * The error code of the job.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobErrorCode code = 2;
   */
  code: JobErrorCode;

  /**
   * The result data for all job actions.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.ActionResult results = 3;
   */
  results: ActionResult[];

  /**
   * The creation timestamp of the job.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  /**
   * The start timestamp of the job.
   *
   * @generated from field: google.protobuf.Timestamp started_at = 5;
   */
  startedAt?: Timestamp;

  /**
   * The finish timestamp of the job.
   *
   * @generated from field: google.protobuf.Timestamp finished_at = 6;
   */
  finishedAt?: Timestamp;

  /**
   * The number of attempts already done.
   *
   * @generated from field: int32 attempts_done = 7;
   */
  attemptsDone: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.JobStatus.
 * Use `create(JobStatusSchema)` to create a new message.
 */
export const JobStatusSchema: GenMessage<JobStatus> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 48);

/**
 * Sub-message containing job start request for single device
 *
 * @generated from message io.clbs.openhes.models.acquisition.StartJobData
 */
export type StartJobData = Message<"io.clbs.openhes.models.acquisition.StartJobData"> & {
  /**
   * The device attributes. For example HDLC address, password and other driver-specific attributes.
   *
   * @generated from field: map<string, io.clbs.openhes.models.acquisition.AttributeValue> device_attributes = 1;
   */
  deviceAttributes: { [key: string]: AttributeValue };

  /**
   * The job identifier.
   *
   * @generated from field: string job_id = 2;
   */
  jobId: string;

  /**
   * The job parameters.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobSettings job_settings = 3;
   */
  jobSettings?: JobSettings;

  /**
   * The list actions to be executed.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.JobAction job_actions = 4;
   */
  jobActions: JobAction[];

  /**
   * The application protocol.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ApplicationProtocol app_protocol = 5;
   */
  appProtocol: ApplicationProtocol;

  /**
   * The timezone related to the device, e.g. "America/New_York", "Europe/Prague", "CET", "GMT", "Etc/GMT+2".
   *
   * @generated from field: string timezone = 6;
   */
  timezone: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.StartJobData.
 * Use `create(StartJobDataSchema)` to create a new message.
 */
export const StartJobDataSchema: GenMessage<StartJobData> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 49);

/**
 * Taskmaster -> Driver cancel job request message
 *
 * @generated from message io.clbs.openhes.models.acquisition.CancelJobRequest
 */
export type CancelJobRequest = Message<"io.clbs.openhes.models.acquisition.CancelJobRequest"> & {
  /**
   * The job identifier.
   *
   * @generated from field: string job_id = 1;
   */
  jobId: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CancelJobRequest.
 * Use `create(CancelJobRequestSchema)` to create a new message.
 */
export const CancelJobRequestSchema: GenMessage<CancelJobRequest> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 50);

/**
 * Addon
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConnectionInfo
 */
export type DeviceConnectionInfo = Message<"io.clbs.openhes.models.acquisition.DeviceConnectionInfo"> & {
  /**
   * The unique identifier of the communication unit.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ConnectionInfo communication_unit = 1;
   */
  communicationUnit?: ConnectionInfo;

  /**
   * The application protocol to be used for the communication over the communication unit.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ApplicationProtocol app_protocol = 2;
   */
  appProtocol: ApplicationProtocol;

  /**
   * The device attributes. For example HDLC address, password and other driver-specific attributes.
   *
   * @generated from field: map<string, io.clbs.openhes.models.acquisition.AttributeValue> device_attributes = 3;
   */
  deviceAttributes: { [key: string]: AttributeValue };
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceConnectionInfo.
 * Use `create(DeviceConnectionInfoSchema)` to create a new message.
 */
export const DeviceConnectionInfoSchema: GenMessage<DeviceConnectionInfo> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 51);

/**
 * Addon for DB
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfModemInfo
 */
export type ListOfModemInfo = Message<"io.clbs.openhes.models.acquisition.ListOfModemInfo"> & {
  /**
   * @generated from field: repeated io.clbs.openhes.models.acquisition.ModemInfo items = 1;
   */
  items: ModemInfo[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfModemInfo.
 * Use `create(ListOfModemInfoSchema)` to create a new message.
 */
export const ListOfModemInfoSchema: GenMessage<ListOfModemInfo> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 52);

/**
 * Addon for DB
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfConnectionInfo
 */
export type ListOfConnectionInfo = Message<"io.clbs.openhes.models.acquisition.ListOfConnectionInfo"> & {
  /**
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceConnectionInfo items = 1;
   */
  items: DeviceConnectionInfo[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfConnectionInfo.
 * Use `create(ListOfConnectionInfoSchema)` to create a new message.
 */
export const ListOfConnectionInfoSchema: GenMessage<ListOfConnectionInfo> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 53);

/**
 * Sub-message containing action result for a single action.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ActionResult
 */
export type ActionResult = Message<"io.clbs.openhes.models.acquisition.ActionResult"> & {
  /**
   * The action identifier.
   *
   * @generated from field: string action_id = 1;
   */
  actionId: string;

  /**
   * The status of the action.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ActionResultCode status = 2;
   */
  status: ActionResultCode;

  /**
   * The action result data.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ActionData data = 3;
   */
  data?: ActionData;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ActionResult.
 * Use `create(ActionResultSchema)` to create a new message.
 */
export const ActionResultSchema: GenMessage<ActionResult> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 54);

/**
 * Taskmaster -> Dataproxy job/action progress update message
 *
 * @generated from message io.clbs.openhes.models.acquisition.JobEventData
 */
export type JobEventData = Message<"io.clbs.openhes.models.acquisition.JobEventData"> & {
  /**
   * The job identifier.
   *
   * @generated from field: bytes job_id = 1;
   */
  jobId: Uint8Array;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.JobEventData.
 * Use `create(JobEventDataSchema)` to create a new message.
 */
export const JobEventDataSchema: GenMessage<JobEventData> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 55);

/**
 * RestApi -> DriverRegistry - the request message to get the information about the device.
 *
 * @generated from message io.clbs.openhes.models.acquisition.GetDevicesRequest
 */
export type GetDevicesRequest = Message<"io.clbs.openhes.models.acquisition.GetDevicesRequest"> & {
  /**
   * The UUID of the device.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The external identifier of the device.
   *
   * @generated from field: string external_id = 2;
   */
  externalId: string;

  /**
   * The name of the device.
   *
   * @generated from field: string name = 3;
   */
  name: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.GetDevicesRequest.
 * Use `create(GetDevicesRequestSchema)` to create a new message.
 */
export const GetDevicesRequestSchema: GenMessage<GetDevicesRequest> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 56);

/**
 * Sub-message - the device specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceSpec
 */
export type DeviceSpec = Message<"io.clbs.openhes.models.acquisition.DeviceSpec"> & {
  /**
   * The UUID of the device.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The external identifier of the device.
   *
   * @generated from field: string external_id = 2;
   */
  externalId: string;

  /**
   * The name of the device.
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * The template of the action attributes. It is represented as a list of attribute definitions.
   *
   * @generated from field: map<string, io.clbs.openhes.models.acquisition.AttributeValue> attributes = 4;
   */
  attributes: { [key: string]: AttributeValue };

  /**
   * The list of communication unit identifiers (and additional info) that set CUs usable to communicate with the device. It's an ordered set where the first element is the primary communication unit with the highest priority.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceCommunicationUnit communication_unit_link = 5;
   */
  communicationUnitLink: DeviceCommunicationUnit[];

  /**
   * The timezone related to the device, e.g. "America/New_York", "Europe/Prague", "CET", "GMT", "Etc/GMT+2".
   *
   * @generated from field: string timezone = 6;
   */
  timezone: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceSpec.
 * Use `create(DeviceSpecSchema)` to create a new message.
 */
export const DeviceSpecSchema: GenMessage<DeviceSpec> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 57);

/**
 * DriverRegistry -> RestApi - the message holds the information about the device group.
 *
 * @generated from message io.clbs.openhes.models.acquisition.GetDeviceGroupsResponse
 */
export type GetDeviceGroupsResponse = Message<"io.clbs.openhes.models.acquisition.GetDeviceGroupsResponse"> & {
  /**
   * The list of device groups.
   *
   * @generated from field: map<string, io.clbs.openhes.models.acquisition.DeviceGroupOverviewSpec> groups = 1;
   */
  groups: { [key: string]: DeviceGroupOverviewSpec };
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.GetDeviceGroupsResponse.
 * Use `create(GetDeviceGroupsResponseSchema)` to create a new message.
 */
export const GetDeviceGroupsResponseSchema: GenMessage<GetDeviceGroupsResponse> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 58);

/**
 * @generated from message io.clbs.openhes.models.acquisition.DeviceGroupOverviewSpec
 */
export type DeviceGroupOverviewSpec = Message<"io.clbs.openhes.models.acquisition.DeviceGroupOverviewSpec"> & {
  /**
   * The UUID of the device group.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The external identifier of the communication unit.
   *
   * @generated from field: string external_id = 2;
   */
  externalId: string;

  /**
   * The name of the device group.
   *
   * @generated from field: string name = 3;
   */
  name: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceGroupOverviewSpec.
 * Use `create(DeviceGroupOverviewSpecSchema)` to create a new message.
 */
export const DeviceGroupOverviewSpecSchema: GenMessage<DeviceGroupOverviewSpec> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 59);

/**
 * @generated from message io.clbs.openhes.models.acquisition.DeviceCommunicationUnit
 */
export type DeviceCommunicationUnit = Message<"io.clbs.openhes.models.acquisition.DeviceCommunicationUnit"> & {
  /**
   * The unique identifier of the communication unit.
   *
   * @generated from field: string communication_unit_id = 1;
   */
  communicationUnitId: string;

  /**
   * The application protocol to be used for the communication over the communication unit.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ApplicationProtocol app_protocol = 2;
   */
  appProtocol: ApplicationProtocol;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceCommunicationUnit.
 * Use `create(DeviceCommunicationUnitSchema)` to create a new message.
 */
export const DeviceCommunicationUnitSchema: GenMessage<DeviceCommunicationUnit> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 60);

/**
 * DriverRegistry -> RestApi - the message holds the information about the modem pool.
 *
 * @generated from message io.clbs.openhes.models.acquisition.GetModemPoolResponse
 */
export type GetModemPoolResponse = Message<"io.clbs.openhes.models.acquisition.GetModemPoolResponse"> & {
  /**
   * The modems registered within the pool.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.ModemInfo modems = 1;
   */
  modems: ModemInfo[];

  /**
   * The name of the modem pool.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.GetModemPoolResponse.
 * Use `create(GetModemPoolResponseSchema)` to create a new message.
 */
export const GetModemPoolResponseSchema: GenMessage<GetModemPoolResponse> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 61);

/**
 * Sub-message - job specification
 *
 * @generated from message io.clbs.openhes.models.acquisition.JobSpec
 */
export type JobSpec = Message<"io.clbs.openhes.models.acquisition.JobSpec"> & {
  /**
   * The device info.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobDevice device = 2;
   */
  device?: JobDevice;

  /**
   * The job parameters.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobSettings job_settings = 3;
   */
  jobSettings?: JobSettings;

  /**
   * The device (driver) type.
   *
   * @generated from field: string driver_type = 4;
   */
  driverType: string;

  /**
   * The list actions to be executed.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.JobAction job_actions = 5;
   */
  jobActions: JobAction[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.JobSpec.
 * Use `create(JobSpecSchema)` to create a new message.
 */
export const JobSpecSchema: GenMessage<JobSpec> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 62);

/**
 * Message used to notify DP that the job is done, sent by Taskmaster
 *
 * @generated from message io.clbs.openhes.models.acquisition.JobDoneNotification
 */
export type JobDoneNotification = Message<"io.clbs.openhes.models.acquisition.JobDoneNotification"> & {
  /**
   * The job specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobSpec spec = 1;
   */
  spec?: JobSpec;

  /**
   * The status of the job
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobStatus status = 2;
   */
  status?: JobStatus;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.JobDoneNotification.
 * Use `create(JobDoneNotificationSchema)` to create a new message.
 */
export const JobDoneNotificationSchema: GenMessage<JobDoneNotification> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 63);

/**
 * API -> Taskmaster request to get driver templates
 *
 * @generated from message io.clbs.openhes.models.acquisition.GetDriverTemplatesRequest
 */
export type GetDriverTemplatesRequest = Message<"io.clbs.openhes.models.acquisition.GetDriverTemplatesRequest"> & {
  /**
   * The driver unique identifier.
   *
   * @generated from field: string driver_type = 1;
   */
  driverType: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.GetDriverTemplatesRequest.
 * Use `create(GetDriverTemplatesRequestSchema)` to create a new message.
 */
export const GetDriverTemplatesRequestSchema: GenMessage<GetDriverTemplatesRequest> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 64);

/**
 * Sub-message containing driver info
 *
 * @generated from message io.clbs.openhes.models.acquisition.DriverInfo
 */
export type DriverInfo = Message<"io.clbs.openhes.models.acquisition.DriverInfo"> & {
  /**
   * The driver unique identifier.
   *
   * @generated from field: string driver_type = 1;
   */
  driverType: string;

  /**
   * The version of the driver.
   *
   * @generated from field: string version = 2;
   */
  version: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DriverInfo.
 * Use `create(DriverInfoSchema)` to create a new message.
 */
export const DriverInfoSchema: GenMessage<DriverInfo> = /*@__PURE__*/
  messageDesc(file_acquisition_shared, 65);

/**
 * Job priorities
 *
 * @generated from enum io.clbs.openhes.models.acquisition.JobPriority
 */
export enum JobPriority {
  /**
   * The lowest priority
   *
   * @generated from enum value: JOB_PRIORITY_0 = 0;
   */
  JOB_PRIORITY_0 = 0,

  /**
   * The priority 1
   *
   * @generated from enum value: JOB_PRIORITY_1 = 1;
   */
  JOB_PRIORITY_1 = 1,

  /**
   * The priority 2
   *
   * @generated from enum value: JOB_PRIORITY_2 = 2;
   */
  JOB_PRIORITY_2 = 2,

  /**
   * The priority 3
   *
   * @generated from enum value: JOB_PRIORITY_3 = 3;
   */
  JOB_PRIORITY_3 = 3,

  /**
   * The priority 4
   *
   * @generated from enum value: JOB_PRIORITY_4 = 4;
   */
  JOB_PRIORITY_4 = 4,

  /**
   * The priority 5
   *
   * @generated from enum value: JOB_PRIORITY_5 = 5;
   */
  JOB_PRIORITY_5 = 5,

  /**
   * The priority 6
   *
   * @generated from enum value: JOB_PRIORITY_6 = 6;
   */
  JOB_PRIORITY_6 = 6,

  /**
   * The priority 7
   *
   * @generated from enum value: JOB_PRIORITY_7 = 7;
   */
  JOB_PRIORITY_7 = 7,

  /**
   * The highest priority
   *
   * @generated from enum value: JOB_PRIORITY_8 = 8;
   */
  JOB_PRIORITY_8 = 8,
}

/**
 * Describes the enum io.clbs.openhes.models.acquisition.JobPriority.
 */
export const JobPrioritySchema: GenEnum<JobPriority> = /*@__PURE__*/
  enumDesc(file_acquisition_shared, 0);

/**
 * Parity types
 *
 * @generated from enum io.clbs.openhes.models.acquisition.SerialConfigParity
 */
export enum SerialConfigParity {
  /**
   * No parity
   *
   * @generated from enum value: PARITY_NONE = 0;
   */
  PARITY_NONE = 0,

  /**
   * Even parity
   *
   * @generated from enum value: PARITY_EVEN = 1;
   */
  PARITY_EVEN = 1,

  /**
   * Odd parity
   *
   * @generated from enum value: PARITY_ODD = 2;
   */
  PARITY_ODD = 2,

  /**
   * Mark parity
   *
   * @generated from enum value: PARITY_MARK = 3;
   */
  PARITY_MARK = 3,

  /**
   * Space parity
   *
   * @generated from enum value: PARITY_SPACE = 4;
   */
  PARITY_SPACE = 4,
}

/**
 * Describes the enum io.clbs.openhes.models.acquisition.SerialConfigParity.
 */
export const SerialConfigParitySchema: GenEnum<SerialConfigParity> = /*@__PURE__*/
  enumDesc(file_acquisition_shared, 1);

/**
 * Baud rate types
 *
 * @generated from enum io.clbs.openhes.models.acquisition.SerialConfigBaudRate
 */
export enum SerialConfigBaudRate {
  /**
   * 110 baud
   *
   * @generated from enum value: BAUD_RATE_110 = 0;
   */
  BAUD_RATE_110 = 0,

  /**
   * 300 baud
   *
   * @generated from enum value: BAUD_RATE_300 = 1;
   */
  BAUD_RATE_300 = 1,

  /**
   * 600 baud
   *
   * @generated from enum value: BAUD_RATE_600 = 2;
   */
  BAUD_RATE_600 = 2,

  /**
   * 1200 baud
   *
   * @generated from enum value: BAUD_RATE_1200 = 3;
   */
  BAUD_RATE_1200 = 3,

  /**
   * 2400 baud
   *
   * @generated from enum value: BAUD_RATE_2400 = 4;
   */
  BAUD_RATE_2400 = 4,

  /**
   * 4800 baud
   *
   * @generated from enum value: BAUD_RATE_4800 = 5;
   */
  BAUD_RATE_4800 = 5,

  /**
   * 9600 baud
   *
   * @generated from enum value: BAUD_RATE_9600 = 6;
   */
  BAUD_RATE_9600 = 6,

  /**
   * 14400 baud
   *
   * @generated from enum value: BAUD_RATE_14400 = 7;
   */
  BAUD_RATE_14400 = 7,

  /**
   * 19200 baud
   *
   * @generated from enum value: BAUD_RATE_19200 = 8;
   */
  BAUD_RATE_19200 = 8,

  /**
   * 38400 baud
   *
   * @generated from enum value: BAUD_RATE_38400 = 9;
   */
  BAUD_RATE_38400 = 9,

  /**
   * 57600 baud
   *
   * @generated from enum value: BAUD_RATE_57600 = 10;
   */
  BAUD_RATE_57600 = 10,

  /**
   * 115200 baud
   *
   * @generated from enum value: BAUD_RATE_115200 = 11;
   */
  BAUD_RATE_115200 = 11,

  /**
   * 230400 baud
   *
   * @generated from enum value: BAUD_RATE_230400 = 12;
   */
  BAUD_RATE_230400 = 12,

  /**
   * 460800 baud
   *
   * @generated from enum value: BAUD_RATE_460800 = 13;
   */
  BAUD_RATE_460800 = 13,

  /**
   * 921600 baud
   *
   * @generated from enum value: BAUD_RATE_921600 = 14;
   */
  BAUD_RATE_921600 = 14,
}

/**
 * Describes the enum io.clbs.openhes.models.acquisition.SerialConfigBaudRate.
 */
export const SerialConfigBaudRateSchema: GenEnum<SerialConfigBaudRate> = /*@__PURE__*/
  enumDesc(file_acquisition_shared, 2);

/**
 * Data bits types
 *
 * @generated from enum io.clbs.openhes.models.acquisition.SerialConfigDataBits
 */
export enum SerialConfigDataBits {
  /**
   * 5 data bits
   *
   * @generated from enum value: DATA_BITS_5 = 0;
   */
  DATA_BITS_5 = 0,

  /**
   * 6 data bits
   *
   * @generated from enum value: DATA_BITS_6 = 1;
   */
  DATA_BITS_6 = 1,

  /**
   * 7 data bits
   *
   * @generated from enum value: DATA_BITS_7 = 2;
   */
  DATA_BITS_7 = 2,

  /**
   * 8 data bits
   *
   * @generated from enum value: DATA_BITS_8 = 3;
   */
  DATA_BITS_8 = 3,
}

/**
 * Describes the enum io.clbs.openhes.models.acquisition.SerialConfigDataBits.
 */
export const SerialConfigDataBitsSchema: GenEnum<SerialConfigDataBits> = /*@__PURE__*/
  enumDesc(file_acquisition_shared, 3);

/**
 * Stop bits types
 *
 * @generated from enum io.clbs.openhes.models.acquisition.SerialConfigStopBits
 */
export enum SerialConfigStopBits {
  /**
   * 1 stop bit
   *
   * @generated from enum value: STOP_BITS_1 = 0;
   */
  STOP_BITS_1 = 0,

  /**
   * 1.5 stop bits
   *
   * @generated from enum value: STOP_BITS_1_5 = 1;
   */
  STOP_BITS_1_5 = 1,

  /**
   * 2 stop bits
   *
   * @generated from enum value: STOP_BITS_2 = 2;
   */
  STOP_BITS_2 = 2,
}

/**
 * Describes the enum io.clbs.openhes.models.acquisition.SerialConfigStopBits.
 */
export const SerialConfigStopBitsSchema: GenEnum<SerialConfigStopBits> = /*@__PURE__*/
  enumDesc(file_acquisition_shared, 4);

/**
 * Connection types
 *
 * @generated from enum io.clbs.openhes.models.acquisition.CommunicationType
 */
export enum CommunicationType {
  /**
   * The communication is done via direct TCP/IP.
   *
   * @generated from enum value: COMMUNICATION_TYPE_TCPIP = 0;
   */
  TCPIP = 0,

  /**
   * The communication is done via phone line (modem).
   *
   * @generated from enum value: COMMUNICATION_TYPE_MODEM_POOL = 1;
   */
  MODEM_POOL = 1,

  /**
   * The communication is done via direct serial line.
   *
   * @generated from enum value: COMMUNICATION_TYPE_SERIAL_LINE_DIRECT = 2;
   */
  SERIAL_LINE_DIRECT = 2,

  /**
   * The communication is done via controller-serial line (Moxa).
   *
   * @generated from enum value: COMMUNICATION_TYPE_SERIAL_LINE_MOXA = 3;
   */
  SERIAL_LINE_MOXA = 3,

  /**
   * The communication is passive, the driver is a service that listens on a port (DLMS devices in push mode) or a service that implements a subscriber to a message queue (e.g. MQTT).
   *
   * @generated from enum value: COMMUNICATION_TYPE_LISTENING = 99;
   */
  LISTENING = 99,
}

/**
 * Describes the enum io.clbs.openhes.models.acquisition.CommunicationType.
 */
export const CommunicationTypeSchema: GenEnum<CommunicationType> = /*@__PURE__*/
  enumDesc(file_acquisition_shared, 5);

/**
 * Data link protocols
 *
 * @generated from enum io.clbs.openhes.models.acquisition.DataLinkProtocol
 */
export enum DataLinkProtocol {
  /**
   * The VDEW (IEC 62056-21, IEC-61107) protocol. In combination with DLMS protocol the driver initiates the communication by IEC and switches to the mode E to the HDLC+DLMS protocol. Supports addressing = multiple devices on the same line.
   *
   * @generated from enum value: LINKPROTO_IEC_62056_21 = 0;
   */
  LINKPROTO_IEC_62056_21 = 0,

  /**
   * The HDLC (ISO/IEC-3309) framing. It can be used for various application protocols, such as DLMS or MODBUS. Supports client/server addressing = multiple devices on the same line.
   *
   * @generated from enum value: LINKPROTO_HDLC = 1;
   */
  LINKPROTO_HDLC = 1,

  /**
   * The COSEM wrapper. It can be used for DLMS application protocol. Supports client/server addressing = multiple devices on the same line.
   *
   * @generated from enum value: LINKPROTO_COSEM_WRAPPER = 2;
   */
  LINKPROTO_COSEM_WRAPPER = 2,

  /**
   * The Modbus protocol. It shall be used for Modbus application protocol where no other data link layer, such as HDLC, is used.
   *
   * @generated from enum value: LINKPROTO_MODBUS = 3;
   */
  LINKPROTO_MODBUS = 3,

  /**
   * The M-Bus protocol. It shall be used for M-Bus application protocol.
   *
   * @generated from enum value: LINKPROTO_MBUS = 4;
   */
  LINKPROTO_MBUS = 4,

  /**
   * The data link protocol is not applicable. It's useful for listening communication type.
   *
   * @generated from enum value: LINKPROTO_NOT_APPLICABLE = 99;
   */
  LINKPROTO_NOT_APPLICABLE = 99,
}

/**
 * Describes the enum io.clbs.openhes.models.acquisition.DataLinkProtocol.
 */
export const DataLinkProtocolSchema: GenEnum<DataLinkProtocol> = /*@__PURE__*/
  enumDesc(file_acquisition_shared, 6);

/**
 * Application protocols
 *
 * @generated from enum io.clbs.openhes.models.acquisition.ApplicationProtocol
 */
export enum ApplicationProtocol {
  /**
   * The IEC 62056-21 (IEC-61107, VDEW) protocol.
   *
   * @generated from enum value: APPPROTO_IEC_62056_21 = 0;
   */
  APPPROTO_IEC_62056_21 = 0,

  /**
   * The DLMS short-name protocol.
   *
   * @generated from enum value: APPPROTO_DLMS_SN = 1;
   */
  APPPROTO_DLMS_SN = 1,

  /**
   * The DLMS logical-name protocol.
   *
   * @generated from enum value: APPPROTO_DLMS_LN = 2;
   */
  APPPROTO_DLMS_LN = 2,

  /**
   * The SCTM protocol.
   *
   * @generated from enum value: APPPROTO_SCTM = 3;
   */
  APPPROTO_SCTM = 3,

  /**
   * The LIS200 protocol.
   *
   * @generated from enum value: APPPROTO_LIS200 = 4;
   */
  APPPROTO_LIS200 = 4,

  /**
   * The ANSI C12 protocol.
   *
   * @generated from enum value: APPPROTO_ANSI_C12 = 5;
   */
  APPPROTO_ANSI_C12 = 5,

  /**
   * The MQTT protocol.
   *
   * @generated from enum value: APPPROTO_MQTT = 6;
   */
  APPPROTO_MQTT = 6,
}

/**
 * Describes the enum io.clbs.openhes.models.acquisition.ApplicationProtocol.
 */
export const ApplicationProtocolSchema: GenEnum<ApplicationProtocol> = /*@__PURE__*/
  enumDesc(file_acquisition_shared, 7);

/**
 * Attribute types
 *
 * @generated from enum io.clbs.openhes.models.acquisition.AttributeType
 */
export enum AttributeType {
  /**
   * Integer attribute type
   *
   * @generated from enum value: ATTRIBUTE_TYPE_INT = 0;
   */
  INT = 0,

  /**
   * String attribute type
   *
   * @generated from enum value: ATTRIBUTE_TYPE_STRING = 1;
   */
  STRING = 1,

  /**
   * Double attribute type
   *
   * @generated from enum value: ATTRIBUTE_TYPE_DOUBLE = 2;
   */
  DOUBLE = 2,

  /**
   * Binary attribute type
   *
   * @generated from enum value: ATTRIBUTE_TYPE_BINARY = 3;
   */
  BINARY = 3,

  /**
   * Date/time attribute type, stored as integer (UNIX timestamp)
   *
   * @generated from enum value: ATTRIBUTE_TYPE_TIMESTAMP = 4;
   */
  TIMESTAMP = 4,

  /**
   * Date/time attribute type, stored as string in ISO-8601
   *
   * @generated from enum value: ATTRIBUTE_TYPE_TIMESTAMP_TZ = 5;
   */
  TIMESTAMP_TZ = 5,

  /**
   * Bool attribute type
   *
   * @generated from enum value: ATTRIBUTE_TYPE_BOOL = 6;
   */
  BOOL = 6,
}

/**
 * Describes the enum io.clbs.openhes.models.acquisition.AttributeType.
 */
export const AttributeTypeSchema: GenEnum<AttributeType> = /*@__PURE__*/
  enumDesc(file_acquisition_shared, 8);

/**
 * Action types
 *
 * @generated from enum io.clbs.openhes.models.acquisition.ActionType
 */
export enum ActionType {
  /**
   * Get billing value, for example instantaneous values. The action covers specific register.
   *
   * @generated from enum value: ACTION_TYPE_GET_REGISTER = 0;
   */
  GET_REGISTER = 0,

  /**
   * Get periodical profile, for example load-profile. The action covers specific profile column.
   *
   * @generated from enum value: ACTION_TYPE_GET_PERIODICAL_PROFILE = 1;
   */
  GET_PERIODICAL_PROFILE = 1,

  /**
   * Get non-periodical profile, for example daily profile or monthly billing registers. The action covers specific profile column and or specific billing register.
   *
   * @generated from enum value: ACTION_TYPE_GET_IRREGULAR_PROFILE = 2;
   */
  GET_IRREGULAR_PROFILE = 2,

  /**
   * Get event log. The action covers specific event log.
   *
   * @generated from enum value: ACTION_TYPE_GET_EVENTS = 3;
   */
  GET_EVENTS = 3,

  /**
   * Get clock. The action returns time in UTC.
   *
   * @generated from enum value: ACTION_TYPE_GET_CLOCK = 10;
   */
  GET_CLOCK = 10,

  /**
   * Synchornize clock. The action synchronizes the time in the device, it can forcefully set it if force attribute is set.
   *
   * @generated from enum value: ACTION_TYPE_SYNC_CLOCK = 11;
   */
  SYNC_CLOCK = 11,

  /**
   * Get relay state. The action covers single relay.
   *
   * @generated from enum value: ACTION_TYPE_GET_RELAY_STATE = 20;
   */
  GET_RELAY_STATE = 20,

  /**
   * Set relay state. The action covers single relay.
   *
   * @generated from enum value: ACTION_TYPE_SET_RELAY_STATE = 21;
   */
  SET_RELAY_STATE = 21,

  /**
   * Get disconnector state. The action covers single disconnector if multiple disconnectors are present in the device.
   *
   * @generated from enum value: ACTION_TYPE_GET_DISCONNECTOR_STATE = 22;
   */
  GET_DISCONNECTOR_STATE = 22,

  /**
   * Set disconnector state. The action covers single relay. The action covers single disconnector if multiple disconnectors are present in the device.
   *
   * @generated from enum value: ACTION_TYPE_SET_DISCONNECTOR_STATE = 23;
   */
  SET_DISCONNECTOR_STATE = 23,

  /**
   * Get time-of-use table.
   *
   * @generated from enum value: ACTION_TYPE_GET_TOU = 24;
   */
  GET_TOU = 24,

  /**
   * Set time-of-use table.
   *
   * @generated from enum value: ACTION_TYPE_SET_TOU = 25;
   */
  SET_TOU = 25,

  /**
   * Get limiter settings. The action covers single limiter.
   *
   * @generated from enum value: ACTION_TYPE_GET_LIMITER = 26;
   */
  GET_LIMITER = 26,

  /**
   * Set limiter settings. The action covers single limiter.
   *
   * @generated from enum value: ACTION_TYPE_SET_LIMITER = 27;
   */
  SET_LIMITER = 27,

  /**
   * Reseet billing period.
   *
   * @generated from enum value: ACTION_TYPE_RESET_BILLING_PERIOD = 40;
   */
  RESET_BILLING_PERIOD = 40,

  /**
   * Start firmware update. The action updates starts FW upgrade procedure.
   *
   * @generated from enum value: ACTION_TYPE_FW_UPDATE = 50;
   */
  FW_UPDATE = 50,
}

/**
 * Describes the enum io.clbs.openhes.models.acquisition.ActionType.
 */
export const ActionTypeSchema: GenEnum<ActionType> = /*@__PURE__*/
  enumDesc(file_acquisition_shared, 9);

/**
 * Result codes related to job actions
 *
 * @generated from enum io.clbs.openhes.models.acquisition.ActionResultCode
 */
export enum ActionResultCode {
  /**
   * The action has been completed successfully.
   *
   * @generated from enum value: ERROR_CODE_ACTION_OK = 0;
   */
  ERROR_CODE_ACTION_OK = 0,

  /**
   * The action is not supported by the driver (or device).
   *
   * @generated from enum value: ERROR_CODE_ACTION_UNSUPPORTED = 1;
   */
  ERROR_CODE_ACTION_UNSUPPORTED = 1,

  /**
   * The action is pending.
   *
   * @generated from enum value: ERROR_CODE_ACTION_PENDING = 3;
   */
  ERROR_CODE_ACTION_PENDING = 3,

  /**
   * The action failed.
   *
   * @generated from enum value: ERROR_CODE_ACTION_ERROR = 5;
   */
  ERROR_CODE_ACTION_ERROR = 5,
}

/**
 * Describes the enum io.clbs.openhes.models.acquisition.ActionResultCode.
 */
export const ActionResultCodeSchema: GenEnum<ActionResultCode> = /*@__PURE__*/
  enumDesc(file_acquisition_shared, 10);

/**
 * Error codes related to jobs
 *
 * @generated from enum io.clbs.openhes.models.acquisition.JobErrorCode
 */
export enum JobErrorCode {
  /**
   * The job has been completed successfully.
   *
   * @generated from enum value: JOB_ERROR_CODE_NONE = 0;
   */
  NONE = 0,

  /**
   * There is no free slot in the driver to handle the job; the job shall be send again later.
   *
   * @generated from enum value: JOB_ERROR_CODE_BUSY = 1;
   */
  BUSY = 1,

  /**
   * The job failed, the retry will be attempted.
   *
   * @generated from enum value: JOB_ERROR_CODE_ERROR = 5;
   */
  ERROR = 5,

  /**
   * This should never happen! It means that the same job is currently being processed by the driver and it was sent to the driver mutliple times which would mean that there is a bug.
   *
   * @generated from enum value: JOB_ERROR_CODE_ALREADY_EXISTS = 8;
   */
  ALREADY_EXISTS = 8,

  /**
   * The job failed, the retry will NOT be attempted.
   *
   * @generated from enum value: JOB_ERROR_CODE_FATAL = 9;
   */
  FATAL = 9,
}

/**
 * Describes the enum io.clbs.openhes.models.acquisition.JobErrorCode.
 */
export const JobErrorCodeSchema: GenEnum<JobErrorCode> = /*@__PURE__*/
  enumDesc(file_acquisition_shared, 11);

/**
 * Bulk statuses
 *
 * @generated from enum io.clbs.openhes.models.acquisition.BulkStatusCode
 */
export enum BulkStatusCode {
  /**
   * The job is waiting in the queue
   *
   * @generated from enum value: BULK_STATUS_QUEUED = 0;
   */
  BULK_STATUS_QUEUED = 0,

  /**
   * The job is running
   *
   * @generated from enum value: BULK_STATUS_RUNNING = 1;
   */
  BULK_STATUS_RUNNING = 1,

  /**
   * The job is completed
   *
   * @generated from enum value: BULK_STATUS_COMPLETED = 2;
   */
  BULK_STATUS_COMPLETED = 2,

  /**
   * The job is cancelled
   *
   * @generated from enum value: BULK_STATUS_CANCELLED = 3;
   */
  BULK_STATUS_CANCELLED = 3,

  /**
   * The job has expired
   *
   * @generated from enum value: BULK_STATUS_EXPIRED = 4;
   */
  BULK_STATUS_EXPIRED = 4,
}

/**
 * Describes the enum io.clbs.openhes.models.acquisition.BulkStatusCode.
 */
export const BulkStatusCodeSchema: GenEnum<BulkStatusCode> = /*@__PURE__*/
  enumDesc(file_acquisition_shared, 12);

/**
 * Job statuses
 *
 * @generated from enum io.clbs.openhes.models.acquisition.JobStatusCode
 */
export enum JobStatusCode {
  /**
   * The job is waiting in the queue
   *
   * @generated from enum value: JOB_STATUS_QUEUED = 0;
   */
  JOB_STATUS_QUEUED = 0,

  /**
   * The job is running
   *
   * @generated from enum value: JOB_STATUS_RUNNING = 1;
   */
  JOB_STATUS_RUNNING = 1,

  /**
   * The job is completed
   *
   * @generated from enum value: JOB_STATUS_COMPLETED = 2;
   */
  JOB_STATUS_COMPLETED = 2,

  /**
   * The job is failed
   *
   * @generated from enum value: JOB_STATUS_FAILED = 3;
   */
  JOB_STATUS_FAILED = 3,

  /**
   * The job is cancelled
   *
   * @generated from enum value: JOB_STATUS_CANCELLED = 4;
   */
  JOB_STATUS_CANCELLED = 4,

  /**
   * The job has expired
   *
   * @generated from enum value: JOB_STATUS_EXPIRED = 5;
   */
  JOB_STATUS_EXPIRED = 5,
}

/**
 * Describes the enum io.clbs.openhes.models.acquisition.JobStatusCode.
 */
export const JobStatusCodeSchema: GenEnum<JobStatusCode> = /*@__PURE__*/
  enumDesc(file_acquisition_shared, 13);

