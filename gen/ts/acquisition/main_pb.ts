// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,json_types=true"
// @generated from file acquisition/main.proto (package io.clbs.openhes.models.acquisition, edition 2023)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { MetadataFields, MetadataFieldsJson } from "../common/metadata_pb";
import { file_common_metadata } from "../common/metadata_pb";
import type { ListSelector, ListSelectorJson } from "../common/fields_pb";
import { file_common_fields } from "../common/fields_pb";
import type { BulkStatusCode, BulkStatusCodeJson, CommunicationBus, CommunicationBusJson, CommunicationUnit, CommunicationUnitJson, CommunicationUnitSpec, CommunicationUnitSpecJson, DeviceCommunicationUnit, DeviceCommunicationUnitJson, DeviceConfigurationRegisterSpec, DeviceConfigurationRegisterSpecJson, DeviceSpec, DeviceSpecJson, DeviceStatus, DeviceStatusJson, DriverTemplates, DriverTemplatesJson, JobAction, JobActionJson, JobActionSet, JobActionSetJson, JobDevice, JobDeviceJson, JobSettings, JobSettingsJson, JobStatus, JobStatusJson, ListOfJobDevice, ListOfJobDeviceId, ListOfJobDeviceIdJson, ListOfJobDeviceJson, MeasuredValue, MeasuredValueJson, ModemInfo, ModemInfoJson } from "./shared_pb";
import { file_acquisition_shared } from "./shared_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file acquisition/main.proto.
 */
export const file_acquisition_main: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_empty, file_google_protobuf_timestamp, file_common_metadata, file_common_fields, file_acquisition_shared]);

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateCommunicationUnitRequest
 */
export type CreateCommunicationUnitRequest = Message<"io.clbs.openhes.models.acquisition.CreateCommunicationUnitRequest"> & {
  /**
   * The communication unit specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.CommunicationUnitSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: CommunicationUnitSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateCommunicationUnitRequest
 */
export type CreateCommunicationUnitRequestJson = {
  /**
   * The communication unit specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.CommunicationUnitSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: CommunicationUnitSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateCommunicationUnitRequest.
 * Use `create(CreateCommunicationUnitRequestSchema)` to create a new message.
 */
export const CreateCommunicationUnitRequestSchema: GenMessage<CreateCommunicationUnitRequest, CreateCommunicationUnitRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 0);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfCommunicationUnit
 */
export type ListOfCommunicationUnit = Message<"io.clbs.openhes.models.acquisition.ListOfCommunicationUnit"> & {
  /**
   * The communication unit specification.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.CommunicationUnit items = 1;
   */
  items: CommunicationUnit[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfCommunicationUnit
 */
export type ListOfCommunicationUnitJson = {
  /**
   * The communication unit specification.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.CommunicationUnit items = 1;
   */
  items?: CommunicationUnitJson[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfCommunicationUnit.
 * Use `create(ListOfCommunicationUnitSchema)` to create a new message.
 */
export const ListOfCommunicationUnitSchema: GenMessage<ListOfCommunicationUnit, ListOfCommunicationUnitJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 1);

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateCommunicationBusRequest
 */
export type CreateCommunicationBusRequest = Message<"io.clbs.openhes.models.acquisition.CreateCommunicationBusRequest"> & {
  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateCommunicationBusRequest
 */
export type CreateCommunicationBusRequestJson = {
  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateCommunicationBusRequest.
 * Use `create(CreateCommunicationBusRequestSchema)` to create a new message.
 */
export const CreateCommunicationBusRequestSchema: GenMessage<CreateCommunicationBusRequest, CreateCommunicationBusRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 2);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfCommunicationBus
 */
export type ListOfCommunicationBus = Message<"io.clbs.openhes.models.acquisition.ListOfCommunicationBus"> & {
  /**
   * The list of communication unit buses.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.CommunicationBus items = 1;
   */
  items: CommunicationBus[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfCommunicationBus
 */
export type ListOfCommunicationBusJson = {
  /**
   * The list of communication unit buses.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.CommunicationBus items = 1;
   */
  items?: CommunicationBusJson[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfCommunicationBus.
 * Use `create(ListOfCommunicationBusSchema)` to create a new message.
 */
export const ListOfCommunicationBusSchema: GenMessage<ListOfCommunicationBus, ListOfCommunicationBusJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 3);

/**
 * @generated from message io.clbs.openhes.models.acquisition.AddCommunicationUnitsToCommunicationBusRequest
 */
export type AddCommunicationUnitsToCommunicationBusRequest = Message<"io.clbs.openhes.models.acquisition.AddCommunicationUnitsToCommunicationBusRequest"> & {
  /**
   * The unique identifier of the communication bus.
   *
   * @generated from field: string communication_bus_id = 1;
   */
  communicationBusId: string;

  /**
   * The unique identifier of the communication unit.
   *
   * @generated from field: repeated string communication_unit_id = 2;
   */
  communicationUnitId: string[];
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.AddCommunicationUnitsToCommunicationBusRequest
 */
export type AddCommunicationUnitsToCommunicationBusRequestJson = {
  /**
   * The unique identifier of the communication bus.
   *
   * @generated from field: string communication_bus_id = 1;
   */
  communicationBusId?: string;

  /**
   * The unique identifier of the communication unit.
   *
   * @generated from field: repeated string communication_unit_id = 2;
   */
  communicationUnitId?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.AddCommunicationUnitsToCommunicationBusRequest.
 * Use `create(AddCommunicationUnitsToCommunicationBusRequestSchema)` to create a new message.
 */
export const AddCommunicationUnitsToCommunicationBusRequestSchema: GenMessage<AddCommunicationUnitsToCommunicationBusRequest, AddCommunicationUnitsToCommunicationBusRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 4);

/**
 * @generated from message io.clbs.openhes.models.acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest
 */
export type RemoveCommunicationUnitsFromCommunicationBusRequest = Message<"io.clbs.openhes.models.acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest"> & {
  /**
   * The unique identifier of the communication bus.
   *
   * @generated from field: string communication_bus_id = 1;
   */
  communicationBusId: string;

  /**
   * The unique identifier of the communication unit.
   *
   * @generated from field: repeated string communication_unit_id = 2;
   */
  communicationUnitId: string[];
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest
 */
export type RemoveCommunicationUnitsFromCommunicationBusRequestJson = {
  /**
   * The unique identifier of the communication bus.
   *
   * @generated from field: string communication_bus_id = 1;
   */
  communicationBusId?: string;

  /**
   * The unique identifier of the communication unit.
   *
   * @generated from field: repeated string communication_unit_id = 2;
   */
  communicationUnitId?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest.
 * Use `create(RemoveCommunicationUnitsFromCommunicationBusRequestSchema)` to create a new message.
 */
export const RemoveCommunicationUnitsFromCommunicationBusRequestSchema: GenMessage<RemoveCommunicationUnitsFromCommunicationBusRequest, RemoveCommunicationUnitsFromCommunicationBusRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 5);

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateDeviceRequest
 */
export type CreateDeviceRequest = Message<"io.clbs.openhes.models.acquisition.CreateDeviceRequest"> & {
  /**
   * The device specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DeviceSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateDeviceRequest
 */
export type CreateDeviceRequestJson = {
  /**
   * The device specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DeviceSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateDeviceRequest.
 * Use `create(CreateDeviceRequestSchema)` to create a new message.
 */
export const CreateDeviceRequestSchema: GenMessage<CreateDeviceRequest, CreateDeviceRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 6);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDevice
 */
export type ListOfDevice = Message<"io.clbs.openhes.models.acquisition.ListOfDevice"> & {
  /**
   * The list of devices.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Device items = 1;
   */
  items: Device[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDevice
 */
export type ListOfDeviceJson = {
  /**
   * The list of devices.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Device items = 1;
   */
  items?: DeviceJson[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfDevice.
 * Use `create(ListOfDeviceSchema)` to create a new message.
 */
export const ListOfDeviceSchema: GenMessage<ListOfDevice, ListOfDeviceJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 7);

/**
 * @generated from message io.clbs.openhes.models.acquisition.Device
 */
export type Device = Message<"io.clbs.openhes.models.acquisition.Device"> & {
  /**
   * The device specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DeviceSpec;

  /**
   * The device status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceStatus status = 2;
   */
  status?: DeviceStatus;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.Device
 */
export type DeviceJson = {
  /**
   * The device specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DeviceSpecJson;

  /**
   * The device status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceStatus status = 2;
   */
  status?: DeviceStatusJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.Device.
 * Use `create(DeviceSchema)` to create a new message.
 */
export const DeviceSchema: GenMessage<Device, DeviceJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 8);

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateDeviceGroupRequest
 */
export type CreateDeviceGroupRequest = Message<"io.clbs.openhes.models.acquisition.CreateDeviceGroupRequest"> & {
  /**
   * The device group specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceGroupSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DeviceGroupSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateDeviceGroupRequest
 */
export type CreateDeviceGroupRequestJson = {
  /**
   * The device group specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceGroupSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DeviceGroupSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateDeviceGroupRequest.
 * Use `create(CreateDeviceGroupRequestSchema)` to create a new message.
 */
export const CreateDeviceGroupRequestSchema: GenMessage<CreateDeviceGroupRequest, CreateDeviceGroupRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 9);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceGroup
 */
export type ListOfDeviceGroup = Message<"io.clbs.openhes.models.acquisition.ListOfDeviceGroup"> & {
  /**
   * The list of device groups.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceGroup items = 1;
   */
  items: DeviceGroup[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceGroup
 */
export type ListOfDeviceGroupJson = {
  /**
   * The list of device groups.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceGroup items = 1;
   */
  items?: DeviceGroupJson[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfDeviceGroup.
 * Use `create(ListOfDeviceGroupSchema)` to create a new message.
 */
export const ListOfDeviceGroupSchema: GenMessage<ListOfDeviceGroup, ListOfDeviceGroupJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 10);

/**
 * @generated from message io.clbs.openhes.models.acquisition.StreamDeviceGroup
 */
export type StreamDeviceGroup = Message<"io.clbs.openhes.models.acquisition.StreamDeviceGroup"> & {
  /**
   * The oneof field containing the device group partial data.
   *
   * @generated from oneof io.clbs.openhes.models.acquisition.StreamDeviceGroup.parts
   */
  parts: {
    /**
     * The device group specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.DeviceGroupSpec spec = 1;
     */
    value: DeviceGroupSpec;
    case: "spec";
  } | {
    /**
     * The device group status.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.StreamDeviceGroupStatus status = 2;
     */
    value: StreamDeviceGroupStatus;
    case: "status";
  } | {
    /**
     * The metadata fields.
     *
     * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
     */
    value: MetadataFields;
    case: "metadata";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.StreamDeviceGroup
 */
export type StreamDeviceGroupJson = {
  /**
   * The device group specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceGroupSpec spec = 1;
   */
  spec?: DeviceGroupSpecJson;

  /**
   * The device group status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.StreamDeviceGroupStatus status = 2;
   */
  status?: StreamDeviceGroupStatusJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.StreamDeviceGroup.
 * Use `create(StreamDeviceGroupSchema)` to create a new message.
 */
export const StreamDeviceGroupSchema: GenMessage<StreamDeviceGroup, StreamDeviceGroupJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 11);

/**
 * @generated from message io.clbs.openhes.models.acquisition.DeviceGroup
 */
export type DeviceGroup = Message<"io.clbs.openhes.models.acquisition.DeviceGroup"> & {
  /**
   * The device group specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceGroupSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DeviceGroupSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.DeviceGroup
 */
export type DeviceGroupJson = {
  /**
   * The device group specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceGroupSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DeviceGroupSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceGroup.
 * Use `create(DeviceGroupSchema)` to create a new message.
 */
export const DeviceGroupSchema: GenMessage<DeviceGroup, DeviceGroupJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 12);

/**
 * @generated from message io.clbs.openhes.models.acquisition.DeviceGroupSpec
 */
export type DeviceGroupSpec = Message<"io.clbs.openhes.models.acquisition.DeviceGroupSpec"> & {
  /**
   * The external identifier of the communication unit.
   *
   * @generated from field: string external_id = 1;
   */
  externalId: string;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.DeviceGroupSpec
 */
export type DeviceGroupSpecJson = {
  /**
   * The external identifier of the communication unit.
   *
   * @generated from field: string external_id = 1;
   */
  externalId?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceGroupSpec.
 * Use `create(DeviceGroupSpecSchema)` to create a new message.
 */
export const DeviceGroupSpecSchema: GenMessage<DeviceGroupSpec, DeviceGroupSpecJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 13);

/**
 * @generated from message io.clbs.openhes.models.acquisition.StreamDeviceGroupStatus
 */
export type StreamDeviceGroupStatus = Message<"io.clbs.openhes.models.acquisition.StreamDeviceGroupStatus"> & {
  /**
   * The list of devices that are part of the group. The key represents the device identifier, the value contains additional information.
   *
   * @generated from field: map<string, io.clbs.openhes.models.acquisition.DeviceGroupStatusDevice> devices = 4;
   */
  devices: { [key: string]: DeviceGroupStatusDevice };
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.StreamDeviceGroupStatus
 */
export type StreamDeviceGroupStatusJson = {
  /**
   * The list of devices that are part of the group. The key represents the device identifier, the value contains additional information.
   *
   * @generated from field: map<string, io.clbs.openhes.models.acquisition.DeviceGroupStatusDevice> devices = 4;
   */
  devices?: { [key: string]: DeviceGroupStatusDeviceJson };
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.StreamDeviceGroupStatus.
 * Use `create(StreamDeviceGroupStatusSchema)` to create a new message.
 */
export const StreamDeviceGroupStatusSchema: GenMessage<StreamDeviceGroupStatus, StreamDeviceGroupStatusJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 14);

/**
 * @generated from message io.clbs.openhes.models.acquisition.DeviceGroupStatusDevice
 */
export type DeviceGroupStatusDevice = Message<"io.clbs.openhes.models.acquisition.DeviceGroupStatusDevice"> & {
  /**
   * The driver type.
   *
   * @generated from field: string driver_type = 1;
   */
  driverType: string;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.DeviceGroupStatusDevice
 */
export type DeviceGroupStatusDeviceJson = {
  /**
   * The driver type.
   *
   * @generated from field: string driver_type = 1;
   */
  driverType?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceGroupStatusDevice.
 * Use `create(DeviceGroupStatusDeviceSchema)` to create a new message.
 */
export const DeviceGroupStatusDeviceSchema: GenMessage<DeviceGroupStatusDevice, DeviceGroupStatusDeviceJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 15);

/**
 * @generated from message io.clbs.openhes.models.acquisition.SetDeviceCommunicationUnitsRequest
 */
export type SetDeviceCommunicationUnitsRequest = Message<"io.clbs.openhes.models.acquisition.SetDeviceCommunicationUnitsRequest"> & {
  /**
   * The unique identifier of the device.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * The list of linked communication units.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceCommunicationUnit communication_units = 2;
   */
  communicationUnits: DeviceCommunicationUnit[];
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.SetDeviceCommunicationUnitsRequest
 */
export type SetDeviceCommunicationUnitsRequestJson = {
  /**
   * The unique identifier of the device.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId?: string;

  /**
   * The list of linked communication units.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceCommunicationUnit communication_units = 2;
   */
  communicationUnits?: DeviceCommunicationUnitJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.SetDeviceCommunicationUnitsRequest.
 * Use `create(SetDeviceCommunicationUnitsRequestSchema)` to create a new message.
 */
export const SetDeviceCommunicationUnitsRequestSchema: GenMessage<SetDeviceCommunicationUnitsRequest, SetDeviceCommunicationUnitsRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 16);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnit
 */
export type ListOfDeviceCommunicationUnit = Message<"io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnit"> & {
  /**
   * The list of linked communication units.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceCommunicationUnit items = 1;
   */
  items: DeviceCommunicationUnit[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnit
 */
export type ListOfDeviceCommunicationUnitJson = {
  /**
   * The list of linked communication units.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceCommunicationUnit items = 1;
   */
  items?: DeviceCommunicationUnitJson[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnit.
 * Use `create(ListOfDeviceCommunicationUnitSchema)` to create a new message.
 */
export const ListOfDeviceCommunicationUnitSchema: GenMessage<ListOfDeviceCommunicationUnit, ListOfDeviceCommunicationUnitJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 17);

/**
 * @generated from message io.clbs.openhes.models.acquisition.AddDevicesToGroupRequest
 */
export type AddDevicesToGroupRequest = Message<"io.clbs.openhes.models.acquisition.AddDevicesToGroupRequest"> & {
  /**
   * The unique identifier of the device group.
   *
   * @generated from field: string group_id = 1;
   */
  groupId: string;

  /**
   * The unique identifier of the device.
   *
   * @generated from field: repeated string device_id = 2;
   */
  deviceId: string[];
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.AddDevicesToGroupRequest
 */
export type AddDevicesToGroupRequestJson = {
  /**
   * The unique identifier of the device group.
   *
   * @generated from field: string group_id = 1;
   */
  groupId?: string;

  /**
   * The unique identifier of the device.
   *
   * @generated from field: repeated string device_id = 2;
   */
  deviceId?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.AddDevicesToGroupRequest.
 * Use `create(AddDevicesToGroupRequestSchema)` to create a new message.
 */
export const AddDevicesToGroupRequestSchema: GenMessage<AddDevicesToGroupRequest, AddDevicesToGroupRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 18);

/**
 * @generated from message io.clbs.openhes.models.acquisition.RemoveDevicesFromGroupRequest
 */
export type RemoveDevicesFromGroupRequest = Message<"io.clbs.openhes.models.acquisition.RemoveDevicesFromGroupRequest"> & {
  /**
   * The unique identifier of the device group.
   *
   * @generated from field: string group_id = 1;
   */
  groupId: string;

  /**
   * The unique identifier of the device.
   *
   * @generated from field: repeated string device_id = 2;
   */
  deviceId: string[];
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.RemoveDevicesFromGroupRequest
 */
export type RemoveDevicesFromGroupRequestJson = {
  /**
   * The unique identifier of the device group.
   *
   * @generated from field: string group_id = 1;
   */
  groupId?: string;

  /**
   * The unique identifier of the device.
   *
   * @generated from field: repeated string device_id = 2;
   */
  deviceId?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.RemoveDevicesFromGroupRequest.
 * Use `create(RemoveDevicesFromGroupRequestSchema)` to create a new message.
 */
export const RemoveDevicesFromGroupRequestSchema: GenMessage<RemoveDevicesFromGroupRequest, RemoveDevicesFromGroupRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 19);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListDeviceGroupDevicesRequest
 */
export type ListDeviceGroupDevicesRequest = Message<"io.clbs.openhes.models.acquisition.ListDeviceGroupDevicesRequest"> & {
  /**
   * The unique identifier of the device group.
   *
   * @generated from field: string group_id = 1;
   */
  groupId: string;

  /**
   * The list selector.
   *
   * @generated from field: io.clbs.openhes.models.common.ListSelector selector = 2;
   */
  selector?: ListSelector;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListDeviceGroupDevicesRequest
 */
export type ListDeviceGroupDevicesRequestJson = {
  /**
   * The unique identifier of the device group.
   *
   * @generated from field: string group_id = 1;
   */
  groupId?: string;

  /**
   * The list selector.
   *
   * @generated from field: io.clbs.openhes.models.common.ListSelector selector = 2;
   */
  selector?: ListSelectorJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListDeviceGroupDevicesRequest.
 * Use `create(ListDeviceGroupDevicesRequestSchema)` to create a new message.
 */
export const ListDeviceGroupDevicesRequestSchema: GenMessage<ListDeviceGroupDevicesRequest, ListDeviceGroupDevicesRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 20);

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateBulkRequest
 */
export type CreateBulkRequest = Message<"io.clbs.openhes.models.acquisition.CreateBulkRequest"> & {
  /**
   * The bulk-job spec.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: BulkSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateBulkRequest
 */
export type CreateBulkRequestJson = {
  /**
   * The bulk-job spec.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: BulkSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateBulkRequest.
 * Use `create(CreateBulkRequestSchema)` to create a new message.
 */
export const CreateBulkRequestSchema: GenMessage<CreateBulkRequest, CreateBulkRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 21);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfBulk
 */
export type ListOfBulk = Message<"io.clbs.openhes.models.acquisition.ListOfBulk"> & {
  /**
   * The list of bulks.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Bulk items = 1;
   */
  items: Bulk[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfBulk
 */
export type ListOfBulkJson = {
  /**
   * The list of bulks.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Bulk items = 1;
   */
  items?: BulkJson[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfBulk.
 * Use `create(ListOfBulkSchema)` to create a new message.
 */
export const ListOfBulkSchema: GenMessage<ListOfBulk, ListOfBulkJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 22);

/**
 * @generated from message io.clbs.openhes.models.acquisition.Bulk
 */
export type Bulk = Message<"io.clbs.openhes.models.acquisition.Bulk"> & {
  /**
   * The bulk-job spec.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: BulkSpec;

  /**
   * The bulk-job status/data.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkStatus status = 2;
   */
  status?: BulkStatus;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.Bulk
 */
export type BulkJson = {
  /**
   * The bulk-job spec.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: BulkSpecJson;

  /**
   * The bulk-job status/data.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkStatus status = 2;
   */
  status?: BulkStatusJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.Bulk.
 * Use `create(BulkSchema)` to create a new message.
 */
export const BulkSchema: GenMessage<Bulk, BulkJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 23);

/**
 * @generated from message io.clbs.openhes.models.acquisition.BulkSpec
 */
export type BulkSpec = Message<"io.clbs.openhes.models.acquisition.BulkSpec"> & {
  /**
   * @gqltype: UUID
   *
   * The correlation identifier, e.g. to define relation to non-homogenous group.
   *
   * @generated from field: string correlation_id = 1;
   */
  correlationId: string;

  /**
   * @generated from oneof io.clbs.openhes.models.acquisition.BulkSpec.device
   */
  device: {
    /**
     * The list of devices in the bulk.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ListOfJobDeviceId devices = 2;
     */
    value: ListOfJobDeviceId;
    case: "devices";
  } | {
    /**
     * The device group identifier.
     *
     * @generated from field: string device_group_id = 3;
     */
    value: string;
    case: "deviceGroupId";
  } | { case: undefined; value?: undefined };

  /**
   * The bulk-shared job settings.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobSettings settings = 4;
   */
  settings?: JobSettings;

  /**
   * The list actions to be executed.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.JobActionSet actions = 5;
   */
  actions: JobActionSet[];

  /**
   * The webhook URL to call when the bulk is completed.
   *
   * @generated from field: string webhook_url = 6;
   */
  webhookUrl: string;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.BulkSpec
 */
export type BulkSpecJson = {
  /**
   * @gqltype: UUID
   *
   * The correlation identifier, e.g. to define relation to non-homogenous group.
   *
   * @generated from field: string correlation_id = 1;
   */
  correlationId?: string;

  /**
   * The list of devices in the bulk.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ListOfJobDeviceId devices = 2;
   */
  devices?: ListOfJobDeviceIdJson;

  /**
   * The device group identifier.
   *
   * @generated from field: string device_group_id = 3;
   */
  deviceGroupId?: string;

  /**
   * The bulk-shared job settings.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobSettings settings = 4;
   */
  settings?: JobSettingsJson;

  /**
   * The list actions to be executed.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.JobActionSet actions = 5;
   */
  actions?: JobActionSetJson[];

  /**
   * The webhook URL to call when the bulk is completed.
   *
   * @generated from field: string webhook_url = 6;
   */
  webhookUrl?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.BulkSpec.
 * Use `create(BulkSpecSchema)` to create a new message.
 */
export const BulkSpecSchema: GenMessage<BulkSpec, BulkSpecJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 24);

/**
 * @generated from message io.clbs.openhes.models.acquisition.BulkStatus
 */
export type BulkStatus = Message<"io.clbs.openhes.models.acquisition.BulkStatus"> & {
  /**
   * The job status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkStatusCode status = 1;
   */
  status: BulkStatusCode;

  /**
   * The number of jobs in the bulk.
   *
   * @generated from field: int32 jobs_count = 2;
   */
  jobsCount: number;

  /**
   * The number of jobs finished.
   *
   * @generated from field: int32 jobs_finished = 3;
   */
  jobsFinished: number;

  /**
   * The number of jobs successful.
   *
   * @generated from field: int32 jobs_successful = 4;
   */
  jobsSuccessful: number;

  /**
   * The creation timestamp of the bulk.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * The start timestamp of the bulk.
   *
   * @generated from field: google.protobuf.Timestamp started_at = 6;
   */
  startedAt?: Timestamp;

  /**
   * The finish timestamp of the bulk.
   *
   * @generated from field: google.protobuf.Timestamp finished_at = 7;
   */
  finishedAt?: Timestamp;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.BulkStatus
 */
export type BulkStatusJson = {
  /**
   * The job status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkStatusCode status = 1;
   */
  status?: BulkStatusCodeJson;

  /**
   * The number of jobs in the bulk.
   *
   * @generated from field: int32 jobs_count = 2;
   */
  jobsCount?: number;

  /**
   * The number of jobs finished.
   *
   * @generated from field: int32 jobs_finished = 3;
   */
  jobsFinished?: number;

  /**
   * The number of jobs successful.
   *
   * @generated from field: int32 jobs_successful = 4;
   */
  jobsSuccessful?: number;

  /**
   * The creation timestamp of the bulk.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: TimestampJson;

  /**
   * The start timestamp of the bulk.
   *
   * @generated from field: google.protobuf.Timestamp started_at = 6;
   */
  startedAt?: TimestampJson;

  /**
   * The finish timestamp of the bulk.
   *
   * @generated from field: google.protobuf.Timestamp finished_at = 7;
   */
  finishedAt?: TimestampJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.BulkStatus.
 * Use `create(BulkStatusSchema)` to create a new message.
 */
export const BulkStatusSchema: GenMessage<BulkStatus, BulkStatusJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 25);

/**
 * @generated from message io.clbs.openhes.models.acquisition.BulkJob
 */
export type BulkJob = Message<"io.clbs.openhes.models.acquisition.BulkJob"> & {
  /**
   * The job spec.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkJobSpec spec = 1;
   */
  spec?: BulkJobSpec;

  /**
   * The job status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobStatus status = 2;
   */
  status?: JobStatus;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.BulkJob
 */
export type BulkJobJson = {
  /**
   * The job spec.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkJobSpec spec = 1;
   */
  spec?: BulkJobSpecJson;

  /**
   * The job status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobStatus status = 2;
   */
  status?: JobStatusJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.BulkJob.
 * Use `create(BulkJobSchema)` to create a new message.
 */
export const BulkJobSchema: GenMessage<BulkJob, BulkJobJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 26);

/**
 * @generated from message io.clbs.openhes.models.acquisition.BulkJobSpec
 */
export type BulkJobSpec = Message<"io.clbs.openhes.models.acquisition.BulkJobSpec"> & {
  /**
   * The device info.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobDevice device = 1;
   */
  device?: JobDevice;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.BulkJobSpec
 */
export type BulkJobSpecJson = {
  /**
   * The device info.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobDevice device = 1;
   */
  device?: JobDeviceJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.BulkJobSpec.
 * Use `create(BulkJobSpecSchema)` to create a new message.
 */
export const BulkJobSpecSchema: GenMessage<BulkJobSpec, BulkJobSpecJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 27);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListBulkJobsRequest
 */
export type ListBulkJobsRequest = Message<"io.clbs.openhes.models.acquisition.ListBulkJobsRequest"> & {
  /**
   * The bulk identifier.
   *
   * @generated from field: string bulk_id = 1;
   */
  bulkId: string;

  /**
   * The list selector.
   *
   * @generated from field: io.clbs.openhes.models.common.ListSelector selector = 2;
   */
  selector?: ListSelector;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListBulkJobsRequest
 */
export type ListBulkJobsRequestJson = {
  /**
   * The bulk identifier.
   *
   * @generated from field: string bulk_id = 1;
   */
  bulkId?: string;

  /**
   * The list selector.
   *
   * @generated from field: io.clbs.openhes.models.common.ListSelector selector = 2;
   */
  selector?: ListSelectorJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListBulkJobsRequest.
 * Use `create(ListBulkJobsRequestSchema)` to create a new message.
 */
export const ListBulkJobsRequestSchema: GenMessage<ListBulkJobsRequest, ListBulkJobsRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 28);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfBulkJob
 */
export type ListOfBulkJob = Message<"io.clbs.openhes.models.acquisition.ListOfBulkJob"> & {
  /**
   * The list of jobs.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.BulkJob items = 1;
   */
  items: BulkJob[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfBulkJob
 */
export type ListOfBulkJobJson = {
  /**
   * The list of jobs.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.BulkJob items = 1;
   */
  items?: BulkJobJson[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfBulkJob.
 * Use `create(ListOfBulkJobSchema)` to create a new message.
 */
export const ListOfBulkJobSchema: GenMessage<ListOfBulkJob, ListOfBulkJobJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 29);

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateProxyBulkRequest
 */
export type CreateProxyBulkRequest = Message<"io.clbs.openhes.models.acquisition.CreateProxyBulkRequest"> & {
  /**
   * The proxy bulk-job spec.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ProxyBulkSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: ProxyBulkSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateProxyBulkRequest
 */
export type CreateProxyBulkRequestJson = {
  /**
   * The proxy bulk-job spec.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ProxyBulkSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: ProxyBulkSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateProxyBulkRequest.
 * Use `create(CreateProxyBulkRequestSchema)` to create a new message.
 */
export const CreateProxyBulkRequestSchema: GenMessage<CreateProxyBulkRequest, CreateProxyBulkRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 30);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ProxyBulkSpec
 */
export type ProxyBulkSpec = Message<"io.clbs.openhes.models.acquisition.ProxyBulkSpec"> & {
  /**
   * @gqltype: UUID
   *
   * The correlation identifier, e.g. to define relation to non-homogenous group.
   *
   * @generated from field: string correlation_id = 1;
   */
  correlationId: string;

  /**
   * The device (driver) type.
   *
   * @generated from field: string driver_type = 2 [features.field_presence = LEGACY_REQUIRED];
   */
  driverType: string;

  /**
   * The list of custom devices in the proxy bulk.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ListOfJobDevice devices = 3;
   */
  devices?: ListOfJobDevice;

  /**
   * The bulk-shared job settings.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobSettings settings = 4;
   */
  settings?: JobSettings;

  /**
   * The list actions to be executed.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.JobAction actions = 5;
   */
  actions: JobAction[];

  /**
   * The webhook URL to call when the proxy bulk is completed.
   *
   * @generated from field: string webhook_url = 6;
   */
  webhookUrl: string;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ProxyBulkSpec
 */
export type ProxyBulkSpecJson = {
  /**
   * @gqltype: UUID
   *
   * The correlation identifier, e.g. to define relation to non-homogenous group.
   *
   * @generated from field: string correlation_id = 1;
   */
  correlationId?: string;

  /**
   * The device (driver) type.
   *
   * @generated from field: string driver_type = 2 [features.field_presence = LEGACY_REQUIRED];
   */
  driverType?: string;

  /**
   * The list of custom devices in the proxy bulk.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ListOfJobDevice devices = 3;
   */
  devices?: ListOfJobDeviceJson;

  /**
   * The bulk-shared job settings.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobSettings settings = 4;
   */
  settings?: JobSettingsJson;

  /**
   * The list actions to be executed.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.JobAction actions = 5;
   */
  actions?: JobActionJson[];

  /**
   * The webhook URL to call when the proxy bulk is completed.
   *
   * @generated from field: string webhook_url = 6;
   */
  webhookUrl?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ProxyBulkSpec.
 * Use `create(ProxyBulkSpecSchema)` to create a new message.
 */
export const ProxyBulkSpecSchema: GenMessage<ProxyBulkSpec, ProxyBulkSpecJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 31);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ProxyBulk
 */
export type ProxyBulk = Message<"io.clbs.openhes.models.acquisition.ProxyBulk"> & {
  /**
   * The bulk-job spec.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ProxyBulkSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: ProxyBulkSpec;

  /**
   * The bulk-job status/data.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkStatus status = 2;
   */
  status?: BulkStatus;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ProxyBulk
 */
export type ProxyBulkJson = {
  /**
   * The bulk-job spec.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ProxyBulkSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: ProxyBulkSpecJson;

  /**
   * The bulk-job status/data.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkStatus status = 2;
   */
  status?: BulkStatusJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ProxyBulk.
 * Use `create(ProxyBulkSchema)` to create a new message.
 */
export const ProxyBulkSchema: GenMessage<ProxyBulk, ProxyBulkJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 32);

/**
 * @generated from message io.clbs.openhes.models.acquisition.SetModemPoolRequest
 */
export type SetModemPoolRequest = Message<"io.clbs.openhes.models.acquisition.SetModemPoolRequest"> & {
  /**
   * The modem pool specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemPoolSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: ModemPoolSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.SetModemPoolRequest
 */
export type SetModemPoolRequestJson = {
  /**
   * The modem pool specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemPoolSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: ModemPoolSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.SetModemPoolRequest.
 * Use `create(SetModemPoolRequestSchema)` to create a new message.
 */
export const SetModemPoolRequestSchema: GenMessage<SetModemPoolRequest, SetModemPoolRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 33);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfModemPool
 */
export type ListOfModemPool = Message<"io.clbs.openhes.models.acquisition.ListOfModemPool"> & {
  /**
   * The list of modem pools.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.ModemPool items = 1;
   */
  items: ModemPool[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfModemPool
 */
export type ListOfModemPoolJson = {
  /**
   * The list of modem pools.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.ModemPool items = 1;
   */
  items?: ModemPoolJson[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfModemPool.
 * Use `create(ListOfModemPoolSchema)` to create a new message.
 */
export const ListOfModemPoolSchema: GenMessage<ListOfModemPool, ListOfModemPoolJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 34);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ModemPoolSpec
 */
export type ModemPoolSpec = Message<"io.clbs.openhes.models.acquisition.ModemPoolSpec"> & {
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ModemPoolSpec
 */
export type ModemPoolSpecJson = {
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ModemPoolSpec.
 * Use `create(ModemPoolSpecSchema)` to create a new message.
 */
export const ModemPoolSpecSchema: GenMessage<ModemPoolSpec, ModemPoolSpecJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 35);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ModemPoolStatus
 */
export type ModemPoolStatus = Message<"io.clbs.openhes.models.acquisition.ModemPoolStatus"> & {
  /**
   * The list of modems in the pool.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.ModemInfo modems = 1;
   */
  modems: ModemInfo[];
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ModemPoolStatus
 */
export type ModemPoolStatusJson = {
  /**
   * The list of modems in the pool.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.ModemInfo modems = 1;
   */
  modems?: ModemInfoJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ModemPoolStatus.
 * Use `create(ModemPoolStatusSchema)` to create a new message.
 */
export const ModemPoolStatusSchema: GenMessage<ModemPoolStatus, ModemPoolStatusJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 36);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ModemPool
 */
export type ModemPool = Message<"io.clbs.openhes.models.acquisition.ModemPool"> & {
  /**
   * The modem pool specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemPoolSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: ModemPoolSpec;

  /**
   * The modem pool status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemPoolStatus status = 2;
   */
  status?: ModemPoolStatus;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ModemPool
 */
export type ModemPoolJson = {
  /**
   * The modem pool specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemPoolSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: ModemPoolSpecJson;

  /**
   * The modem pool status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemPoolStatus status = 2;
   */
  status?: ModemPoolStatusJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ModemPool.
 * Use `create(ModemPoolSchema)` to create a new message.
 */
export const ModemPoolSchema: GenMessage<ModemPool, ModemPoolJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 37);

/**
 * @generated from message io.clbs.openhes.models.acquisition.SetModemRequest
 */
export type SetModemRequest = Message<"io.clbs.openhes.models.acquisition.SetModemRequest"> & {
  /**
   * The modem pool identifier, required for update operation.
   *
   * @generated from field: string pool_id = 1;
   */
  poolId: string;

  /**
   * The modem specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemInfo modem = 2;
   */
  modem?: ModemInfo;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.SetModemRequest
 */
export type SetModemRequestJson = {
  /**
   * The modem pool identifier, required for update operation.
   *
   * @generated from field: string pool_id = 1;
   */
  poolId?: string;

  /**
   * The modem specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemInfo modem = 2;
   */
  modem?: ModemInfoJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.SetModemRequest.
 * Use `create(SetModemRequestSchema)` to create a new message.
 */
export const SetModemRequestSchema: GenMessage<SetModemRequest, SetModemRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 38);

/**
 * @generated from message io.clbs.openhes.models.acquisition.SetDriver
 */
export type SetDriver = Message<"io.clbs.openhes.models.acquisition.SetDriver"> & {
  /**
   * The driver specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DriverSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DriverSpec;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.SetDriver
 */
export type SetDriverJson = {
  /**
   * The driver specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DriverSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DriverSpecJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.SetDriver.
 * Use `create(SetDriverSchema)` to create a new message.
 */
export const SetDriverSchema: GenMessage<SetDriver, SetDriverJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 39);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDriver
 */
export type ListOfDriver = Message<"io.clbs.openhes.models.acquisition.ListOfDriver"> & {
  /**
   * The list of drivers.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Driver items = 1;
   */
  items: Driver[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDriver
 */
export type ListOfDriverJson = {
  /**
   * The list of drivers.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Driver items = 1;
   */
  items?: DriverJson[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfDriver.
 * Use `create(ListOfDriverSchema)` to create a new message.
 */
export const ListOfDriverSchema: GenMessage<ListOfDriver, ListOfDriverJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 40);

/**
 * @generated from message io.clbs.openhes.models.acquisition.Driver
 */
export type Driver = Message<"io.clbs.openhes.models.acquisition.Driver"> & {
  /**
   * The driver specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DriverSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DriverSpec;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.Driver
 */
export type DriverJson = {
  /**
   * The driver specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DriverSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DriverSpecJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.Driver.
 * Use `create(DriverSchema)` to create a new message.
 */
export const DriverSchema: GenMessage<Driver, DriverJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 41);

/**
 * @generated from message io.clbs.openhes.models.acquisition.DriverSpec
 */
export type DriverSpec = Message<"io.clbs.openhes.models.acquisition.DriverSpec"> & {
  /**
   * The driver version. The format is not defined. The driver itself is versioned by the docker image tags so this value shall be either the same (set during the image build) or any useful user-readable version string.
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * The port the driver's gRPC will listen on.
   *
   * @generated from field: uint32 listening_port = 2;
   */
  listeningPort: number;

  /**
   * The technical/internal ID of the driver.
   *
   * @generated from field: string driver_type = 3;
   */
  driverType: string;

  /**
   * The maximum number of concurrent jobs the driver can handle. The value 0 is not allowed, the maximum number respect typical_mem_usage not to overgrow the memory resources!
   *
   * @generated from field: int32 max_concurrent_jobs = 4;
   */
  maxConcurrentJobs: number;

  /**
   * The maximum cascade depth the driver can handle. Number 1 means that the driver cannot handle cascading jobs, 2 means that the driver can handle cascading jobs with one level of depth, etc.
   * The value 0 means that the driver can handle any number of cascading jobs.
   *
   * @generated from field: uint32 max_cascade_depth = 5;
   */
  maxCascadeDepth: number;

  /**
   * The typical memory usage of the driver in MB.
   *
   * @generated from field: int32 typical_mem_usage = 6;
   */
  typicalMemUsage: number;

  /**
   * The connection and action templates.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DriverTemplates templates = 7;
   */
  templates?: DriverTemplates;

  /**
   * The display name of the driver. Must be in format '<manufacturer> <device_type> [<device_type_version>]'.
   * It must respect upper/lower characters.
   * The generic drivers, such as 'cybros labs generic', must be named as '<driver_company_name> generic'.
   *
   * Examples: 'Addax NP73E', 'cybros labs generic', 'Landis+Gyr S650 v2'
   *
   * @generated from field: string display_name = 8;
   */
  displayName: string;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.DriverSpec
 */
export type DriverSpecJson = {
  /**
   * The driver version. The format is not defined. The driver itself is versioned by the docker image tags so this value shall be either the same (set during the image build) or any useful user-readable version string.
   *
   * @generated from field: string version = 1;
   */
  version?: string;

  /**
   * The port the driver's gRPC will listen on.
   *
   * @generated from field: uint32 listening_port = 2;
   */
  listeningPort?: number;

  /**
   * The technical/internal ID of the driver.
   *
   * @generated from field: string driver_type = 3;
   */
  driverType?: string;

  /**
   * The maximum number of concurrent jobs the driver can handle. The value 0 is not allowed, the maximum number respect typical_mem_usage not to overgrow the memory resources!
   *
   * @generated from field: int32 max_concurrent_jobs = 4;
   */
  maxConcurrentJobs?: number;

  /**
   * The maximum cascade depth the driver can handle. Number 1 means that the driver cannot handle cascading jobs, 2 means that the driver can handle cascading jobs with one level of depth, etc.
   * The value 0 means that the driver can handle any number of cascading jobs.
   *
   * @generated from field: uint32 max_cascade_depth = 5;
   */
  maxCascadeDepth?: number;

  /**
   * The typical memory usage of the driver in MB.
   *
   * @generated from field: int32 typical_mem_usage = 6;
   */
  typicalMemUsage?: number;

  /**
   * The connection and action templates.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DriverTemplates templates = 7;
   */
  templates?: DriverTemplatesJson;

  /**
   * The display name of the driver. Must be in format '<manufacturer> <device_type> [<device_type_version>]'.
   * It must respect upper/lower characters.
   * The generic drivers, such as 'cybros labs generic', must be named as '<driver_company_name> generic'.
   *
   * Examples: 'Addax NP73E', 'cybros labs generic', 'Landis+Gyr S650 v2'
   *
   * @generated from field: string display_name = 8;
   */
  displayName?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DriverSpec.
 * Use `create(DriverSpecSchema)` to create a new message.
 */
export const DriverSpecSchema: GenMessage<DriverSpec, DriverSpecJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 42);

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateVariableRequest
 */
export type CreateVariableRequest = Message<"io.clbs.openhes.models.acquisition.CreateVariableRequest"> & {
  /**
   * The variable specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.VariableSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: VariableSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateVariableRequest
 */
export type CreateVariableRequestJson = {
  /**
   * The variable specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.VariableSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: VariableSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateVariableRequest.
 * Use `create(CreateVariableRequestSchema)` to create a new message.
 */
export const CreateVariableRequestSchema: GenMessage<CreateVariableRequest, CreateVariableRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 43);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfVariable
 */
export type ListOfVariable = Message<"io.clbs.openhes.models.acquisition.ListOfVariable"> & {
  /**
   * The list of variables.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Variable items = 1;
   */
  items: Variable[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfVariable
 */
export type ListOfVariableJson = {
  /**
   * The list of variables.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Variable items = 1;
   */
  items?: VariableJson[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfVariable.
 * Use `create(ListOfVariableSchema)` to create a new message.
 */
export const ListOfVariableSchema: GenMessage<ListOfVariable, ListOfVariableJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 44);

/**
 * @generated from message io.clbs.openhes.models.acquisition.Variable
 */
export type Variable = Message<"io.clbs.openhes.models.acquisition.Variable"> & {
  /**
   * The variable specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.VariableSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: VariableSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.Variable
 */
export type VariableJson = {
  /**
   * The variable specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.VariableSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: VariableSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.Variable.
 * Use `create(VariableSchema)` to create a new message.
 */
export const VariableSchema: GenMessage<Variable, VariableJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 45);

/**
 * @generated from message io.clbs.openhes.models.acquisition.VariableSpec
 */
export type VariableSpec = Message<"io.clbs.openhes.models.acquisition.VariableSpec"> & {
  /**
   * The list of device configuration register identifiers.
   *
   * @generated from field: repeated string register_id = 1;
   */
  registerId: string[];
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.VariableSpec
 */
export type VariableSpecJson = {
  /**
   * The list of device configuration register identifiers.
   *
   * @generated from field: repeated string register_id = 1;
   */
  registerId?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.VariableSpec.
 * Use `create(VariableSpecSchema)` to create a new message.
 */
export const VariableSpecSchema: GenMessage<VariableSpec, VariableSpecJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 46);

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateDeviceConfigurationRegisterRequest
 */
export type CreateDeviceConfigurationRegisterRequest = Message<"io.clbs.openhes.models.acquisition.CreateDeviceConfigurationRegisterRequest"> & {
  /**
   * The register specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DeviceConfigurationRegisterSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateDeviceConfigurationRegisterRequest
 */
export type CreateDeviceConfigurationRegisterRequestJson = {
  /**
   * The register specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DeviceConfigurationRegisterSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateDeviceConfigurationRegisterRequest.
 * Use `create(CreateDeviceConfigurationRegisterRequestSchema)` to create a new message.
 */
export const CreateDeviceConfigurationRegisterRequestSchema: GenMessage<CreateDeviceConfigurationRegisterRequest, CreateDeviceConfigurationRegisterRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 47);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationRegister
 */
export type ListOfDeviceConfigurationRegister = Message<"io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationRegister"> & {
  /**
   * The list of registers.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceConfigurationRegister items = 1;
   */
  items: DeviceConfigurationRegister[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationRegister
 */
export type ListOfDeviceConfigurationRegisterJson = {
  /**
   * The list of registers.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceConfigurationRegister items = 1;
   */
  items?: DeviceConfigurationRegisterJson[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationRegister.
 * Use `create(ListOfDeviceConfigurationRegisterSchema)` to create a new message.
 */
export const ListOfDeviceConfigurationRegisterSchema: GenMessage<ListOfDeviceConfigurationRegister, ListOfDeviceConfigurationRegisterJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 48);

/**
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConfigurationRegister
 */
export type DeviceConfigurationRegister = Message<"io.clbs.openhes.models.acquisition.DeviceConfigurationRegister"> & {
  /**
   * The register specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DeviceConfigurationRegisterSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConfigurationRegister
 */
export type DeviceConfigurationRegisterJson = {
  /**
   * The register specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DeviceConfigurationRegisterSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceConfigurationRegister.
 * Use `create(DeviceConfigurationRegisterSchema)` to create a new message.
 */
export const DeviceConfigurationRegisterSchema: GenMessage<DeviceConfigurationRegister, DeviceConfigurationRegisterJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 49);

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateDeviceConfigurationTemplateRequest
 */
export type CreateDeviceConfigurationTemplateRequest = Message<"io.clbs.openhes.models.acquisition.CreateDeviceConfigurationTemplateRequest"> & {
  /**
   * The device configuration template specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceConfigurationTemplateSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DeviceConfigurationTemplateSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.CreateDeviceConfigurationTemplateRequest
 */
export type CreateDeviceConfigurationTemplateRequestJson = {
  /**
   * The device configuration template specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceConfigurationTemplateSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DeviceConfigurationTemplateSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateDeviceConfigurationTemplateRequest.
 * Use `create(CreateDeviceConfigurationTemplateRequestSchema)` to create a new message.
 */
export const CreateDeviceConfigurationTemplateRequestSchema: GenMessage<CreateDeviceConfigurationTemplateRequest, CreateDeviceConfigurationTemplateRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 50);

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationTemplate
 */
export type ListOfDeviceConfigurationTemplate = Message<"io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationTemplate"> & {
  /**
   * The list of device configuration templates.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate items = 1;
   */
  items: DeviceConfigurationTemplate[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationTemplate
 */
export type ListOfDeviceConfigurationTemplateJson = {
  /**
   * The list of device configuration templates.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate items = 1;
   */
  items?: DeviceConfigurationTemplateJson[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationTemplate.
 * Use `create(ListOfDeviceConfigurationTemplateSchema)` to create a new message.
 */
export const ListOfDeviceConfigurationTemplateSchema: GenMessage<ListOfDeviceConfigurationTemplate, ListOfDeviceConfigurationTemplateJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 51);

/**
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate
 */
export type DeviceConfigurationTemplate = Message<"io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate"> & {
  /**
   * The device configuration template specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceConfigurationTemplateSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DeviceConfigurationTemplateSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate
 */
export type DeviceConfigurationTemplateJson = {
  /**
   * The device configuration template specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceConfigurationTemplateSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  spec?: DeviceConfigurationTemplateSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate.
 * Use `create(DeviceConfigurationTemplateSchema)` to create a new message.
 */
export const DeviceConfigurationTemplateSchema: GenMessage<DeviceConfigurationTemplate, DeviceConfigurationTemplateJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 52);

/**
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConfigurationTemplateSpec
 */
export type DeviceConfigurationTemplateSpec = Message<"io.clbs.openhes.models.acquisition.DeviceConfigurationTemplateSpec"> & {
  /**
   * The device (driver) type.
   *
   * @generated from field: string driver_type = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  driverType: string;

  /**
   * The list of device configuration register identifiers.
   *
   * @generated from field: repeated string register_id = 2;
   */
  registerId: string[];
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConfigurationTemplateSpec
 */
export type DeviceConfigurationTemplateSpecJson = {
  /**
   * The device (driver) type.
   *
   * @generated from field: string driver_type = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  driverType?: string;

  /**
   * The list of device configuration register identifiers.
   *
   * @generated from field: repeated string register_id = 2;
   */
  registerId?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceConfigurationTemplateSpec.
 * Use `create(DeviceConfigurationTemplateSpecSchema)` to create a new message.
 */
export const DeviceConfigurationTemplateSpecSchema: GenMessage<DeviceConfigurationTemplateSpec, DeviceConfigurationTemplateSpecJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 53);

/**
 * @generated from message io.clbs.openhes.models.acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest
 */
export type AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest = Message<"io.clbs.openhes.models.acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest"> & {
  /**
   * The identifier of the device configuration template.
   *
   * @generated from field: string dct_id = 1;
   */
  dctId: string;

  /**
   * The identifier of the register to be linked to the template.
   *
   * @generated from field: string register_id = 2;
   */
  registerId: string;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest
 */
export type AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequestJson = {
  /**
   * The identifier of the device configuration template.
   *
   * @generated from field: string dct_id = 1;
   */
  dctId?: string;

  /**
   * The identifier of the register to be linked to the template.
   *
   * @generated from field: string register_id = 2;
   */
  registerId?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest.
 * Use `create(AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequestSchema)` to create a new message.
 */
export const AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequestSchema: GenMessage<AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest, AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 54);

/**
 * @generated from message io.clbs.openhes.models.acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest
 */
export type RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest = Message<"io.clbs.openhes.models.acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest"> & {
  /**
   * The identifier of the device configuration template.
   *
   * @generated from field: string dct_id = 1;
   */
  dctId: string;

  /**
   * The identifier of the register to be unlinked from the template.
   *
   * @generated from field: string register_id = 2;
   */
  registerId: string;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest
 */
export type RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequestJson = {
  /**
   * The identifier of the device configuration template.
   *
   * @generated from field: string dct_id = 1;
   */
  dctId?: string;

  /**
   * The identifier of the register to be unlinked from the template.
   *
   * @generated from field: string register_id = 2;
   */
  registerId?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest.
 * Use `create(RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequestSchema)` to create a new message.
 */
export const RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequestSchema: GenMessage<RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest, RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 55);

/**
 * @generated from message io.clbs.openhes.models.acquisition.GetMeterDataRequest
 */
export type GetMeterDataRequest = Message<"io.clbs.openhes.models.acquisition.GetMeterDataRequest"> & {
  /**
   * The start timestamp of the data.
   *
   * @generated from field: google.protobuf.Timestamp from = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  from?: Timestamp;

  /**
   * The end timestamp of the data.
   *
   * @generated from field: google.protobuf.Timestamp to = 2 [features.field_presence = LEGACY_REQUIRED];
   */
  to?: Timestamp;

  /**
   * One or more identifiers of the devices.
   *
   * @generated from field: repeated string device_id = 3;
   */
  deviceId: string[];

  /**
   * The unique identifier of the register.
   *
   * @generated from field: repeated string variable_name = 4;
   */
  variableName: string[];
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.GetMeterDataRequest
 */
export type GetMeterDataRequestJson = {
  /**
   * The start timestamp of the data.
   *
   * @generated from field: google.protobuf.Timestamp from = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  from?: TimestampJson;

  /**
   * The end timestamp of the data.
   *
   * @generated from field: google.protobuf.Timestamp to = 2 [features.field_presence = LEGACY_REQUIRED];
   */
  to?: TimestampJson;

  /**
   * One or more identifiers of the devices.
   *
   * @generated from field: repeated string device_id = 3;
   */
  deviceId?: string[];

  /**
   * The unique identifier of the register.
   *
   * @generated from field: repeated string variable_name = 4;
   */
  variableName?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.GetMeterDataRequest.
 * Use `create(GetMeterDataRequestSchema)` to create a new message.
 */
export const GetMeterDataRequestSchema: GenMessage<GetMeterDataRequest, GetMeterDataRequestJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 56);

/**
 * @generated from message io.clbs.openhes.models.acquisition.StreamMeterDataPacket
 */
export type StreamMeterDataPacket = Message<"io.clbs.openhes.models.acquisition.StreamMeterDataPacket"> & {
  /**
   * The part of meter data. The data are ordered by timestamp from the oldest to the newest.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.StreamMeterData part = 1;
   */
  part: StreamMeterData[];
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.StreamMeterDataPacket
 */
export type StreamMeterDataPacketJson = {
  /**
   * The part of meter data. The data are ordered by timestamp from the oldest to the newest.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.StreamMeterData part = 1;
   */
  part?: StreamMeterDataJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.StreamMeterDataPacket.
 * Use `create(StreamMeterDataPacketSchema)` to create a new message.
 */
export const StreamMeterDataPacketSchema: GenMessage<StreamMeterDataPacket, StreamMeterDataPacketJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 57);

/**
 * @generated from message io.clbs.openhes.models.acquisition.StreamMeterData
 */
export type StreamMeterData = Message<"io.clbs.openhes.models.acquisition.StreamMeterData"> & {
  /**
   * @generated from field: google.protobuf.Timestamp ts = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  ts?: Timestamp;

  /**
   * @generated from field: repeated io.clbs.openhes.models.acquisition.StreamMeterDataDevice data = 2;
   */
  data: StreamMeterDataDevice[];
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.StreamMeterData
 */
export type StreamMeterDataJson = {
  /**
   * @generated from field: google.protobuf.Timestamp ts = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  ts?: TimestampJson;

  /**
   * @generated from field: repeated io.clbs.openhes.models.acquisition.StreamMeterDataDevice data = 2;
   */
  data?: StreamMeterDataDeviceJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.StreamMeterData.
 * Use `create(StreamMeterDataSchema)` to create a new message.
 */
export const StreamMeterDataSchema: GenMessage<StreamMeterData, StreamMeterDataJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 58);

/**
 * @generated from message io.clbs.openhes.models.acquisition.StreamMeterDataDevice
 */
export type StreamMeterDataDevice = Message<"io.clbs.openhes.models.acquisition.StreamMeterDataDevice"> & {
  /**
   * The unique identifier of the device.
   *
   * @generated from field: string device_id = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  deviceId: string;

  /**
   * The list of meter data.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.MeasuredValue data = 2;
   */
  data: MeasuredValue[];
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.StreamMeterDataDevice
 */
export type StreamMeterDataDeviceJson = {
  /**
   * The unique identifier of the device.
   *
   * @generated from field: string device_id = 1 [features.field_presence = LEGACY_REQUIRED];
   */
  deviceId?: string;

  /**
   * The list of meter data.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.MeasuredValue data = 2;
   */
  data?: MeasuredValueJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.StreamMeterDataDevice.
 * Use `create(StreamMeterDataDeviceSchema)` to create a new message.
 */
export const StreamMeterDataDeviceSchema: GenMessage<StreamMeterDataDevice, StreamMeterDataDeviceJson> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 59);

