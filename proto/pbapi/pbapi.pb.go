// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: pbapi.proto

package pbapi

import (
	models "github.com/cybroslabs/hes-2-apis/protobuf/models"
	pbdataproxymodels "github.com/cybroslabs/hes-2-apis/protobuf/pbdataproxymodels"
	pbdeviceregistrymodels "github.com/cybroslabs/hes-2-apis/protobuf/pbdeviceregistrymodels"
	pbdrivermodels "github.com/cybroslabs/hes-2-apis/protobuf/pbdrivermodels"
	pbdriveroperatormodels "github.com/cybroslabs/hes-2-apis/protobuf/pbdriveroperatormodels"
	pbtaskmastermodels "github.com/cybroslabs/hes-2-apis/protobuf/pbtaskmastermodels"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PublicCreateBulkRequest struct {
	state                    protoimpl.MessageState           `protogen:"opaque.v1"`
	xxx_hidden_Id            *string                          `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_CorrelationId *string                          `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId"`
	xxx_hidden_DriverType    *string                          `protobuf:"bytes,3,opt,name=driver_type,json=driverType"`
	xxx_hidden_Device        isPublicCreateBulkRequest_Device `protobuf_oneof:"device"`
	xxx_hidden_Settings      *pbdrivermodels.JobSettings      `protobuf:"bytes,6,opt,name=settings"`
	xxx_hidden_Actions       *[]*pbdrivermodels.JobAction     `protobuf:"bytes,7,rep,name=actions"`
	xxx_hidden_WebhookUrl    *string                          `protobuf:"bytes,8,opt,name=webhook_url,json=webhookUrl"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *PublicCreateBulkRequest) Reset() {
	*x = PublicCreateBulkRequest{}
	mi := &file_pbapi_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicCreateBulkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicCreateBulkRequest) ProtoMessage() {}

func (x *PublicCreateBulkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbapi_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PublicCreateBulkRequest) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *PublicCreateBulkRequest) GetCorrelationId() string {
	if x != nil {
		if x.xxx_hidden_CorrelationId != nil {
			return *x.xxx_hidden_CorrelationId
		}
		return ""
	}
	return ""
}

func (x *PublicCreateBulkRequest) GetDriverType() string {
	if x != nil {
		if x.xxx_hidden_DriverType != nil {
			return *x.xxx_hidden_DriverType
		}
		return ""
	}
	return ""
}

func (x *PublicCreateBulkRequest) GetDevices() *ListOfJobDeviceId {
	if x != nil {
		if x, ok := x.xxx_hidden_Device.(*publicCreateBulkRequest_Devices); ok {
			return x.Devices
		}
	}
	return nil
}

func (x *PublicCreateBulkRequest) GetCustomDevices() *ListOfJobDevice {
	if x != nil {
		if x, ok := x.xxx_hidden_Device.(*publicCreateBulkRequest_CustomDevices); ok {
			return x.CustomDevices
		}
	}
	return nil
}

func (x *PublicCreateBulkRequest) GetSettings() *pbdrivermodels.JobSettings {
	if x != nil {
		return x.xxx_hidden_Settings
	}
	return nil
}

func (x *PublicCreateBulkRequest) GetActions() []*pbdrivermodels.JobAction {
	if x != nil {
		if x.xxx_hidden_Actions != nil {
			return *x.xxx_hidden_Actions
		}
	}
	return nil
}

func (x *PublicCreateBulkRequest) GetWebhookUrl() string {
	if x != nil {
		if x.xxx_hidden_WebhookUrl != nil {
			return *x.xxx_hidden_WebhookUrl
		}
		return ""
	}
	return ""
}

func (x *PublicCreateBulkRequest) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *PublicCreateBulkRequest) SetCorrelationId(v string) {
	x.xxx_hidden_CorrelationId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *PublicCreateBulkRequest) SetDriverType(v string) {
	x.xxx_hidden_DriverType = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *PublicCreateBulkRequest) SetDevices(v *ListOfJobDeviceId) {
	if v == nil {
		x.xxx_hidden_Device = nil
		return
	}
	x.xxx_hidden_Device = &publicCreateBulkRequest_Devices{v}
}

func (x *PublicCreateBulkRequest) SetCustomDevices(v *ListOfJobDevice) {
	if v == nil {
		x.xxx_hidden_Device = nil
		return
	}
	x.xxx_hidden_Device = &publicCreateBulkRequest_CustomDevices{v}
}

func (x *PublicCreateBulkRequest) SetSettings(v *pbdrivermodels.JobSettings) {
	x.xxx_hidden_Settings = v
}

func (x *PublicCreateBulkRequest) SetActions(v []*pbdrivermodels.JobAction) {
	x.xxx_hidden_Actions = &v
}

func (x *PublicCreateBulkRequest) SetWebhookUrl(v string) {
	x.xxx_hidden_WebhookUrl = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *PublicCreateBulkRequest) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *PublicCreateBulkRequest) HasCorrelationId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *PublicCreateBulkRequest) HasDriverType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *PublicCreateBulkRequest) HasDevice() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Device != nil
}

func (x *PublicCreateBulkRequest) HasDevices() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Device.(*publicCreateBulkRequest_Devices)
	return ok
}

func (x *PublicCreateBulkRequest) HasCustomDevices() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Device.(*publicCreateBulkRequest_CustomDevices)
	return ok
}

func (x *PublicCreateBulkRequest) HasSettings() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Settings != nil
}

func (x *PublicCreateBulkRequest) HasWebhookUrl() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *PublicCreateBulkRequest) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *PublicCreateBulkRequest) ClearCorrelationId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_CorrelationId = nil
}

func (x *PublicCreateBulkRequest) ClearDriverType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_DriverType = nil
}

func (x *PublicCreateBulkRequest) ClearDevice() {
	x.xxx_hidden_Device = nil
}

func (x *PublicCreateBulkRequest) ClearDevices() {
	if _, ok := x.xxx_hidden_Device.(*publicCreateBulkRequest_Devices); ok {
		x.xxx_hidden_Device = nil
	}
}

func (x *PublicCreateBulkRequest) ClearCustomDevices() {
	if _, ok := x.xxx_hidden_Device.(*publicCreateBulkRequest_CustomDevices); ok {
		x.xxx_hidden_Device = nil
	}
}

func (x *PublicCreateBulkRequest) ClearSettings() {
	x.xxx_hidden_Settings = nil
}

func (x *PublicCreateBulkRequest) ClearWebhookUrl() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_WebhookUrl = nil
}

const PublicCreateBulkRequest_Device_not_set_case case_PublicCreateBulkRequest_Device = 0
const PublicCreateBulkRequest_Devices_case case_PublicCreateBulkRequest_Device = 4
const PublicCreateBulkRequest_CustomDevices_case case_PublicCreateBulkRequest_Device = 5

func (x *PublicCreateBulkRequest) WhichDevice() case_PublicCreateBulkRequest_Device {
	if x == nil {
		return PublicCreateBulkRequest_Device_not_set_case
	}
	switch x.xxx_hidden_Device.(type) {
	case *publicCreateBulkRequest_Devices:
		return PublicCreateBulkRequest_Devices_case
	case *publicCreateBulkRequest_CustomDevices:
		return PublicCreateBulkRequest_CustomDevices_case
	default:
		return PublicCreateBulkRequest_Device_not_set_case
	}
}

type PublicCreateBulkRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// @gqltype: UUID
	Id            *string
	CorrelationId *string
	DriverType    *string
	// Fields of oneof xxx_hidden_Device:
	Devices       *ListOfJobDeviceId
	CustomDevices *ListOfJobDevice
	// -- end of xxx_hidden_Device
	Settings   *pbdrivermodels.JobSettings
	Actions    []*pbdrivermodels.JobAction
	WebhookUrl *string
}

func (b0 PublicCreateBulkRequest_builder) Build() *PublicCreateBulkRequest {
	m0 := &PublicCreateBulkRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_Id = b.Id
	}
	if b.CorrelationId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_CorrelationId = b.CorrelationId
	}
	if b.DriverType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_DriverType = b.DriverType
	}
	if b.Devices != nil {
		x.xxx_hidden_Device = &publicCreateBulkRequest_Devices{b.Devices}
	}
	if b.CustomDevices != nil {
		x.xxx_hidden_Device = &publicCreateBulkRequest_CustomDevices{b.CustomDevices}
	}
	x.xxx_hidden_Settings = b.Settings
	x.xxx_hidden_Actions = &b.Actions
	if b.WebhookUrl != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_WebhookUrl = b.WebhookUrl
	}
	return m0
}

type case_PublicCreateBulkRequest_Device protoreflect.FieldNumber

func (x case_PublicCreateBulkRequest_Device) String() string {
	md := file_pbapi_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isPublicCreateBulkRequest_Device interface {
	isPublicCreateBulkRequest_Device()
}

type publicCreateBulkRequest_Devices struct {
	Devices *ListOfJobDeviceId `protobuf:"bytes,4,opt,name=devices,oneof"` // The list of devices in the bulk.
}

type publicCreateBulkRequest_CustomDevices struct {
	CustomDevices *ListOfJobDevice `protobuf:"bytes,5,opt,name=custom_devices,json=customDevices,oneof"` // The list of custom devices in the bulk.
}

func (*publicCreateBulkRequest_Devices) isPublicCreateBulkRequest_Device() {}

func (*publicCreateBulkRequest_CustomDevices) isPublicCreateBulkRequest_Device() {}

type ListOfJobDevice struct {
	state           protoimpl.MessageState           `protogen:"opaque.v1"`
	xxx_hidden_List *[]*pbtaskmastermodels.JobDevice `protobuf:"bytes,5,rep,name=list"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListOfJobDevice) Reset() {
	*x = ListOfJobDevice{}
	mi := &file_pbapi_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOfJobDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfJobDevice) ProtoMessage() {}

func (x *ListOfJobDevice) ProtoReflect() protoreflect.Message {
	mi := &file_pbapi_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListOfJobDevice) GetList() []*pbtaskmastermodels.JobDevice {
	if x != nil {
		if x.xxx_hidden_List != nil {
			return *x.xxx_hidden_List
		}
	}
	return nil
}

func (x *ListOfJobDevice) SetList(v []*pbtaskmastermodels.JobDevice) {
	x.xxx_hidden_List = &v
}

type ListOfJobDevice_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	List []*pbtaskmastermodels.JobDevice
}

func (b0 ListOfJobDevice_builder) Build() *ListOfJobDevice {
	m0 := &ListOfJobDevice{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_List = &b.List
	return m0
}

type ListOfJobDeviceId struct {
	state           protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_List *[]*JobDeviceId        `protobuf:"bytes,5,rep,name=list"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListOfJobDeviceId) Reset() {
	*x = ListOfJobDeviceId{}
	mi := &file_pbapi_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOfJobDeviceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfJobDeviceId) ProtoMessage() {}

func (x *ListOfJobDeviceId) ProtoReflect() protoreflect.Message {
	mi := &file_pbapi_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListOfJobDeviceId) GetList() []*JobDeviceId {
	if x != nil {
		if x.xxx_hidden_List != nil {
			return *x.xxx_hidden_List
		}
	}
	return nil
}

func (x *ListOfJobDeviceId) SetList(v []*JobDeviceId) {
	x.xxx_hidden_List = &v
}

type ListOfJobDeviceId_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	List []*JobDeviceId
}

func (b0 ListOfJobDeviceId_builder) Build() *ListOfJobDeviceId {
	m0 := &ListOfJobDeviceId{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_List = &b.List
	return m0
}

type JobDeviceId struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_DeviceId    *string                `protobuf:"bytes,2,opt,name=device_id,json=deviceId"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *JobDeviceId) Reset() {
	*x = JobDeviceId{}
	mi := &file_pbapi_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobDeviceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDeviceId) ProtoMessage() {}

func (x *JobDeviceId) ProtoReflect() protoreflect.Message {
	mi := &file_pbapi_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *JobDeviceId) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *JobDeviceId) GetDeviceId() string {
	if x != nil {
		if x.xxx_hidden_DeviceId != nil {
			return *x.xxx_hidden_DeviceId
		}
		return ""
	}
	return ""
}

func (x *JobDeviceId) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *JobDeviceId) SetDeviceId(v string) {
	x.xxx_hidden_DeviceId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *JobDeviceId) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *JobDeviceId) HasDeviceId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *JobDeviceId) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *JobDeviceId) ClearDeviceId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_DeviceId = nil
}

type JobDeviceId_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       *string
	DeviceId *string
}

func (b0 JobDeviceId_builder) Build() *JobDeviceId {
	m0 := &JobDeviceId{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Id = b.Id
	}
	if b.DeviceId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_DeviceId = b.DeviceId
	}
	return m0
}

var File_pbapi_proto protoreflect.FileDescriptor

var file_pbapi_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x62, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x61, 0x70, 0x69, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70,
	0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x62, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70,
	0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x03, 0x0a, 0x17, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44,
	0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x4a, 0x6f,
	0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x4a, 0x6f, 0x62, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62,
	0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x4e, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x4a, 0x6f, 0x62, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x4b, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x4a, 0x6f, 0x62, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f,
	0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x3a, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x32, 0xca, 0x17, 0x0a, 0x0a,
	0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6c,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x5a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x73, 0x12, 0x24, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x1a, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x4a, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x50, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x6c, 0x6b, 0x4a, 0x6f, 0x62, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4a, 0x6f, 0x62, 0x12, 0x42, 0x0a, 0x0a, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x55,
	0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x2f, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x32, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x66, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x73, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x7c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x24, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x1a, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x5d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65,
	0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x61,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x24, 0x2e,
	0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x1a, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x57, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x2c, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x7b, 0x0a, 0x1b, 0x53, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x44, 0x2e, 0x69, 0x6f, 0x2e, 0x63,
	0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x67, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3a, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x73,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a,
	0x11, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x71, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68,
	0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6f, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x24, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x1a, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c,
	0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x60, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x60, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x12, 0x31, 0x2e, 0x69,
	0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70,
	0x62, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x12, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x43, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6d,
	0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e, 0x69, 0x6f,
	0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62,
	0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6c, 0x62, 0x73, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x79, 0x62, 0x72, 0x6f, 0x73, 0x6c, 0x61, 0x62,
	0x73, 0x2f, 0x68, 0x65, 0x73, 0x2d, 0x32, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x62, 0x61, 0x70, 0x69, 0x62, 0x08, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
}

var file_pbapi_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pbapi_proto_goTypes = []any{
	(*PublicCreateBulkRequest)(nil),                                   // 0: io.clbs.openhes.pbapi.PublicCreateBulkRequest
	(*ListOfJobDevice)(nil),                                           // 1: io.clbs.openhes.pbapi.ListOfJobDevice
	(*ListOfJobDeviceId)(nil),                                         // 2: io.clbs.openhes.pbapi.ListOfJobDeviceId
	(*JobDeviceId)(nil),                                               // 3: io.clbs.openhes.pbapi.JobDeviceId
	(*pbdrivermodels.JobSettings)(nil),                                // 4: io.clbs.openhes.pbdriver.JobSettings
	(*pbdrivermodels.JobAction)(nil),                                  // 5: io.clbs.openhes.pbdriver.JobAction
	(*pbtaskmastermodels.JobDevice)(nil),                              // 6: io.clbs.openhes.pbtaskmaster.JobDevice
	(*models.ListSelector)(nil),                                       // 7: io.clbs.openhes.models.ListSelector
	(*wrapperspb.StringValue)(nil),                                    // 8: google.protobuf.StringValue
	(*pbtaskmastermodels.CancelJobsRequest)(nil),                      // 9: io.clbs.openhes.pbtaskmaster.CancelJobsRequest
	(*pbdeviceregistrymodels.CreateCommunicationUnitRequest)(nil),     // 10: io.clbs.openhes.pbdeviceregistry.CreateCommunicationUnitRequest
	(*pbdeviceregistrymodels.CreateDeviceRequest)(nil),                // 11: io.clbs.openhes.pbdeviceregistry.CreateDeviceRequest
	(*pbdeviceregistrymodels.SetDeviceCommunicationUnitsRequest)(nil), // 12: io.clbs.openhes.pbdeviceregistry.SetDeviceCommunicationUnitsRequest
	(*pbdeviceregistrymodels.CreateDeviceGroupRequest)(nil),           // 13: io.clbs.openhes.pbdeviceregistry.CreateDeviceGroupRequest
	(*pbdeviceregistrymodels.AddDevicesToGroupRequest)(nil),           // 14: io.clbs.openhes.pbdeviceregistry.AddDevicesToGroupRequest
	(*pbdeviceregistrymodels.RemoveDevicesFromGroupRequest)(nil),      // 15: io.clbs.openhes.pbdeviceregistry.RemoveDevicesFromGroupRequest
	(*pbdeviceregistrymodels.SetModemPoolRequest)(nil),                // 16: io.clbs.openhes.pbdeviceregistry.SetModemPoolRequest
	(*pbdeviceregistrymodels.SetModemRequest)(nil),                    // 17: io.clbs.openhes.pbdeviceregistry.SetModemRequest
	(*emptypb.Empty)(nil),                                             // 18: google.protobuf.Empty
	(*pbtaskmastermodels.SystemConfig)(nil),                           // 19: io.clbs.openhes.pbtaskmaster.SystemConfig
	(*pbdataproxymodels.ListOfBulk)(nil),                              // 20: io.clbs.openhes.pbdataproxy.ListOfBulk
	(*pbdataproxymodels.Bulk)(nil),                                    // 21: io.clbs.openhes.pbdataproxy.Bulk
	(*pbdataproxymodels.BulkJob)(nil),                                 // 22: io.clbs.openhes.pbdataproxy.BulkJob
	(*pbdriveroperatormodels.ListOfDriverInfo)(nil),                   // 23: io.clbs.openhes.pbdriveroperator.ListOfDriverInfo
	(*pbdrivermodels.DriverTemplates)(nil),                            // 24: io.clbs.openhes.pbdriver.DriverTemplates
	(*pbdeviceregistrymodels.ListOfCommunicationUnitSpec)(nil),        // 25: io.clbs.openhes.pbdeviceregistry.ListOfCommunicationUnitSpec
	(*pbdeviceregistrymodels.CommunicationUnitSpec)(nil),              // 26: io.clbs.openhes.pbdeviceregistry.CommunicationUnitSpec
	(*pbdeviceregistrymodels.DeviceSpec)(nil),                         // 27: io.clbs.openhes.pbdeviceregistry.DeviceSpec
	(*pbdrivermodels.ListOfConnectionInfo)(nil),                       // 28: io.clbs.openhes.pbdriver.ListOfConnectionInfo
	(*pbdeviceregistrymodels.GetDeviceGroupsResponse)(nil),            // 29: io.clbs.openhes.pbdeviceregistry.GetDeviceGroupsResponse
	(*pbdeviceregistrymodels.GetDeviceGroupResponse)(nil),             // 30: io.clbs.openhes.pbdeviceregistry.GetDeviceGroupResponse
	(*pbdeviceregistrymodels.GetModemPoolsResponse)(nil),              // 31: io.clbs.openhes.pbdeviceregistry.GetModemPoolsResponse
	(*pbdeviceregistrymodels.GetModemPoolResponse)(nil),               // 32: io.clbs.openhes.pbdeviceregistry.GetModemPoolResponse
}
var file_pbapi_proto_depIdxs = []int32{
	2,  // 0: io.clbs.openhes.pbapi.PublicCreateBulkRequest.devices:type_name -> io.clbs.openhes.pbapi.ListOfJobDeviceId
	1,  // 1: io.clbs.openhes.pbapi.PublicCreateBulkRequest.custom_devices:type_name -> io.clbs.openhes.pbapi.ListOfJobDevice
	4,  // 2: io.clbs.openhes.pbapi.PublicCreateBulkRequest.settings:type_name -> io.clbs.openhes.pbdriver.JobSettings
	5,  // 3: io.clbs.openhes.pbapi.PublicCreateBulkRequest.actions:type_name -> io.clbs.openhes.pbdriver.JobAction
	6,  // 4: io.clbs.openhes.pbapi.ListOfJobDevice.list:type_name -> io.clbs.openhes.pbtaskmaster.JobDevice
	3,  // 5: io.clbs.openhes.pbapi.ListOfJobDeviceId.list:type_name -> io.clbs.openhes.pbapi.JobDeviceId
	0,  // 6: io.clbs.openhes.pbapi.ApiService.CreateBulk:input_type -> io.clbs.openhes.pbapi.PublicCreateBulkRequest
	7,  // 7: io.clbs.openhes.pbapi.ApiService.ListBulks:input_type -> io.clbs.openhes.models.ListSelector
	8,  // 8: io.clbs.openhes.pbapi.ApiService.GetBulk:input_type -> google.protobuf.StringValue
	8,  // 9: io.clbs.openhes.pbapi.ApiService.GetBulkJob:input_type -> google.protobuf.StringValue
	8,  // 10: io.clbs.openhes.pbapi.ApiService.CancelBulk:input_type -> google.protobuf.StringValue
	9,  // 11: io.clbs.openhes.pbapi.ApiService.CancelJobs:input_type -> io.clbs.openhes.pbtaskmaster.CancelJobsRequest
	7,  // 12: io.clbs.openhes.pbapi.ApiService.ListDrivers:input_type -> io.clbs.openhes.models.ListSelector
	8,  // 13: io.clbs.openhes.pbapi.ApiService.GetDriverTemplates:input_type -> google.protobuf.StringValue
	10, // 14: io.clbs.openhes.pbapi.ApiService.CreateCommunicationUnit:input_type -> io.clbs.openhes.pbdeviceregistry.CreateCommunicationUnitRequest
	7,  // 15: io.clbs.openhes.pbapi.ApiService.ListCommunicationUnit:input_type -> io.clbs.openhes.models.ListSelector
	8,  // 16: io.clbs.openhes.pbapi.ApiService.GetCommunicationUnit:input_type -> google.protobuf.StringValue
	11, // 17: io.clbs.openhes.pbapi.ApiService.CreateDevice:input_type -> io.clbs.openhes.pbdeviceregistry.CreateDeviceRequest
	7,  // 18: io.clbs.openhes.pbapi.ApiService.ListDevices:input_type -> io.clbs.openhes.models.ListSelector
	8,  // 19: io.clbs.openhes.pbapi.ApiService.GetDevice:input_type -> google.protobuf.StringValue
	12, // 20: io.clbs.openhes.pbapi.ApiService.SetDeviceCommunicationUnits:input_type -> io.clbs.openhes.pbdeviceregistry.SetDeviceCommunicationUnitsRequest
	8,  // 21: io.clbs.openhes.pbapi.ApiService.GetDevicesCommunicationUnits:input_type -> google.protobuf.StringValue
	13, // 22: io.clbs.openhes.pbapi.ApiService.CreateDeviceGroup:input_type -> io.clbs.openhes.pbdeviceregistry.CreateDeviceGroupRequest
	7,  // 23: io.clbs.openhes.pbapi.ApiService.ListDeviceGroups:input_type -> io.clbs.openhes.models.ListSelector
	8,  // 24: io.clbs.openhes.pbapi.ApiService.GetDeviceGroup:input_type -> google.protobuf.StringValue
	14, // 25: io.clbs.openhes.pbapi.ApiService.AddDevicesToGroup:input_type -> io.clbs.openhes.pbdeviceregistry.AddDevicesToGroupRequest
	15, // 26: io.clbs.openhes.pbapi.ApiService.RemoveDevicesFromGroup:input_type -> io.clbs.openhes.pbdeviceregistry.RemoveDevicesFromGroupRequest
	7,  // 27: io.clbs.openhes.pbapi.ApiService.ListModemPools:input_type -> io.clbs.openhes.models.ListSelector
	8,  // 28: io.clbs.openhes.pbapi.ApiService.GetModemPool:input_type -> google.protobuf.StringValue
	16, // 29: io.clbs.openhes.pbapi.ApiService.CreateModemPool:input_type -> io.clbs.openhes.pbdeviceregistry.SetModemPoolRequest
	16, // 30: io.clbs.openhes.pbapi.ApiService.UpdateModemPool:input_type -> io.clbs.openhes.pbdeviceregistry.SetModemPoolRequest
	8,  // 31: io.clbs.openhes.pbapi.ApiService.DeleteModemPool:input_type -> google.protobuf.StringValue
	17, // 32: io.clbs.openhes.pbapi.ApiService.CreateModem:input_type -> io.clbs.openhes.pbdeviceregistry.SetModemRequest
	17, // 33: io.clbs.openhes.pbapi.ApiService.UpdateModem:input_type -> io.clbs.openhes.pbdeviceregistry.SetModemRequest
	8,  // 34: io.clbs.openhes.pbapi.ApiService.DeleteModem:input_type -> google.protobuf.StringValue
	18, // 35: io.clbs.openhes.pbapi.ApiService.GetConfig:input_type -> google.protobuf.Empty
	19, // 36: io.clbs.openhes.pbapi.ApiService.SetConfig:input_type -> io.clbs.openhes.pbtaskmaster.SystemConfig
	18, // 37: io.clbs.openhes.pbapi.ApiService.CreateBulk:output_type -> google.protobuf.Empty
	20, // 38: io.clbs.openhes.pbapi.ApiService.ListBulks:output_type -> io.clbs.openhes.pbdataproxy.ListOfBulk
	21, // 39: io.clbs.openhes.pbapi.ApiService.GetBulk:output_type -> io.clbs.openhes.pbdataproxy.Bulk
	22, // 40: io.clbs.openhes.pbapi.ApiService.GetBulkJob:output_type -> io.clbs.openhes.pbdataproxy.BulkJob
	18, // 41: io.clbs.openhes.pbapi.ApiService.CancelBulk:output_type -> google.protobuf.Empty
	18, // 42: io.clbs.openhes.pbapi.ApiService.CancelJobs:output_type -> google.protobuf.Empty
	23, // 43: io.clbs.openhes.pbapi.ApiService.ListDrivers:output_type -> io.clbs.openhes.pbdriveroperator.ListOfDriverInfo
	24, // 44: io.clbs.openhes.pbapi.ApiService.GetDriverTemplates:output_type -> io.clbs.openhes.pbdriver.DriverTemplates
	18, // 45: io.clbs.openhes.pbapi.ApiService.CreateCommunicationUnit:output_type -> google.protobuf.Empty
	25, // 46: io.clbs.openhes.pbapi.ApiService.ListCommunicationUnit:output_type -> io.clbs.openhes.pbdeviceregistry.ListOfCommunicationUnitSpec
	26, // 47: io.clbs.openhes.pbapi.ApiService.GetCommunicationUnit:output_type -> io.clbs.openhes.pbdeviceregistry.CommunicationUnitSpec
	18, // 48: io.clbs.openhes.pbapi.ApiService.CreateDevice:output_type -> google.protobuf.Empty
	27, // 49: io.clbs.openhes.pbapi.ApiService.ListDevices:output_type -> io.clbs.openhes.pbdeviceregistry.DeviceSpec
	27, // 50: io.clbs.openhes.pbapi.ApiService.GetDevice:output_type -> io.clbs.openhes.pbdeviceregistry.DeviceSpec
	18, // 51: io.clbs.openhes.pbapi.ApiService.SetDeviceCommunicationUnits:output_type -> google.protobuf.Empty
	28, // 52: io.clbs.openhes.pbapi.ApiService.GetDevicesCommunicationUnits:output_type -> io.clbs.openhes.pbdriver.ListOfConnectionInfo
	18, // 53: io.clbs.openhes.pbapi.ApiService.CreateDeviceGroup:output_type -> google.protobuf.Empty
	29, // 54: io.clbs.openhes.pbapi.ApiService.ListDeviceGroups:output_type -> io.clbs.openhes.pbdeviceregistry.GetDeviceGroupsResponse
	30, // 55: io.clbs.openhes.pbapi.ApiService.GetDeviceGroup:output_type -> io.clbs.openhes.pbdeviceregistry.GetDeviceGroupResponse
	18, // 56: io.clbs.openhes.pbapi.ApiService.AddDevicesToGroup:output_type -> google.protobuf.Empty
	18, // 57: io.clbs.openhes.pbapi.ApiService.RemoveDevicesFromGroup:output_type -> google.protobuf.Empty
	31, // 58: io.clbs.openhes.pbapi.ApiService.ListModemPools:output_type -> io.clbs.openhes.pbdeviceregistry.GetModemPoolsResponse
	32, // 59: io.clbs.openhes.pbapi.ApiService.GetModemPool:output_type -> io.clbs.openhes.pbdeviceregistry.GetModemPoolResponse
	18, // 60: io.clbs.openhes.pbapi.ApiService.CreateModemPool:output_type -> google.protobuf.Empty
	18, // 61: io.clbs.openhes.pbapi.ApiService.UpdateModemPool:output_type -> google.protobuf.Empty
	18, // 62: io.clbs.openhes.pbapi.ApiService.DeleteModemPool:output_type -> google.protobuf.Empty
	18, // 63: io.clbs.openhes.pbapi.ApiService.CreateModem:output_type -> google.protobuf.Empty
	18, // 64: io.clbs.openhes.pbapi.ApiService.UpdateModem:output_type -> google.protobuf.Empty
	18, // 65: io.clbs.openhes.pbapi.ApiService.DeleteModem:output_type -> google.protobuf.Empty
	19, // 66: io.clbs.openhes.pbapi.ApiService.GetConfig:output_type -> io.clbs.openhes.pbtaskmaster.SystemConfig
	18, // 67: io.clbs.openhes.pbapi.ApiService.SetConfig:output_type -> google.protobuf.Empty
	37, // [37:68] is the sub-list for method output_type
	6,  // [6:37] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_pbapi_proto_init() }
func file_pbapi_proto_init() {
	if File_pbapi_proto != nil {
		return
	}
	file_pbapi_proto_msgTypes[0].OneofWrappers = []any{
		(*publicCreateBulkRequest_Devices)(nil),
		(*publicCreateBulkRequest_CustomDevices)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbapi_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pbapi_proto_goTypes,
		DependencyIndexes: file_pbapi_proto_depIdxs,
		MessageInfos:      file_pbapi_proto_msgTypes,
	}.Build()
	File_pbapi_proto = out.File
	file_pbapi_proto_rawDesc = nil
	file_pbapi_proto_goTypes = nil
	file_pbapi_proto_depIdxs = nil
}
