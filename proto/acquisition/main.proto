// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.models.acquisition;

option go_package = "github.com/cybroslabs/hes-2-apis/gen/go/acquisition";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "common/metadata.proto";
import "acquisition/shared.proto";

// Communication Unit specification.

message CreateCommunicationUnitRequest {
    CommunicationUnitSpec spec     = 1 [features.field_presence = LEGACY_REQUIRED];  // The communication unit specification.
    common.MetadataFields metadata = 2;                                              // The metadata fields.
}

message ListOfCommunicationUnit {
    repeated CommunicationUnit items = 1;  // The communication unit specification.
}

message CommunicationUnit {
    reserved 2;                                                                      // reserved for status
    CommunicationUnitSpec spec     = 1 [features.field_presence = LEGACY_REQUIRED];  // The communication unit specification.
    common.MetadataFields metadata = 3;                                              // The metadata fields.
}

message CommunicationUnitSpec {
    string external_id             = 1;  // The external identifier of the communication unit.
    ConnectionInfo connection_info = 2;  // The connection info.
}

// Device specification.

message CreateDeviceRequest {
    DeviceSpec spec                = 1 [features.field_presence = LEGACY_REQUIRED];  // The device specification.
    common.MetadataFields metadata = 2;                                              // The metadata fields.
}

message ListOfDevice {
    repeated Device items = 1;  // The list of devices.
}

message Device {
    reserved 2;                                                                      // reserved for status
    DeviceSpec spec                = 1 [features.field_presence = LEGACY_REQUIRED];  // The device specification.
    common.MetadataFields metadata = 3;                                              // The metadata fields.
}

// Device group specification.

message CreateDeviceGroupRequest {
    DeviceGroupSpec spec           = 1 [features.field_presence = LEGACY_REQUIRED];  // The device group specification.
    common.MetadataFields metadata = 2;                                              // The metadata fields.
}

message ListOfDeviceGroup {
    repeated DeviceGroup items = 1;  // The list of device groups.
}

message DeviceGroup {
    DeviceGroupSpec spec           = 1 [features.field_presence = LEGACY_REQUIRED];  // The device group specification.
    DeviceGroupStatus status       = 2;                                              // The device group status.
    common.MetadataFields metadata = 3;                                              // The metadata fields.
}

message DeviceGroupSpec {
    string external_id = 2;  // The external identifier of the communication unit.
}

message DeviceGroupStatus {
    repeated string device_id = 4;  // The list of device identifiers that are part of the group.
}

// Device#CU specification.

message SetDeviceCommunicationUnitsRequest {
    string device_id                                     = 1;  // The unique identifier of the device.
    repeated DeviceCommunicationUnit communication_units = 2;  // The list of linked communication units.
}

// Device#Group specification.

message AddDevicesToGroupRequest {
    string group_id           = 1;  // The unique identifier of the device group.
    repeated string device_id = 2;  // The unique identifier of the device.
}

message RemoveDevicesFromGroupRequest {
    string group_id           = 1;  // The unique identifier of the device group.
    repeated string device_id = 2;  // The unique identifier of the device.
}

// Bulk specification.

message CreateBulkRequest {
    BulkSpec spec                  = 1 [features.field_presence = LEGACY_REQUIRED];  // The bulk-job spec.
    common.MetadataFields metadata = 2;                                              // The metadata fields.
}

message ListOfBulk {
    repeated Bulk items = 1;  // The list of bulks.
}

message Bulk {
    BulkSpec spec                  = 1 [features.field_presence = LEGACY_REQUIRED];  // The bulk-job spec.
    BulkStatus status              = 2;                                              // The bulk-job status/data.
    common.MetadataFields metadata = 3;                                              // The metadata fields.
}

message BulkSpec {
    // @gqltype: UUID
    string correlation_id = 2;  // The correlation identifier, e.g. to define relation to non-homogenous group.
    string driver_type    = 3;  // The device (driver) type.
    oneof device {
        ListOfJobDeviceId devices      = 4;  // The list of devices in the bulk.
        ListOfJobDevice custom_devices = 5;  // The list of custom devices in the bulk.
    }
    JobSettings settings       = 6;  // The bulk-shared job settings.
    repeated JobAction actions = 7;  // The list actions to be executed.
    string webhook_url         = 8;  // The webhook URL to call when the bulk is completed.
}

message BulkStatus {
    BulkStatusCode status = 1;  // The job status.
    repeated BulkJob jobs = 2;  // The list of job statuses.
}

// Modem Pool specification.

message SetModemPoolRequest {
    reserved 2;                                                                      // reserved for status
    ModemPoolSpec spec             = 1 [features.field_presence = LEGACY_REQUIRED];  // The modem pool specification.
    common.MetadataFields metadata = 3;                                              // The metadata fields.
}

message ListOfModemPool {
    repeated ModemPool items = 1;  // The list of modem pools.
}

message ModemPoolSpec {
}

message ModemPoolStatus {
    repeated ModemInfo modems = 1;  // The list of modems in the pool.
}

message ModemPool {
    ModemPoolSpec spec             = 1 [features.field_presence = LEGACY_REQUIRED];  // The modem pool specification.
    ModemPoolStatus status         = 2;                                              // The modem pool status.
    common.MetadataFields metadata = 3;                                              // The metadata fields.
}

// Modem specification.

message SetModemRequest {
    string pool_id  = 1;  // The modem pool identifier, required for update operation.
    ModemInfo modem = 2;  // The modem specification.
}

// Driver specification.

message SetDriver {
    reserved 2, 3;                                                    // reserved for status, metadata
    DriverSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];  // The driver specification.
}

message ListOfDriver {
    repeated Driver items = 1;  // The list of drivers.
}

message Driver {
    reserved 2, 3;                                                    // reserved for status, metadata
    DriverSpec spec = 1 [features.field_presence = LEGACY_REQUIRED];  // The driver specification.
}

message DriverSpec {
    // The driver version. The format is not defined. The driver itself is versioned by the docker image tags so this value shall be either the same (set during the image build) or any useful user-readable version string.
    string version = 1;
    // The port the driver's gRPC will listen on.
    uint32 listening_port = 2;
    // The technical/internal ID of the driver.
    string driver_type = 3;
    // The maximum number of concurrent jobs the driver can handle. The value 0 is not allowed, the maximum number respect typical_mem_usage not to overgrow the memory resources!
    int32 max_concurrent_jobs = 4;
    // The maximum cascade depth the driver can handle. Number 1 means that the driver cannot handle cascading jobs, 2 means that the driver can handle cascading jobs with one level of depth, etc.
    // The value 0 means that the driver can handle any number of cascading jobs.
    uint32 max_cascade_depth = 5;
    // The typical memory usage of the driver in MB.
    int32 typical_mem_usage = 6;
    // The connection and action templates.
    DriverTemplates templates = 7;
    // The display name of the driver. Must be in format '<manufacturer> <device_type> [<device_type_version>]'.
    // It must respect upper/lower characters.
    // The generic drivers, such as 'cybros labs generic', must be named as '<driver_company_name> generic'.
    //
    // Examples: 'Addax NP73E', 'cybros labs generic', 'Landis+Gyr S650 v2'
    string display_name = 8;
}
