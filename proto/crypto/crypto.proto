// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.models.crypto;

option go_package = "github.com/cybroslabs/hes-2-apis/gen/go/crypto";

// DLMS crypto mode
enum AuthenticatedEncryption {
    AE_NONE        = 0;
    AE_AES_GCM_128 = 1;
    AE_AES_GCM_256 = 2;
}

enum DigitalSignature {
    DS_ECDSA_NONE  = 0;
    DS_ECDSA_P_256 = 1;
    DS_ECDSA_P_384 = 2;
}

enum KeyAgreement {
    KA_NONE       = 0;
    KA_ECDH_P_256 = 1;
    KA_ECDH_P_384 = 2;
}

enum Hash {
    HASH_NONE = 0;
    // MD5 hash.
    // In standard DLMS:
    //   MD5(StoC || HLS Secret)
    HASH_MD5 = 1;
    // SHA1 hash.
    // In standard DLMS:
    //   SHA1(StoC || HLS Secret)
    HASH_SHA_1 = 2;
    // SHA1 hash.
    // In standard DLMS:
    //   SC || IC || GMAC(SC || AK || StoC)
    HASH_GMAC = 3;
    // SHA256 hash.
    // In standard DLMS:
    //   SHA-256(HLS_Secret || SystemTitle-C || SystemTitle-S || StoC || CtoS)
    HASH_SHA_256 = 4;
    // ECDSA signature.
    // In standard DLMS:
    //   ECDSA(SystemTitle-C || SystemTitle-S || StoC || CtoS)
    HASH_ECDSA = 5;
}

enum HashDirection {
    // The hash is calculated for requests that go from client to the server (CtoS, when the client starts the key exchange).
    CLIENT_TO_SERVER = 0;
    // The hash is calculated for requests that go from server to the client (StoC, when the server responds to the client's key exchange request).
    SERVER_TO_CLIENT = 1;
}

// Sub-message containing job parameters
message DlmsIn {
    uint64 id = 1;  // The request ID.
    oneof request {
        DlmsInit init                       = 2;  // The initialize request. It can be called only once, as the first request.
        DlmsSetServerInfo setup             = 3;  // The setup server into request. This message shall be called when the data known.
        DlmsHash hash                       = 4;  // The hash request.
        DlmsEncrypt encrypt                 = 5;  // The encryption request.
        DlmsDecrypt decrypt                 = 6;  // The decryption request.
        DlmsAuthEncodeResponse auth_reponse = 7;  // The authentication response.
        DlmsAuthVerify auth_verify          = 8;  // The authentication verify.
    }
}

message DlmsInit {
    AuthenticatedEncryption encryption = 1;  // The encryption mode.
    DigitalSignature signature         = 2;  // The digital signature mode.
    string driver_id                   = 5;  // The driver identifier.
    string serial_number               = 6;  // The serial number of the device.
    string access_level                = 7;  // The access level.
    bytes system_title_c               = 8;  // The client system-title.
    bytes c_to_s                       = 9;  // The client-to-server data.
}

message DlmsSetServerInfo {
    bytes system_title_s = 5;  // The server system-title.
    bytes s_to_c         = 6;  // The server-to-client data.
}

message DlmsOut {
    uint64 id          = 1;  // The request ID.
    ErrorMessage error = 2;  // The error message, if any.
    bytes data         = 3;  // The result of the operation.
}

message DlmsEncrypt {
    uint32 frame_counter    = 1;  // The frame counter.
    uint32 security_control = 2;  // The security control. Only lowest 8-bites (values 0-255) are used, upper 24-bites are ignored.
    bytes data              = 3;  // The data to be encrypted.
}

message DlmsDecrypt {
    uint32 frame_counter    = 1;  // The frame counter.
    uint32 security_control = 2;  // The security control. Only lowest 8-bites (values 0-255) are used, upper 24-bites are ignored.
    bytes data              = 3;  // The data to be decrypted.
}

message DlmsHash {
    HashDirection direction = 1;  // The hash direction.
    Hash mode               = 2;  // The hash mode.
    uint32 frame_counter    = 3;  // The frame counter. Only lowest 8-bites (values 0-255) are used, upper 24-bites are ignored.
    uint32 security_control = 4;  // The security control.
}

message DlmsAuthEncodeResponse {
    uint32 frame_counter = 1;  // The frame counter. Only lowest 8-bites (values 0-255) are used, upper 24-bites are ignored.
}

message DlmsAuthVerify {
    uint32 frame_counter = 1;  // The frame counter. Only lowest 8-bites (values 0-255) are used, upper 24-bites are ignored.
    bytes data           = 2;  // The reference (recevied) data to be verified.
}

message ErrorMessage {
    // The error code, use standard codes package, see https://pkg.go.dev/google.golang.org/grpc/codes#pkg-constants.
    uint32 code = 1;
    // The error message to be witten to the log.
    string message = 2;
}
