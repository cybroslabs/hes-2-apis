// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.services.svcourooperator;

option go_package = "github.com/cybroslabs/hes-2-apis/gen/go/services/svcourooperator";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "acquisition/internal.proto";
import "acquisition/main.proto";
import "system/main.proto";

// The Ouro Operator service definition.
// Those are the gRPC services that the Ouro Operator provides for other components.
service OuroOperatorService {
    // The method called by the RestApi to get the list of drivers.
    rpc ListDrivers(google.protobuf.Empty) returns (io.clbs.openhes.models.acquisition.ListOfDriver);
    // The method called by the Driver to set the driver templates. The parameter contains the driver templates.
    rpc SetDriver(io.clbs.openhes.models.acquisition.Driver) returns (google.protobuf.Empty);
    // The method called by the RestApi to get the driver templates.
    rpc GetDriver(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.Driver);

    // The method called by the Taskmaster to set the driver scale.
    rpc SetDriverScale(io.clbs.openhes.models.acquisition.SetDriverScaleRequest) returns (google.protobuf.Empty);
    // The method called by the Taskmaster to get the driver scale.
    rpc GetDriverScale(io.clbs.openhes.models.acquisition.GetDriverScaleRequest) returns (google.protobuf.UInt32Value);

    // Gets the application configuration, stored in the Kubernetes.
    rpc GetApplicationConfig(google.protobuf.Empty) returns (io.clbs.openhes.models.system.ApplicationConfig);
    // Updates the application configuration. The missing fields in the request will be kept unchanged.
    rpc UpdateApplicationConfig(io.clbs.openhes.models.system.ApplicationConfig) returns (google.protobuf.Empty);
    // Synchronizes the application's component configuration. The input value shall contain all the default values and also all known keys (with null values).
    // The output value will contain currently set values inlcuding detauls which are not set.
    // The missing values in the defaults will be deleted if has been set previously in the application configuration.
    rpc SynchronizeComponentConfig(io.clbs.openhes.models.system.ComponentConfigDescriptor) returns (io.clbs.openhes.models.system.ComponentConfig);

    // The method called by the DeviceRegistry to start the driver in upgrade mode. It will provide structure upgrade between the driver versions.
    // The driver is started as Kubernetes job and ends when all the structures are upgraded; which is controlled by the DeviceRegistry.
    rpc StartUpgrade(io.clbs.openhes.models.acquisition.StartUpgradeRequest) returns (google.protobuf.Empty);
}
