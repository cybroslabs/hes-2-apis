// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.services.svcdataproxy;
option go_package = "github.com/cybroslabs/hes-2-apis/gen/go/services/svcdataproxy";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";
import "acquisition/main.proto";
import "acquisition/shared.proto";
import "common/fields.proto";
import "system/main.proto";

// The Dataproxy related service definition.
service DataproxyService {
    // @group: Bulks
    // Retrieves the list of bulks. The list of bulks is paginated. The page size is defined in the request. The page number is 0-based.
    // The list contains both the proxy bulks and the regular bulks.
    rpc ListBulks(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfBulk);
    // @group: Bulks
    // Retrieves the list of jobs. The list of jobs is paginated. The page size is defined in the request. The page number is 0-based.
    // The listing can be used for both proxy bulks and regular bulks.
    rpc ListBulkJobs(io.clbs.openhes.models.acquisition.ListBulkJobsRequest) returns (io.clbs.openhes.models.acquisition.ListOfBulkJob);
    // @group: Bulks
    // Retrieves the job status. It can be used for jobs related to both proxy and regular bulks.
    rpc GetBulkJob(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.BulkJob);
    // @group: Bulks
    // Cancels the bulk of jobs. It can be used for both proxy and regular bulks.
    rpc CancelBulk(google.protobuf.StringValue) returns (google.protobuf.Empty);

    // @group: Bulks
    // Starts a new proxy bulk. The proxy bolk is a collection of jobs where each job represents a single device. Devices must be fully defined in the request.
    rpc CreateProxyBulk(io.clbs.openhes.models.acquisition.CreateProxyBulkRequest) returns (google.protobuf.StringValue);
    // @group: Bulks
    // Retrieves the proxy bulk info and status.
    rpc GetProxyBulk(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.ProxyBulk);

    // @group: Bulks
    // Starts a new bulk. The bulk is a collection of jobs where each jobs represents a single device. Devices that are part of the bulk are identified either as a list of registered device identifiers or as a group identifier.
    rpc CreateBulk(io.clbs.openhes.models.acquisition.CreateBulkRequest) returns (google.protobuf.StringValue);
    // @group: Bulks
    // Retrieves the bulk info and status.
    rpc GetBulk(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.Bulk);

    // // Cancels the job(s) identified by the job identifier(s).
    // rpc CancelJobs(google.protobuf.ListValue) returns (google.protobuf.Empty);

    // The method called by the RestApi to get the system configuration.
    rpc GetConfig(google.protobuf.Empty) returns (io.clbs.openhes.models.system.SystemConfig);
    // The method called by the RestApi to set the system configuration.
    rpc SetConfig(io.clbs.openhes.models.system.SystemConfig) returns (google.protobuf.Empty);

    // @group: Meter Data
    // The method to stream out register-typed meter data.
    rpc GetMeterDataRegisters(io.clbs.openhes.models.acquisition.GetMeterDataRequest) returns (stream io.clbs.openhes.models.acquisition.RegisterValues);

    // @group: Meter Data
    // The method to stream out profile-typed meter data.
    rpc GetMeterDataProfiles(io.clbs.openhes.models.acquisition.GetMeterDataRequest) returns (stream io.clbs.openhes.models.acquisition.ProfileValues);

    // @group: Meter Data
    // The method to stream out profile-typed meter data.
    rpc GetMeterDataIrregularProfiles(io.clbs.openhes.models.acquisition.GetMeterDataRequest) returns (stream io.clbs.openhes.models.acquisition.IrregularProfileValues);

    // @group: Meter Events
    // The method to stream out profile-typed meter data.
    rpc GetMeterEvents(io.clbs.openhes.models.acquisition.GetMeterEventsRequest) returns (stream io.clbs.openhes.models.acquisition.EventRecords);

    // @group: Time-Of-Use Tables
    // The method to create a new time-of-use table.
    rpc CreateTimeOfUseTable(io.clbs.openhes.models.acquisition.CreateTimeOfUseTableRequest) returns (google.protobuf.StringValue);
    // @group: Time-Of-Use Tables
    // The method to get the list of time-of-use tables.
    rpc ListTimeOfUseTables(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfTimeOfUseTable);
    // @group: Time-Of-Use Tables
    // The method to get the time-of-use table.
    rpc GetTimeOfUseTable(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.TimeOfUseTable);
    // @group: Time-Of-Use Tables
    // The method to update the time-of-use table.
    rpc UpdateTimeOfUseTable(io.clbs.openhes.models.acquisition.TimeOfUseTable) returns (google.protobuf.Empty);
    // @group: Time-Of-Use Tables
    // The method to delete the time-of-use table.
    rpc DeleteTimeOfUseTable(google.protobuf.StringValue) returns (google.protobuf.Empty);
}
