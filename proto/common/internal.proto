// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.models.common;

option go_package = "github.com/cybroslabs/ouro-api-shared/gen/go/common";

import "common/fields.proto";
import "common/objects.proto";

// The request to set the managed fields of the resource.
message SetManagedFieldsRequest {
    map<string, common.FieldValue> managed_fields = 1;  // The fields to set for the resource(s).
    // The selector to identify the resource(s) for which the managed fields are set.
    oneof selector {
        SetManagedFieldsSelectorGeneric generic = 2;  // The generic selector, it enables to use the object type and id to identify the resource for which the managed fields are set.
        SetManagedFieldsSelectorDevice device   = 3;  // The selector supported by the ouro-core-deviceregistry, it enables to use CommunicationUnit or Device attributes to identify the resource(s) for which the managed fields are set.
    }
}

message SetManagedFieldsSelectorGeneric {
    ObjectType object_type = 1;  // The type of the managed fields update. It defines the resource type for which the managed fields are set.
    string id              = 2;  // The UUID of the resource. It serves as the unique identifier of the resource. It's immutable and typically auto-generated during Create operations.
    int32 generation       = 3;  // The generation of the resource, optional. If set then it must match the current generation of the resource, otherwise the data are overwritten without checking the generation.
}

message SetManagedFieldsSelectorDevice {
    map<string, common.FieldValue> filter = 1;  // The selector filter to identify the resource(s) for which the managed fields are set. The key is the attribute name, the value is the attribute value. If the attribute data type does not match then the method won't set anything.
}

message FieldDescriptorInternal {
    string group                     = 1;  // The group identifier of the field descriptors, either object type or driver type for example. The obsolete field descriptors are detected and removed based on this field.
    string db_path                   = 2;  // The database path of the field, used for JSONB columns.
    FieldDescriptor field_descriptor = 3;  // The field descriptor of the field, used for JSONB columns.
}

message UpdateFieldDescriptorsRequest {
    repeated FieldDescriptorInternal items = 1;  // The list of field descriptors.
    bool cleanup_missing                   = 2;  // If true, it will remove all field descriptors that are not present in the request for given component type.
}

message ListOfFieldDescriptorInternal {
    repeated FieldDescriptorInternal items = 1;  // The list of field descriptors.
}

message ListOfDeviceKey {
    string driver_type    = 1;  // The driver type for which the device keys are defined. It is used to identify the device keys for a specific driver.
    repeated string items = 2;  // The list of device keys. The key can be any byte-array like unique physical identifier of the device (e.g. system-title, MAC address, etc.) which must be unique for give driver type.
}

message MapDeviceKeyXId {
    // The map of device keys to device IDs. The key is the device key, the value is the device ID. The keys are taken from the ListOfDeviceKey message.
    // The values are x-device-identifiers, which are unique within the system and can be used to identify devices in topology, neighbourds table, unknown devices etc.
    map<string, int64> items = 1;
}