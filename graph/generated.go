// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/cybroslabs/hes-2-apis/graph/model"
	"github.com/google/uuid"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AccessLevelTemplate struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	ActionData struct {
		Billings func(childComplexity int) int
		Nodata   func(childComplexity int) int
		Profile  func(childComplexity int) int
	}

	ActionFwUpdate struct {
		Empty func(childComplexity int) int
	}

	ActionGetClock struct {
		Empty func(childComplexity int) int
	}

	ActionGetDisconnectorState struct {
		Empty func(childComplexity int) int
	}

	ActionGetEvents struct {
		From func(childComplexity int) int
		To   func(childComplexity int) int
	}

	ActionGetIrregularProfile struct {
		From func(childComplexity int) int
		To   func(childComplexity int) int
	}

	ActionGetLimiter struct {
		Empty func(childComplexity int) int
	}

	ActionGetPeriodicalProfile struct {
		From func(childComplexity int) int
		To   func(childComplexity int) int
	}

	ActionGetRegister struct {
		Empty func(childComplexity int) int
	}

	ActionGetRelayState struct {
		Empty func(childComplexity int) int
	}

	ActionGetTou struct {
		Empty func(childComplexity int) int
	}

	ActionResetBillingPeriod struct {
		Empty func(childComplexity int) int
	}

	ActionResult struct {
		ActionID func(childComplexity int) int
		Data     func(childComplexity int) int
		Status   func(childComplexity int) int
	}

	ActionSetDisconnectorState struct {
		Empty func(childComplexity int) int
	}

	ActionSetLimiter struct {
		Empty func(childComplexity int) int
	}

	ActionSetRelayState struct {
		Empty func(childComplexity int) int
	}

	ActionSetTou struct {
		Empty func(childComplexity int) int
	}

	ActionSyncClock struct {
		Empty func(childComplexity int) int
	}

	AddDevicesToGroupRequest struct {
		DeviceID func(childComplexity int) int
		GroupID  func(childComplexity int) int
	}

	ApplicationProtocolTemplate struct {
		Attributes func(childComplexity int) int
		ID         func(childComplexity int) int
		Protocol   func(childComplexity int) int
	}

	ListOfConnectionInfo struct {
		Items func(childComplexity int) int
	}

	AttributeDefinition struct {
		DefaultValue func(childComplexity int) int
		Description  func(childComplexity int) int
		Mandatory    func(childComplexity int) int
		Name         func(childComplexity int) int
		Options      func(childComplexity int) int
		Type         func(childComplexity int) int
	}

	AttributeValue struct {
		BinaryValue func(childComplexity int) int
		BoolValue   func(childComplexity int) int
		DoubleValue func(childComplexity int) int
		IntValue    func(childComplexity int) int
		StrValue    func(childComplexity int) int
	}

	BillingValue struct {
		Timestamp func(childComplexity int) int
		Unit      func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	BillingValues struct {
		Values func(childComplexity int) int
	}

	BulkJobStatus struct {
		JobID  func(childComplexity int) int
		Status func(childComplexity int) int
	}

	BulkSpec struct {
		BulkID        func(childComplexity int) int
		CorrelationID func(childComplexity int) int
		Devices       func(childComplexity int) int
		DriverType    func(childComplexity int) int
		JobActions    func(childComplexity int) int
		OrgID         func(childComplexity int) int
		Settings      func(childComplexity int) int
		UserID        func(childComplexity int) int
		WebhookURL    func(childComplexity int) int
	}

	BulkStatus struct {
		Jobs   func(childComplexity int) int
		Status func(childComplexity int) int
	}

	CancelJobsRequest struct {
		JobID func(childComplexity int) int
	}

	CommunicationTemplate struct {
		Datalinks func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	CommunicationUnitSpec struct {
		ConnectionInfo func(childComplexity int) int
		ExternalID     func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
	}

	ConnectionInfo struct {
		CustomGroupingID func(childComplexity int) int
		LinkProtocol     func(childComplexity int) int
		ModemPool        func(childComplexity int) int
		SerialOverIP     func(childComplexity int) int
		Tcpip            func(childComplexity int) int
	}

	ConnectionTypeControlledSerial struct {
		Direct func(childComplexity int) int
		Moxa   func(childComplexity int) int
	}

	ConnectionTypeDirectTcpIp struct {
		Host    func(childComplexity int) int
		Port    func(childComplexity int) int
		Timeout func(childComplexity int) int
	}

	ConnectionTypeModemPool struct {
		Modem  func(childComplexity int) int
		Number func(childComplexity int) int
		PoolID func(childComplexity int) int
	}

	ConnectionTypeSerialDirect struct {
		Host func(childComplexity int) int
		Port func(childComplexity int) int
	}

	ConnectionTypeSerialMoxa struct {
		CommandPort func(childComplexity int) int
		DataPort    func(childComplexity int) int
		Host        func(childComplexity int) int
	}

	CreateCommunicationUnitRequest struct {
		Spec func(childComplexity int) int
	}

	CreateDeviceGroupRequest struct {
		Spec func(childComplexity int) int
	}

	CreateDeviceRequest struct {
		Spec func(childComplexity int) int
	}

	DataLinkTemplate struct {
		AppProtocolRefs func(childComplexity int) int
		Attributes      func(childComplexity int) int
		LinkProtocol    func(childComplexity int) int
	}

	DeviceCommunicationUnit struct {
		AppProtocol         func(childComplexity int) int
		CommunicationUnitID func(childComplexity int) int
	}

	DeviceConnectionInfo struct {
		AppProtocol       func(childComplexity int) int
		CommunicationUnit func(childComplexity int) int
		DeviceAttributes  func(childComplexity int) int
	}

	DeviceGroupOverviewSpec struct {
		ExternalID func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
	}

	DeviceGroupSpec struct {
		DeviceID   func(childComplexity int) int
		ExternalID func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
	}

	DeviceSpec struct {
		Attributes            func(childComplexity int) int
		CommunicationUnitLink func(childComplexity int) int
		ExternalID            func(childComplexity int) int
		ID                    func(childComplexity int) int
		Name                  func(childComplexity int) int
		Timezone              func(childComplexity int) int
	}

	DriverInfo struct {
		DriverType func(childComplexity int) int
		Version    func(childComplexity int) int
	}

	DriverTemplates struct {
		AccessTemplates        func(childComplexity int) int
		ActionAttributes       func(childComplexity int) int
		ActionConstraints      func(childComplexity int) int
		AppProtocols           func(childComplexity int) int
		CommunicationTemplates func(childComplexity int) int
	}

	Empty struct {
		Empty func(childComplexity int) int
	}

	GetBulkRequest struct {
		BulkID func(childComplexity int) int
	}

	GetBulkResponse struct {
		Spec   func(childComplexity int) int
		Status func(childComplexity int) int
	}

	GetBulksResponse struct {
		Bulks func(childComplexity int) int
	}

	GetBulksReuqest struct {
		IncludeData func(childComplexity int) int
		Tfrom       func(childComplexity int) int
		Tto         func(childComplexity int) int
	}

	GetCommunicationUnitsRequest struct {
		ExternalID func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
	}

	GetCommunicationUnitsResponse struct {
		Spec func(childComplexity int) int
	}

	GetDeviceGroupResponse struct {
		Spec func(childComplexity int) int
	}

	GetDeviceGroupsResponse struct {
		Groups func(childComplexity int) int
	}

	GetDevicesCommunicationUnitsRequest struct {
		DeviceID func(childComplexity int) int
	}

	GetDevicesCommunicationUnitsResponse struct {
		Devices func(childComplexity int) int
	}

	GetDevicesRequest struct {
		ExternalID func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
	}

	GetDevicesResponse struct {
		Spec func(childComplexity int) int
	}

	GetDriversResponse struct {
		Drivers func(childComplexity int) int
		Result  func(childComplexity int) int
	}

	GetJobStatusRequest struct {
		JobID func(childComplexity int) int
	}

	GetJobStatusResponse struct {
		Status func(childComplexity int) int
	}

	GetModemPoolResponse struct {
		Modems func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	GetModemPoolsResponse struct {
		Pools func(childComplexity int) int
	}

	JobAction struct {
		ActionID             func(childComplexity int) int
		Attributes           func(childComplexity int) int
		FwUpdate             func(childComplexity int) int
		GetClock             func(childComplexity int) int
		GetDisconnectorState func(childComplexity int) int
		GetEvents            func(childComplexity int) int
		GetIrregularProfile  func(childComplexity int) int
		GetLimiter           func(childComplexity int) int
		GetPeriodicalProfile func(childComplexity int) int
		GetRegister          func(childComplexity int) int
		GetRelayState        func(childComplexity int) int
		GetTou               func(childComplexity int) int
		ResetBillingPeriod   func(childComplexity int) int
		SetDisconnectorState func(childComplexity int) int
		SetLimiter           func(childComplexity int) int
		SetRelayState        func(childComplexity int) int
		SetTou               func(childComplexity int) int
		SyncClock            func(childComplexity int) int
	}

	JobActionAttributes struct {
		Attributes func(childComplexity int) int
		Type       func(childComplexity int) int
	}

	JobActionContraints struct {
		GetRegisterTypeAttributes func(childComplexity int) int
		GetRegisterTypeName       func(childComplexity int) int
	}

	JobCustomDeviceList struct {
		List func(childComplexity int) int
	}

	JobDevice struct {
		DeviceID func(childComplexity int) int
		ID       func(childComplexity int) int
	}

	JobDeviceList struct {
		List func(childComplexity int) int
	}

	JobDevice_1 struct {
		AppProtocol      func(childComplexity int) int
		ConnectionInfo   func(childComplexity int) int
		DeviceAttributes func(childComplexity int) int
		DeviceID         func(childComplexity int) int
		ExternalID       func(childComplexity int) int
		ID               func(childComplexity int) int
		Timezone         func(childComplexity int) int
	}

	JobSettings struct {
		Attempts    func(childComplexity int) int
		DeferStart  func(childComplexity int) int
		ExpiresAt   func(childComplexity int) int
		MaxDuration func(childComplexity int) int
		Priority    func(childComplexity int) int
		RetryDelay  func(childComplexity int) int
	}

	JobStatus struct {
		AttemptsDone func(childComplexity int) int
		Code         func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		FinishedAt   func(childComplexity int) int
		Results      func(childComplexity int) int
		StartedAt    func(childComplexity int) int
		Status       func(childComplexity int) int
	}

	MeasuredValue struct {
		BoolValue        func(childComplexity int) int
		DoubleValue      func(childComplexity int) int
		Exponent         func(childComplexity int) int
		IntValue         func(childComplexity int) int
		Status           func(childComplexity int) int
		StrValue         func(childComplexity int) int
		TimestampTzValue func(childComplexity int) int
		TimestampValue   func(childComplexity int) int
	}

	ModemInfo struct {
		AtConfig       func(childComplexity int) int
		AtDial         func(childComplexity int) int
		AtDsr          func(childComplexity int) int
		AtEscape       func(childComplexity int) int
		AtHangup       func(childComplexity int) int
		AtInit         func(childComplexity int) int
		AtTest         func(childComplexity int) int
		ConnectTimeout func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		Tcpip          func(childComplexity int) int
	}

	ModemPoolSpec struct {
		Name   func(childComplexity int) int
		PoolID func(childComplexity int) int
	}

	ProfileBlok struct {
		StartTimestamp func(childComplexity int) int
		Values         func(childComplexity int) int
	}

	ProfileValues struct {
		Blocks func(childComplexity int) int
		Period func(childComplexity int) int
		Unit   func(childComplexity int) int
	}

	PublicCreateBulkRequest struct {
		Actions       func(childComplexity int) int
		CorrelationID func(childComplexity int) int
		CustomDevices func(childComplexity int) int
		Devices       func(childComplexity int) int
		DriverType    func(childComplexity int) int
		ID            func(childComplexity int) int
		Settings      func(childComplexity int) int
		WebhookURL    func(childComplexity int) int
	}

	Query struct {
		AddDevicesToGroup            func(childComplexity int) int
		CancelBulk                   func(childComplexity int) int
		CancelJobs                   func(childComplexity int) int
		CreateBulk                   func(childComplexity int) int
		CreateCommunicationUnit      func(childComplexity int) int
		CreateDevice                 func(childComplexity int) int
		CreateDeviceGroup            func(childComplexity int) int
		CreateModem                  func(childComplexity int) int
		CreateModemPool              func(childComplexity int) int
		DeleteModem                  func(childComplexity int) int
		DeleteModemPool              func(childComplexity int) int
		GetBulk                      func(childComplexity int) int
		GetBulks                     func(childComplexity int) int
		GetCommunicationUnits        func(childComplexity int) int
		GetConfig                    func(childComplexity int) int
		GetDeviceGroup               func(childComplexity int) int
		GetDeviceGroups              func(childComplexity int) int
		GetDevices                   func(childComplexity int) int
		GetDevicesCommunicationUnits func(childComplexity int) int
		GetDriverTemplates           func(childComplexity int) int
		GetDrivers                   func(childComplexity int) int
		GetJobStatus                 func(childComplexity int) int
		GetModemPool                 func(childComplexity int) int
		GetModemPools                func(childComplexity int) int
		RemoveDevicesFromGroup       func(childComplexity int) int
		SetConfig                    func(childComplexity int) int
		SetDeviceCommunicationUnits  func(childComplexity int) int
		UpdateModem                  func(childComplexity int) int
		UpdateModemPool              func(childComplexity int) int
	}

	RemoveDevicesFromGroupRequest struct {
		DeviceID func(childComplexity int) int
		GroupID  func(childComplexity int) int
	}

	SetDeviceCommunicationUnitsRequest struct {
		CommunicationUnits func(childComplexity int) int
		DeviceID           func(childComplexity int) int
	}

	SetModemPoolRequest struct {
		Name   func(childComplexity int) int
		PoolID func(childComplexity int) int
	}

	SetModemRequest struct {
		Modem  func(childComplexity int) int
		PoolID func(childComplexity int) int
	}

	StringList struct {
		Items func(childComplexity int) int
	}

	StringValue struct {
		Value func(childComplexity int) int
	}

	SystemConfig struct {
		MaxCascadeDeviceCount func(childComplexity int) int
		MaxReplicas           func(childComplexity int) int
		MaxSlotsPerDriver     func(childComplexity int) int
	}

	_mapListOfConnectionInfo struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	_mapAttributeValue struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	_mapDeviceGroupOverviewSpec struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	_mapStringList struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	_mapstring struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}
}

type QueryResolver interface {
	CreateBulk(ctx context.Context) (*model.Empty, error)
	GetBulks(ctx context.Context) (*model.GetBulksResponse, error)
	GetBulk(ctx context.Context) (*model.GetBulkResponse, error)
	GetJobStatus(ctx context.Context) (*model.GetJobStatusResponse, error)
	CancelBulk(ctx context.Context) (*model.Empty, error)
	CancelJobs(ctx context.Context) (*model.Empty, error)
	GetConfig(ctx context.Context) (*model.SystemConfig, error)
	SetConfig(ctx context.Context) (*model.Empty, error)
	CreateCommunicationUnit(ctx context.Context) (*model.Empty, error)
	GetCommunicationUnits(ctx context.Context) (*model.GetCommunicationUnitsResponse, error)
	CreateDevice(ctx context.Context) (*model.Empty, error)
	GetDevices(ctx context.Context) (*model.GetDevicesResponse, error)
	SetDeviceCommunicationUnits(ctx context.Context) (*model.Empty, error)
	GetDevicesCommunicationUnits(ctx context.Context) (*model.GetDevicesCommunicationUnitsResponse, error)
	CreateDeviceGroup(ctx context.Context) (*model.Empty, error)
	GetDeviceGroups(ctx context.Context) (*model.GetDeviceGroupsResponse, error)
	GetDeviceGroup(ctx context.Context) (*model.GetDeviceGroupResponse, error)
	AddDevicesToGroup(ctx context.Context) (*model.Empty, error)
	RemoveDevicesFromGroup(ctx context.Context) (*model.Empty, error)
	GetModemPools(ctx context.Context) (*model.GetModemPoolsResponse, error)
	GetModemPool(ctx context.Context) (*model.GetModemPoolResponse, error)
	CreateModemPool(ctx context.Context) (*model.Empty, error)
	UpdateModemPool(ctx context.Context) (*model.Empty, error)
	DeleteModemPool(ctx context.Context) (*model.Empty, error)
	CreateModem(ctx context.Context) (*model.Empty, error)
	UpdateModem(ctx context.Context) (*model.Empty, error)
	DeleteModem(ctx context.Context) (*model.Empty, error)
	GetDrivers(ctx context.Context) (*model.GetDriversResponse, error)
	GetDriverTemplates(ctx context.Context) (*model.DriverTemplates, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "AccessLevelTemplate.id":
		if e.complexity.AccessLevelTemplate.ID == nil {
			break
		}

		return e.complexity.AccessLevelTemplate.ID(childComplexity), true

	case "AccessLevelTemplate.name":
		if e.complexity.AccessLevelTemplate.Name == nil {
			break
		}

		return e.complexity.AccessLevelTemplate.Name(childComplexity), true

	case "ActionData.billings":
		if e.complexity.ActionData.Billings == nil {
			break
		}

		return e.complexity.ActionData.Billings(childComplexity), true

	case "ActionData.nodata":
		if e.complexity.ActionData.Nodata == nil {
			break
		}

		return e.complexity.ActionData.Nodata(childComplexity), true

	case "ActionData.profile":
		if e.complexity.ActionData.Profile == nil {
			break
		}

		return e.complexity.ActionData.Profile(childComplexity), true

	case "ActionFwUpdate._empty":
		if e.complexity.ActionFwUpdate.Empty == nil {
			break
		}

		return e.complexity.ActionFwUpdate.Empty(childComplexity), true

	case "ActionGetClock._empty":
		if e.complexity.ActionGetClock.Empty == nil {
			break
		}

		return e.complexity.ActionGetClock.Empty(childComplexity), true

	case "ActionGetDisconnectorState._empty":
		if e.complexity.ActionGetDisconnectorState.Empty == nil {
			break
		}

		return e.complexity.ActionGetDisconnectorState.Empty(childComplexity), true

	case "ActionGetEvents.from":
		if e.complexity.ActionGetEvents.From == nil {
			break
		}

		return e.complexity.ActionGetEvents.From(childComplexity), true

	case "ActionGetEvents.to":
		if e.complexity.ActionGetEvents.To == nil {
			break
		}

		return e.complexity.ActionGetEvents.To(childComplexity), true

	case "ActionGetIrregularProfile.from":
		if e.complexity.ActionGetIrregularProfile.From == nil {
			break
		}

		return e.complexity.ActionGetIrregularProfile.From(childComplexity), true

	case "ActionGetIrregularProfile.to":
		if e.complexity.ActionGetIrregularProfile.To == nil {
			break
		}

		return e.complexity.ActionGetIrregularProfile.To(childComplexity), true

	case "ActionGetLimiter._empty":
		if e.complexity.ActionGetLimiter.Empty == nil {
			break
		}

		return e.complexity.ActionGetLimiter.Empty(childComplexity), true

	case "ActionGetPeriodicalProfile.from":
		if e.complexity.ActionGetPeriodicalProfile.From == nil {
			break
		}

		return e.complexity.ActionGetPeriodicalProfile.From(childComplexity), true

	case "ActionGetPeriodicalProfile.to":
		if e.complexity.ActionGetPeriodicalProfile.To == nil {
			break
		}

		return e.complexity.ActionGetPeriodicalProfile.To(childComplexity), true

	case "ActionGetRegister._empty":
		if e.complexity.ActionGetRegister.Empty == nil {
			break
		}

		return e.complexity.ActionGetRegister.Empty(childComplexity), true

	case "ActionGetRelayState._empty":
		if e.complexity.ActionGetRelayState.Empty == nil {
			break
		}

		return e.complexity.ActionGetRelayState.Empty(childComplexity), true

	case "ActionGetTou._empty":
		if e.complexity.ActionGetTou.Empty == nil {
			break
		}

		return e.complexity.ActionGetTou.Empty(childComplexity), true

	case "ActionResetBillingPeriod._empty":
		if e.complexity.ActionResetBillingPeriod.Empty == nil {
			break
		}

		return e.complexity.ActionResetBillingPeriod.Empty(childComplexity), true

	case "ActionResult.action_id":
		if e.complexity.ActionResult.ActionID == nil {
			break
		}

		return e.complexity.ActionResult.ActionID(childComplexity), true

	case "ActionResult.data":
		if e.complexity.ActionResult.Data == nil {
			break
		}

		return e.complexity.ActionResult.Data(childComplexity), true

	case "ActionResult.status":
		if e.complexity.ActionResult.Status == nil {
			break
		}

		return e.complexity.ActionResult.Status(childComplexity), true

	case "ActionSetDisconnectorState._empty":
		if e.complexity.ActionSetDisconnectorState.Empty == nil {
			break
		}

		return e.complexity.ActionSetDisconnectorState.Empty(childComplexity), true

	case "ActionSetLimiter._empty":
		if e.complexity.ActionSetLimiter.Empty == nil {
			break
		}

		return e.complexity.ActionSetLimiter.Empty(childComplexity), true

	case "ActionSetRelayState._empty":
		if e.complexity.ActionSetRelayState.Empty == nil {
			break
		}

		return e.complexity.ActionSetRelayState.Empty(childComplexity), true

	case "ActionSetTou._empty":
		if e.complexity.ActionSetTou.Empty == nil {
			break
		}

		return e.complexity.ActionSetTou.Empty(childComplexity), true

	case "ActionSyncClock._empty":
		if e.complexity.ActionSyncClock.Empty == nil {
			break
		}

		return e.complexity.ActionSyncClock.Empty(childComplexity), true

	case "AddDevicesToGroupRequest.device_id":
		if e.complexity.AddDevicesToGroupRequest.DeviceID == nil {
			break
		}

		return e.complexity.AddDevicesToGroupRequest.DeviceID(childComplexity), true

	case "AddDevicesToGroupRequest.group_id":
		if e.complexity.AddDevicesToGroupRequest.GroupID == nil {
			break
		}

		return e.complexity.AddDevicesToGroupRequest.GroupID(childComplexity), true

	case "ApplicationProtocolTemplate.attributes":
		if e.complexity.ApplicationProtocolTemplate.Attributes == nil {
			break
		}

		return e.complexity.ApplicationProtocolTemplate.Attributes(childComplexity), true

	case "ApplicationProtocolTemplate.id":
		if e.complexity.ApplicationProtocolTemplate.ID == nil {
			break
		}

		return e.complexity.ApplicationProtocolTemplate.ID(childComplexity), true

	case "ApplicationProtocolTemplate.protocol":
		if e.complexity.ApplicationProtocolTemplate.Protocol == nil {
			break
		}

		return e.complexity.ApplicationProtocolTemplate.Protocol(childComplexity), true

	case "ListOfConnectionInfo.items":
		if e.complexity.ListOfConnectionInfo.Items == nil {
			break
		}

		return e.complexity.ListOfConnectionInfo.Items(childComplexity), true

	case "AttributeDefinition.default_value":
		if e.complexity.AttributeDefinition.DefaultValue == nil {
			break
		}

		return e.complexity.AttributeDefinition.DefaultValue(childComplexity), true

	case "AttributeDefinition.description":
		if e.complexity.AttributeDefinition.Description == nil {
			break
		}

		return e.complexity.AttributeDefinition.Description(childComplexity), true

	case "AttributeDefinition.mandatory":
		if e.complexity.AttributeDefinition.Mandatory == nil {
			break
		}

		return e.complexity.AttributeDefinition.Mandatory(childComplexity), true

	case "AttributeDefinition.name":
		if e.complexity.AttributeDefinition.Name == nil {
			break
		}

		return e.complexity.AttributeDefinition.Name(childComplexity), true

	case "AttributeDefinition.options":
		if e.complexity.AttributeDefinition.Options == nil {
			break
		}

		return e.complexity.AttributeDefinition.Options(childComplexity), true

	case "AttributeDefinition.type":
		if e.complexity.AttributeDefinition.Type == nil {
			break
		}

		return e.complexity.AttributeDefinition.Type(childComplexity), true

	case "AttributeValue.binary_value":
		if e.complexity.AttributeValue.BinaryValue == nil {
			break
		}

		return e.complexity.AttributeValue.BinaryValue(childComplexity), true

	case "AttributeValue.bool_value":
		if e.complexity.AttributeValue.BoolValue == nil {
			break
		}

		return e.complexity.AttributeValue.BoolValue(childComplexity), true

	case "AttributeValue.double_value":
		if e.complexity.AttributeValue.DoubleValue == nil {
			break
		}

		return e.complexity.AttributeValue.DoubleValue(childComplexity), true

	case "AttributeValue.int_value":
		if e.complexity.AttributeValue.IntValue == nil {
			break
		}

		return e.complexity.AttributeValue.IntValue(childComplexity), true

	case "AttributeValue.str_value":
		if e.complexity.AttributeValue.StrValue == nil {
			break
		}

		return e.complexity.AttributeValue.StrValue(childComplexity), true

	case "BillingValue.timestamp":
		if e.complexity.BillingValue.Timestamp == nil {
			break
		}

		return e.complexity.BillingValue.Timestamp(childComplexity), true

	case "BillingValue.unit":
		if e.complexity.BillingValue.Unit == nil {
			break
		}

		return e.complexity.BillingValue.Unit(childComplexity), true

	case "BillingValue.value":
		if e.complexity.BillingValue.Value == nil {
			break
		}

		return e.complexity.BillingValue.Value(childComplexity), true

	case "BillingValues.values":
		if e.complexity.BillingValues.Values == nil {
			break
		}

		return e.complexity.BillingValues.Values(childComplexity), true

	case "BulkJobStatus.job_id":
		if e.complexity.BulkJobStatus.JobID == nil {
			break
		}

		return e.complexity.BulkJobStatus.JobID(childComplexity), true

	case "BulkJobStatus.status":
		if e.complexity.BulkJobStatus.Status == nil {
			break
		}

		return e.complexity.BulkJobStatus.Status(childComplexity), true

	case "BulkSpec.bulk_id":
		if e.complexity.BulkSpec.BulkID == nil {
			break
		}

		return e.complexity.BulkSpec.BulkID(childComplexity), true

	case "BulkSpec.correlation_id":
		if e.complexity.BulkSpec.CorrelationID == nil {
			break
		}

		return e.complexity.BulkSpec.CorrelationID(childComplexity), true

	case "BulkSpec.devices":
		if e.complexity.BulkSpec.Devices == nil {
			break
		}

		return e.complexity.BulkSpec.Devices(childComplexity), true

	case "BulkSpec.driver_type":
		if e.complexity.BulkSpec.DriverType == nil {
			break
		}

		return e.complexity.BulkSpec.DriverType(childComplexity), true

	case "BulkSpec.job_actions":
		if e.complexity.BulkSpec.JobActions == nil {
			break
		}

		return e.complexity.BulkSpec.JobActions(childComplexity), true

	case "BulkSpec.org_id":
		if e.complexity.BulkSpec.OrgID == nil {
			break
		}

		return e.complexity.BulkSpec.OrgID(childComplexity), true

	case "BulkSpec.settings":
		if e.complexity.BulkSpec.Settings == nil {
			break
		}

		return e.complexity.BulkSpec.Settings(childComplexity), true

	case "BulkSpec.user_id":
		if e.complexity.BulkSpec.UserID == nil {
			break
		}

		return e.complexity.BulkSpec.UserID(childComplexity), true

	case "BulkSpec.webhook_url":
		if e.complexity.BulkSpec.WebhookURL == nil {
			break
		}

		return e.complexity.BulkSpec.WebhookURL(childComplexity), true

	case "BulkStatus.jobs":
		if e.complexity.BulkStatus.Jobs == nil {
			break
		}

		return e.complexity.BulkStatus.Jobs(childComplexity), true

	case "BulkStatus.status":
		if e.complexity.BulkStatus.Status == nil {
			break
		}

		return e.complexity.BulkStatus.Status(childComplexity), true

	case "CancelJobsRequest.job_id":
		if e.complexity.CancelJobsRequest.JobID == nil {
			break
		}

		return e.complexity.CancelJobsRequest.JobID(childComplexity), true

	case "CommunicationTemplate.datalinks":
		if e.complexity.CommunicationTemplate.Datalinks == nil {
			break
		}

		return e.complexity.CommunicationTemplate.Datalinks(childComplexity), true

	case "CommunicationTemplate.type":
		if e.complexity.CommunicationTemplate.Type == nil {
			break
		}

		return e.complexity.CommunicationTemplate.Type(childComplexity), true

	case "CommunicationUnitSpec.connection_info":
		if e.complexity.CommunicationUnitSpec.ConnectionInfo == nil {
			break
		}

		return e.complexity.CommunicationUnitSpec.ConnectionInfo(childComplexity), true

	case "CommunicationUnitSpec.external_id":
		if e.complexity.CommunicationUnitSpec.ExternalID == nil {
			break
		}

		return e.complexity.CommunicationUnitSpec.ExternalID(childComplexity), true

	case "CommunicationUnitSpec.id":
		if e.complexity.CommunicationUnitSpec.ID == nil {
			break
		}

		return e.complexity.CommunicationUnitSpec.ID(childComplexity), true

	case "CommunicationUnitSpec.name":
		if e.complexity.CommunicationUnitSpec.Name == nil {
			break
		}

		return e.complexity.CommunicationUnitSpec.Name(childComplexity), true

	case "ConnectionInfo.custom_grouping_id":
		if e.complexity.ConnectionInfo.CustomGroupingID == nil {
			break
		}

		return e.complexity.ConnectionInfo.CustomGroupingID(childComplexity), true

	case "ConnectionInfo.link_protocol":
		if e.complexity.ConnectionInfo.LinkProtocol == nil {
			break
		}

		return e.complexity.ConnectionInfo.LinkProtocol(childComplexity), true

	case "ConnectionInfo.modem_pool":
		if e.complexity.ConnectionInfo.ModemPool == nil {
			break
		}

		return e.complexity.ConnectionInfo.ModemPool(childComplexity), true

	case "ConnectionInfo.serial_over_ip":
		if e.complexity.ConnectionInfo.SerialOverIP == nil {
			break
		}

		return e.complexity.ConnectionInfo.SerialOverIP(childComplexity), true

	case "ConnectionInfo.tcpip":
		if e.complexity.ConnectionInfo.Tcpip == nil {
			break
		}

		return e.complexity.ConnectionInfo.Tcpip(childComplexity), true

	case "ConnectionTypeControlledSerial.direct":
		if e.complexity.ConnectionTypeControlledSerial.Direct == nil {
			break
		}

		return e.complexity.ConnectionTypeControlledSerial.Direct(childComplexity), true

	case "ConnectionTypeControlledSerial.moxa":
		if e.complexity.ConnectionTypeControlledSerial.Moxa == nil {
			break
		}

		return e.complexity.ConnectionTypeControlledSerial.Moxa(childComplexity), true

	case "ConnectionTypeDirectTcpIp.host":
		if e.complexity.ConnectionTypeDirectTcpIp.Host == nil {
			break
		}

		return e.complexity.ConnectionTypeDirectTcpIp.Host(childComplexity), true

	case "ConnectionTypeDirectTcpIp.port":
		if e.complexity.ConnectionTypeDirectTcpIp.Port == nil {
			break
		}

		return e.complexity.ConnectionTypeDirectTcpIp.Port(childComplexity), true

	case "ConnectionTypeDirectTcpIp.timeout":
		if e.complexity.ConnectionTypeDirectTcpIp.Timeout == nil {
			break
		}

		return e.complexity.ConnectionTypeDirectTcpIp.Timeout(childComplexity), true

	case "ConnectionTypeModemPool.modem":
		if e.complexity.ConnectionTypeModemPool.Modem == nil {
			break
		}

		return e.complexity.ConnectionTypeModemPool.Modem(childComplexity), true

	case "ConnectionTypeModemPool.number":
		if e.complexity.ConnectionTypeModemPool.Number == nil {
			break
		}

		return e.complexity.ConnectionTypeModemPool.Number(childComplexity), true

	case "ConnectionTypeModemPool.pool_id":
		if e.complexity.ConnectionTypeModemPool.PoolID == nil {
			break
		}

		return e.complexity.ConnectionTypeModemPool.PoolID(childComplexity), true

	case "ConnectionTypeSerialDirect.host":
		if e.complexity.ConnectionTypeSerialDirect.Host == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialDirect.Host(childComplexity), true

	case "ConnectionTypeSerialDirect.port":
		if e.complexity.ConnectionTypeSerialDirect.Port == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialDirect.Port(childComplexity), true

	case "ConnectionTypeSerialMoxa.commandPort":
		if e.complexity.ConnectionTypeSerialMoxa.CommandPort == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialMoxa.CommandPort(childComplexity), true

	case "ConnectionTypeSerialMoxa.dataPort":
		if e.complexity.ConnectionTypeSerialMoxa.DataPort == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialMoxa.DataPort(childComplexity), true

	case "ConnectionTypeSerialMoxa.host":
		if e.complexity.ConnectionTypeSerialMoxa.Host == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialMoxa.Host(childComplexity), true

	case "CreateCommunicationUnitRequest.spec":
		if e.complexity.CreateCommunicationUnitRequest.Spec == nil {
			break
		}

		return e.complexity.CreateCommunicationUnitRequest.Spec(childComplexity), true

	case "CreateDeviceGroupRequest.spec":
		if e.complexity.CreateDeviceGroupRequest.Spec == nil {
			break
		}

		return e.complexity.CreateDeviceGroupRequest.Spec(childComplexity), true

	case "CreateDeviceRequest.spec":
		if e.complexity.CreateDeviceRequest.Spec == nil {
			break
		}

		return e.complexity.CreateDeviceRequest.Spec(childComplexity), true

	case "DataLinkTemplate.app_protocol_refs":
		if e.complexity.DataLinkTemplate.AppProtocolRefs == nil {
			break
		}

		return e.complexity.DataLinkTemplate.AppProtocolRefs(childComplexity), true

	case "DataLinkTemplate.attributes":
		if e.complexity.DataLinkTemplate.Attributes == nil {
			break
		}

		return e.complexity.DataLinkTemplate.Attributes(childComplexity), true

	case "DataLinkTemplate.link_protocol":
		if e.complexity.DataLinkTemplate.LinkProtocol == nil {
			break
		}

		return e.complexity.DataLinkTemplate.LinkProtocol(childComplexity), true

	case "DeviceCommunicationUnit.app_protocol":
		if e.complexity.DeviceCommunicationUnit.AppProtocol == nil {
			break
		}

		return e.complexity.DeviceCommunicationUnit.AppProtocol(childComplexity), true

	case "DeviceCommunicationUnit.communication_unit_id":
		if e.complexity.DeviceCommunicationUnit.CommunicationUnitID == nil {
			break
		}

		return e.complexity.DeviceCommunicationUnit.CommunicationUnitID(childComplexity), true

	case "DeviceConnectionInfo.app_protocol":
		if e.complexity.DeviceConnectionInfo.AppProtocol == nil {
			break
		}

		return e.complexity.DeviceConnectionInfo.AppProtocol(childComplexity), true

	case "DeviceConnectionInfo.communication_unit":
		if e.complexity.DeviceConnectionInfo.CommunicationUnit == nil {
			break
		}

		return e.complexity.DeviceConnectionInfo.CommunicationUnit(childComplexity), true

	case "DeviceConnectionInfo.device_attributes":
		if e.complexity.DeviceConnectionInfo.DeviceAttributes == nil {
			break
		}

		return e.complexity.DeviceConnectionInfo.DeviceAttributes(childComplexity), true

	case "DeviceGroupOverviewSpec.external_id":
		if e.complexity.DeviceGroupOverviewSpec.ExternalID == nil {
			break
		}

		return e.complexity.DeviceGroupOverviewSpec.ExternalID(childComplexity), true

	case "DeviceGroupOverviewSpec.id":
		if e.complexity.DeviceGroupOverviewSpec.ID == nil {
			break
		}

		return e.complexity.DeviceGroupOverviewSpec.ID(childComplexity), true

	case "DeviceGroupOverviewSpec.name":
		if e.complexity.DeviceGroupOverviewSpec.Name == nil {
			break
		}

		return e.complexity.DeviceGroupOverviewSpec.Name(childComplexity), true

	case "DeviceGroupSpec.device_id":
		if e.complexity.DeviceGroupSpec.DeviceID == nil {
			break
		}

		return e.complexity.DeviceGroupSpec.DeviceID(childComplexity), true

	case "DeviceGroupSpec.external_id":
		if e.complexity.DeviceGroupSpec.ExternalID == nil {
			break
		}

		return e.complexity.DeviceGroupSpec.ExternalID(childComplexity), true

	case "DeviceGroupSpec.id":
		if e.complexity.DeviceGroupSpec.ID == nil {
			break
		}

		return e.complexity.DeviceGroupSpec.ID(childComplexity), true

	case "DeviceGroupSpec.name":
		if e.complexity.DeviceGroupSpec.Name == nil {
			break
		}

		return e.complexity.DeviceGroupSpec.Name(childComplexity), true

	case "DeviceSpec.attributes":
		if e.complexity.DeviceSpec.Attributes == nil {
			break
		}

		return e.complexity.DeviceSpec.Attributes(childComplexity), true

	case "DeviceSpec.communication_unit_link":
		if e.complexity.DeviceSpec.CommunicationUnitLink == nil {
			break
		}

		return e.complexity.DeviceSpec.CommunicationUnitLink(childComplexity), true

	case "DeviceSpec.external_id":
		if e.complexity.DeviceSpec.ExternalID == nil {
			break
		}

		return e.complexity.DeviceSpec.ExternalID(childComplexity), true

	case "DeviceSpec.id":
		if e.complexity.DeviceSpec.ID == nil {
			break
		}

		return e.complexity.DeviceSpec.ID(childComplexity), true

	case "DeviceSpec.name":
		if e.complexity.DeviceSpec.Name == nil {
			break
		}

		return e.complexity.DeviceSpec.Name(childComplexity), true

	case "DeviceSpec.timezone":
		if e.complexity.DeviceSpec.Timezone == nil {
			break
		}

		return e.complexity.DeviceSpec.Timezone(childComplexity), true

	case "DriverInfo.driver_type":
		if e.complexity.DriverInfo.DriverType == nil {
			break
		}

		return e.complexity.DriverInfo.DriverType(childComplexity), true

	case "DriverInfo.version":
		if e.complexity.DriverInfo.Version == nil {
			break
		}

		return e.complexity.DriverInfo.Version(childComplexity), true

	case "DriverTemplates.access_templates":
		if e.complexity.DriverTemplates.AccessTemplates == nil {
			break
		}

		return e.complexity.DriverTemplates.AccessTemplates(childComplexity), true

	case "DriverTemplates.action_attributes":
		if e.complexity.DriverTemplates.ActionAttributes == nil {
			break
		}

		return e.complexity.DriverTemplates.ActionAttributes(childComplexity), true

	case "DriverTemplates.action_constraints":
		if e.complexity.DriverTemplates.ActionConstraints == nil {
			break
		}

		return e.complexity.DriverTemplates.ActionConstraints(childComplexity), true

	case "DriverTemplates.app_protocols":
		if e.complexity.DriverTemplates.AppProtocols == nil {
			break
		}

		return e.complexity.DriverTemplates.AppProtocols(childComplexity), true

	case "DriverTemplates.communication_templates":
		if e.complexity.DriverTemplates.CommunicationTemplates == nil {
			break
		}

		return e.complexity.DriverTemplates.CommunicationTemplates(childComplexity), true

	case "Empty._empty":
		if e.complexity.Empty.Empty == nil {
			break
		}

		return e.complexity.Empty.Empty(childComplexity), true

	case "GetBulkRequest.bulk_id":
		if e.complexity.GetBulkRequest.BulkID == nil {
			break
		}

		return e.complexity.GetBulkRequest.BulkID(childComplexity), true

	case "GetBulkResponse.spec":
		if e.complexity.GetBulkResponse.Spec == nil {
			break
		}

		return e.complexity.GetBulkResponse.Spec(childComplexity), true

	case "GetBulkResponse.status":
		if e.complexity.GetBulkResponse.Status == nil {
			break
		}

		return e.complexity.GetBulkResponse.Status(childComplexity), true

	case "GetBulksResponse.bulks":
		if e.complexity.GetBulksResponse.Bulks == nil {
			break
		}

		return e.complexity.GetBulksResponse.Bulks(childComplexity), true

	case "GetBulksReuqest.include_data":
		if e.complexity.GetBulksReuqest.IncludeData == nil {
			break
		}

		return e.complexity.GetBulksReuqest.IncludeData(childComplexity), true

	case "GetBulksReuqest.tfrom":
		if e.complexity.GetBulksReuqest.Tfrom == nil {
			break
		}

		return e.complexity.GetBulksReuqest.Tfrom(childComplexity), true

	case "GetBulksReuqest.tto":
		if e.complexity.GetBulksReuqest.Tto == nil {
			break
		}

		return e.complexity.GetBulksReuqest.Tto(childComplexity), true

	case "GetCommunicationUnitsRequest.external_id":
		if e.complexity.GetCommunicationUnitsRequest.ExternalID == nil {
			break
		}

		return e.complexity.GetCommunicationUnitsRequest.ExternalID(childComplexity), true

	case "GetCommunicationUnitsRequest.id":
		if e.complexity.GetCommunicationUnitsRequest.ID == nil {
			break
		}

		return e.complexity.GetCommunicationUnitsRequest.ID(childComplexity), true

	case "GetCommunicationUnitsRequest.name":
		if e.complexity.GetCommunicationUnitsRequest.Name == nil {
			break
		}

		return e.complexity.GetCommunicationUnitsRequest.Name(childComplexity), true

	case "GetCommunicationUnitsResponse.spec":
		if e.complexity.GetCommunicationUnitsResponse.Spec == nil {
			break
		}

		return e.complexity.GetCommunicationUnitsResponse.Spec(childComplexity), true

	case "GetDeviceGroupResponse.spec":
		if e.complexity.GetDeviceGroupResponse.Spec == nil {
			break
		}

		return e.complexity.GetDeviceGroupResponse.Spec(childComplexity), true

	case "GetDeviceGroupsResponse.groups":
		if e.complexity.GetDeviceGroupsResponse.Groups == nil {
			break
		}

		return e.complexity.GetDeviceGroupsResponse.Groups(childComplexity), true

	case "GetDevicesCommunicationUnitsRequest.device_id":
		if e.complexity.GetDevicesCommunicationUnitsRequest.DeviceID == nil {
			break
		}

		return e.complexity.GetDevicesCommunicationUnitsRequest.DeviceID(childComplexity), true

	case "GetDevicesCommunicationUnitsResponse.devices":
		if e.complexity.GetDevicesCommunicationUnitsResponse.Devices == nil {
			break
		}

		return e.complexity.GetDevicesCommunicationUnitsResponse.Devices(childComplexity), true

	case "GetDevicesRequest.external_id":
		if e.complexity.GetDevicesRequest.ExternalID == nil {
			break
		}

		return e.complexity.GetDevicesRequest.ExternalID(childComplexity), true

	case "GetDevicesRequest.id":
		if e.complexity.GetDevicesRequest.ID == nil {
			break
		}

		return e.complexity.GetDevicesRequest.ID(childComplexity), true

	case "GetDevicesRequest.name":
		if e.complexity.GetDevicesRequest.Name == nil {
			break
		}

		return e.complexity.GetDevicesRequest.Name(childComplexity), true

	case "GetDevicesResponse.spec":
		if e.complexity.GetDevicesResponse.Spec == nil {
			break
		}

		return e.complexity.GetDevicesResponse.Spec(childComplexity), true

	case "GetDriversResponse.drivers":
		if e.complexity.GetDriversResponse.Drivers == nil {
			break
		}

		return e.complexity.GetDriversResponse.Drivers(childComplexity), true

	case "GetDriversResponse.result":
		if e.complexity.GetDriversResponse.Result == nil {
			break
		}

		return e.complexity.GetDriversResponse.Result(childComplexity), true

	case "GetJobStatusRequest.job_id":
		if e.complexity.GetJobStatusRequest.JobID == nil {
			break
		}

		return e.complexity.GetJobStatusRequest.JobID(childComplexity), true

	case "GetJobStatusResponse.status":
		if e.complexity.GetJobStatusResponse.Status == nil {
			break
		}

		return e.complexity.GetJobStatusResponse.Status(childComplexity), true

	case "GetModemPoolResponse.modems":
		if e.complexity.GetModemPoolResponse.Modems == nil {
			break
		}

		return e.complexity.GetModemPoolResponse.Modems(childComplexity), true

	case "GetModemPoolResponse.name":
		if e.complexity.GetModemPoolResponse.Name == nil {
			break
		}

		return e.complexity.GetModemPoolResponse.Name(childComplexity), true

	case "GetModemPoolsResponse.pools":
		if e.complexity.GetModemPoolsResponse.Pools == nil {
			break
		}

		return e.complexity.GetModemPoolsResponse.Pools(childComplexity), true

	case "JobAction.action_id":
		if e.complexity.JobAction.ActionID == nil {
			break
		}

		return e.complexity.JobAction.ActionID(childComplexity), true

	case "JobAction.attributes":
		if e.complexity.JobAction.Attributes == nil {
			break
		}

		return e.complexity.JobAction.Attributes(childComplexity), true

	case "JobAction.fw_update":
		if e.complexity.JobAction.FwUpdate == nil {
			break
		}

		return e.complexity.JobAction.FwUpdate(childComplexity), true

	case "JobAction.get_clock":
		if e.complexity.JobAction.GetClock == nil {
			break
		}

		return e.complexity.JobAction.GetClock(childComplexity), true

	case "JobAction.get_disconnector_state":
		if e.complexity.JobAction.GetDisconnectorState == nil {
			break
		}

		return e.complexity.JobAction.GetDisconnectorState(childComplexity), true

	case "JobAction.get_events":
		if e.complexity.JobAction.GetEvents == nil {
			break
		}

		return e.complexity.JobAction.GetEvents(childComplexity), true

	case "JobAction.get_irregular_profile":
		if e.complexity.JobAction.GetIrregularProfile == nil {
			break
		}

		return e.complexity.JobAction.GetIrregularProfile(childComplexity), true

	case "JobAction.get_limiter":
		if e.complexity.JobAction.GetLimiter == nil {
			break
		}

		return e.complexity.JobAction.GetLimiter(childComplexity), true

	case "JobAction.get_periodical_profile":
		if e.complexity.JobAction.GetPeriodicalProfile == nil {
			break
		}

		return e.complexity.JobAction.GetPeriodicalProfile(childComplexity), true

	case "JobAction.get_register":
		if e.complexity.JobAction.GetRegister == nil {
			break
		}

		return e.complexity.JobAction.GetRegister(childComplexity), true

	case "JobAction.get_relay_state":
		if e.complexity.JobAction.GetRelayState == nil {
			break
		}

		return e.complexity.JobAction.GetRelayState(childComplexity), true

	case "JobAction.get_tou":
		if e.complexity.JobAction.GetTou == nil {
			break
		}

		return e.complexity.JobAction.GetTou(childComplexity), true

	case "JobAction.reset_billing_period":
		if e.complexity.JobAction.ResetBillingPeriod == nil {
			break
		}

		return e.complexity.JobAction.ResetBillingPeriod(childComplexity), true

	case "JobAction.set_disconnector_state":
		if e.complexity.JobAction.SetDisconnectorState == nil {
			break
		}

		return e.complexity.JobAction.SetDisconnectorState(childComplexity), true

	case "JobAction.set_limiter":
		if e.complexity.JobAction.SetLimiter == nil {
			break
		}

		return e.complexity.JobAction.SetLimiter(childComplexity), true

	case "JobAction.set_relay_state":
		if e.complexity.JobAction.SetRelayState == nil {
			break
		}

		return e.complexity.JobAction.SetRelayState(childComplexity), true

	case "JobAction.set_tou":
		if e.complexity.JobAction.SetTou == nil {
			break
		}

		return e.complexity.JobAction.SetTou(childComplexity), true

	case "JobAction.sync_clock":
		if e.complexity.JobAction.SyncClock == nil {
			break
		}

		return e.complexity.JobAction.SyncClock(childComplexity), true

	case "JobActionAttributes.attributes":
		if e.complexity.JobActionAttributes.Attributes == nil {
			break
		}

		return e.complexity.JobActionAttributes.Attributes(childComplexity), true

	case "JobActionAttributes.type":
		if e.complexity.JobActionAttributes.Type == nil {
			break
		}

		return e.complexity.JobActionAttributes.Type(childComplexity), true

	case "JobActionContraints.get_register_type_attributes":
		if e.complexity.JobActionContraints.GetRegisterTypeAttributes == nil {
			break
		}

		return e.complexity.JobActionContraints.GetRegisterTypeAttributes(childComplexity), true

	case "JobActionContraints.get_register_type_name":
		if e.complexity.JobActionContraints.GetRegisterTypeName == nil {
			break
		}

		return e.complexity.JobActionContraints.GetRegisterTypeName(childComplexity), true

	case "JobCustomDeviceList.list":
		if e.complexity.JobCustomDeviceList.List == nil {
			break
		}

		return e.complexity.JobCustomDeviceList.List(childComplexity), true

	case "JobDevice.device_id":
		if e.complexity.JobDevice.DeviceID == nil {
			break
		}

		return e.complexity.JobDevice.DeviceID(childComplexity), true

	case "JobDevice.id":
		if e.complexity.JobDevice.ID == nil {
			break
		}

		return e.complexity.JobDevice.ID(childComplexity), true

	case "JobDeviceList.list":
		if e.complexity.JobDeviceList.List == nil {
			break
		}

		return e.complexity.JobDeviceList.List(childComplexity), true

	case "JobDevice_1.app_protocol":
		if e.complexity.JobDevice_1.AppProtocol == nil {
			break
		}

		return e.complexity.JobDevice_1.AppProtocol(childComplexity), true

	case "JobDevice_1.connection_info":
		if e.complexity.JobDevice_1.ConnectionInfo == nil {
			break
		}

		return e.complexity.JobDevice_1.ConnectionInfo(childComplexity), true

	case "JobDevice_1.device_attributes":
		if e.complexity.JobDevice_1.DeviceAttributes == nil {
			break
		}

		return e.complexity.JobDevice_1.DeviceAttributes(childComplexity), true

	case "JobDevice_1.device_id":
		if e.complexity.JobDevice_1.DeviceID == nil {
			break
		}

		return e.complexity.JobDevice_1.DeviceID(childComplexity), true

	case "JobDevice_1.external_id":
		if e.complexity.JobDevice_1.ExternalID == nil {
			break
		}

		return e.complexity.JobDevice_1.ExternalID(childComplexity), true

	case "JobDevice_1.id":
		if e.complexity.JobDevice_1.ID == nil {
			break
		}

		return e.complexity.JobDevice_1.ID(childComplexity), true

	case "JobDevice_1.timezone":
		if e.complexity.JobDevice_1.Timezone == nil {
			break
		}

		return e.complexity.JobDevice_1.Timezone(childComplexity), true

	case "JobSettings.attempts":
		if e.complexity.JobSettings.Attempts == nil {
			break
		}

		return e.complexity.JobSettings.Attempts(childComplexity), true

	case "JobSettings.defer_start":
		if e.complexity.JobSettings.DeferStart == nil {
			break
		}

		return e.complexity.JobSettings.DeferStart(childComplexity), true

	case "JobSettings.expires_at":
		if e.complexity.JobSettings.ExpiresAt == nil {
			break
		}

		return e.complexity.JobSettings.ExpiresAt(childComplexity), true

	case "JobSettings.max_duration":
		if e.complexity.JobSettings.MaxDuration == nil {
			break
		}

		return e.complexity.JobSettings.MaxDuration(childComplexity), true

	case "JobSettings.priority":
		if e.complexity.JobSettings.Priority == nil {
			break
		}

		return e.complexity.JobSettings.Priority(childComplexity), true

	case "JobSettings.retry_delay":
		if e.complexity.JobSettings.RetryDelay == nil {
			break
		}

		return e.complexity.JobSettings.RetryDelay(childComplexity), true

	case "JobStatus.attempts_done":
		if e.complexity.JobStatus.AttemptsDone == nil {
			break
		}

		return e.complexity.JobStatus.AttemptsDone(childComplexity), true

	case "JobStatus.code":
		if e.complexity.JobStatus.Code == nil {
			break
		}

		return e.complexity.JobStatus.Code(childComplexity), true

	case "JobStatus.created_at":
		if e.complexity.JobStatus.CreatedAt == nil {
			break
		}

		return e.complexity.JobStatus.CreatedAt(childComplexity), true

	case "JobStatus.finished_at":
		if e.complexity.JobStatus.FinishedAt == nil {
			break
		}

		return e.complexity.JobStatus.FinishedAt(childComplexity), true

	case "JobStatus.results":
		if e.complexity.JobStatus.Results == nil {
			break
		}

		return e.complexity.JobStatus.Results(childComplexity), true

	case "JobStatus.started_at":
		if e.complexity.JobStatus.StartedAt == nil {
			break
		}

		return e.complexity.JobStatus.StartedAt(childComplexity), true

	case "JobStatus.status":
		if e.complexity.JobStatus.Status == nil {
			break
		}

		return e.complexity.JobStatus.Status(childComplexity), true

	case "MeasuredValue.bool_value":
		if e.complexity.MeasuredValue.BoolValue == nil {
			break
		}

		return e.complexity.MeasuredValue.BoolValue(childComplexity), true

	case "MeasuredValue.double_value":
		if e.complexity.MeasuredValue.DoubleValue == nil {
			break
		}

		return e.complexity.MeasuredValue.DoubleValue(childComplexity), true

	case "MeasuredValue.exponent":
		if e.complexity.MeasuredValue.Exponent == nil {
			break
		}

		return e.complexity.MeasuredValue.Exponent(childComplexity), true

	case "MeasuredValue.int_value":
		if e.complexity.MeasuredValue.IntValue == nil {
			break
		}

		return e.complexity.MeasuredValue.IntValue(childComplexity), true

	case "MeasuredValue.status":
		if e.complexity.MeasuredValue.Status == nil {
			break
		}

		return e.complexity.MeasuredValue.Status(childComplexity), true

	case "MeasuredValue.str_value":
		if e.complexity.MeasuredValue.StrValue == nil {
			break
		}

		return e.complexity.MeasuredValue.StrValue(childComplexity), true

	case "MeasuredValue.timestamp_tz_value":
		if e.complexity.MeasuredValue.TimestampTzValue == nil {
			break
		}

		return e.complexity.MeasuredValue.TimestampTzValue(childComplexity), true

	case "MeasuredValue.timestamp_value":
		if e.complexity.MeasuredValue.TimestampValue == nil {
			break
		}

		return e.complexity.MeasuredValue.TimestampValue(childComplexity), true

	case "ModemInfo.at_config":
		if e.complexity.ModemInfo.AtConfig == nil {
			break
		}

		return e.complexity.ModemInfo.AtConfig(childComplexity), true

	case "ModemInfo.at_dial":
		if e.complexity.ModemInfo.AtDial == nil {
			break
		}

		return e.complexity.ModemInfo.AtDial(childComplexity), true

	case "ModemInfo.at_dsr":
		if e.complexity.ModemInfo.AtDsr == nil {
			break
		}

		return e.complexity.ModemInfo.AtDsr(childComplexity), true

	case "ModemInfo.at_escape":
		if e.complexity.ModemInfo.AtEscape == nil {
			break
		}

		return e.complexity.ModemInfo.AtEscape(childComplexity), true

	case "ModemInfo.at_hangup":
		if e.complexity.ModemInfo.AtHangup == nil {
			break
		}

		return e.complexity.ModemInfo.AtHangup(childComplexity), true

	case "ModemInfo.at_init":
		if e.complexity.ModemInfo.AtInit == nil {
			break
		}

		return e.complexity.ModemInfo.AtInit(childComplexity), true

	case "ModemInfo.at_test":
		if e.complexity.ModemInfo.AtTest == nil {
			break
		}

		return e.complexity.ModemInfo.AtTest(childComplexity), true

	case "ModemInfo.connect_timeout":
		if e.complexity.ModemInfo.ConnectTimeout == nil {
			break
		}

		return e.complexity.ModemInfo.ConnectTimeout(childComplexity), true

	case "ModemInfo.id":
		if e.complexity.ModemInfo.ID == nil {
			break
		}

		return e.complexity.ModemInfo.ID(childComplexity), true

	case "ModemInfo.name":
		if e.complexity.ModemInfo.Name == nil {
			break
		}

		return e.complexity.ModemInfo.Name(childComplexity), true

	case "ModemInfo.tcpip":
		if e.complexity.ModemInfo.Tcpip == nil {
			break
		}

		return e.complexity.ModemInfo.Tcpip(childComplexity), true

	case "ModemPoolSpec.name":
		if e.complexity.ModemPoolSpec.Name == nil {
			break
		}

		return e.complexity.ModemPoolSpec.Name(childComplexity), true

	case "ModemPoolSpec.pool_id":
		if e.complexity.ModemPoolSpec.PoolID == nil {
			break
		}

		return e.complexity.ModemPoolSpec.PoolID(childComplexity), true

	case "ProfileBlok.start_timestamp":
		if e.complexity.ProfileBlok.StartTimestamp == nil {
			break
		}

		return e.complexity.ProfileBlok.StartTimestamp(childComplexity), true

	case "ProfileBlok.values":
		if e.complexity.ProfileBlok.Values == nil {
			break
		}

		return e.complexity.ProfileBlok.Values(childComplexity), true

	case "ProfileValues.blocks":
		if e.complexity.ProfileValues.Blocks == nil {
			break
		}

		return e.complexity.ProfileValues.Blocks(childComplexity), true

	case "ProfileValues.period":
		if e.complexity.ProfileValues.Period == nil {
			break
		}

		return e.complexity.ProfileValues.Period(childComplexity), true

	case "ProfileValues.unit":
		if e.complexity.ProfileValues.Unit == nil {
			break
		}

		return e.complexity.ProfileValues.Unit(childComplexity), true

	case "PublicCreateBulkRequest.actions":
		if e.complexity.PublicCreateBulkRequest.Actions == nil {
			break
		}

		return e.complexity.PublicCreateBulkRequest.Actions(childComplexity), true

	case "PublicCreateBulkRequest.correlation_id":
		if e.complexity.PublicCreateBulkRequest.CorrelationID == nil {
			break
		}

		return e.complexity.PublicCreateBulkRequest.CorrelationID(childComplexity), true

	case "PublicCreateBulkRequest.custom_devices":
		if e.complexity.PublicCreateBulkRequest.CustomDevices == nil {
			break
		}

		return e.complexity.PublicCreateBulkRequest.CustomDevices(childComplexity), true

	case "PublicCreateBulkRequest.devices":
		if e.complexity.PublicCreateBulkRequest.Devices == nil {
			break
		}

		return e.complexity.PublicCreateBulkRequest.Devices(childComplexity), true

	case "PublicCreateBulkRequest.driver_type":
		if e.complexity.PublicCreateBulkRequest.DriverType == nil {
			break
		}

		return e.complexity.PublicCreateBulkRequest.DriverType(childComplexity), true

	case "PublicCreateBulkRequest.id":
		if e.complexity.PublicCreateBulkRequest.ID == nil {
			break
		}

		return e.complexity.PublicCreateBulkRequest.ID(childComplexity), true

	case "PublicCreateBulkRequest.settings":
		if e.complexity.PublicCreateBulkRequest.Settings == nil {
			break
		}

		return e.complexity.PublicCreateBulkRequest.Settings(childComplexity), true

	case "PublicCreateBulkRequest.webhook_url":
		if e.complexity.PublicCreateBulkRequest.WebhookURL == nil {
			break
		}

		return e.complexity.PublicCreateBulkRequest.WebhookURL(childComplexity), true

	case "Query.addDevicesToGroup":
		if e.complexity.Query.AddDevicesToGroup == nil {
			break
		}

		return e.complexity.Query.AddDevicesToGroup(childComplexity), true

	case "Query.cancelBulk":
		if e.complexity.Query.CancelBulk == nil {
			break
		}

		return e.complexity.Query.CancelBulk(childComplexity), true

	case "Query.cancelJobs":
		if e.complexity.Query.CancelJobs == nil {
			break
		}

		return e.complexity.Query.CancelJobs(childComplexity), true

	case "Query.createBulk":
		if e.complexity.Query.CreateBulk == nil {
			break
		}

		return e.complexity.Query.CreateBulk(childComplexity), true

	case "Query.createCommunicationUnit":
		if e.complexity.Query.CreateCommunicationUnit == nil {
			break
		}

		return e.complexity.Query.CreateCommunicationUnit(childComplexity), true

	case "Query.createDevice":
		if e.complexity.Query.CreateDevice == nil {
			break
		}

		return e.complexity.Query.CreateDevice(childComplexity), true

	case "Query.createDeviceGroup":
		if e.complexity.Query.CreateDeviceGroup == nil {
			break
		}

		return e.complexity.Query.CreateDeviceGroup(childComplexity), true

	case "Query.createModem":
		if e.complexity.Query.CreateModem == nil {
			break
		}

		return e.complexity.Query.CreateModem(childComplexity), true

	case "Query.createModemPool":
		if e.complexity.Query.CreateModemPool == nil {
			break
		}

		return e.complexity.Query.CreateModemPool(childComplexity), true

	case "Query.deleteModem":
		if e.complexity.Query.DeleteModem == nil {
			break
		}

		return e.complexity.Query.DeleteModem(childComplexity), true

	case "Query.deleteModemPool":
		if e.complexity.Query.DeleteModemPool == nil {
			break
		}

		return e.complexity.Query.DeleteModemPool(childComplexity), true

	case "Query.getBulk":
		if e.complexity.Query.GetBulk == nil {
			break
		}

		return e.complexity.Query.GetBulk(childComplexity), true

	case "Query.getBulks":
		if e.complexity.Query.GetBulks == nil {
			break
		}

		return e.complexity.Query.GetBulks(childComplexity), true

	case "Query.getCommunicationUnits":
		if e.complexity.Query.GetCommunicationUnits == nil {
			break
		}

		return e.complexity.Query.GetCommunicationUnits(childComplexity), true

	case "Query.getConfig":
		if e.complexity.Query.GetConfig == nil {
			break
		}

		return e.complexity.Query.GetConfig(childComplexity), true

	case "Query.getDeviceGroup":
		if e.complexity.Query.GetDeviceGroup == nil {
			break
		}

		return e.complexity.Query.GetDeviceGroup(childComplexity), true

	case "Query.getDeviceGroups":
		if e.complexity.Query.GetDeviceGroups == nil {
			break
		}

		return e.complexity.Query.GetDeviceGroups(childComplexity), true

	case "Query.getDevices":
		if e.complexity.Query.GetDevices == nil {
			break
		}

		return e.complexity.Query.GetDevices(childComplexity), true

	case "Query.getDevicesCommunicationUnits":
		if e.complexity.Query.GetDevicesCommunicationUnits == nil {
			break
		}

		return e.complexity.Query.GetDevicesCommunicationUnits(childComplexity), true

	case "Query.getDriverTemplates":
		if e.complexity.Query.GetDriverTemplates == nil {
			break
		}

		return e.complexity.Query.GetDriverTemplates(childComplexity), true

	case "Query.getDrivers":
		if e.complexity.Query.GetDrivers == nil {
			break
		}

		return e.complexity.Query.GetDrivers(childComplexity), true

	case "Query.getJobStatus":
		if e.complexity.Query.GetJobStatus == nil {
			break
		}

		return e.complexity.Query.GetJobStatus(childComplexity), true

	case "Query.getModemPool":
		if e.complexity.Query.GetModemPool == nil {
			break
		}

		return e.complexity.Query.GetModemPool(childComplexity), true

	case "Query.getModemPools":
		if e.complexity.Query.GetModemPools == nil {
			break
		}

		return e.complexity.Query.GetModemPools(childComplexity), true

	case "Query.removeDevicesFromGroup":
		if e.complexity.Query.RemoveDevicesFromGroup == nil {
			break
		}

		return e.complexity.Query.RemoveDevicesFromGroup(childComplexity), true

	case "Query.setConfig":
		if e.complexity.Query.SetConfig == nil {
			break
		}

		return e.complexity.Query.SetConfig(childComplexity), true

	case "Query.setDeviceCommunicationUnits":
		if e.complexity.Query.SetDeviceCommunicationUnits == nil {
			break
		}

		return e.complexity.Query.SetDeviceCommunicationUnits(childComplexity), true

	case "Query.updateModem":
		if e.complexity.Query.UpdateModem == nil {
			break
		}

		return e.complexity.Query.UpdateModem(childComplexity), true

	case "Query.updateModemPool":
		if e.complexity.Query.UpdateModemPool == nil {
			break
		}

		return e.complexity.Query.UpdateModemPool(childComplexity), true

	case "RemoveDevicesFromGroupRequest.device_id":
		if e.complexity.RemoveDevicesFromGroupRequest.DeviceID == nil {
			break
		}

		return e.complexity.RemoveDevicesFromGroupRequest.DeviceID(childComplexity), true

	case "RemoveDevicesFromGroupRequest.group_id":
		if e.complexity.RemoveDevicesFromGroupRequest.GroupID == nil {
			break
		}

		return e.complexity.RemoveDevicesFromGroupRequest.GroupID(childComplexity), true

	case "SetDeviceCommunicationUnitsRequest.communication_units":
		if e.complexity.SetDeviceCommunicationUnitsRequest.CommunicationUnits == nil {
			break
		}

		return e.complexity.SetDeviceCommunicationUnitsRequest.CommunicationUnits(childComplexity), true

	case "SetDeviceCommunicationUnitsRequest.device_id":
		if e.complexity.SetDeviceCommunicationUnitsRequest.DeviceID == nil {
			break
		}

		return e.complexity.SetDeviceCommunicationUnitsRequest.DeviceID(childComplexity), true

	case "SetModemPoolRequest.name":
		if e.complexity.SetModemPoolRequest.Name == nil {
			break
		}

		return e.complexity.SetModemPoolRequest.Name(childComplexity), true

	case "SetModemPoolRequest.pool_id":
		if e.complexity.SetModemPoolRequest.PoolID == nil {
			break
		}

		return e.complexity.SetModemPoolRequest.PoolID(childComplexity), true

	case "SetModemRequest.modem":
		if e.complexity.SetModemRequest.Modem == nil {
			break
		}

		return e.complexity.SetModemRequest.Modem(childComplexity), true

	case "SetModemRequest.pool_id":
		if e.complexity.SetModemRequest.PoolID == nil {
			break
		}

		return e.complexity.SetModemRequest.PoolID(childComplexity), true

	case "StringList.items":
		if e.complexity.StringList.Items == nil {
			break
		}

		return e.complexity.StringList.Items(childComplexity), true

	case "StringValue.value":
		if e.complexity.StringValue.Value == nil {
			break
		}

		return e.complexity.StringValue.Value(childComplexity), true

	case "SystemConfig.max_cascade_device_count":
		if e.complexity.SystemConfig.MaxCascadeDeviceCount == nil {
			break
		}

		return e.complexity.SystemConfig.MaxCascadeDeviceCount(childComplexity), true

	case "SystemConfig.max_replicas":
		if e.complexity.SystemConfig.MaxReplicas == nil {
			break
		}

		return e.complexity.SystemConfig.MaxReplicas(childComplexity), true

	case "SystemConfig.max_slots_per_driver":
		if e.complexity.SystemConfig.MaxSlotsPerDriver == nil {
			break
		}

		return e.complexity.SystemConfig.MaxSlotsPerDriver(childComplexity), true

	case "_mapListOfConnectionInfo.key":
		if e.complexity._mapListOfConnectionInfo.Key == nil {
			break
		}

		return e.complexity._mapListOfConnectionInfo.Key(childComplexity), true

	case "_mapListOfConnectionInfo.value":
		if e.complexity._mapListOfConnectionInfo.Value == nil {
			break
		}

		return e.complexity._mapListOfConnectionInfo.Value(childComplexity), true

	case "_mapAttributeValue.key":
		if e.complexity._mapAttributeValue.Key == nil {
			break
		}

		return e.complexity._mapAttributeValue.Key(childComplexity), true

	case "_mapAttributeValue.value":
		if e.complexity._mapAttributeValue.Value == nil {
			break
		}

		return e.complexity._mapAttributeValue.Value(childComplexity), true

	case "_mapDeviceGroupOverviewSpec.key":
		if e.complexity._mapDeviceGroupOverviewSpec.Key == nil {
			break
		}

		return e.complexity._mapDeviceGroupOverviewSpec.Key(childComplexity), true

	case "_mapDeviceGroupOverviewSpec.value":
		if e.complexity._mapDeviceGroupOverviewSpec.Value == nil {
			break
		}

		return e.complexity._mapDeviceGroupOverviewSpec.Value(childComplexity), true

	case "_mapStringList.key":
		if e.complexity._mapStringList.Key == nil {
			break
		}

		return e.complexity._mapStringList.Key(childComplexity), true

	case "_mapStringList.value":
		if e.complexity._mapStringList.Value == nil {
			break
		}

		return e.complexity._mapStringList.Value(childComplexity), true

	case "_mapstring.key":
		if e.complexity._mapstring.Key == nil {
			break
		}

		return e.complexity._mapstring.Key(childComplexity), true

	case "_mapstring.value":
		if e.complexity._mapstring.Value == nil {
			break
		}

		return e.complexity._mapstring.Value(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap()
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../protobuf/pbapi/docs/api.graphqls", Input: `# Code generated, DO NOT EDIT.

# Bulk statuses
enum BulkStatusCode {
  # The job is waiting in the queue
  BULK_STATUS_QUEUED
  # The job is running
  BULK_STATUS_RUNNING
  # The job is completed
  BULK_STATUS_COMPLETED
  # The job is cancelled
  BULK_STATUS_CANCELLED
  # The job has expired
  BULK_STATUS_EXPIRED
}

# Result codes related to job actions
enum ActionResultCode {
  # The action has been completed successfully.
  ERROR_CODE_ACTION_OK
  # The action is not supported by the driver (or device).
  ERROR_CODE_ACTION_UNSUPPORTED
  # The action is pending.
  ERROR_CODE_ACTION_PENDING
  # The action failed.
  ERROR_CODE_ACTION_ERROR
}

# Action types
enum ActionType {
  # Get billing value, for example instantaneous values. The action covers specific register.
  ACTION_TYPE_GET_REGISTER
  # Get periodical profile, for example load-profile. The action covers specific profile column.
  ACTION_TYPE_GET_PERIODICAL_PROFILE
  # Get non-periodical profile, for example daily profile or monthly billing registers. The action covers specific profile column and or specific billing register.
  ACTION_TYPE_GET_IRREGULAR_PROFILE
  # Get event log. The action covers specific event log.
  ACTION_TYPE_GET_EVENTS
  # Get clock. The action returns time in UTC.
  ACTION_TYPE_GET_CLOCK
  # Synchornize clock. The action synchronizes the time in the device, it can forcefully set it if force attribute is set.
  ACTION_TYPE_SYNC_CLOCK
  # Get relay state. The action covers single relay.
  ACTION_TYPE_GET_RELAY_STATE
  # Set relay state. The action covers single relay.
  ACTION_TYPE_SET_RELAY_STATE
  # Get disconnector state. The action covers single disconnector if multiple disconnectors are present in the device.
  ACTION_TYPE_GET_DISCONNECTOR_STATE
  # Set disconnector state. The action covers single relay. The action covers single disconnector if multiple disconnectors are present in the device.
  ACTION_TYPE_SET_DISCONNECTOR_STATE
  # Get time-of-use table.
  ACTION_TYPE_GET_TOU
  # Set time-of-use table.
  ACTION_TYPE_SET_TOU
  # Get limiter settings. The action covers single limiter.
  ACTION_TYPE_GET_LIMITER
  # Set limiter settings. The action covers single limiter.
  ACTION_TYPE_SET_LIMITER
  # Reseet billing period.
  ACTION_TYPE_RESET_BILLING_PERIOD
  # Start firmware update. The action updates starts FW upgrade procedure.
  ACTION_TYPE_FW_UPDATE
}

# Application protocols
enum ApplicationProtocol {
  # The IEC 62056-21 (IEC-61107, VDEW) protocol.
  APPPROTO_IEC_62056_21
  # The DLMS short-name protocol.
  APPPROTO_DLMS_SN
  # The DLMS logical-name protocol.
  APPPROTO_DLMS_LN
  # The SCTM protocol.
  APPPROTO_SCTM
  # The LIS200 protocol.
  APPPROTO_LIS200
  # The ANSI C12 protocol.
  APPPROTO_ANSI_C12
  # The MQTT protocol.
  APPPROTO_MQTT
}

# Attribute types
enum AttributeType {
  # Integer attribute type
  ATTRIBUTE_TYPE_INT
  # String attribute type
  ATTRIBUTE_TYPE_STRING
  # Double attribute type
  ATTRIBUTE_TYPE_DOUBLE
  # Binary attribute type
  ATTRIBUTE_TYPE_BINARY
  # Date/time attribute type, stored as integer (UNIX timestamp)
  ATTRIBUTE_TYPE_TIMESTAMP
  # Date/time attribute type, stored as string in ISO-8601
  ATTRIBUTE_TYPE_TIMESTAMP_TZ
  # Bool attribute type
  ATTRIBUTE_TYPE_BOOL
}

# Connection types
enum CommunicationType {
  # The communication is done via direct TCP/IP.
  COMMUNICATION_TYPE_TCPIP
  # The communication is done via phone line (modem).
  COMMUNICATION_TYPE_MODEM_POOL
  # The communication is done via direct serial line.
  COMMUNICATION_TYPE_SERIAL_LINE_DIRECT
  # The communication is done via controller-serial line (Moxa).
  COMMUNICATION_TYPE_SERIAL_LINE_MOXA
  # The communication is passive, the driver is a service that listens on a port (DLMS devices in push mode) or a service that implements a subscriber to a message queue (e.g. MQTT).
  COMMUNICATION_TYPE_LISTENING
}

# Data link protocols
enum DataLinkProtocol {
  # The VDEW (IEC 62056-21, IEC-61107) protocol. In combination with DLMS protocol the driver initiates the communication by IEC and switches to the mode E to the HDLC+DLMS protocol. Supports addressing = multiple devices on the same line.
  LINKPROTO_IEC_62056_21
  # The HDLC (ISO/IEC-3309) framing. It can be used for various application protocols, such as DLMS or MODBUS. Supports client/server addressing = multiple devices on the same line.
  LINKPROTO_HDLC
  # The COSEM wrapper. It can be used for DLMS application protocol. Supports client/server addressing = multiple devices on the same line.
  LINKPROTO_COSEM_WRAPPER
  # The Modbus protocol. It shall be used for Modbus application protocol where no other data link layer, such as HDLC, is used.
  LINKPROTO_MODBUS
  # The M-Bus protocol. It shall be used for M-Bus application protocol.
  LINKPROTO_MBUS
  # The data link protocol is not applicable. It's useful for listening communication type.
  LINKPROTO_NOT_APPLICABLE
}

# Error codes
enum ErrorCode {
  # No error
  ERROR_CODE_OK
  # Generic error
  ERROR_CODE_ERROR
}

# Error codes related to jobs
enum JobErrorCode {
  # The job has been completed successfully.
  JOB_ERROR_CODE_NONE
  # There is no free slot in the driver to handle the job; the job shall be send again later.
  JOB_ERROR_CODE_BUSY
  # The job failed, the retry will be attempted.
  JOB_ERROR_CODE_ERROR
  # This should never happen! It means that the same job is currently being processed by the driver and it was sent to the driver mutliple times which would mean that there is a bug.
  JOB_ERROR_CODE_ALREADY_EXISTS
  # The job failed, the retry will NOT be attempted.
  JOB_ERROR_CODE_FATAL
}

# Job priorities
enum JobPriority {
  # The lowest priority
  JOB_PRIORITY_0
  # The priority 1
  JOB_PRIORITY_1
  # The priority 2
  JOB_PRIORITY_2
  # The priority 3
  JOB_PRIORITY_3
  # The priority 4
  JOB_PRIORITY_4
  # The priority 5
  JOB_PRIORITY_5
  # The priority 6
  JOB_PRIORITY_6
  # The priority 7
  JOB_PRIORITY_7
  # The highest priority
  JOB_PRIORITY_8
}

# Job statuses
enum JobStatusCode {
  # The job is waiting in the queue
  JOB_STATUS_QUEUED
  # The job is running
  JOB_STATUS_RUNNING
  # The job is completed
  JOB_STATUS_COMPLETED
  # The job is failed
  JOB_STATUS_FAILED
  # The job is cancelled
  JOB_STATUS_CANCELLED
  # The job has expired
  JOB_STATUS_EXPIRED
}

# A generic empty message that you can re-use to avoid defining duplicated
#  empty messages in your APIs. A typical example is to use it as the request
#  or the response type of an API method. For instance:
#
#      service Foo {
#        rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
#      }
type Empty {
  _empty: Boolean
}

# Wrapper message for ` + "`" + `string` + "`" + `.
#
#  The JSON representation for ` + "`" + `StringValue` + "`" + ` is JSON string.
type StringValue {
  # The string value.
  value: String
}

type JobCustomDeviceList {
  # The list of devices in the bulk.
  list: [JobDevice]
}

type JobDevice {
  # The device's job identifier within the parent bulk.
  id: String
  # The device identifier.
  device_id: String
}

type JobDeviceList {
  # The list of devices in the bulk.
  list: [JobDevice]
}

type PublicCreateBulkRequest {
  # The bulk identifier.
  id: UUID
  # The correlation identifier, e.g. to define relation to non-homogenous group.
  correlation_id: String
  # The device (driver) type.
  driver_type: String
  # The list of devices in the bulk.
  devices: JobDeviceList
  # The list of custom devices in the bulk.
  custom_devices: JobCustomDeviceList
  # The bulk-shared job settings.
  settings: JobSettings
  # The list actions to be executed.
  actions: [JobAction]
  # The webhook URL to call when the bulk is completed.
  webhook_url: String
}

type BulkJobStatus {
  # The job identifier.
  job_id: String
  # The job status.
  status: JobStatus
}

# Sub-message - holds the bulk job specification.
type BulkSpec {
  # The bulk identifier.
  bulk_id: String
  # The correlation identifier, e.g. to define relation to non-homogenous group.
  correlation_id: String
  # The organization identifier.
  org_id: String
  # The device (driver) type.
  driver_type: String
  # The list of devices in the bulk.
  devices: [JobDevice]
  # The bulk-shared job settings.
  settings: JobSettings
  # The list actions to be executed.
  job_actions: [JobAction]
  # The webhook URL to call when the bulk is completed.
  webhook_url: String
  # The user identifier.
  user_id: String
}

# Sub-message - holds the bulk job status.
type BulkStatus {
  # The job status.
  status: BulkStatusCode
  # The list of job statuses.
  jobs: [BulkJobStatus]
}

# RestApi -> DataProxt - the message holds single bulk request.
type GetBulkRequest {
  # The bulk identifier to be retrieved.
  bulk_id: String
}

# DataProxy -> RestApi - the message holds the bulk info and it's status.
type GetBulkResponse {
  # The bulk-job spec.
  spec: BulkSpec
  # The bulk-job status/data.
  status: BulkStatus
}

# DataProxy -> RestApi - the message holds list of bulks.
type GetBulksResponse {
  # The list of bulk jobs related to the original request.
  bulks: [GetBulkResponse]
}

# RestApi -> DataProxy - the message holds data for bulk listing request.
type GetBulksReuqest {
  # The time range filter - left limit. Optional.
  tfrom: Timestamp
  # The time range filter - right limit. Optional.
  tto: Timestamp
  # The result content filter - if true then data are included in the response.
  include_data: Boolean
}

# RestApi -> DataProxy - request to get the job status.
type GetJobStatusRequest {
  # The job identifier.
  job_id: String
}

# DataProxy -> RestApi - the message holds the job status.
type GetJobStatusResponse {
  # The status of the job
  status: JobStatus
}

# RestApi -> DriverRegistry - the request message to add a new device to the device group.
type AddDevicesToGroupRequest {
  # The unique identifier of the device group.
  group_id: String
  # The unique identifier of the device.
  device_id: [String]
}

# Sub-message - the communication unit specification.
type CommunicationUnitSpec {
  # The UUID of the communication unit.
  id: String
  # The external identifier of the communication unit.
  external_id: String
  # The name of the communication unit.
  name: String
  # The connection info.
  connection_info: ConnectionInfo
}

# RestApi -> DriverRegistry - The communication unit specification.
type CreateCommunicationUnitRequest {
  # The communication unit specification.
  spec: CommunicationUnitSpec
}

# RestApi -> DriverRegistry - the request message to get the information about the device group.
type CreateDeviceGroupRequest {
  # The device group specification.
  spec: DeviceGroupSpec
}

# RestApi -> DriverRegistry - the request message to create a new device.
type CreateDeviceRequest {
  # The device specification.
  spec: DeviceSpec
}

type DeviceCommunicationUnit {
  # The unique identifier of the communication unit.
  communication_unit_id: String
  # The application protocol to be used for the communication over the communication unit.
  app_protocol: ApplicationProtocol
}

type DeviceGroupOverviewSpec {
  # The UUID of the device group.
  id: String
  # The external identifier of the communication unit.
  external_id: String
  # The name of the device group.
  name: String
}

# Sub-message that represents the device group.
type DeviceGroupSpec {
  # The UUID of the device group.
  id: String
  # The external identifier of the communication unit.
  external_id: String
  # The name of the device group.
  name: String
  # The list of device identifiers that are part of the group.
  device_id: [String]
}

# Sub-message - the device specification.
type DeviceSpec {
  # The UUID of the device.
  id: String
  # The external identifier of the device.
  external_id: String
  # The name of the device.
  name: String
  # The template of the action attributes. It is represented as a list of attribute definitions.
  attributes: [_mapAttributeValue]
  # The list of communication unit identifiers (and additional info) that set CUs usable to communicate with the device. It's an ordered set where the first element is the primary communication unit with the highest priority.
  communication_unit_link: [DeviceCommunicationUnit]
  # The timezone related to the device, e.g. "America/New_York", "Europe/Prague", "CET", "GMT", "Etc/GMT+2".
  timezone: String
}

# RestApi -> DriverRegistry - the request message to get the information about the communication unit.
type GetCommunicationUnitsRequest {
  # The UUID of the communication unit.
  id: String
  # The external identifier of the communication unit.
  external_id: String
  # The name of the communication unit.
  name: String
}

# DriverRegistry -> RestApi - the message holds the information about the communication unit.
type GetCommunicationUnitsResponse {
  # The communication unit specification.
  spec: [CommunicationUnitSpec]
}

# DriverRegistry -> RestApi - the message holds the information about the device group.
type GetDeviceGroupResponse {
  # The device group specification.
  spec: DeviceGroupSpec
}

# DriverRegistry -> RestApi - the message holds the information about the device group.
type GetDeviceGroupsResponse {
  # The list of device groups.
  groups: [_mapDeviceGroupOverviewSpec]
}

# RestApi -> DriverRegistry - the request message to get
type GetDevicesCommunicationUnitsRequest {
  # The unique identifier of the device.
  device_id: [String]
}

# DriverRegistry -> RestApi - the message holds the information about the communication units linked to the device.
type GetDevicesCommunicationUnitsResponse {
  # The list of devices with their communication units.
  devices: [_mapListOfConnectionInfo]
}

# RestApi -> DriverRegistry - the request message to get the information about the device.
type GetDevicesRequest {
  # The UUID of the device.
  id: String
  # The external identifier of the device.
  external_id: String
  # The name of the device.
  name: String
}

# DriverRegistry -> RestApi - the message holds the information about the device.
type GetDevicesResponse {
  # The device specification.
  spec: [DeviceSpec]
}

# DriverRegistry -> RestApi - the message holds the information about the modem pool.
type GetModemPoolResponse {
  # The modems registered within the pool.
  modems: [ModemInfo]
  # The name of the modem pool.
  name: String
}

# RestApi -> DriverRegistry - the request message to get the modem pools.
type GetModemPoolsResponse {
  # The list of modem pools.
  pools: [ModemPoolSpec]
}

# Sub-message that represents the modem pool.
type ModemPoolSpec {
  # The modem pool identifier.
  pool_id: String
  # The name of the modem pool.
  name: String
}

# RestApi -> DriverRegistry - the request message to remove a device from the device group.
type RemoveDevicesFromGroupRequest {
  # The unique identifier of the device group.
  group_id: String
  # The unique identifier of the device.
  device_id: [String]
}

# RestApi -> DriverRegistry - the request message to add a new device to the communication unit.
type SetDeviceCommunicationUnitsRequest {
  # The unique identifier of the device.
  device_id: String
  # The list of linked communication units.
  communication_units: [DeviceCommunicationUnit]
}

type SetModemPoolRequest {
  # The modem pool identifier. It must be unique within the system.
  pool_id: String
  # The name of the modem pool to be created. It must be unique within the system.
  name: String
}

type SetModemRequest {
  # The modem pool identifier, required for update operation.
  pool_id: String
  # The modem specification.
  modem: ModemInfo
}

# Sub-message containing access level definition
type AccessLevelTemplate {
  # The access level identifier, such as "1", "G", "16" or similar.
  id: String
  # The access level name. Should be in English and unique for given driver, e.g. "Management", "Public".
  name: String
}

# Sub-message containing action-based variant of data values
type ActionData {
  # No data
  nodata: Empty
  # Register values
  billings: BillingValues
  # Profile values
  profile: ProfileValues
}

# Sub-message containing firmware update action specification
type ActionFwUpdate {
  _empty: Boolean
}

# Sub-message containing get clock action specification
type ActionGetClock {
  _empty: Boolean
}

# Sub-message containing get disconnector state action specification
type ActionGetDisconnectorState {
  _empty: Boolean
}

# Sub-message containing get events action specification
type ActionGetEvents {
  # The start timestamp of the profile.
  from: Timestamp
  # The end timestamp of the profile.
  to: Timestamp
}

# Sub-message containing get irregular profile action specification
type ActionGetIrregularProfile {
  # The start timestamp of the profile.
  from: Timestamp
  # The end timestamp of the profile.
  to: Timestamp
}

# Sub-message containing get limiter action specification
type ActionGetLimiter {
  _empty: Boolean
}

# Sub-message containing get periodical profile action specification
type ActionGetPeriodicalProfile {
  # The start timestamp of the profile.
  from: Timestamp
  # The end timestamp of the profile.
  to: Timestamp
}

# Sub-message containing get register action specification
type ActionGetRegister {
  _empty: Boolean
}

# Sub-message containing get relay state action specification
type ActionGetRelayState {
  _empty: Boolean
}

# Sub-message containing get tou action specification
type ActionGetTou {
  _empty: Boolean
}

# Sub-message containing reset billing period action specification
type ActionResetBillingPeriod {
  _empty: Boolean
}

# Sub-message containing set disconnector state action specification
type ActionSetDisconnectorState {
  _empty: Boolean
}

# Sub-message containing set limiter action specification
type ActionSetLimiter {
  _empty: Boolean
}

# Sub-message containing set relay state action specification
type ActionSetRelayState {
  _empty: Boolean
}

# Sub-message containing set tou action specification
type ActionSetTou {
  _empty: Boolean
}

# Sub-message containing sync clock action specification
type ActionSyncClock {
  _empty: Boolean
}

# Sub-message containing destription for one application protocol, e.g. DLMS_SN.
type ApplicationProtocolTemplate {
  # Unique identifier of the application protocol.
  id: String
  # The application protocol.
  protocol: ApplicationProtocol
  # The list of attribute definitions for the protocol.
  attributes: [AttributeDefinition]
}

# Addon for DB
type ListOfConnectionInfo {
  items: [DeviceConnectionInfo]
}

# Sub-message containing attribute definition
type AttributeDefinition {
  # The name of the attribute.
  name: String
  # The description of the attribute.
  description: String
  # The type of the attribute.
  type: AttributeType
  # The attribute is mandatory or not.
  mandatory: Boolean
  # The default value of the attribute.
  default_value: AttributeValue
  # Optional. The list of values (represented by keys) that can be set. The value is the human-readable description in English (translations are applies using i18 or similar framework outside of the templates). If no values is defined then any value is allowed.
  options: [_mapstring]
}

# Sub-message containing single attribute value specification
type AttributeValue {
  # The string-typed value.
  str_value: String
  # The integer-typed value.
  int_value: Int64
  # The double-typed value.
  double_value: Float
  # The binary-typed value.
  binary_value: String
  # The boolean-typed value.
  bool_value: Boolean
}

# Sub-message containing billing-typed value
type BillingValue {
  # The timestamp of the value.
  timestamp: Timestamp
  # The unit of the value.
  unit: String
  # The value.
  value: MeasuredValue
}

# Sub-message containing billing-typed values
type BillingValues {
  # The list of register values.
  values: [BillingValue]
}

# Sub-message containing destription for one communication type, e.g. TCP/IP.
type CommunicationTemplate {
  # The type of the communication.
  type: CommunicationType
  # The list of data link protocols and their app protocols supported by the driver.
  datalinks: [DataLinkTemplate]
}

# Sub-message containing connection info
type ConnectionInfo {
  # The TCP connection type.
  tcpip: ConnectionTypeDirectTcpIp
  # The phone connection type.
  modem_pool: ConnectionTypeModemPool
  # The serial over IP connection type.
  serial_over_ip: ConnectionTypeControlledSerial
  # The data link protocol.
  link_protocol: DataLinkProtocol
  # The custom group ID to link jobs together. If not set then jobs are grouped by group-key defined based on the connection type.
  custom_grouping_id: String
}

# Sub-message containing connection info for controlled-serial line over IP (e.g. Moxa) connection type
type ConnectionTypeControlledSerial {
  # The simple direct serial connection type.
  direct: ConnectionTypeSerialDirect
  # The Moxa connection type.
  moxa: ConnectionTypeSerialMoxa
}

# Sub-message containing connection info for TCP connection type
type ConnectionTypeDirectTcpIp {
  # The host name or IP address of the device to connect to.
  host: String
  # The TCP port number of the device to connect to.
  port: Int
  # The timeout in miliseconds for the connection.
  timeout: Int
}

# Sub-message containing connection info for phone line (modem) connection type
type ConnectionTypeModemPool {
  # The phone number of the device to connect to.
  number: String
  # The modem pool identifier. The pool is a group of modems that can be used to connect to the device. Final modem is selected by the Taskmaster at the time of the job start.
  pool_id: String
  # The modem device assigned to the job. This is filled only and only when the connection type is modem. The value is assigned by the Taskmaster when to job is being started. Driver is required to use this modem device to connect to the meter only and only for the time of this job!
  modem: ModemInfo
}

type ConnectionTypeSerialDirect {
  # The host name or IP address of the device to connect to.
  host: String
  # The TCP port number of the device to connect to.
  port: Int
}

# Sub-message containing connection info for controlled-serial line (Moxa) connection type
type ConnectionTypeSerialMoxa {
  # The host name or IP address of the device to connect to.
  host: String
  # The TCP port number of the device to connect to - data port.
  dataPort: Int
  # The TCP port number of the device to connect to - command port.
  commandPort: Int
}

# Sub-message containing destription for one data link protocol, e.g. HDLC.
type DataLinkTemplate {
  # The data link protocol.
  link_protocol: DataLinkProtocol
  # The list of application protocol identifiers supported by the driver.
  app_protocol_refs: [ApplicationProtocol]
  # The list of attribute definitions related to given data link type (see link_protocol property) and all those will be instantiated for each device.
  attributes: [AttributeDefinition]
}

# Addon
type DeviceConnectionInfo {
  # The unique identifier of the communication unit.
  communication_unit: ConnectionInfo
  # The application protocol to be used for the communication over the communication unit.
  app_protocol: ApplicationProtocol
  # The device attributes. For example HDLC address, password and other driver-specific attributes.
  device_attributes: [_mapAttributeValue]
}

# Sub-message in driver negotiation request
type DriverTemplates {
  # The templates of the communication options. Every template represents an option how the drivers allows to communicate. The driver can support multiple communication templates.
  communication_templates: [CommunicationTemplate]
  # The templates of the application protocols supported by the driver.
  app_protocols: [ApplicationProtocolTemplate]
  # The templates of the job actions for all supported action types. It must contain every action type supported by the driver once and only once.
  action_attributes: [JobActionAttributes]
  # The templates of the access levels supported by the driver.
  access_templates: [AccessLevelTemplate]
  # The templates of the job actions constraints.
  action_constraints: JobActionContraints
}

# Sub-message containing job action specification
type JobAction {
  # The action identifier.
  action_id: String
  # The action attributes.
  attributes: [_mapAttributeValue]
  # The get register action specification.
  get_register: ActionGetRegister
  # The get periodical profile action specification.
  get_periodical_profile: ActionGetPeriodicalProfile
  # The get irregular profile action specification.
  get_irregular_profile: ActionGetIrregularProfile
  # The get events action specification.
  get_events: ActionGetEvents
  # The get clock action specification.
  get_clock: ActionGetClock
  # The sync clock action specification.
  sync_clock: ActionSyncClock
  # The get relay state action specification.
  get_relay_state: ActionGetRelayState
  # The set relay state action specification.
  set_relay_state: ActionSetRelayState
  # The get disconnector state action specification.
  get_disconnector_state: ActionGetDisconnectorState
  # The set disconnector state action specification.
  set_disconnector_state: ActionSetDisconnectorState
  # The get tou action specification.
  get_tou: ActionGetTou
  # The set tou action specification.
  set_tou: ActionSetTou
  # The get limiter action specification.
  get_limiter: ActionGetLimiter
  # The set limiter action specification.
  set_limiter: ActionSetLimiter
  # The reset billing period action specification.
  reset_billing_period: ActionResetBillingPeriod
  # The firmware update action specification.
  fw_update: ActionFwUpdate
}

# Sub-message containing job action attributes
type JobActionAttributes {
  # The type of action for which this instance of the template is defined.
  type: ActionType
  # The template of the action attributes. It is represented as a list of attribute definitions.
  attributes: [AttributeDefinition]
}

# Sub-message containing constraints for job actions.
type JobActionContraints {
  # Contains all the register types & their names in the English language. For example: [gen]="Generic Register", [vqi]="Quality VQI Register"
  #  Action: ACTION_TYPE_GET_REGISTER
  get_register_type_name: [_mapstring]
  # Contains all the register types & their attributes. For example: [gen]=["attribute1", "attribute2"], [vqi]=["attribute1", "attribute3"]
  #  See JobActionAttributes for the attribute definitions.
  #  Action: ACTION_TYPE_GET_REGISTER
  get_register_type_attributes: [_mapStringList]
}

# Sub-message containing job parameters
type JobSettings {
  # Maximum duration of the job attempt in miliseconds. This is related to the real time for the driver.
  max_duration: Int64
  # Priority of the job.
  priority: JobPriority
  # Maximum number of attempts, 1 is the minimum.
  attempts: [Int]
  # Delay in miliseconds between two attempts.
  retry_delay: Int64
  # Number of miliseconds to wait before starting the job.
  defer_start: BigInt
  # The timestamp when the job expires.
  expires_at: Timestamp
}

# Sub-message containing measured value
type MeasuredValue {
  # The status of the value.
  status: Int64
  # The exponent of the value. It's used to calculate the real value as value * 10^exponent for double and int values.
  exponent: Int
  # The double-typed value.
  double_value: Float
  # The integer-typed value.
  int_value: Int64
  # The string-typed value.
  str_value: String
  # The timestamp-typed value.
  timestamp_value: Timestamp
  # The timestamp with timezone-typed value, stored as string in ISO-8601.
  timestamp_tz_value: String
  # The boolean-typed value.
  bool_value: Boolean
}

# Sub-message containing modem connection info
type ModemInfo {
  # The modem identifier. It is automatically generated during creation.
  id: String
  # The name of the modem.
  name: String
  # The modem initialization command.
  at_init: String
  # The modem test command.
  at_test: String
  # The modem configuration command.
  at_config: String
  # The modem dial command.
  at_dial: String
  # The modem hangup command.
  at_hangup: String
  # The modem escape command.
  at_escape: String
  # The modem DSR command.
  at_dsr: Boolean
  # The modem connection timeout.
  connect_timeout: Int
  # The TCP connection type. The modem has either TCP or there is a IP-to-serial converter which handles the serial configuration so no additional serial configuration is needed.
  tcpip: ConnectionTypeDirectTcpIp
}

# Sub-message containing a single profile block
type ProfileBlok {
  # The start timestamp of the block.
  start_timestamp: Timestamp
  # The list of profile values. Values are ordered by timestamp.
  values: [MeasuredValue]
}

# Sub-message containing profile-typed values
type ProfileValues {
  # The period of the profile values.
  period: Int
  # The unit of the profile values.
  unit: String
  # The list of continuous profile blocks.
  blocks: [ProfileBlok]
}

# Defines a mesasge as a list of strings.
type StringList {
  # The list of strings.
  items: [String]
}

# Sub-message containing driver info
type DriverInfo {
  # The driver unique identifier.
  driver_type: String
  # The version of the driver.
  version: String
}

# Taskmaster -> API get drivers response message
type GetDriversResponse {
  # The result of the operation.
  result: ErrorCode
  # The list of drivers.
  drivers: [DriverInfo]
}

# Sub-message containing action result for a single action.
type ActionResult {
  # The action identifier.
  action_id: String
  # The status of the action.
  status: ActionResultCode
  # The action result data.
  data: ActionData
}

# API -> Taskmaster cancel job request message
type CancelJobsRequest {
  # The job identifier.
  job_id: [String]
}

# Sub-message representing a single device info.
type JobDevice_1 {
  # The device (job) identifier.
  id: String
  # The device identifier. If set then all below is loaded from the device registry.
  device_id: String
  # The external identifier.
  external_id: String
  # The connection attributes to the device.
  device_attributes: [_mapAttributeValue]
  # The conenction (device) parameters.
  connection_info: [ConnectionInfo]
  # The application protocol.
  app_protocol: ApplicationProtocol
  # The timezone related to the device, e.g. "America/New_York", "Europe/Prague", "CET", "GMT", "Etc/GMT+2".
  timezone: String
}

# Sub-message containing job status info
type JobStatus {
  # The status of the job.
  status: JobStatusCode
  # The error code of the job.
  code: JobErrorCode
  # The result data for all job actions.
  results: [ActionResult]
  # The creation timestamp of the job.
  created_at: Timestamp
  # The start timestamp of the job.
  started_at: Timestamp
  # The finish timestamp of the job.
  finished_at: Timestamp
  # The number of attempts already done.
  attempts_done: Int
}

# API <-> Taskmaster request/response for system configuration
type SystemConfig {
  # The maximum number of replicas for the driver.
  max_replicas: Int
  # The maximum number of cascade devices for the driver.
  max_cascade_device_count: Int
  # The maximum number of slots per driver
  max_slots_per_driver: Int
}

type _mapAttributeValue {
  key: String!
  value: AttributeValue
}

type _mapDeviceGroupOverviewSpec {
  key: String!
  value: DeviceGroupOverviewSpec
}

type _mapListOfConnectionInfo {
  key: String!
  value: ListOfConnectionInfo
}

type _mapstring {
  key: String!
  value: String
}

type _mapStringList {
  key: String!
  value: StringList
}

type Query {
  createBulk: Empty
  getBulks: GetBulksResponse
  getBulk: GetBulkResponse
  getJobStatus: GetJobStatusResponse
  cancelBulk: Empty
  cancelJobs: Empty
  getConfig: SystemConfig
  setConfig: Empty
  createCommunicationUnit: Empty
  getCommunicationUnits: GetCommunicationUnitsResponse
  createDevice: Empty
  getDevices: GetDevicesResponse
  setDeviceCommunicationUnits: Empty
  getDevicesCommunicationUnits: GetDevicesCommunicationUnitsResponse
  createDeviceGroup: Empty
  getDeviceGroups: GetDeviceGroupsResponse
  getDeviceGroup: GetDeviceGroupResponse
  addDevicesToGroup: Empty
  removeDevicesFromGroup: Empty
  getModemPools: GetModemPoolsResponse
  getModemPool: GetModemPoolResponse
  createModemPool: Empty
  updateModemPool: Empty
  deleteModemPool: Empty
  createModem: Empty
  updateModem: Empty
  deleteModem: Empty
  getDrivers: GetDriversResponse
  getDriverTemplates: DriverTemplates
}

scalar Timestamp
scalar BigInt
scalar Int64
scalar UUID
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query___type_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query___type_argsName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["name"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_enumValues_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_enumValues_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_fields_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_fields_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AccessLevelTemplate_id(ctx context.Context, field graphql.CollectedField, obj *model.AccessLevelTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccessLevelTemplate_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccessLevelTemplate_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccessLevelTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccessLevelTemplate_name(ctx context.Context, field graphql.CollectedField, obj *model.AccessLevelTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccessLevelTemplate_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccessLevelTemplate_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccessLevelTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_nodata(ctx context.Context, field graphql.CollectedField, obj *model.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_nodata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_nodata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_billings(ctx context.Context, field graphql.CollectedField, obj *model.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_billings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Billings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BillingValues)
	fc.Result = res
	return ec.marshalOBillingValues2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBillingValues(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_billings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "values":
				return ec.fieldContext_BillingValues_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BillingValues", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_profile(ctx context.Context, field graphql.CollectedField, obj *model.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_profile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Profile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProfileValues)
	fc.Result = res
	return ec.marshalOProfileValues2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐProfileValues(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_profile(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "period":
				return ec.fieldContext_ProfileValues_period(ctx, field)
			case "unit":
				return ec.fieldContext_ProfileValues_unit(ctx, field)
			case "blocks":
				return ec.fieldContext_ProfileValues_blocks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProfileValues", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionFwUpdate__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionFwUpdate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionFwUpdate__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionFwUpdate__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionFwUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetClock__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetClock) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetClock__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetClock__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetClock",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetDisconnectorState__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetDisconnectorState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetDisconnectorState__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetDisconnectorState__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetDisconnectorState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetEvents_from(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetEvents) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetEvents_from(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.From, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetEvents_from(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetEvents",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetEvents_to(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetEvents) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetEvents_to(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetEvents_to(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetEvents",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetIrregularProfile_from(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetIrregularProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetIrregularProfile_from(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.From, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetIrregularProfile_from(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetIrregularProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetIrregularProfile_to(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetIrregularProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetIrregularProfile_to(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetIrregularProfile_to(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetIrregularProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetLimiter__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetLimiter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetLimiter__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetLimiter__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetLimiter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetPeriodicalProfile_from(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetPeriodicalProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetPeriodicalProfile_from(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.From, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetPeriodicalProfile_from(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetPeriodicalProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetPeriodicalProfile_to(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetPeriodicalProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetPeriodicalProfile_to(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetPeriodicalProfile_to(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetPeriodicalProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetRegister__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetRegister) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetRegister__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetRegister__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetRegister",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetRelayState__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetRelayState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetRelayState__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetRelayState__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetRelayState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetTou__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetTou) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetTou__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetTou__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetTou",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionResetBillingPeriod__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionResetBillingPeriod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionResetBillingPeriod__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionResetBillingPeriod__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionResetBillingPeriod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionResult_action_id(ctx context.Context, field graphql.CollectedField, obj *model.ActionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionResult_action_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionResult_action_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionResult_status(ctx context.Context, field graphql.CollectedField, obj *model.ActionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionResult_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionResultCode)
	fc.Result = res
	return ec.marshalOActionResultCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResultCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionResult_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActionResultCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionResult_data(ctx context.Context, field graphql.CollectedField, obj *model.ActionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionResult_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionData)
	fc.Result = res
	return ec.marshalOActionData2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionResult_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "nodata":
				return ec.fieldContext_ActionData_nodata(ctx, field)
			case "billings":
				return ec.fieldContext_ActionData_billings(ctx, field)
			case "profile":
				return ec.fieldContext_ActionData_profile(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSetDisconnectorState__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionSetDisconnectorState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSetDisconnectorState__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSetDisconnectorState__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSetDisconnectorState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSetLimiter__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionSetLimiter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSetLimiter__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSetLimiter__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSetLimiter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSetRelayState__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionSetRelayState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSetRelayState__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSetRelayState__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSetRelayState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSetTou__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionSetTou) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSetTou__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSetTou__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSetTou",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSyncClock__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionSyncClock) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSyncClock__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSyncClock__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSyncClock",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddDevicesToGroupRequest_group_id(ctx context.Context, field graphql.CollectedField, obj *model.AddDevicesToGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddDevicesToGroupRequest_group_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddDevicesToGroupRequest_group_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddDevicesToGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddDevicesToGroupRequest_device_id(ctx context.Context, field graphql.CollectedField, obj *model.AddDevicesToGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddDevicesToGroupRequest_device_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddDevicesToGroupRequest_device_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddDevicesToGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationProtocolTemplate_id(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationProtocolTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationProtocolTemplate_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationProtocolTemplate_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationProtocolTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationProtocolTemplate_protocol(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationProtocolTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationProtocolTemplate_protocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Protocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ApplicationProtocol)
	fc.Result = res
	return ec.marshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationProtocolTemplate_protocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationProtocolTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApplicationProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationProtocolTemplate_attributes(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationProtocolTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationProtocolTemplate_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AttributeDefinition)
	fc.Result = res
	return ec.marshalOAttributeDefinition2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeDefinition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationProtocolTemplate_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationProtocolTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_AttributeDefinition_name(ctx, field)
			case "description":
				return ec.fieldContext_AttributeDefinition_description(ctx, field)
			case "type":
				return ec.fieldContext_AttributeDefinition_type(ctx, field)
			case "mandatory":
				return ec.fieldContext_AttributeDefinition_mandatory(ctx, field)
			case "default_value":
				return ec.fieldContext_AttributeDefinition_default_value(ctx, field)
			case "options":
				return ec.fieldContext_AttributeDefinition_options(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AttributeDefinition", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfConnectionInfo_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfConnectionInfo_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceConnectionInfo)
	fc.Result = res
	return ec.marshalODeviceConnectionInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfConnectionInfo_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "communication_unit":
				return ec.fieldContext_DeviceConnectionInfo_communication_unit(ctx, field)
			case "app_protocol":
				return ec.fieldContext_DeviceConnectionInfo_app_protocol(ctx, field)
			case "device_attributes":
				return ec.fieldContext_DeviceConnectionInfo_device_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceConnectionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeDefinition_name(ctx context.Context, field graphql.CollectedField, obj *model.AttributeDefinition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeDefinition_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeDefinition_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeDefinition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeDefinition_description(ctx context.Context, field graphql.CollectedField, obj *model.AttributeDefinition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeDefinition_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeDefinition_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeDefinition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeDefinition_type(ctx context.Context, field graphql.CollectedField, obj *model.AttributeDefinition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeDefinition_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AttributeType)
	fc.Result = res
	return ec.marshalOAttributeType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeDefinition_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeDefinition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AttributeType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeDefinition_mandatory(ctx context.Context, field graphql.CollectedField, obj *model.AttributeDefinition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeDefinition_mandatory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mandatory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeDefinition_mandatory(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeDefinition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeDefinition_default_value(ctx context.Context, field graphql.CollectedField, obj *model.AttributeDefinition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeDefinition_default_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AttributeValue)
	fc.Result = res
	return ec.marshalOAttributeValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeDefinition_default_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeDefinition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "str_value":
				return ec.fieldContext_AttributeValue_str_value(ctx, field)
			case "int_value":
				return ec.fieldContext_AttributeValue_int_value(ctx, field)
			case "double_value":
				return ec.fieldContext_AttributeValue_double_value(ctx, field)
			case "binary_value":
				return ec.fieldContext_AttributeValue_binary_value(ctx, field)
			case "bool_value":
				return ec.fieldContext_AttributeValue_bool_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AttributeValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeDefinition_options(ctx context.Context, field graphql.CollectedField, obj *model.AttributeDefinition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeDefinition_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Mapstring)
	fc.Result = res
	return ec.marshalO_mapstring2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeDefinition_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeDefinition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapstring_key(ctx, field)
			case "value":
				return ec.fieldContext__mapstring_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapstring", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeValue_str_value(ctx context.Context, field graphql.CollectedField, obj *model.AttributeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeValue_str_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StrValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeValue_str_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeValue_int_value(ctx context.Context, field graphql.CollectedField, obj *model.AttributeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeValue_int_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeValue_int_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeValue_double_value(ctx context.Context, field graphql.CollectedField, obj *model.AttributeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeValue_double_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoubleValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeValue_double_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeValue_binary_value(ctx context.Context, field graphql.CollectedField, obj *model.AttributeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeValue_binary_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BinaryValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeValue_binary_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeValue_bool_value(ctx context.Context, field graphql.CollectedField, obj *model.AttributeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeValue_bool_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoolValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeValue_bool_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingValue_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.BillingValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingValue_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingValue_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingValue_unit(ctx context.Context, field graphql.CollectedField, obj *model.BillingValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingValue_unit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingValue_unit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingValue_value(ctx context.Context, field graphql.CollectedField, obj *model.BillingValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MeasuredValue)
	fc.Result = res
	return ec.marshalOMeasuredValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMeasuredValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingValue_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_MeasuredValue_status(ctx, field)
			case "exponent":
				return ec.fieldContext_MeasuredValue_exponent(ctx, field)
			case "double_value":
				return ec.fieldContext_MeasuredValue_double_value(ctx, field)
			case "int_value":
				return ec.fieldContext_MeasuredValue_int_value(ctx, field)
			case "str_value":
				return ec.fieldContext_MeasuredValue_str_value(ctx, field)
			case "timestamp_value":
				return ec.fieldContext_MeasuredValue_timestamp_value(ctx, field)
			case "timestamp_tz_value":
				return ec.fieldContext_MeasuredValue_timestamp_tz_value(ctx, field)
			case "bool_value":
				return ec.fieldContext_MeasuredValue_bool_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MeasuredValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingValues_values(ctx context.Context, field graphql.CollectedField, obj *model.BillingValues) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingValues_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.BillingValue)
	fc.Result = res
	return ec.marshalOBillingValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBillingValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingValues_values(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingValues",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_BillingValue_timestamp(ctx, field)
			case "unit":
				return ec.fieldContext_BillingValue_unit(ctx, field)
			case "value":
				return ec.fieldContext_BillingValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BillingValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkJobStatus_job_id(ctx context.Context, field graphql.CollectedField, obj *model.BulkJobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkJobStatus_job_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkJobStatus_job_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkJobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkJobStatus_status(ctx context.Context, field graphql.CollectedField, obj *model.BulkJobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkJobStatus_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobStatus)
	fc.Result = res
	return ec.marshalOJobStatus2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkJobStatus_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkJobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_JobStatus_status(ctx, field)
			case "code":
				return ec.fieldContext_JobStatus_code(ctx, field)
			case "results":
				return ec.fieldContext_JobStatus_results(ctx, field)
			case "created_at":
				return ec.fieldContext_JobStatus_created_at(ctx, field)
			case "started_at":
				return ec.fieldContext_JobStatus_started_at(ctx, field)
			case "finished_at":
				return ec.fieldContext_JobStatus_finished_at(ctx, field)
			case "attempts_done":
				return ec.fieldContext_JobStatus_attempts_done(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_bulk_id(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_bulk_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BulkID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_bulk_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_correlation_id(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_correlation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrelationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_correlation_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_org_id(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_org_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_org_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_driver_type(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_driver_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_driver_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_devices(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_devices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Devices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JobDevice)
	fc.Result = res
	return ec.marshalOJobDevice2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_devices(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JobDevice_id(ctx, field)
			case "device_id":
				return ec.fieldContext_JobDevice_device_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobDevice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_settings(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_settings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobSettings)
	fc.Result = res
	return ec.marshalOJobSettings2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_settings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "max_duration":
				return ec.fieldContext_JobSettings_max_duration(ctx, field)
			case "priority":
				return ec.fieldContext_JobSettings_priority(ctx, field)
			case "attempts":
				return ec.fieldContext_JobSettings_attempts(ctx, field)
			case "retry_delay":
				return ec.fieldContext_JobSettings_retry_delay(ctx, field)
			case "defer_start":
				return ec.fieldContext_JobSettings_defer_start(ctx, field)
			case "expires_at":
				return ec.fieldContext_JobSettings_expires_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_job_actions(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_job_actions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobActions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JobAction)
	fc.Result = res
	return ec.marshalOJobAction2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobAction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_job_actions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "action_id":
				return ec.fieldContext_JobAction_action_id(ctx, field)
			case "attributes":
				return ec.fieldContext_JobAction_attributes(ctx, field)
			case "get_register":
				return ec.fieldContext_JobAction_get_register(ctx, field)
			case "get_periodical_profile":
				return ec.fieldContext_JobAction_get_periodical_profile(ctx, field)
			case "get_irregular_profile":
				return ec.fieldContext_JobAction_get_irregular_profile(ctx, field)
			case "get_events":
				return ec.fieldContext_JobAction_get_events(ctx, field)
			case "get_clock":
				return ec.fieldContext_JobAction_get_clock(ctx, field)
			case "sync_clock":
				return ec.fieldContext_JobAction_sync_clock(ctx, field)
			case "get_relay_state":
				return ec.fieldContext_JobAction_get_relay_state(ctx, field)
			case "set_relay_state":
				return ec.fieldContext_JobAction_set_relay_state(ctx, field)
			case "get_disconnector_state":
				return ec.fieldContext_JobAction_get_disconnector_state(ctx, field)
			case "set_disconnector_state":
				return ec.fieldContext_JobAction_set_disconnector_state(ctx, field)
			case "get_tou":
				return ec.fieldContext_JobAction_get_tou(ctx, field)
			case "set_tou":
				return ec.fieldContext_JobAction_set_tou(ctx, field)
			case "get_limiter":
				return ec.fieldContext_JobAction_get_limiter(ctx, field)
			case "set_limiter":
				return ec.fieldContext_JobAction_set_limiter(ctx, field)
			case "reset_billing_period":
				return ec.fieldContext_JobAction_reset_billing_period(ctx, field)
			case "fw_update":
				return ec.fieldContext_JobAction_fw_update(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobAction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_webhook_url(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_webhook_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebhookURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_webhook_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_user_id(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_user_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkStatus_status(ctx context.Context, field graphql.CollectedField, obj *model.BulkStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkStatus_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BulkStatusCode)
	fc.Result = res
	return ec.marshalOBulkStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkStatusCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkStatus_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BulkStatusCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkStatus_jobs(ctx context.Context, field graphql.CollectedField, obj *model.BulkStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkStatus_jobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Jobs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.BulkJobStatus)
	fc.Result = res
	return ec.marshalOBulkJobStatus2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkJobStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkStatus_jobs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "job_id":
				return ec.fieldContext_BulkJobStatus_job_id(ctx, field)
			case "status":
				return ec.fieldContext_BulkJobStatus_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BulkJobStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CancelJobsRequest_job_id(ctx context.Context, field graphql.CollectedField, obj *model.CancelJobsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CancelJobsRequest_job_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CancelJobsRequest_job_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CancelJobsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationTemplate_type(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationTemplate_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommunicationType)
	fc.Result = res
	return ec.marshalOCommunicationType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationTemplate_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CommunicationType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationTemplate_datalinks(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationTemplate_datalinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Datalinks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DataLinkTemplate)
	fc.Result = res
	return ec.marshalODataLinkTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDataLinkTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationTemplate_datalinks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "link_protocol":
				return ec.fieldContext_DataLinkTemplate_link_protocol(ctx, field)
			case "app_protocol_refs":
				return ec.fieldContext_DataLinkTemplate_app_protocol_refs(ctx, field)
			case "attributes":
				return ec.fieldContext_DataLinkTemplate_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DataLinkTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationUnitSpec_id(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationUnitSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationUnitSpec_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationUnitSpec_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationUnitSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationUnitSpec_external_id(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationUnitSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationUnitSpec_external_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationUnitSpec_external_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationUnitSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationUnitSpec_name(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationUnitSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationUnitSpec_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationUnitSpec_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationUnitSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationUnitSpec_connection_info(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationUnitSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationUnitSpec_connection_info(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalOConnectionInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationUnitSpec_connection_info(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationUnitSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tcpip":
				return ec.fieldContext_ConnectionInfo_tcpip(ctx, field)
			case "modem_pool":
				return ec.fieldContext_ConnectionInfo_modem_pool(ctx, field)
			case "serial_over_ip":
				return ec.fieldContext_ConnectionInfo_serial_over_ip(ctx, field)
			case "link_protocol":
				return ec.fieldContext_ConnectionInfo_link_protocol(ctx, field)
			case "custom_grouping_id":
				return ec.fieldContext_ConnectionInfo_custom_grouping_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_tcpip(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_tcpip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tcpip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeDirectTCPIP)
	fc.Result = res
	return ec.marshalOConnectionTypeDirectTcpIp2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeDirectTCPIP(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_tcpip(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "host":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_port(ctx, field)
			case "timeout":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_timeout(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeDirectTcpIp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_modem_pool(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_modem_pool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModemPool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeModemPool)
	fc.Result = res
	return ec.marshalOConnectionTypeModemPool2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeModemPool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_modem_pool(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "number":
				return ec.fieldContext_ConnectionTypeModemPool_number(ctx, field)
			case "pool_id":
				return ec.fieldContext_ConnectionTypeModemPool_pool_id(ctx, field)
			case "modem":
				return ec.fieldContext_ConnectionTypeModemPool_modem(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeModemPool", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_serial_over_ip(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_serial_over_ip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SerialOverIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeControlledSerial)
	fc.Result = res
	return ec.marshalOConnectionTypeControlledSerial2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeControlledSerial(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_serial_over_ip(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "direct":
				return ec.fieldContext_ConnectionTypeControlledSerial_direct(ctx, field)
			case "moxa":
				return ec.fieldContext_ConnectionTypeControlledSerial_moxa(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeControlledSerial", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_link_protocol(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_link_protocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkProtocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataLinkProtocol)
	fc.Result = res
	return ec.marshalODataLinkProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDataLinkProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_link_protocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataLinkProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_custom_grouping_id(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_custom_grouping_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomGroupingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_custom_grouping_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeControlledSerial_direct(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeControlledSerial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeControlledSerial_direct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeSerialDirect)
	fc.Result = res
	return ec.marshalOConnectionTypeSerialDirect2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeSerialDirect(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeControlledSerial_direct(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeControlledSerial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "host":
				return ec.fieldContext_ConnectionTypeSerialDirect_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionTypeSerialDirect_port(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeSerialDirect", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeControlledSerial_moxa(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeControlledSerial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeControlledSerial_moxa(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Moxa, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeSerialMoxa)
	fc.Result = res
	return ec.marshalOConnectionTypeSerialMoxa2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeSerialMoxa(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeControlledSerial_moxa(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeControlledSerial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "host":
				return ec.fieldContext_ConnectionTypeSerialMoxa_host(ctx, field)
			case "dataPort":
				return ec.fieldContext_ConnectionTypeSerialMoxa_dataPort(ctx, field)
			case "commandPort":
				return ec.fieldContext_ConnectionTypeSerialMoxa_commandPort(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeSerialMoxa", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeDirectTcpIp_host(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeDirectTCPIP) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeDirectTcpIp_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeDirectTcpIp_host(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeDirectTcpIp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeDirectTcpIp_port(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeDirectTCPIP) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeDirectTcpIp_port(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeDirectTcpIp_port(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeDirectTcpIp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeDirectTcpIp_timeout(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeDirectTCPIP) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeDirectTcpIp_timeout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeDirectTcpIp_timeout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeDirectTcpIp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeModemPool_number(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeModemPool_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeModemPool_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeModemPool_pool_id(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeModemPool_pool_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeModemPool_pool_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeModemPool_modem(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeModemPool_modem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ModemInfo)
	fc.Result = res
	return ec.marshalOModemInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeModemPool_modem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModemInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_ModemInfo_name(ctx, field)
			case "at_init":
				return ec.fieldContext_ModemInfo_at_init(ctx, field)
			case "at_test":
				return ec.fieldContext_ModemInfo_at_test(ctx, field)
			case "at_config":
				return ec.fieldContext_ModemInfo_at_config(ctx, field)
			case "at_dial":
				return ec.fieldContext_ModemInfo_at_dial(ctx, field)
			case "at_hangup":
				return ec.fieldContext_ModemInfo_at_hangup(ctx, field)
			case "at_escape":
				return ec.fieldContext_ModemInfo_at_escape(ctx, field)
			case "at_dsr":
				return ec.fieldContext_ModemInfo_at_dsr(ctx, field)
			case "connect_timeout":
				return ec.fieldContext_ModemInfo_connect_timeout(ctx, field)
			case "tcpip":
				return ec.fieldContext_ModemInfo_tcpip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialDirect_host(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialDirect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialDirect_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialDirect_host(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialDirect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialDirect_port(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialDirect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialDirect_port(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialDirect_port(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialDirect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialMoxa_host(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialMoxa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialMoxa_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialMoxa_host(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialMoxa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialMoxa_dataPort(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialMoxa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialMoxa_dataPort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataPort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialMoxa_dataPort(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialMoxa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialMoxa_commandPort(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialMoxa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialMoxa_commandPort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommandPort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialMoxa_commandPort(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialMoxa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCommunicationUnitRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateCommunicationUnitRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCommunicationUnitRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommunicationUnitSpec)
	fc.Result = res
	return ec.marshalOCommunicationUnitSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationUnitSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCommunicationUnitRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCommunicationUnitRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CommunicationUnitSpec_id(ctx, field)
			case "external_id":
				return ec.fieldContext_CommunicationUnitSpec_external_id(ctx, field)
			case "name":
				return ec.fieldContext_CommunicationUnitSpec_name(ctx, field)
			case "connection_info":
				return ec.fieldContext_CommunicationUnitSpec_connection_info(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunicationUnitSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDeviceGroupRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateDeviceGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDeviceGroupRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceGroupSpec)
	fc.Result = res
	return ec.marshalODeviceGroupSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceGroupSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDeviceGroupRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDeviceGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeviceGroupSpec_id(ctx, field)
			case "external_id":
				return ec.fieldContext_DeviceGroupSpec_external_id(ctx, field)
			case "name":
				return ec.fieldContext_DeviceGroupSpec_name(ctx, field)
			case "device_id":
				return ec.fieldContext_DeviceGroupSpec_device_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceGroupSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDeviceRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateDeviceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDeviceRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceSpec)
	fc.Result = res
	return ec.marshalODeviceSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDeviceRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDeviceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeviceSpec_id(ctx, field)
			case "external_id":
				return ec.fieldContext_DeviceSpec_external_id(ctx, field)
			case "name":
				return ec.fieldContext_DeviceSpec_name(ctx, field)
			case "attributes":
				return ec.fieldContext_DeviceSpec_attributes(ctx, field)
			case "communication_unit_link":
				return ec.fieldContext_DeviceSpec_communication_unit_link(ctx, field)
			case "timezone":
				return ec.fieldContext_DeviceSpec_timezone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataLinkTemplate_link_protocol(ctx context.Context, field graphql.CollectedField, obj *model.DataLinkTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataLinkTemplate_link_protocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkProtocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataLinkProtocol)
	fc.Result = res
	return ec.marshalODataLinkProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDataLinkProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataLinkTemplate_link_protocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataLinkTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataLinkProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataLinkTemplate_app_protocol_refs(ctx context.Context, field graphql.CollectedField, obj *model.DataLinkTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataLinkTemplate_app_protocol_refs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppProtocolRefs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ApplicationProtocol)
	fc.Result = res
	return ec.marshalOApplicationProtocol2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataLinkTemplate_app_protocol_refs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataLinkTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApplicationProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataLinkTemplate_attributes(ctx context.Context, field graphql.CollectedField, obj *model.DataLinkTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataLinkTemplate_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AttributeDefinition)
	fc.Result = res
	return ec.marshalOAttributeDefinition2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeDefinition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataLinkTemplate_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataLinkTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_AttributeDefinition_name(ctx, field)
			case "description":
				return ec.fieldContext_AttributeDefinition_description(ctx, field)
			case "type":
				return ec.fieldContext_AttributeDefinition_type(ctx, field)
			case "mandatory":
				return ec.fieldContext_AttributeDefinition_mandatory(ctx, field)
			case "default_value":
				return ec.fieldContext_AttributeDefinition_default_value(ctx, field)
			case "options":
				return ec.fieldContext_AttributeDefinition_options(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AttributeDefinition", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceCommunicationUnit_communication_unit_id(ctx context.Context, field graphql.CollectedField, obj *model.DeviceCommunicationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceCommunicationUnit_communication_unit_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationUnitID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceCommunicationUnit_communication_unit_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceCommunicationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceCommunicationUnit_app_protocol(ctx context.Context, field graphql.CollectedField, obj *model.DeviceCommunicationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceCommunicationUnit_app_protocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppProtocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ApplicationProtocol)
	fc.Result = res
	return ec.marshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceCommunicationUnit_app_protocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceCommunicationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApplicationProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceConnectionInfo_communication_unit(ctx context.Context, field graphql.CollectedField, obj *model.DeviceConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceConnectionInfo_communication_unit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalOConnectionInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceConnectionInfo_communication_unit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tcpip":
				return ec.fieldContext_ConnectionInfo_tcpip(ctx, field)
			case "modem_pool":
				return ec.fieldContext_ConnectionInfo_modem_pool(ctx, field)
			case "serial_over_ip":
				return ec.fieldContext_ConnectionInfo_serial_over_ip(ctx, field)
			case "link_protocol":
				return ec.fieldContext_ConnectionInfo_link_protocol(ctx, field)
			case "custom_grouping_id":
				return ec.fieldContext_ConnectionInfo_custom_grouping_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceConnectionInfo_app_protocol(ctx context.Context, field graphql.CollectedField, obj *model.DeviceConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceConnectionInfo_app_protocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppProtocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ApplicationProtocol)
	fc.Result = res
	return ec.marshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceConnectionInfo_app_protocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApplicationProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceConnectionInfo_device_attributes(ctx context.Context, field graphql.CollectedField, obj *model.DeviceConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceConnectionInfo_device_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceAttributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapAttributeValue)
	fc.Result = res
	return ec.marshalO_mapAttributeValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAttributeValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceConnectionInfo_device_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapAttributeValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapAttributeValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapAttributeValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceGroupOverviewSpec_id(ctx context.Context, field graphql.CollectedField, obj *model.DeviceGroupOverviewSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceGroupOverviewSpec_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceGroupOverviewSpec_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceGroupOverviewSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceGroupOverviewSpec_external_id(ctx context.Context, field graphql.CollectedField, obj *model.DeviceGroupOverviewSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceGroupOverviewSpec_external_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceGroupOverviewSpec_external_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceGroupOverviewSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceGroupOverviewSpec_name(ctx context.Context, field graphql.CollectedField, obj *model.DeviceGroupOverviewSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceGroupOverviewSpec_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceGroupOverviewSpec_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceGroupOverviewSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceGroupSpec_id(ctx context.Context, field graphql.CollectedField, obj *model.DeviceGroupSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceGroupSpec_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceGroupSpec_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceGroupSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceGroupSpec_external_id(ctx context.Context, field graphql.CollectedField, obj *model.DeviceGroupSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceGroupSpec_external_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceGroupSpec_external_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceGroupSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceGroupSpec_name(ctx context.Context, field graphql.CollectedField, obj *model.DeviceGroupSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceGroupSpec_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceGroupSpec_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceGroupSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceGroupSpec_device_id(ctx context.Context, field graphql.CollectedField, obj *model.DeviceGroupSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceGroupSpec_device_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceGroupSpec_device_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceGroupSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceSpec_id(ctx context.Context, field graphql.CollectedField, obj *model.DeviceSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceSpec_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceSpec_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceSpec_external_id(ctx context.Context, field graphql.CollectedField, obj *model.DeviceSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceSpec_external_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceSpec_external_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceSpec_name(ctx context.Context, field graphql.CollectedField, obj *model.DeviceSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceSpec_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceSpec_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceSpec_attributes(ctx context.Context, field graphql.CollectedField, obj *model.DeviceSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceSpec_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapAttributeValue)
	fc.Result = res
	return ec.marshalO_mapAttributeValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAttributeValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceSpec_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapAttributeValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapAttributeValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapAttributeValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceSpec_communication_unit_link(ctx context.Context, field graphql.CollectedField, obj *model.DeviceSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceSpec_communication_unit_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationUnitLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceCommunicationUnit)
	fc.Result = res
	return ec.marshalODeviceCommunicationUnit2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceCommunicationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceSpec_communication_unit_link(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "communication_unit_id":
				return ec.fieldContext_DeviceCommunicationUnit_communication_unit_id(ctx, field)
			case "app_protocol":
				return ec.fieldContext_DeviceCommunicationUnit_app_protocol(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceCommunicationUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceSpec_timezone(ctx context.Context, field graphql.CollectedField, obj *model.DeviceSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceSpec_timezone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timezone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceSpec_timezone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_driver_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_driver_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_driver_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_version(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverTemplates_communication_templates(ctx context.Context, field graphql.CollectedField, obj *model.DriverTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverTemplates_communication_templates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationTemplates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommunicationTemplate)
	fc.Result = res
	return ec.marshalOCommunicationTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverTemplates_communication_templates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_CommunicationTemplate_type(ctx, field)
			case "datalinks":
				return ec.fieldContext_CommunicationTemplate_datalinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunicationTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverTemplates_app_protocols(ctx context.Context, field graphql.CollectedField, obj *model.DriverTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverTemplates_app_protocols(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppProtocols, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ApplicationProtocolTemplate)
	fc.Result = res
	return ec.marshalOApplicationProtocolTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocolTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverTemplates_app_protocols(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ApplicationProtocolTemplate_id(ctx, field)
			case "protocol":
				return ec.fieldContext_ApplicationProtocolTemplate_protocol(ctx, field)
			case "attributes":
				return ec.fieldContext_ApplicationProtocolTemplate_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApplicationProtocolTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverTemplates_action_attributes(ctx context.Context, field graphql.CollectedField, obj *model.DriverTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverTemplates_action_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionAttributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JobActionAttributes)
	fc.Result = res
	return ec.marshalOJobActionAttributes2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobActionAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverTemplates_action_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_JobActionAttributes_type(ctx, field)
			case "attributes":
				return ec.fieldContext_JobActionAttributes_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobActionAttributes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverTemplates_access_templates(ctx context.Context, field graphql.CollectedField, obj *model.DriverTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverTemplates_access_templates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessTemplates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AccessLevelTemplate)
	fc.Result = res
	return ec.marshalOAccessLevelTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAccessLevelTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverTemplates_access_templates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccessLevelTemplate_id(ctx, field)
			case "name":
				return ec.fieldContext_AccessLevelTemplate_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccessLevelTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverTemplates_action_constraints(ctx context.Context, field graphql.CollectedField, obj *model.DriverTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverTemplates_action_constraints(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionConstraints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobActionContraints)
	fc.Result = res
	return ec.marshalOJobActionContraints2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobActionContraints(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverTemplates_action_constraints(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "get_register_type_name":
				return ec.fieldContext_JobActionContraints_get_register_type_name(ctx, field)
			case "get_register_type_attributes":
				return ec.fieldContext_JobActionContraints_get_register_type_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobActionContraints", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empty__empty(ctx context.Context, field graphql.CollectedField, obj *model.Empty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empty__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empty__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetBulkRequest_bulk_id(ctx context.Context, field graphql.CollectedField, obj *model.GetBulkRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetBulkRequest_bulk_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BulkID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetBulkRequest_bulk_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetBulkRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetBulkResponse_spec(ctx context.Context, field graphql.CollectedField, obj *model.GetBulkResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetBulkResponse_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BulkSpec)
	fc.Result = res
	return ec.marshalOBulkSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetBulkResponse_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetBulkResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "bulk_id":
				return ec.fieldContext_BulkSpec_bulk_id(ctx, field)
			case "correlation_id":
				return ec.fieldContext_BulkSpec_correlation_id(ctx, field)
			case "org_id":
				return ec.fieldContext_BulkSpec_org_id(ctx, field)
			case "driver_type":
				return ec.fieldContext_BulkSpec_driver_type(ctx, field)
			case "devices":
				return ec.fieldContext_BulkSpec_devices(ctx, field)
			case "settings":
				return ec.fieldContext_BulkSpec_settings(ctx, field)
			case "job_actions":
				return ec.fieldContext_BulkSpec_job_actions(ctx, field)
			case "webhook_url":
				return ec.fieldContext_BulkSpec_webhook_url(ctx, field)
			case "user_id":
				return ec.fieldContext_BulkSpec_user_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BulkSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetBulkResponse_status(ctx context.Context, field graphql.CollectedField, obj *model.GetBulkResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetBulkResponse_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BulkStatus)
	fc.Result = res
	return ec.marshalOBulkStatus2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetBulkResponse_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetBulkResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_BulkStatus_status(ctx, field)
			case "jobs":
				return ec.fieldContext_BulkStatus_jobs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BulkStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetBulksResponse_bulks(ctx context.Context, field graphql.CollectedField, obj *model.GetBulksResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetBulksResponse_bulks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bulks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GetBulkResponse)
	fc.Result = res
	return ec.marshalOGetBulkResponse2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetBulkResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetBulksResponse_bulks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetBulksResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_GetBulkResponse_spec(ctx, field)
			case "status":
				return ec.fieldContext_GetBulkResponse_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetBulkResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetBulksReuqest_tfrom(ctx context.Context, field graphql.CollectedField, obj *model.GetBulksReuqest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetBulksReuqest_tfrom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tfrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetBulksReuqest_tfrom(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetBulksReuqest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetBulksReuqest_tto(ctx context.Context, field graphql.CollectedField, obj *model.GetBulksReuqest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetBulksReuqest_tto(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tto, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetBulksReuqest_tto(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetBulksReuqest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetBulksReuqest_include_data(ctx context.Context, field graphql.CollectedField, obj *model.GetBulksReuqest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetBulksReuqest_include_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncludeData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetBulksReuqest_include_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetBulksReuqest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetCommunicationUnitsRequest_id(ctx context.Context, field graphql.CollectedField, obj *model.GetCommunicationUnitsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetCommunicationUnitsRequest_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetCommunicationUnitsRequest_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetCommunicationUnitsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetCommunicationUnitsRequest_external_id(ctx context.Context, field graphql.CollectedField, obj *model.GetCommunicationUnitsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetCommunicationUnitsRequest_external_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetCommunicationUnitsRequest_external_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetCommunicationUnitsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetCommunicationUnitsRequest_name(ctx context.Context, field graphql.CollectedField, obj *model.GetCommunicationUnitsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetCommunicationUnitsRequest_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetCommunicationUnitsRequest_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetCommunicationUnitsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetCommunicationUnitsResponse_spec(ctx context.Context, field graphql.CollectedField, obj *model.GetCommunicationUnitsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetCommunicationUnitsResponse_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommunicationUnitSpec)
	fc.Result = res
	return ec.marshalOCommunicationUnitSpec2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationUnitSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetCommunicationUnitsResponse_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetCommunicationUnitsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CommunicationUnitSpec_id(ctx, field)
			case "external_id":
				return ec.fieldContext_CommunicationUnitSpec_external_id(ctx, field)
			case "name":
				return ec.fieldContext_CommunicationUnitSpec_name(ctx, field)
			case "connection_info":
				return ec.fieldContext_CommunicationUnitSpec_connection_info(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunicationUnitSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDeviceGroupResponse_spec(ctx context.Context, field graphql.CollectedField, obj *model.GetDeviceGroupResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDeviceGroupResponse_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceGroupSpec)
	fc.Result = res
	return ec.marshalODeviceGroupSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceGroupSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDeviceGroupResponse_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDeviceGroupResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeviceGroupSpec_id(ctx, field)
			case "external_id":
				return ec.fieldContext_DeviceGroupSpec_external_id(ctx, field)
			case "name":
				return ec.fieldContext_DeviceGroupSpec_name(ctx, field)
			case "device_id":
				return ec.fieldContext_DeviceGroupSpec_device_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceGroupSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDeviceGroupsResponse_groups(ctx context.Context, field graphql.CollectedField, obj *model.GetDeviceGroupsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDeviceGroupsResponse_groups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Groups, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapDeviceGroupOverviewSpec)
	fc.Result = res
	return ec.marshalO_mapDeviceGroupOverviewSpec2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapDeviceGroupOverviewSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDeviceGroupsResponse_groups(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDeviceGroupsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapDeviceGroupOverviewSpec_key(ctx, field)
			case "value":
				return ec.fieldContext__mapDeviceGroupOverviewSpec_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapDeviceGroupOverviewSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDevicesCommunicationUnitsRequest_device_id(ctx context.Context, field graphql.CollectedField, obj *model.GetDevicesCommunicationUnitsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDevicesCommunicationUnitsRequest_device_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDevicesCommunicationUnitsRequest_device_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDevicesCommunicationUnitsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDevicesCommunicationUnitsResponse_devices(ctx context.Context, field graphql.CollectedField, obj *model.GetDevicesCommunicationUnitsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDevicesCommunicationUnitsResponse_devices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Devices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapListOfConnectionInfo)
	fc.Result = res
	return ec.marshalO_mapListOfConnectionInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapListOfConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDevicesCommunicationUnitsResponse_devices(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDevicesCommunicationUnitsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapListOfConnectionInfo_key(ctx, field)
			case "value":
				return ec.fieldContext__mapListOfConnectionInfo_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapListOfConnectionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDevicesRequest_id(ctx context.Context, field graphql.CollectedField, obj *model.GetDevicesRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDevicesRequest_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDevicesRequest_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDevicesRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDevicesRequest_external_id(ctx context.Context, field graphql.CollectedField, obj *model.GetDevicesRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDevicesRequest_external_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDevicesRequest_external_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDevicesRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDevicesRequest_name(ctx context.Context, field graphql.CollectedField, obj *model.GetDevicesRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDevicesRequest_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDevicesRequest_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDevicesRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDevicesResponse_spec(ctx context.Context, field graphql.CollectedField, obj *model.GetDevicesResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDevicesResponse_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceSpec)
	fc.Result = res
	return ec.marshalODeviceSpec2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDevicesResponse_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDevicesResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeviceSpec_id(ctx, field)
			case "external_id":
				return ec.fieldContext_DeviceSpec_external_id(ctx, field)
			case "name":
				return ec.fieldContext_DeviceSpec_name(ctx, field)
			case "attributes":
				return ec.fieldContext_DeviceSpec_attributes(ctx, field)
			case "communication_unit_link":
				return ec.fieldContext_DeviceSpec_communication_unit_link(ctx, field)
			case "timezone":
				return ec.fieldContext_DeviceSpec_timezone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDriversResponse_result(ctx context.Context, field graphql.CollectedField, obj *model.GetDriversResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDriversResponse_result(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ErrorCode)
	fc.Result = res
	return ec.marshalOErrorCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐErrorCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDriversResponse_result(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDriversResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ErrorCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDriversResponse_drivers(ctx context.Context, field graphql.CollectedField, obj *model.GetDriversResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDriversResponse_drivers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Drivers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DriverInfo)
	fc.Result = res
	return ec.marshalODriverInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDriverInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDriversResponse_drivers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDriversResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "driver_type":
				return ec.fieldContext_DriverInfo_driver_type(ctx, field)
			case "version":
				return ec.fieldContext_DriverInfo_version(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DriverInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetJobStatusRequest_job_id(ctx context.Context, field graphql.CollectedField, obj *model.GetJobStatusRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetJobStatusRequest_job_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetJobStatusRequest_job_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetJobStatusRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetJobStatusResponse_status(ctx context.Context, field graphql.CollectedField, obj *model.GetJobStatusResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetJobStatusResponse_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobStatus)
	fc.Result = res
	return ec.marshalOJobStatus2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetJobStatusResponse_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetJobStatusResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_JobStatus_status(ctx, field)
			case "code":
				return ec.fieldContext_JobStatus_code(ctx, field)
			case "results":
				return ec.fieldContext_JobStatus_results(ctx, field)
			case "created_at":
				return ec.fieldContext_JobStatus_created_at(ctx, field)
			case "started_at":
				return ec.fieldContext_JobStatus_started_at(ctx, field)
			case "finished_at":
				return ec.fieldContext_JobStatus_finished_at(ctx, field)
			case "attempts_done":
				return ec.fieldContext_JobStatus_attempts_done(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetModemPoolResponse_modems(ctx context.Context, field graphql.CollectedField, obj *model.GetModemPoolResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetModemPoolResponse_modems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ModemInfo)
	fc.Result = res
	return ec.marshalOModemInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetModemPoolResponse_modems(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetModemPoolResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModemInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_ModemInfo_name(ctx, field)
			case "at_init":
				return ec.fieldContext_ModemInfo_at_init(ctx, field)
			case "at_test":
				return ec.fieldContext_ModemInfo_at_test(ctx, field)
			case "at_config":
				return ec.fieldContext_ModemInfo_at_config(ctx, field)
			case "at_dial":
				return ec.fieldContext_ModemInfo_at_dial(ctx, field)
			case "at_hangup":
				return ec.fieldContext_ModemInfo_at_hangup(ctx, field)
			case "at_escape":
				return ec.fieldContext_ModemInfo_at_escape(ctx, field)
			case "at_dsr":
				return ec.fieldContext_ModemInfo_at_dsr(ctx, field)
			case "connect_timeout":
				return ec.fieldContext_ModemInfo_connect_timeout(ctx, field)
			case "tcpip":
				return ec.fieldContext_ModemInfo_tcpip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetModemPoolResponse_name(ctx context.Context, field graphql.CollectedField, obj *model.GetModemPoolResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetModemPoolResponse_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetModemPoolResponse_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetModemPoolResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetModemPoolsResponse_pools(ctx context.Context, field graphql.CollectedField, obj *model.GetModemPoolsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetModemPoolsResponse_pools(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pools, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ModemPoolSpec)
	fc.Result = res
	return ec.marshalOModemPoolSpec2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemPoolSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetModemPoolsResponse_pools(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetModemPoolsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pool_id":
				return ec.fieldContext_ModemPoolSpec_pool_id(ctx, field)
			case "name":
				return ec.fieldContext_ModemPoolSpec_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemPoolSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_action_id(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_action_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_action_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_attributes(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapAttributeValue)
	fc.Result = res
	return ec.marshalO_mapAttributeValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAttributeValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapAttributeValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapAttributeValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapAttributeValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_register(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_register(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetRegister, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetRegister)
	fc.Result = res
	return ec.marshalOActionGetRegister2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetRegister(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_register(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionGetRegister__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetRegister", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_periodical_profile(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_periodical_profile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetPeriodicalProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetPeriodicalProfile)
	fc.Result = res
	return ec.marshalOActionGetPeriodicalProfile2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetPeriodicalProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_periodical_profile(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "from":
				return ec.fieldContext_ActionGetPeriodicalProfile_from(ctx, field)
			case "to":
				return ec.fieldContext_ActionGetPeriodicalProfile_to(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetPeriodicalProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_irregular_profile(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_irregular_profile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetIrregularProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetIrregularProfile)
	fc.Result = res
	return ec.marshalOActionGetIrregularProfile2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetIrregularProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_irregular_profile(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "from":
				return ec.fieldContext_ActionGetIrregularProfile_from(ctx, field)
			case "to":
				return ec.fieldContext_ActionGetIrregularProfile_to(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetIrregularProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_events(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetEvents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetEvents)
	fc.Result = res
	return ec.marshalOActionGetEvents2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetEvents(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_events(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "from":
				return ec.fieldContext_ActionGetEvents_from(ctx, field)
			case "to":
				return ec.fieldContext_ActionGetEvents_to(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetEvents", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_clock(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_clock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetClock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetClock)
	fc.Result = res
	return ec.marshalOActionGetClock2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetClock(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_clock(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionGetClock__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetClock", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_sync_clock(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_sync_clock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SyncClock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSyncClock)
	fc.Result = res
	return ec.marshalOActionSyncClock2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSyncClock(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_sync_clock(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSyncClock__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSyncClock", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_relay_state(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_relay_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetRelayState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetRelayState)
	fc.Result = res
	return ec.marshalOActionGetRelayState2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetRelayState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_relay_state(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionGetRelayState__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetRelayState", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_set_relay_state(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_set_relay_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetRelayState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSetRelayState)
	fc.Result = res
	return ec.marshalOActionSetRelayState2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSetRelayState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_set_relay_state(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSetRelayState__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSetRelayState", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_disconnector_state(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_disconnector_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetDisconnectorState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetDisconnectorState)
	fc.Result = res
	return ec.marshalOActionGetDisconnectorState2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetDisconnectorState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_disconnector_state(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionGetDisconnectorState__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetDisconnectorState", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_set_disconnector_state(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_set_disconnector_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetDisconnectorState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSetDisconnectorState)
	fc.Result = res
	return ec.marshalOActionSetDisconnectorState2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSetDisconnectorState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_set_disconnector_state(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSetDisconnectorState__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSetDisconnectorState", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_tou(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_tou(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetTou, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetTou)
	fc.Result = res
	return ec.marshalOActionGetTou2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetTou(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_tou(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionGetTou__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetTou", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_set_tou(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_set_tou(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetTou, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSetTou)
	fc.Result = res
	return ec.marshalOActionSetTou2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSetTou(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_set_tou(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSetTou__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSetTou", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_limiter(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_limiter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetLimiter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetLimiter)
	fc.Result = res
	return ec.marshalOActionGetLimiter2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetLimiter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_limiter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionGetLimiter__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetLimiter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_set_limiter(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_set_limiter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetLimiter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSetLimiter)
	fc.Result = res
	return ec.marshalOActionSetLimiter2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSetLimiter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_set_limiter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSetLimiter__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSetLimiter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_reset_billing_period(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_reset_billing_period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResetBillingPeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionResetBillingPeriod)
	fc.Result = res
	return ec.marshalOActionResetBillingPeriod2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResetBillingPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_reset_billing_period(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionResetBillingPeriod__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionResetBillingPeriod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_fw_update(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_fw_update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FwUpdate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionFwUpdate)
	fc.Result = res
	return ec.marshalOActionFwUpdate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionFwUpdate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_fw_update(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionFwUpdate__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionFwUpdate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionAttributes_type(ctx context.Context, field graphql.CollectedField, obj *model.JobActionAttributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionAttributes_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionType)
	fc.Result = res
	return ec.marshalOActionType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionAttributes_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionAttributes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionAttributes_attributes(ctx context.Context, field graphql.CollectedField, obj *model.JobActionAttributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionAttributes_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AttributeDefinition)
	fc.Result = res
	return ec.marshalOAttributeDefinition2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeDefinition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionAttributes_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionAttributes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_AttributeDefinition_name(ctx, field)
			case "description":
				return ec.fieldContext_AttributeDefinition_description(ctx, field)
			case "type":
				return ec.fieldContext_AttributeDefinition_type(ctx, field)
			case "mandatory":
				return ec.fieldContext_AttributeDefinition_mandatory(ctx, field)
			case "default_value":
				return ec.fieldContext_AttributeDefinition_default_value(ctx, field)
			case "options":
				return ec.fieldContext_AttributeDefinition_options(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AttributeDefinition", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionContraints_get_register_type_name(ctx context.Context, field graphql.CollectedField, obj *model.JobActionContraints) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionContraints_get_register_type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetRegisterTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Mapstring)
	fc.Result = res
	return ec.marshalO_mapstring2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionContraints_get_register_type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionContraints",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapstring_key(ctx, field)
			case "value":
				return ec.fieldContext__mapstring_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapstring", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionContraints_get_register_type_attributes(ctx context.Context, field graphql.CollectedField, obj *model.JobActionContraints) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionContraints_get_register_type_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetRegisterTypeAttributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapStringList)
	fc.Result = res
	return ec.marshalO_mapStringList2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapStringList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionContraints_get_register_type_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionContraints",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapStringList_key(ctx, field)
			case "value":
				return ec.fieldContext__mapStringList_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapStringList", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobCustomDeviceList_list(ctx context.Context, field graphql.CollectedField, obj *model.JobCustomDeviceList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobCustomDeviceList_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JobDevice)
	fc.Result = res
	return ec.marshalOJobDevice2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobCustomDeviceList_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobCustomDeviceList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JobDevice_id(ctx, field)
			case "device_id":
				return ec.fieldContext_JobDevice_device_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobDevice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_id(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_device_id(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_device_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_device_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDeviceList_list(ctx context.Context, field graphql.CollectedField, obj *model.JobDeviceList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDeviceList_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JobDevice)
	fc.Result = res
	return ec.marshalOJobDevice2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDeviceList_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDeviceList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JobDevice_id(ctx, field)
			case "device_id":
				return ec.fieldContext_JobDevice_device_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobDevice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_1_id(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice1) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_1_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_1_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice_1",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_1_device_id(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice1) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_1_device_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_1_device_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice_1",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_1_external_id(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice1) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_1_external_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_1_external_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice_1",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_1_device_attributes(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice1) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_1_device_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceAttributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapAttributeValue)
	fc.Result = res
	return ec.marshalO_mapAttributeValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAttributeValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_1_device_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice_1",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapAttributeValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapAttributeValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapAttributeValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_1_connection_info(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice1) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_1_connection_info(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalOConnectionInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_1_connection_info(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice_1",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tcpip":
				return ec.fieldContext_ConnectionInfo_tcpip(ctx, field)
			case "modem_pool":
				return ec.fieldContext_ConnectionInfo_modem_pool(ctx, field)
			case "serial_over_ip":
				return ec.fieldContext_ConnectionInfo_serial_over_ip(ctx, field)
			case "link_protocol":
				return ec.fieldContext_ConnectionInfo_link_protocol(ctx, field)
			case "custom_grouping_id":
				return ec.fieldContext_ConnectionInfo_custom_grouping_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_1_app_protocol(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice1) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_1_app_protocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppProtocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ApplicationProtocol)
	fc.Result = res
	return ec.marshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_1_app_protocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice_1",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApplicationProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_1_timezone(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice1) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_1_timezone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timezone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_1_timezone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice_1",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_max_duration(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_max_duration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_max_duration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_priority(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_priority(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobPriority)
	fc.Result = res
	return ec.marshalOJobPriority2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobPriority(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_priority(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JobPriority does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_attempts(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_attempts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attempts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int32)
	fc.Result = res
	return ec.marshalOInt2ᚕᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_attempts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_retry_delay(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_retry_delay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetryDelay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_retry_delay(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_defer_start(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_defer_start(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeferStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOBigInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_defer_start(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BigInt does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_expires_at(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_expires_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_expires_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_status(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobStatusCode)
	fc.Result = res
	return ec.marshalOJobStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobStatusCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JobStatusCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_code(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobErrorCode)
	fc.Result = res
	return ec.marshalOJobErrorCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobErrorCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JobErrorCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_results(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ActionResult)
	fc.Result = res
	return ec.marshalOActionResult2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_results(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "action_id":
				return ec.fieldContext_ActionResult_action_id(ctx, field)
			case "status":
				return ec.fieldContext_ActionResult_status(ctx, field)
			case "data":
				return ec.fieldContext_ActionResult_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_created_at(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_started_at(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_started_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_started_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_finished_at(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_finished_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinishedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_finished_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_attempts_done(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_attempts_done(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttemptsDone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_attempts_done(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_status(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_exponent(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_exponent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Exponent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_exponent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_double_value(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_double_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoubleValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_double_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_int_value(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_int_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_int_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_str_value(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_str_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StrValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_str_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_timestamp_value(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_timestamp_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_timestamp_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_timestamp_tz_value(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_timestamp_tz_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampTzValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_timestamp_tz_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_bool_value(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_bool_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoolValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_bool_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_at_init(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_at_init(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtInit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_at_init(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_at_test(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_at_test(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtTest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_at_test(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_at_config(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_at_config(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtConfig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_at_config(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_at_dial(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_at_dial(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtDial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_at_dial(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_at_hangup(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_at_hangup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtHangup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_at_hangup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_at_escape(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_at_escape(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtEscape, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_at_escape(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_at_dsr(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_at_dsr(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtDsr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_at_dsr(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_connect_timeout(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_connect_timeout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectTimeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_connect_timeout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_tcpip(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_tcpip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tcpip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeDirectTCPIP)
	fc.Result = res
	return ec.marshalOConnectionTypeDirectTcpIp2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeDirectTCPIP(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_tcpip(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "host":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_port(ctx, field)
			case "timeout":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_timeout(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeDirectTcpIp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemPoolSpec_pool_id(ctx context.Context, field graphql.CollectedField, obj *model.ModemPoolSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemPoolSpec_pool_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemPoolSpec_pool_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemPoolSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemPoolSpec_name(ctx context.Context, field graphql.CollectedField, obj *model.ModemPoolSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemPoolSpec_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemPoolSpec_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemPoolSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileBlok_start_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.ProfileBlok) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileBlok_start_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileBlok_start_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileBlok",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileBlok_values(ctx context.Context, field graphql.CollectedField, obj *model.ProfileBlok) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileBlok_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MeasuredValue)
	fc.Result = res
	return ec.marshalOMeasuredValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMeasuredValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileBlok_values(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileBlok",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_MeasuredValue_status(ctx, field)
			case "exponent":
				return ec.fieldContext_MeasuredValue_exponent(ctx, field)
			case "double_value":
				return ec.fieldContext_MeasuredValue_double_value(ctx, field)
			case "int_value":
				return ec.fieldContext_MeasuredValue_int_value(ctx, field)
			case "str_value":
				return ec.fieldContext_MeasuredValue_str_value(ctx, field)
			case "timestamp_value":
				return ec.fieldContext_MeasuredValue_timestamp_value(ctx, field)
			case "timestamp_tz_value":
				return ec.fieldContext_MeasuredValue_timestamp_tz_value(ctx, field)
			case "bool_value":
				return ec.fieldContext_MeasuredValue_bool_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MeasuredValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileValues_period(ctx context.Context, field graphql.CollectedField, obj *model.ProfileValues) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileValues_period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileValues_period(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileValues",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileValues_unit(ctx context.Context, field graphql.CollectedField, obj *model.ProfileValues) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileValues_unit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileValues_unit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileValues",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileValues_blocks(ctx context.Context, field graphql.CollectedField, obj *model.ProfileValues) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileValues_blocks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blocks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProfileBlok)
	fc.Result = res
	return ec.marshalOProfileBlok2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐProfileBlok(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileValues_blocks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileValues",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "start_timestamp":
				return ec.fieldContext_ProfileBlok_start_timestamp(ctx, field)
			case "values":
				return ec.fieldContext_ProfileBlok_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProfileBlok", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCreateBulkRequest_id(ctx context.Context, field graphql.CollectedField, obj *model.PublicCreateBulkRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCreateBulkRequest_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCreateBulkRequest_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCreateBulkRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCreateBulkRequest_correlation_id(ctx context.Context, field graphql.CollectedField, obj *model.PublicCreateBulkRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCreateBulkRequest_correlation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrelationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCreateBulkRequest_correlation_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCreateBulkRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCreateBulkRequest_driver_type(ctx context.Context, field graphql.CollectedField, obj *model.PublicCreateBulkRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCreateBulkRequest_driver_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCreateBulkRequest_driver_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCreateBulkRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCreateBulkRequest_devices(ctx context.Context, field graphql.CollectedField, obj *model.PublicCreateBulkRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCreateBulkRequest_devices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Devices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobDeviceList)
	fc.Result = res
	return ec.marshalOJobDeviceList2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobDeviceList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCreateBulkRequest_devices(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCreateBulkRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_JobDeviceList_list(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobDeviceList", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCreateBulkRequest_custom_devices(ctx context.Context, field graphql.CollectedField, obj *model.PublicCreateBulkRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCreateBulkRequest_custom_devices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomDevices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobCustomDeviceList)
	fc.Result = res
	return ec.marshalOJobCustomDeviceList2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobCustomDeviceList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCreateBulkRequest_custom_devices(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCreateBulkRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_JobCustomDeviceList_list(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobCustomDeviceList", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCreateBulkRequest_settings(ctx context.Context, field graphql.CollectedField, obj *model.PublicCreateBulkRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCreateBulkRequest_settings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobSettings)
	fc.Result = res
	return ec.marshalOJobSettings2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCreateBulkRequest_settings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCreateBulkRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "max_duration":
				return ec.fieldContext_JobSettings_max_duration(ctx, field)
			case "priority":
				return ec.fieldContext_JobSettings_priority(ctx, field)
			case "attempts":
				return ec.fieldContext_JobSettings_attempts(ctx, field)
			case "retry_delay":
				return ec.fieldContext_JobSettings_retry_delay(ctx, field)
			case "defer_start":
				return ec.fieldContext_JobSettings_defer_start(ctx, field)
			case "expires_at":
				return ec.fieldContext_JobSettings_expires_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCreateBulkRequest_actions(ctx context.Context, field graphql.CollectedField, obj *model.PublicCreateBulkRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCreateBulkRequest_actions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Actions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JobAction)
	fc.Result = res
	return ec.marshalOJobAction2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobAction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCreateBulkRequest_actions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCreateBulkRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "action_id":
				return ec.fieldContext_JobAction_action_id(ctx, field)
			case "attributes":
				return ec.fieldContext_JobAction_attributes(ctx, field)
			case "get_register":
				return ec.fieldContext_JobAction_get_register(ctx, field)
			case "get_periodical_profile":
				return ec.fieldContext_JobAction_get_periodical_profile(ctx, field)
			case "get_irregular_profile":
				return ec.fieldContext_JobAction_get_irregular_profile(ctx, field)
			case "get_events":
				return ec.fieldContext_JobAction_get_events(ctx, field)
			case "get_clock":
				return ec.fieldContext_JobAction_get_clock(ctx, field)
			case "sync_clock":
				return ec.fieldContext_JobAction_sync_clock(ctx, field)
			case "get_relay_state":
				return ec.fieldContext_JobAction_get_relay_state(ctx, field)
			case "set_relay_state":
				return ec.fieldContext_JobAction_set_relay_state(ctx, field)
			case "get_disconnector_state":
				return ec.fieldContext_JobAction_get_disconnector_state(ctx, field)
			case "set_disconnector_state":
				return ec.fieldContext_JobAction_set_disconnector_state(ctx, field)
			case "get_tou":
				return ec.fieldContext_JobAction_get_tou(ctx, field)
			case "set_tou":
				return ec.fieldContext_JobAction_set_tou(ctx, field)
			case "get_limiter":
				return ec.fieldContext_JobAction_get_limiter(ctx, field)
			case "set_limiter":
				return ec.fieldContext_JobAction_set_limiter(ctx, field)
			case "reset_billing_period":
				return ec.fieldContext_JobAction_reset_billing_period(ctx, field)
			case "fw_update":
				return ec.fieldContext_JobAction_fw_update(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobAction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PublicCreateBulkRequest_webhook_url(ctx context.Context, field graphql.CollectedField, obj *model.PublicCreateBulkRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PublicCreateBulkRequest_webhook_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebhookURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PublicCreateBulkRequest_webhook_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PublicCreateBulkRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createBulk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createBulk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateBulk(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createBulk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getBulks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getBulks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBulks(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetBulksResponse)
	fc.Result = res
	return ec.marshalOGetBulksResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetBulksResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getBulks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "bulks":
				return ec.fieldContext_GetBulksResponse_bulks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetBulksResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getBulk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getBulk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBulk(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetBulkResponse)
	fc.Result = res
	return ec.marshalOGetBulkResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetBulkResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getBulk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_GetBulkResponse_spec(ctx, field)
			case "status":
				return ec.fieldContext_GetBulkResponse_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetBulkResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getJobStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getJobStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetJobStatus(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetJobStatusResponse)
	fc.Result = res
	return ec.marshalOGetJobStatusResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetJobStatusResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getJobStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_GetJobStatusResponse_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetJobStatusResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_cancelBulk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cancelBulk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CancelBulk(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cancelBulk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_cancelJobs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cancelJobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CancelJobs(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cancelJobs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetConfig(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemConfig)
	fc.Result = res
	return ec.marshalOSystemConfig2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐSystemConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getConfig(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "max_replicas":
				return ec.fieldContext_SystemConfig_max_replicas(ctx, field)
			case "max_cascade_device_count":
				return ec.fieldContext_SystemConfig_max_cascade_device_count(ctx, field)
			case "max_slots_per_driver":
				return ec.fieldContext_SystemConfig_max_slots_per_driver(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_setConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_setConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SetConfig(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_setConfig(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createCommunicationUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createCommunicationUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateCommunicationUnit(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createCommunicationUnit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getCommunicationUnits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getCommunicationUnits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCommunicationUnits(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetCommunicationUnitsResponse)
	fc.Result = res
	return ec.marshalOGetCommunicationUnitsResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetCommunicationUnitsResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getCommunicationUnits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_GetCommunicationUnitsResponse_spec(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetCommunicationUnitsResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createDevice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateDevice(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createDevice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDevices(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDevices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDevices(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetDevicesResponse)
	fc.Result = res
	return ec.marshalOGetDevicesResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetDevicesResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDevices(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_GetDevicesResponse_spec(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetDevicesResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_setDeviceCommunicationUnits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_setDeviceCommunicationUnits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SetDeviceCommunicationUnits(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_setDeviceCommunicationUnits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDevicesCommunicationUnits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDevicesCommunicationUnits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDevicesCommunicationUnits(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetDevicesCommunicationUnitsResponse)
	fc.Result = res
	return ec.marshalOGetDevicesCommunicationUnitsResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetDevicesCommunicationUnitsResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDevicesCommunicationUnits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "devices":
				return ec.fieldContext_GetDevicesCommunicationUnitsResponse_devices(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetDevicesCommunicationUnitsResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createDeviceGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createDeviceGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateDeviceGroup(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createDeviceGroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDeviceGroups(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDeviceGroups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceGroups(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetDeviceGroupsResponse)
	fc.Result = res
	return ec.marshalOGetDeviceGroupsResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetDeviceGroupsResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDeviceGroups(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "groups":
				return ec.fieldContext_GetDeviceGroupsResponse_groups(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetDeviceGroupsResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDeviceGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDeviceGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceGroup(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetDeviceGroupResponse)
	fc.Result = res
	return ec.marshalOGetDeviceGroupResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetDeviceGroupResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDeviceGroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_GetDeviceGroupResponse_spec(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetDeviceGroupResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_addDevicesToGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_addDevicesToGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AddDevicesToGroup(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_addDevicesToGroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_removeDevicesFromGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_removeDevicesFromGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RemoveDevicesFromGroup(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_removeDevicesFromGroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getModemPools(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getModemPools(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetModemPools(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetModemPoolsResponse)
	fc.Result = res
	return ec.marshalOGetModemPoolsResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetModemPoolsResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getModemPools(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pools":
				return ec.fieldContext_GetModemPoolsResponse_pools(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetModemPoolsResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getModemPool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getModemPool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetModemPool(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetModemPoolResponse)
	fc.Result = res
	return ec.marshalOGetModemPoolResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetModemPoolResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getModemPool(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "modems":
				return ec.fieldContext_GetModemPoolResponse_modems(ctx, field)
			case "name":
				return ec.fieldContext_GetModemPoolResponse_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetModemPoolResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createModemPool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createModemPool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateModemPool(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createModemPool(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateModemPool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateModemPool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateModemPool(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateModemPool(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteModemPool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteModemPool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteModemPool(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteModemPool(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createModem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createModem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateModem(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createModem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateModem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateModem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateModem(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateModem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteModem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteModem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteModem(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteModem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDrivers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDrivers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDrivers(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetDriversResponse)
	fc.Result = res
	return ec.marshalOGetDriversResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetDriversResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDrivers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_GetDriversResponse_result(ctx, field)
			case "drivers":
				return ec.fieldContext_GetDriversResponse_drivers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetDriversResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDriverTemplates(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDriverTemplates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDriverTemplates(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverTemplates)
	fc.Result = res
	return ec.marshalODriverTemplates2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDriverTemplates(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDriverTemplates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "communication_templates":
				return ec.fieldContext_DriverTemplates_communication_templates(ctx, field)
			case "app_protocols":
				return ec.fieldContext_DriverTemplates_app_protocols(ctx, field)
			case "action_attributes":
				return ec.fieldContext_DriverTemplates_action_attributes(ctx, field)
			case "access_templates":
				return ec.fieldContext_DriverTemplates_access_templates(ctx, field)
			case "action_constraints":
				return ec.fieldContext_DriverTemplates_action_constraints(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DriverTemplates", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RemoveDevicesFromGroupRequest_group_id(ctx context.Context, field graphql.CollectedField, obj *model.RemoveDevicesFromGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RemoveDevicesFromGroupRequest_group_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RemoveDevicesFromGroupRequest_group_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RemoveDevicesFromGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RemoveDevicesFromGroupRequest_device_id(ctx context.Context, field graphql.CollectedField, obj *model.RemoveDevicesFromGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RemoveDevicesFromGroupRequest_device_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RemoveDevicesFromGroupRequest_device_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RemoveDevicesFromGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetDeviceCommunicationUnitsRequest_device_id(ctx context.Context, field graphql.CollectedField, obj *model.SetDeviceCommunicationUnitsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetDeviceCommunicationUnitsRequest_device_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetDeviceCommunicationUnitsRequest_device_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetDeviceCommunicationUnitsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetDeviceCommunicationUnitsRequest_communication_units(ctx context.Context, field graphql.CollectedField, obj *model.SetDeviceCommunicationUnitsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetDeviceCommunicationUnitsRequest_communication_units(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationUnits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceCommunicationUnit)
	fc.Result = res
	return ec.marshalODeviceCommunicationUnit2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceCommunicationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetDeviceCommunicationUnitsRequest_communication_units(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetDeviceCommunicationUnitsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "communication_unit_id":
				return ec.fieldContext_DeviceCommunicationUnit_communication_unit_id(ctx, field)
			case "app_protocol":
				return ec.fieldContext_DeviceCommunicationUnit_app_protocol(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceCommunicationUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetModemPoolRequest_pool_id(ctx context.Context, field graphql.CollectedField, obj *model.SetModemPoolRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetModemPoolRequest_pool_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetModemPoolRequest_pool_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetModemPoolRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetModemPoolRequest_name(ctx context.Context, field graphql.CollectedField, obj *model.SetModemPoolRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetModemPoolRequest_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetModemPoolRequest_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetModemPoolRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetModemRequest_pool_id(ctx context.Context, field graphql.CollectedField, obj *model.SetModemRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetModemRequest_pool_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetModemRequest_pool_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetModemRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetModemRequest_modem(ctx context.Context, field graphql.CollectedField, obj *model.SetModemRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetModemRequest_modem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ModemInfo)
	fc.Result = res
	return ec.marshalOModemInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetModemRequest_modem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetModemRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ModemInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_ModemInfo_name(ctx, field)
			case "at_init":
				return ec.fieldContext_ModemInfo_at_init(ctx, field)
			case "at_test":
				return ec.fieldContext_ModemInfo_at_test(ctx, field)
			case "at_config":
				return ec.fieldContext_ModemInfo_at_config(ctx, field)
			case "at_dial":
				return ec.fieldContext_ModemInfo_at_dial(ctx, field)
			case "at_hangup":
				return ec.fieldContext_ModemInfo_at_hangup(ctx, field)
			case "at_escape":
				return ec.fieldContext_ModemInfo_at_escape(ctx, field)
			case "at_dsr":
				return ec.fieldContext_ModemInfo_at_dsr(ctx, field)
			case "connect_timeout":
				return ec.fieldContext_ModemInfo_connect_timeout(ctx, field)
			case "tcpip":
				return ec.fieldContext_ModemInfo_tcpip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StringList_items(ctx context.Context, field graphql.CollectedField, obj *model.StringList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StringList_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StringList_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StringList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StringValue_value(ctx context.Context, field graphql.CollectedField, obj *model.StringValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StringValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StringValue_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StringValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemConfig_max_replicas(ctx context.Context, field graphql.CollectedField, obj *model.SystemConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemConfig_max_replicas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxReplicas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemConfig_max_replicas(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemConfig_max_cascade_device_count(ctx context.Context, field graphql.CollectedField, obj *model.SystemConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemConfig_max_cascade_device_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxCascadeDeviceCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemConfig_max_cascade_device_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemConfig_max_slots_per_driver(ctx context.Context, field graphql.CollectedField, obj *model.SystemConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemConfig_max_slots_per_driver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSlotsPerDriver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemConfig_max_slots_per_driver(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapListOfConnectionInfo_key(ctx context.Context, field graphql.CollectedField, obj *model.MapListOfConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapListOfConnectionInfo_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapListOfConnectionInfo_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapListOfConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapListOfConnectionInfo_value(ctx context.Context, field graphql.CollectedField, obj *model.MapListOfConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapListOfConnectionInfo_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfConnectionInfo)
	fc.Result = res
	return ec.marshalOListOfConnectionInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapListOfConnectionInfo_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapListOfConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfConnectionInfo_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfConnectionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapAttributeValue_key(ctx context.Context, field graphql.CollectedField, obj *model.MapAttributeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapAttributeValue_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapAttributeValue_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapAttributeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapAttributeValue_value(ctx context.Context, field graphql.CollectedField, obj *model.MapAttributeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapAttributeValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AttributeValue)
	fc.Result = res
	return ec.marshalOAttributeValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapAttributeValue_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapAttributeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "str_value":
				return ec.fieldContext_AttributeValue_str_value(ctx, field)
			case "int_value":
				return ec.fieldContext_AttributeValue_int_value(ctx, field)
			case "double_value":
				return ec.fieldContext_AttributeValue_double_value(ctx, field)
			case "binary_value":
				return ec.fieldContext_AttributeValue_binary_value(ctx, field)
			case "bool_value":
				return ec.fieldContext_AttributeValue_bool_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AttributeValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapDeviceGroupOverviewSpec_key(ctx context.Context, field graphql.CollectedField, obj *model.MapDeviceGroupOverviewSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapDeviceGroupOverviewSpec_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapDeviceGroupOverviewSpec_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapDeviceGroupOverviewSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapDeviceGroupOverviewSpec_value(ctx context.Context, field graphql.CollectedField, obj *model.MapDeviceGroupOverviewSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapDeviceGroupOverviewSpec_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceGroupOverviewSpec)
	fc.Result = res
	return ec.marshalODeviceGroupOverviewSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceGroupOverviewSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapDeviceGroupOverviewSpec_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapDeviceGroupOverviewSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeviceGroupOverviewSpec_id(ctx, field)
			case "external_id":
				return ec.fieldContext_DeviceGroupOverviewSpec_external_id(ctx, field)
			case "name":
				return ec.fieldContext_DeviceGroupOverviewSpec_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceGroupOverviewSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapStringList_key(ctx context.Context, field graphql.CollectedField, obj *model.MapStringList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapStringList_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapStringList_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapStringList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapStringList_value(ctx context.Context, field graphql.CollectedField, obj *model.MapStringList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapStringList_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringList)
	fc.Result = res
	return ec.marshalOStringList2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐStringList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapStringList_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapStringList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_StringList_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringList", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapstring_key(ctx context.Context, field graphql.CollectedField, obj *model.Mapstring) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapstring_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapstring_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapstring",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapstring_value(ctx context.Context, field graphql.CollectedField, obj *model.Mapstring) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapstring_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapstring_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapstring",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accessLevelTemplateImplementors = []string{"AccessLevelTemplate"}

func (ec *executionContext) _AccessLevelTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.AccessLevelTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accessLevelTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccessLevelTemplate")
		case "id":
			out.Values[i] = ec._AccessLevelTemplate_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._AccessLevelTemplate_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionDataImplementors = []string{"ActionData"}

func (ec *executionContext) _ActionData(ctx context.Context, sel ast.SelectionSet, obj *model.ActionData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionData")
		case "nodata":
			out.Values[i] = ec._ActionData_nodata(ctx, field, obj)
		case "billings":
			out.Values[i] = ec._ActionData_billings(ctx, field, obj)
		case "profile":
			out.Values[i] = ec._ActionData_profile(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionFwUpdateImplementors = []string{"ActionFwUpdate"}

func (ec *executionContext) _ActionFwUpdate(ctx context.Context, sel ast.SelectionSet, obj *model.ActionFwUpdate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionFwUpdateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionFwUpdate")
		case "_empty":
			out.Values[i] = ec._ActionFwUpdate__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetClockImplementors = []string{"ActionGetClock"}

func (ec *executionContext) _ActionGetClock(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetClock) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetClockImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetClock")
		case "_empty":
			out.Values[i] = ec._ActionGetClock__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetDisconnectorStateImplementors = []string{"ActionGetDisconnectorState"}

func (ec *executionContext) _ActionGetDisconnectorState(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetDisconnectorState) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetDisconnectorStateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetDisconnectorState")
		case "_empty":
			out.Values[i] = ec._ActionGetDisconnectorState__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetEventsImplementors = []string{"ActionGetEvents"}

func (ec *executionContext) _ActionGetEvents(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetEvents) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetEventsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetEvents")
		case "from":
			out.Values[i] = ec._ActionGetEvents_from(ctx, field, obj)
		case "to":
			out.Values[i] = ec._ActionGetEvents_to(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetIrregularProfileImplementors = []string{"ActionGetIrregularProfile"}

func (ec *executionContext) _ActionGetIrregularProfile(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetIrregularProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetIrregularProfileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetIrregularProfile")
		case "from":
			out.Values[i] = ec._ActionGetIrregularProfile_from(ctx, field, obj)
		case "to":
			out.Values[i] = ec._ActionGetIrregularProfile_to(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetLimiterImplementors = []string{"ActionGetLimiter"}

func (ec *executionContext) _ActionGetLimiter(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetLimiter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetLimiterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetLimiter")
		case "_empty":
			out.Values[i] = ec._ActionGetLimiter__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetPeriodicalProfileImplementors = []string{"ActionGetPeriodicalProfile"}

func (ec *executionContext) _ActionGetPeriodicalProfile(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetPeriodicalProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetPeriodicalProfileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetPeriodicalProfile")
		case "from":
			out.Values[i] = ec._ActionGetPeriodicalProfile_from(ctx, field, obj)
		case "to":
			out.Values[i] = ec._ActionGetPeriodicalProfile_to(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetRegisterImplementors = []string{"ActionGetRegister"}

func (ec *executionContext) _ActionGetRegister(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetRegister) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetRegisterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetRegister")
		case "_empty":
			out.Values[i] = ec._ActionGetRegister__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetRelayStateImplementors = []string{"ActionGetRelayState"}

func (ec *executionContext) _ActionGetRelayState(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetRelayState) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetRelayStateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetRelayState")
		case "_empty":
			out.Values[i] = ec._ActionGetRelayState__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetTouImplementors = []string{"ActionGetTou"}

func (ec *executionContext) _ActionGetTou(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetTou) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetTouImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetTou")
		case "_empty":
			out.Values[i] = ec._ActionGetTou__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionResetBillingPeriodImplementors = []string{"ActionResetBillingPeriod"}

func (ec *executionContext) _ActionResetBillingPeriod(ctx context.Context, sel ast.SelectionSet, obj *model.ActionResetBillingPeriod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionResetBillingPeriodImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionResetBillingPeriod")
		case "_empty":
			out.Values[i] = ec._ActionResetBillingPeriod__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionResultImplementors = []string{"ActionResult"}

func (ec *executionContext) _ActionResult(ctx context.Context, sel ast.SelectionSet, obj *model.ActionResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionResult")
		case "action_id":
			out.Values[i] = ec._ActionResult_action_id(ctx, field, obj)
		case "status":
			out.Values[i] = ec._ActionResult_status(ctx, field, obj)
		case "data":
			out.Values[i] = ec._ActionResult_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSetDisconnectorStateImplementors = []string{"ActionSetDisconnectorState"}

func (ec *executionContext) _ActionSetDisconnectorState(ctx context.Context, sel ast.SelectionSet, obj *model.ActionSetDisconnectorState) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSetDisconnectorStateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSetDisconnectorState")
		case "_empty":
			out.Values[i] = ec._ActionSetDisconnectorState__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSetLimiterImplementors = []string{"ActionSetLimiter"}

func (ec *executionContext) _ActionSetLimiter(ctx context.Context, sel ast.SelectionSet, obj *model.ActionSetLimiter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSetLimiterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSetLimiter")
		case "_empty":
			out.Values[i] = ec._ActionSetLimiter__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSetRelayStateImplementors = []string{"ActionSetRelayState"}

func (ec *executionContext) _ActionSetRelayState(ctx context.Context, sel ast.SelectionSet, obj *model.ActionSetRelayState) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSetRelayStateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSetRelayState")
		case "_empty":
			out.Values[i] = ec._ActionSetRelayState__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSetTouImplementors = []string{"ActionSetTou"}

func (ec *executionContext) _ActionSetTou(ctx context.Context, sel ast.SelectionSet, obj *model.ActionSetTou) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSetTouImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSetTou")
		case "_empty":
			out.Values[i] = ec._ActionSetTou__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSyncClockImplementors = []string{"ActionSyncClock"}

func (ec *executionContext) _ActionSyncClock(ctx context.Context, sel ast.SelectionSet, obj *model.ActionSyncClock) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSyncClockImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSyncClock")
		case "_empty":
			out.Values[i] = ec._ActionSyncClock__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var addDevicesToGroupRequestImplementors = []string{"AddDevicesToGroupRequest"}

func (ec *executionContext) _AddDevicesToGroupRequest(ctx context.Context, sel ast.SelectionSet, obj *model.AddDevicesToGroupRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addDevicesToGroupRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddDevicesToGroupRequest")
		case "group_id":
			out.Values[i] = ec._AddDevicesToGroupRequest_group_id(ctx, field, obj)
		case "device_id":
			out.Values[i] = ec._AddDevicesToGroupRequest_device_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var applicationProtocolTemplateImplementors = []string{"ApplicationProtocolTemplate"}

func (ec *executionContext) _ApplicationProtocolTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.ApplicationProtocolTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationProtocolTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplicationProtocolTemplate")
		case "id":
			out.Values[i] = ec._ApplicationProtocolTemplate_id(ctx, field, obj)
		case "protocol":
			out.Values[i] = ec._ApplicationProtocolTemplate_protocol(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._ApplicationProtocolTemplate_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var arrayOfConnectionInfoImplementors = []string{"ListOfConnectionInfo"}

func (ec *executionContext) _ListOfConnectionInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfConnectionInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, arrayOfConnectionInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfConnectionInfo")
		case "items":
			out.Values[i] = ec._ListOfConnectionInfo_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var attributeDefinitionImplementors = []string{"AttributeDefinition"}

func (ec *executionContext) _AttributeDefinition(ctx context.Context, sel ast.SelectionSet, obj *model.AttributeDefinition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attributeDefinitionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AttributeDefinition")
		case "name":
			out.Values[i] = ec._AttributeDefinition_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._AttributeDefinition_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec._AttributeDefinition_type(ctx, field, obj)
		case "mandatory":
			out.Values[i] = ec._AttributeDefinition_mandatory(ctx, field, obj)
		case "default_value":
			out.Values[i] = ec._AttributeDefinition_default_value(ctx, field, obj)
		case "options":
			out.Values[i] = ec._AttributeDefinition_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var attributeValueImplementors = []string{"AttributeValue"}

func (ec *executionContext) _AttributeValue(ctx context.Context, sel ast.SelectionSet, obj *model.AttributeValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attributeValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AttributeValue")
		case "str_value":
			out.Values[i] = ec._AttributeValue_str_value(ctx, field, obj)
		case "int_value":
			out.Values[i] = ec._AttributeValue_int_value(ctx, field, obj)
		case "double_value":
			out.Values[i] = ec._AttributeValue_double_value(ctx, field, obj)
		case "binary_value":
			out.Values[i] = ec._AttributeValue_binary_value(ctx, field, obj)
		case "bool_value":
			out.Values[i] = ec._AttributeValue_bool_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var billingValueImplementors = []string{"BillingValue"}

func (ec *executionContext) _BillingValue(ctx context.Context, sel ast.SelectionSet, obj *model.BillingValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, billingValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BillingValue")
		case "timestamp":
			out.Values[i] = ec._BillingValue_timestamp(ctx, field, obj)
		case "unit":
			out.Values[i] = ec._BillingValue_unit(ctx, field, obj)
		case "value":
			out.Values[i] = ec._BillingValue_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var billingValuesImplementors = []string{"BillingValues"}

func (ec *executionContext) _BillingValues(ctx context.Context, sel ast.SelectionSet, obj *model.BillingValues) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, billingValuesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BillingValues")
		case "values":
			out.Values[i] = ec._BillingValues_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bulkJobStatusImplementors = []string{"BulkJobStatus"}

func (ec *executionContext) _BulkJobStatus(ctx context.Context, sel ast.SelectionSet, obj *model.BulkJobStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bulkJobStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BulkJobStatus")
		case "job_id":
			out.Values[i] = ec._BulkJobStatus_job_id(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BulkJobStatus_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bulkSpecImplementors = []string{"BulkSpec"}

func (ec *executionContext) _BulkSpec(ctx context.Context, sel ast.SelectionSet, obj *model.BulkSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bulkSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BulkSpec")
		case "bulk_id":
			out.Values[i] = ec._BulkSpec_bulk_id(ctx, field, obj)
		case "correlation_id":
			out.Values[i] = ec._BulkSpec_correlation_id(ctx, field, obj)
		case "org_id":
			out.Values[i] = ec._BulkSpec_org_id(ctx, field, obj)
		case "driver_type":
			out.Values[i] = ec._BulkSpec_driver_type(ctx, field, obj)
		case "devices":
			out.Values[i] = ec._BulkSpec_devices(ctx, field, obj)
		case "settings":
			out.Values[i] = ec._BulkSpec_settings(ctx, field, obj)
		case "job_actions":
			out.Values[i] = ec._BulkSpec_job_actions(ctx, field, obj)
		case "webhook_url":
			out.Values[i] = ec._BulkSpec_webhook_url(ctx, field, obj)
		case "user_id":
			out.Values[i] = ec._BulkSpec_user_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bulkStatusImplementors = []string{"BulkStatus"}

func (ec *executionContext) _BulkStatus(ctx context.Context, sel ast.SelectionSet, obj *model.BulkStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bulkStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BulkStatus")
		case "status":
			out.Values[i] = ec._BulkStatus_status(ctx, field, obj)
		case "jobs":
			out.Values[i] = ec._BulkStatus_jobs(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cancelJobsRequestImplementors = []string{"CancelJobsRequest"}

func (ec *executionContext) _CancelJobsRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CancelJobsRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cancelJobsRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CancelJobsRequest")
		case "job_id":
			out.Values[i] = ec._CancelJobsRequest_job_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var communicationTemplateImplementors = []string{"CommunicationTemplate"}

func (ec *executionContext) _CommunicationTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.CommunicationTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, communicationTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommunicationTemplate")
		case "type":
			out.Values[i] = ec._CommunicationTemplate_type(ctx, field, obj)
		case "datalinks":
			out.Values[i] = ec._CommunicationTemplate_datalinks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var communicationUnitSpecImplementors = []string{"CommunicationUnitSpec"}

func (ec *executionContext) _CommunicationUnitSpec(ctx context.Context, sel ast.SelectionSet, obj *model.CommunicationUnitSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, communicationUnitSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommunicationUnitSpec")
		case "id":
			out.Values[i] = ec._CommunicationUnitSpec_id(ctx, field, obj)
		case "external_id":
			out.Values[i] = ec._CommunicationUnitSpec_external_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._CommunicationUnitSpec_name(ctx, field, obj)
		case "connection_info":
			out.Values[i] = ec._CommunicationUnitSpec_connection_info(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionInfoImplementors = []string{"ConnectionInfo"}

func (ec *executionContext) _ConnectionInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionInfo")
		case "tcpip":
			out.Values[i] = ec._ConnectionInfo_tcpip(ctx, field, obj)
		case "modem_pool":
			out.Values[i] = ec._ConnectionInfo_modem_pool(ctx, field, obj)
		case "serial_over_ip":
			out.Values[i] = ec._ConnectionInfo_serial_over_ip(ctx, field, obj)
		case "link_protocol":
			out.Values[i] = ec._ConnectionInfo_link_protocol(ctx, field, obj)
		case "custom_grouping_id":
			out.Values[i] = ec._ConnectionInfo_custom_grouping_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionTypeControlledSerialImplementors = []string{"ConnectionTypeControlledSerial"}

func (ec *executionContext) _ConnectionTypeControlledSerial(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionTypeControlledSerial) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionTypeControlledSerialImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionTypeControlledSerial")
		case "direct":
			out.Values[i] = ec._ConnectionTypeControlledSerial_direct(ctx, field, obj)
		case "moxa":
			out.Values[i] = ec._ConnectionTypeControlledSerial_moxa(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionTypeDirectTcpIpImplementors = []string{"ConnectionTypeDirectTcpIp"}

func (ec *executionContext) _ConnectionTypeDirectTcpIp(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionTypeDirectTCPIP) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionTypeDirectTcpIpImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionTypeDirectTcpIp")
		case "host":
			out.Values[i] = ec._ConnectionTypeDirectTcpIp_host(ctx, field, obj)
		case "port":
			out.Values[i] = ec._ConnectionTypeDirectTcpIp_port(ctx, field, obj)
		case "timeout":
			out.Values[i] = ec._ConnectionTypeDirectTcpIp_timeout(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionTypeModemPoolImplementors = []string{"ConnectionTypeModemPool"}

func (ec *executionContext) _ConnectionTypeModemPool(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionTypeModemPool) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionTypeModemPoolImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionTypeModemPool")
		case "number":
			out.Values[i] = ec._ConnectionTypeModemPool_number(ctx, field, obj)
		case "pool_id":
			out.Values[i] = ec._ConnectionTypeModemPool_pool_id(ctx, field, obj)
		case "modem":
			out.Values[i] = ec._ConnectionTypeModemPool_modem(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionTypeSerialDirectImplementors = []string{"ConnectionTypeSerialDirect"}

func (ec *executionContext) _ConnectionTypeSerialDirect(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionTypeSerialDirect) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionTypeSerialDirectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionTypeSerialDirect")
		case "host":
			out.Values[i] = ec._ConnectionTypeSerialDirect_host(ctx, field, obj)
		case "port":
			out.Values[i] = ec._ConnectionTypeSerialDirect_port(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionTypeSerialMoxaImplementors = []string{"ConnectionTypeSerialMoxa"}

func (ec *executionContext) _ConnectionTypeSerialMoxa(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionTypeSerialMoxa) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionTypeSerialMoxaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionTypeSerialMoxa")
		case "host":
			out.Values[i] = ec._ConnectionTypeSerialMoxa_host(ctx, field, obj)
		case "dataPort":
			out.Values[i] = ec._ConnectionTypeSerialMoxa_dataPort(ctx, field, obj)
		case "commandPort":
			out.Values[i] = ec._ConnectionTypeSerialMoxa_commandPort(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createCommunicationUnitRequestImplementors = []string{"CreateCommunicationUnitRequest"}

func (ec *executionContext) _CreateCommunicationUnitRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateCommunicationUnitRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCommunicationUnitRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateCommunicationUnitRequest")
		case "spec":
			out.Values[i] = ec._CreateCommunicationUnitRequest_spec(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createDeviceGroupRequestImplementors = []string{"CreateDeviceGroupRequest"}

func (ec *executionContext) _CreateDeviceGroupRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateDeviceGroupRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createDeviceGroupRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateDeviceGroupRequest")
		case "spec":
			out.Values[i] = ec._CreateDeviceGroupRequest_spec(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createDeviceRequestImplementors = []string{"CreateDeviceRequest"}

func (ec *executionContext) _CreateDeviceRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateDeviceRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createDeviceRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateDeviceRequest")
		case "spec":
			out.Values[i] = ec._CreateDeviceRequest_spec(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dataLinkTemplateImplementors = []string{"DataLinkTemplate"}

func (ec *executionContext) _DataLinkTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.DataLinkTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataLinkTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataLinkTemplate")
		case "link_protocol":
			out.Values[i] = ec._DataLinkTemplate_link_protocol(ctx, field, obj)
		case "app_protocol_refs":
			out.Values[i] = ec._DataLinkTemplate_app_protocol_refs(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._DataLinkTemplate_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceCommunicationUnitImplementors = []string{"DeviceCommunicationUnit"}

func (ec *executionContext) _DeviceCommunicationUnit(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceCommunicationUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceCommunicationUnitImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceCommunicationUnit")
		case "communication_unit_id":
			out.Values[i] = ec._DeviceCommunicationUnit_communication_unit_id(ctx, field, obj)
		case "app_protocol":
			out.Values[i] = ec._DeviceCommunicationUnit_app_protocol(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceConnectionInfoImplementors = []string{"DeviceConnectionInfo"}

func (ec *executionContext) _DeviceConnectionInfo(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceConnectionInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceConnectionInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceConnectionInfo")
		case "communication_unit":
			out.Values[i] = ec._DeviceConnectionInfo_communication_unit(ctx, field, obj)
		case "app_protocol":
			out.Values[i] = ec._DeviceConnectionInfo_app_protocol(ctx, field, obj)
		case "device_attributes":
			out.Values[i] = ec._DeviceConnectionInfo_device_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceGroupOverviewSpecImplementors = []string{"DeviceGroupOverviewSpec"}

func (ec *executionContext) _DeviceGroupOverviewSpec(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceGroupOverviewSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceGroupOverviewSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceGroupOverviewSpec")
		case "id":
			out.Values[i] = ec._DeviceGroupOverviewSpec_id(ctx, field, obj)
		case "external_id":
			out.Values[i] = ec._DeviceGroupOverviewSpec_external_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._DeviceGroupOverviewSpec_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceGroupSpecImplementors = []string{"DeviceGroupSpec"}

func (ec *executionContext) _DeviceGroupSpec(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceGroupSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceGroupSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceGroupSpec")
		case "id":
			out.Values[i] = ec._DeviceGroupSpec_id(ctx, field, obj)
		case "external_id":
			out.Values[i] = ec._DeviceGroupSpec_external_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._DeviceGroupSpec_name(ctx, field, obj)
		case "device_id":
			out.Values[i] = ec._DeviceGroupSpec_device_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceSpecImplementors = []string{"DeviceSpec"}

func (ec *executionContext) _DeviceSpec(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceSpec")
		case "id":
			out.Values[i] = ec._DeviceSpec_id(ctx, field, obj)
		case "external_id":
			out.Values[i] = ec._DeviceSpec_external_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._DeviceSpec_name(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._DeviceSpec_attributes(ctx, field, obj)
		case "communication_unit_link":
			out.Values[i] = ec._DeviceSpec_communication_unit_link(ctx, field, obj)
		case "timezone":
			out.Values[i] = ec._DeviceSpec_timezone(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var driverInfoImplementors = []string{"DriverInfo"}

func (ec *executionContext) _DriverInfo(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfo")
		case "driver_type":
			out.Values[i] = ec._DriverInfo_driver_type(ctx, field, obj)
		case "version":
			out.Values[i] = ec._DriverInfo_version(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var driverTemplatesImplementors = []string{"DriverTemplates"}

func (ec *executionContext) _DriverTemplates(ctx context.Context, sel ast.SelectionSet, obj *model.DriverTemplates) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverTemplatesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverTemplates")
		case "communication_templates":
			out.Values[i] = ec._DriverTemplates_communication_templates(ctx, field, obj)
		case "app_protocols":
			out.Values[i] = ec._DriverTemplates_app_protocols(ctx, field, obj)
		case "action_attributes":
			out.Values[i] = ec._DriverTemplates_action_attributes(ctx, field, obj)
		case "access_templates":
			out.Values[i] = ec._DriverTemplates_access_templates(ctx, field, obj)
		case "action_constraints":
			out.Values[i] = ec._DriverTemplates_action_constraints(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var emptyImplementors = []string{"Empty"}

func (ec *executionContext) _Empty(ctx context.Context, sel ast.SelectionSet, obj *model.Empty) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emptyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Empty")
		case "_empty":
			out.Values[i] = ec._Empty__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getBulkRequestImplementors = []string{"GetBulkRequest"}

func (ec *executionContext) _GetBulkRequest(ctx context.Context, sel ast.SelectionSet, obj *model.GetBulkRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getBulkRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetBulkRequest")
		case "bulk_id":
			out.Values[i] = ec._GetBulkRequest_bulk_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getBulkResponseImplementors = []string{"GetBulkResponse"}

func (ec *executionContext) _GetBulkResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetBulkResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getBulkResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetBulkResponse")
		case "spec":
			out.Values[i] = ec._GetBulkResponse_spec(ctx, field, obj)
		case "status":
			out.Values[i] = ec._GetBulkResponse_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getBulksResponseImplementors = []string{"GetBulksResponse"}

func (ec *executionContext) _GetBulksResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetBulksResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getBulksResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetBulksResponse")
		case "bulks":
			out.Values[i] = ec._GetBulksResponse_bulks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getBulksReuqestImplementors = []string{"GetBulksReuqest"}

func (ec *executionContext) _GetBulksReuqest(ctx context.Context, sel ast.SelectionSet, obj *model.GetBulksReuqest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getBulksReuqestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetBulksReuqest")
		case "tfrom":
			out.Values[i] = ec._GetBulksReuqest_tfrom(ctx, field, obj)
		case "tto":
			out.Values[i] = ec._GetBulksReuqest_tto(ctx, field, obj)
		case "include_data":
			out.Values[i] = ec._GetBulksReuqest_include_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getCommunicationUnitsRequestImplementors = []string{"GetCommunicationUnitsRequest"}

func (ec *executionContext) _GetCommunicationUnitsRequest(ctx context.Context, sel ast.SelectionSet, obj *model.GetCommunicationUnitsRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getCommunicationUnitsRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetCommunicationUnitsRequest")
		case "id":
			out.Values[i] = ec._GetCommunicationUnitsRequest_id(ctx, field, obj)
		case "external_id":
			out.Values[i] = ec._GetCommunicationUnitsRequest_external_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._GetCommunicationUnitsRequest_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getCommunicationUnitsResponseImplementors = []string{"GetCommunicationUnitsResponse"}

func (ec *executionContext) _GetCommunicationUnitsResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetCommunicationUnitsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getCommunicationUnitsResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetCommunicationUnitsResponse")
		case "spec":
			out.Values[i] = ec._GetCommunicationUnitsResponse_spec(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getDeviceGroupResponseImplementors = []string{"GetDeviceGroupResponse"}

func (ec *executionContext) _GetDeviceGroupResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetDeviceGroupResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getDeviceGroupResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetDeviceGroupResponse")
		case "spec":
			out.Values[i] = ec._GetDeviceGroupResponse_spec(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getDeviceGroupsResponseImplementors = []string{"GetDeviceGroupsResponse"}

func (ec *executionContext) _GetDeviceGroupsResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetDeviceGroupsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getDeviceGroupsResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetDeviceGroupsResponse")
		case "groups":
			out.Values[i] = ec._GetDeviceGroupsResponse_groups(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getDevicesCommunicationUnitsRequestImplementors = []string{"GetDevicesCommunicationUnitsRequest"}

func (ec *executionContext) _GetDevicesCommunicationUnitsRequest(ctx context.Context, sel ast.SelectionSet, obj *model.GetDevicesCommunicationUnitsRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getDevicesCommunicationUnitsRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetDevicesCommunicationUnitsRequest")
		case "device_id":
			out.Values[i] = ec._GetDevicesCommunicationUnitsRequest_device_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getDevicesCommunicationUnitsResponseImplementors = []string{"GetDevicesCommunicationUnitsResponse"}

func (ec *executionContext) _GetDevicesCommunicationUnitsResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetDevicesCommunicationUnitsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getDevicesCommunicationUnitsResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetDevicesCommunicationUnitsResponse")
		case "devices":
			out.Values[i] = ec._GetDevicesCommunicationUnitsResponse_devices(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getDevicesRequestImplementors = []string{"GetDevicesRequest"}

func (ec *executionContext) _GetDevicesRequest(ctx context.Context, sel ast.SelectionSet, obj *model.GetDevicesRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getDevicesRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetDevicesRequest")
		case "id":
			out.Values[i] = ec._GetDevicesRequest_id(ctx, field, obj)
		case "external_id":
			out.Values[i] = ec._GetDevicesRequest_external_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._GetDevicesRequest_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getDevicesResponseImplementors = []string{"GetDevicesResponse"}

func (ec *executionContext) _GetDevicesResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetDevicesResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getDevicesResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetDevicesResponse")
		case "spec":
			out.Values[i] = ec._GetDevicesResponse_spec(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getDriversResponseImplementors = []string{"GetDriversResponse"}

func (ec *executionContext) _GetDriversResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetDriversResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getDriversResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetDriversResponse")
		case "result":
			out.Values[i] = ec._GetDriversResponse_result(ctx, field, obj)
		case "drivers":
			out.Values[i] = ec._GetDriversResponse_drivers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getJobStatusRequestImplementors = []string{"GetJobStatusRequest"}

func (ec *executionContext) _GetJobStatusRequest(ctx context.Context, sel ast.SelectionSet, obj *model.GetJobStatusRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getJobStatusRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetJobStatusRequest")
		case "job_id":
			out.Values[i] = ec._GetJobStatusRequest_job_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getJobStatusResponseImplementors = []string{"GetJobStatusResponse"}

func (ec *executionContext) _GetJobStatusResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetJobStatusResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getJobStatusResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetJobStatusResponse")
		case "status":
			out.Values[i] = ec._GetJobStatusResponse_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getModemPoolResponseImplementors = []string{"GetModemPoolResponse"}

func (ec *executionContext) _GetModemPoolResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetModemPoolResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getModemPoolResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetModemPoolResponse")
		case "modems":
			out.Values[i] = ec._GetModemPoolResponse_modems(ctx, field, obj)
		case "name":
			out.Values[i] = ec._GetModemPoolResponse_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getModemPoolsResponseImplementors = []string{"GetModemPoolsResponse"}

func (ec *executionContext) _GetModemPoolsResponse(ctx context.Context, sel ast.SelectionSet, obj *model.GetModemPoolsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getModemPoolsResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetModemPoolsResponse")
		case "pools":
			out.Values[i] = ec._GetModemPoolsResponse_pools(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobActionImplementors = []string{"JobAction"}

func (ec *executionContext) _JobAction(ctx context.Context, sel ast.SelectionSet, obj *model.JobAction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobActionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobAction")
		case "action_id":
			out.Values[i] = ec._JobAction_action_id(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._JobAction_attributes(ctx, field, obj)
		case "get_register":
			out.Values[i] = ec._JobAction_get_register(ctx, field, obj)
		case "get_periodical_profile":
			out.Values[i] = ec._JobAction_get_periodical_profile(ctx, field, obj)
		case "get_irregular_profile":
			out.Values[i] = ec._JobAction_get_irregular_profile(ctx, field, obj)
		case "get_events":
			out.Values[i] = ec._JobAction_get_events(ctx, field, obj)
		case "get_clock":
			out.Values[i] = ec._JobAction_get_clock(ctx, field, obj)
		case "sync_clock":
			out.Values[i] = ec._JobAction_sync_clock(ctx, field, obj)
		case "get_relay_state":
			out.Values[i] = ec._JobAction_get_relay_state(ctx, field, obj)
		case "set_relay_state":
			out.Values[i] = ec._JobAction_set_relay_state(ctx, field, obj)
		case "get_disconnector_state":
			out.Values[i] = ec._JobAction_get_disconnector_state(ctx, field, obj)
		case "set_disconnector_state":
			out.Values[i] = ec._JobAction_set_disconnector_state(ctx, field, obj)
		case "get_tou":
			out.Values[i] = ec._JobAction_get_tou(ctx, field, obj)
		case "set_tou":
			out.Values[i] = ec._JobAction_set_tou(ctx, field, obj)
		case "get_limiter":
			out.Values[i] = ec._JobAction_get_limiter(ctx, field, obj)
		case "set_limiter":
			out.Values[i] = ec._JobAction_set_limiter(ctx, field, obj)
		case "reset_billing_period":
			out.Values[i] = ec._JobAction_reset_billing_period(ctx, field, obj)
		case "fw_update":
			out.Values[i] = ec._JobAction_fw_update(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobActionAttributesImplementors = []string{"JobActionAttributes"}

func (ec *executionContext) _JobActionAttributes(ctx context.Context, sel ast.SelectionSet, obj *model.JobActionAttributes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobActionAttributesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobActionAttributes")
		case "type":
			out.Values[i] = ec._JobActionAttributes_type(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._JobActionAttributes_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobActionContraintsImplementors = []string{"JobActionContraints"}

func (ec *executionContext) _JobActionContraints(ctx context.Context, sel ast.SelectionSet, obj *model.JobActionContraints) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobActionContraintsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobActionContraints")
		case "get_register_type_name":
			out.Values[i] = ec._JobActionContraints_get_register_type_name(ctx, field, obj)
		case "get_register_type_attributes":
			out.Values[i] = ec._JobActionContraints_get_register_type_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobCustomDeviceListImplementors = []string{"JobCustomDeviceList"}

func (ec *executionContext) _JobCustomDeviceList(ctx context.Context, sel ast.SelectionSet, obj *model.JobCustomDeviceList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobCustomDeviceListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobCustomDeviceList")
		case "list":
			out.Values[i] = ec._JobCustomDeviceList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobDeviceImplementors = []string{"JobDevice"}

func (ec *executionContext) _JobDevice(ctx context.Context, sel ast.SelectionSet, obj *model.JobDevice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobDeviceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobDevice")
		case "id":
			out.Values[i] = ec._JobDevice_id(ctx, field, obj)
		case "device_id":
			out.Values[i] = ec._JobDevice_device_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobDeviceListImplementors = []string{"JobDeviceList"}

func (ec *executionContext) _JobDeviceList(ctx context.Context, sel ast.SelectionSet, obj *model.JobDeviceList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobDeviceListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobDeviceList")
		case "list":
			out.Values[i] = ec._JobDeviceList_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobDevice_1Implementors = []string{"JobDevice_1"}

func (ec *executionContext) _JobDevice_1(ctx context.Context, sel ast.SelectionSet, obj *model.JobDevice1) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobDevice_1Implementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobDevice_1")
		case "id":
			out.Values[i] = ec._JobDevice_1_id(ctx, field, obj)
		case "device_id":
			out.Values[i] = ec._JobDevice_1_device_id(ctx, field, obj)
		case "external_id":
			out.Values[i] = ec._JobDevice_1_external_id(ctx, field, obj)
		case "device_attributes":
			out.Values[i] = ec._JobDevice_1_device_attributes(ctx, field, obj)
		case "connection_info":
			out.Values[i] = ec._JobDevice_1_connection_info(ctx, field, obj)
		case "app_protocol":
			out.Values[i] = ec._JobDevice_1_app_protocol(ctx, field, obj)
		case "timezone":
			out.Values[i] = ec._JobDevice_1_timezone(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobSettingsImplementors = []string{"JobSettings"}

func (ec *executionContext) _JobSettings(ctx context.Context, sel ast.SelectionSet, obj *model.JobSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobSettings")
		case "max_duration":
			out.Values[i] = ec._JobSettings_max_duration(ctx, field, obj)
		case "priority":
			out.Values[i] = ec._JobSettings_priority(ctx, field, obj)
		case "attempts":
			out.Values[i] = ec._JobSettings_attempts(ctx, field, obj)
		case "retry_delay":
			out.Values[i] = ec._JobSettings_retry_delay(ctx, field, obj)
		case "defer_start":
			out.Values[i] = ec._JobSettings_defer_start(ctx, field, obj)
		case "expires_at":
			out.Values[i] = ec._JobSettings_expires_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobStatusImplementors = []string{"JobStatus"}

func (ec *executionContext) _JobStatus(ctx context.Context, sel ast.SelectionSet, obj *model.JobStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobStatus")
		case "status":
			out.Values[i] = ec._JobStatus_status(ctx, field, obj)
		case "code":
			out.Values[i] = ec._JobStatus_code(ctx, field, obj)
		case "results":
			out.Values[i] = ec._JobStatus_results(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._JobStatus_created_at(ctx, field, obj)
		case "started_at":
			out.Values[i] = ec._JobStatus_started_at(ctx, field, obj)
		case "finished_at":
			out.Values[i] = ec._JobStatus_finished_at(ctx, field, obj)
		case "attempts_done":
			out.Values[i] = ec._JobStatus_attempts_done(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var measuredValueImplementors = []string{"MeasuredValue"}

func (ec *executionContext) _MeasuredValue(ctx context.Context, sel ast.SelectionSet, obj *model.MeasuredValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, measuredValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MeasuredValue")
		case "status":
			out.Values[i] = ec._MeasuredValue_status(ctx, field, obj)
		case "exponent":
			out.Values[i] = ec._MeasuredValue_exponent(ctx, field, obj)
		case "double_value":
			out.Values[i] = ec._MeasuredValue_double_value(ctx, field, obj)
		case "int_value":
			out.Values[i] = ec._MeasuredValue_int_value(ctx, field, obj)
		case "str_value":
			out.Values[i] = ec._MeasuredValue_str_value(ctx, field, obj)
		case "timestamp_value":
			out.Values[i] = ec._MeasuredValue_timestamp_value(ctx, field, obj)
		case "timestamp_tz_value":
			out.Values[i] = ec._MeasuredValue_timestamp_tz_value(ctx, field, obj)
		case "bool_value":
			out.Values[i] = ec._MeasuredValue_bool_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var modemInfoImplementors = []string{"ModemInfo"}

func (ec *executionContext) _ModemInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ModemInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, modemInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModemInfo")
		case "id":
			out.Values[i] = ec._ModemInfo_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ModemInfo_name(ctx, field, obj)
		case "at_init":
			out.Values[i] = ec._ModemInfo_at_init(ctx, field, obj)
		case "at_test":
			out.Values[i] = ec._ModemInfo_at_test(ctx, field, obj)
		case "at_config":
			out.Values[i] = ec._ModemInfo_at_config(ctx, field, obj)
		case "at_dial":
			out.Values[i] = ec._ModemInfo_at_dial(ctx, field, obj)
		case "at_hangup":
			out.Values[i] = ec._ModemInfo_at_hangup(ctx, field, obj)
		case "at_escape":
			out.Values[i] = ec._ModemInfo_at_escape(ctx, field, obj)
		case "at_dsr":
			out.Values[i] = ec._ModemInfo_at_dsr(ctx, field, obj)
		case "connect_timeout":
			out.Values[i] = ec._ModemInfo_connect_timeout(ctx, field, obj)
		case "tcpip":
			out.Values[i] = ec._ModemInfo_tcpip(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var modemPoolSpecImplementors = []string{"ModemPoolSpec"}

func (ec *executionContext) _ModemPoolSpec(ctx context.Context, sel ast.SelectionSet, obj *model.ModemPoolSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, modemPoolSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModemPoolSpec")
		case "pool_id":
			out.Values[i] = ec._ModemPoolSpec_pool_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ModemPoolSpec_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var profileBlokImplementors = []string{"ProfileBlok"}

func (ec *executionContext) _ProfileBlok(ctx context.Context, sel ast.SelectionSet, obj *model.ProfileBlok) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, profileBlokImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProfileBlok")
		case "start_timestamp":
			out.Values[i] = ec._ProfileBlok_start_timestamp(ctx, field, obj)
		case "values":
			out.Values[i] = ec._ProfileBlok_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var profileValuesImplementors = []string{"ProfileValues"}

func (ec *executionContext) _ProfileValues(ctx context.Context, sel ast.SelectionSet, obj *model.ProfileValues) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, profileValuesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProfileValues")
		case "period":
			out.Values[i] = ec._ProfileValues_period(ctx, field, obj)
		case "unit":
			out.Values[i] = ec._ProfileValues_unit(ctx, field, obj)
		case "blocks":
			out.Values[i] = ec._ProfileValues_blocks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var publicCreateBulkRequestImplementors = []string{"PublicCreateBulkRequest"}

func (ec *executionContext) _PublicCreateBulkRequest(ctx context.Context, sel ast.SelectionSet, obj *model.PublicCreateBulkRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, publicCreateBulkRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PublicCreateBulkRequest")
		case "id":
			out.Values[i] = ec._PublicCreateBulkRequest_id(ctx, field, obj)
		case "correlation_id":
			out.Values[i] = ec._PublicCreateBulkRequest_correlation_id(ctx, field, obj)
		case "driver_type":
			out.Values[i] = ec._PublicCreateBulkRequest_driver_type(ctx, field, obj)
		case "devices":
			out.Values[i] = ec._PublicCreateBulkRequest_devices(ctx, field, obj)
		case "custom_devices":
			out.Values[i] = ec._PublicCreateBulkRequest_custom_devices(ctx, field, obj)
		case "settings":
			out.Values[i] = ec._PublicCreateBulkRequest_settings(ctx, field, obj)
		case "actions":
			out.Values[i] = ec._PublicCreateBulkRequest_actions(ctx, field, obj)
		case "webhook_url":
			out.Values[i] = ec._PublicCreateBulkRequest_webhook_url(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "createBulk":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createBulk(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getBulks":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBulks(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getBulk":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBulk(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getJobStatus":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getJobStatus(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cancelBulk":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cancelBulk(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cancelJobs":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cancelJobs(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getConfig":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getConfig(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "setConfig":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_setConfig(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createCommunicationUnit":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createCommunicationUnit(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getCommunicationUnits":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCommunicationUnits(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createDevice":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createDevice(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDevices":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDevices(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "setDeviceCommunicationUnits":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_setDeviceCommunicationUnits(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDevicesCommunicationUnits":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDevicesCommunicationUnits(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createDeviceGroup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createDeviceGroup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDeviceGroups":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceGroups(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDeviceGroup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceGroup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "addDevicesToGroup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_addDevicesToGroup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "removeDevicesFromGroup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_removeDevicesFromGroup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getModemPools":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getModemPools(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getModemPool":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getModemPool(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createModemPool":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createModemPool(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateModemPool":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateModemPool(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deleteModemPool":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteModemPool(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createModem":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createModem(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateModem":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateModem(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deleteModem":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteModem(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDrivers":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDrivers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDriverTemplates":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDriverTemplates(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var removeDevicesFromGroupRequestImplementors = []string{"RemoveDevicesFromGroupRequest"}

func (ec *executionContext) _RemoveDevicesFromGroupRequest(ctx context.Context, sel ast.SelectionSet, obj *model.RemoveDevicesFromGroupRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, removeDevicesFromGroupRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoveDevicesFromGroupRequest")
		case "group_id":
			out.Values[i] = ec._RemoveDevicesFromGroupRequest_group_id(ctx, field, obj)
		case "device_id":
			out.Values[i] = ec._RemoveDevicesFromGroupRequest_device_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var setDeviceCommunicationUnitsRequestImplementors = []string{"SetDeviceCommunicationUnitsRequest"}

func (ec *executionContext) _SetDeviceCommunicationUnitsRequest(ctx context.Context, sel ast.SelectionSet, obj *model.SetDeviceCommunicationUnitsRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, setDeviceCommunicationUnitsRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SetDeviceCommunicationUnitsRequest")
		case "device_id":
			out.Values[i] = ec._SetDeviceCommunicationUnitsRequest_device_id(ctx, field, obj)
		case "communication_units":
			out.Values[i] = ec._SetDeviceCommunicationUnitsRequest_communication_units(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var setModemPoolRequestImplementors = []string{"SetModemPoolRequest"}

func (ec *executionContext) _SetModemPoolRequest(ctx context.Context, sel ast.SelectionSet, obj *model.SetModemPoolRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, setModemPoolRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SetModemPoolRequest")
		case "pool_id":
			out.Values[i] = ec._SetModemPoolRequest_pool_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._SetModemPoolRequest_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var setModemRequestImplementors = []string{"SetModemRequest"}

func (ec *executionContext) _SetModemRequest(ctx context.Context, sel ast.SelectionSet, obj *model.SetModemRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, setModemRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SetModemRequest")
		case "pool_id":
			out.Values[i] = ec._SetModemRequest_pool_id(ctx, field, obj)
		case "modem":
			out.Values[i] = ec._SetModemRequest_modem(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var stringListImplementors = []string{"StringList"}

func (ec *executionContext) _StringList(ctx context.Context, sel ast.SelectionSet, obj *model.StringList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stringListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StringList")
		case "items":
			out.Values[i] = ec._StringList_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var stringValueImplementors = []string{"StringValue"}

func (ec *executionContext) _StringValue(ctx context.Context, sel ast.SelectionSet, obj *model.StringValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stringValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StringValue")
		case "value":
			out.Values[i] = ec._StringValue_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemConfigImplementors = []string{"SystemConfig"}

func (ec *executionContext) _SystemConfig(ctx context.Context, sel ast.SelectionSet, obj *model.SystemConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemConfigImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemConfig")
		case "max_replicas":
			out.Values[i] = ec._SystemConfig_max_replicas(ctx, field, obj)
		case "max_cascade_device_count":
			out.Values[i] = ec._SystemConfig_max_cascade_device_count(ctx, field, obj)
		case "max_slots_per_driver":
			out.Values[i] = ec._SystemConfig_max_slots_per_driver(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var _mapListOfConnectionInfoImplementors = []string{"_mapListOfConnectionInfo"}

func (ec *executionContext) __mapListOfConnectionInfo(ctx context.Context, sel ast.SelectionSet, obj *model.MapListOfConnectionInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _mapListOfConnectionInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_mapListOfConnectionInfo")
		case "key":
			out.Values[i] = ec.__mapListOfConnectionInfo_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec.__mapListOfConnectionInfo_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var _mapAttributeValueImplementors = []string{"_mapAttributeValue"}

func (ec *executionContext) __mapAttributeValue(ctx context.Context, sel ast.SelectionSet, obj *model.MapAttributeValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _mapAttributeValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_mapAttributeValue")
		case "key":
			out.Values[i] = ec.__mapAttributeValue_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec.__mapAttributeValue_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var _mapDeviceGroupOverviewSpecImplementors = []string{"_mapDeviceGroupOverviewSpec"}

func (ec *executionContext) __mapDeviceGroupOverviewSpec(ctx context.Context, sel ast.SelectionSet, obj *model.MapDeviceGroupOverviewSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _mapDeviceGroupOverviewSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_mapDeviceGroupOverviewSpec")
		case "key":
			out.Values[i] = ec.__mapDeviceGroupOverviewSpec_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec.__mapDeviceGroupOverviewSpec_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var _mapStringListImplementors = []string{"_mapStringList"}

func (ec *executionContext) __mapStringList(ctx context.Context, sel ast.SelectionSet, obj *model.MapStringList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _mapStringListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_mapStringList")
		case "key":
			out.Values[i] = ec.__mapStringList_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec.__mapStringList_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var _mapstringImplementors = []string{"_mapstring"}

func (ec *executionContext) __mapstring(ctx context.Context, sel ast.SelectionSet, obj *model.Mapstring) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _mapstringImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_mapstring")
		case "key":
			out.Values[i] = ec.__mapstring_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec.__mapstring_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAccessLevelTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAccessLevelTemplate(ctx context.Context, sel ast.SelectionSet, v []*model.AccessLevelTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAccessLevelTemplate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAccessLevelTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAccessLevelTemplate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAccessLevelTemplate(ctx context.Context, sel ast.SelectionSet, v *model.AccessLevelTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccessLevelTemplate(ctx, sel, v)
}

func (ec *executionContext) marshalOActionData2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionData(ctx context.Context, sel ast.SelectionSet, v *model.ActionData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionData(ctx, sel, v)
}

func (ec *executionContext) marshalOActionFwUpdate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionFwUpdate(ctx context.Context, sel ast.SelectionSet, v *model.ActionFwUpdate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionFwUpdate(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetClock2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetClock(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetClock) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetClock(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetDisconnectorState2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetDisconnectorState(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetDisconnectorState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetDisconnectorState(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetEvents2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetEvents(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetEvents) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetEvents(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetIrregularProfile2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetIrregularProfile(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetIrregularProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetIrregularProfile(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetLimiter2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetLimiter(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetLimiter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetLimiter(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetPeriodicalProfile2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetPeriodicalProfile(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetPeriodicalProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetPeriodicalProfile(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetRegister2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetRegister(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetRegister) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetRegister(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetRelayState2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetRelayState(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetRelayState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetRelayState(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetTou2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetTou(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetTou) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetTou(ctx, sel, v)
}

func (ec *executionContext) marshalOActionResetBillingPeriod2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResetBillingPeriod(ctx context.Context, sel ast.SelectionSet, v *model.ActionResetBillingPeriod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionResetBillingPeriod(ctx, sel, v)
}

func (ec *executionContext) marshalOActionResult2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResult(ctx context.Context, sel ast.SelectionSet, v []*model.ActionResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOActionResult2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOActionResult2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResult(ctx context.Context, sel ast.SelectionSet, v *model.ActionResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOActionResultCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResultCode(ctx context.Context, v any) (*model.ActionResultCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ActionResultCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOActionResultCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResultCode(ctx context.Context, sel ast.SelectionSet, v *model.ActionResultCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOActionSetDisconnectorState2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSetDisconnectorState(ctx context.Context, sel ast.SelectionSet, v *model.ActionSetDisconnectorState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionSetDisconnectorState(ctx, sel, v)
}

func (ec *executionContext) marshalOActionSetLimiter2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSetLimiter(ctx context.Context, sel ast.SelectionSet, v *model.ActionSetLimiter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionSetLimiter(ctx, sel, v)
}

func (ec *executionContext) marshalOActionSetRelayState2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSetRelayState(ctx context.Context, sel ast.SelectionSet, v *model.ActionSetRelayState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionSetRelayState(ctx, sel, v)
}

func (ec *executionContext) marshalOActionSetTou2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSetTou(ctx context.Context, sel ast.SelectionSet, v *model.ActionSetTou) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionSetTou(ctx, sel, v)
}

func (ec *executionContext) marshalOActionSyncClock2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSyncClock(ctx context.Context, sel ast.SelectionSet, v *model.ActionSyncClock) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionSyncClock(ctx, sel, v)
}

func (ec *executionContext) unmarshalOActionType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionType(ctx context.Context, v any) (*model.ActionType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ActionType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOActionType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionType(ctx context.Context, sel ast.SelectionSet, v *model.ActionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOApplicationProtocol2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx context.Context, v any) ([]*model.ApplicationProtocol, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ApplicationProtocol, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOApplicationProtocol2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx context.Context, sel ast.SelectionSet, v []*model.ApplicationProtocol) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx context.Context, v any) (*model.ApplicationProtocol, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ApplicationProtocol)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx context.Context, sel ast.SelectionSet, v *model.ApplicationProtocol) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOApplicationProtocolTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocolTemplate(ctx context.Context, sel ast.SelectionSet, v []*model.ApplicationProtocolTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOApplicationProtocolTemplate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocolTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOApplicationProtocolTemplate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocolTemplate(ctx context.Context, sel ast.SelectionSet, v *model.ApplicationProtocolTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApplicationProtocolTemplate(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfConnectionInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfConnectionInfo(ctx context.Context, sel ast.SelectionSet, v *model.ListOfConnectionInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfConnectionInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOAttributeDefinition2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeDefinition(ctx context.Context, sel ast.SelectionSet, v []*model.AttributeDefinition) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAttributeDefinition2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeDefinition(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAttributeDefinition2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeDefinition(ctx context.Context, sel ast.SelectionSet, v *model.AttributeDefinition) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AttributeDefinition(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAttributeType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeType(ctx context.Context, v any) (*model.AttributeType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.AttributeType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAttributeType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeType(ctx context.Context, sel ast.SelectionSet, v *model.AttributeType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOAttributeValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeValue(ctx context.Context, sel ast.SelectionSet, v *model.AttributeValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AttributeValue(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBigInt2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigInt2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOBillingValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBillingValue(ctx context.Context, sel ast.SelectionSet, v []*model.BillingValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBillingValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBillingValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBillingValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBillingValue(ctx context.Context, sel ast.SelectionSet, v *model.BillingValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BillingValue(ctx, sel, v)
}

func (ec *executionContext) marshalOBillingValues2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBillingValues(ctx context.Context, sel ast.SelectionSet, v *model.BillingValues) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BillingValues(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOBulkJobStatus2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkJobStatus(ctx context.Context, sel ast.SelectionSet, v []*model.BulkJobStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBulkJobStatus2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkJobStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBulkJobStatus2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkJobStatus(ctx context.Context, sel ast.SelectionSet, v *model.BulkJobStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BulkJobStatus(ctx, sel, v)
}

func (ec *executionContext) marshalOBulkSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkSpec(ctx context.Context, sel ast.SelectionSet, v *model.BulkSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BulkSpec(ctx, sel, v)
}

func (ec *executionContext) marshalOBulkStatus2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkStatus(ctx context.Context, sel ast.SelectionSet, v *model.BulkStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BulkStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBulkStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkStatusCode(ctx context.Context, v any) (*model.BulkStatusCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.BulkStatusCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBulkStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkStatusCode(ctx context.Context, sel ast.SelectionSet, v *model.BulkStatusCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCommunicationTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationTemplate(ctx context.Context, sel ast.SelectionSet, v []*model.CommunicationTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommunicationTemplate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCommunicationTemplate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationTemplate(ctx context.Context, sel ast.SelectionSet, v *model.CommunicationTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommunicationTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCommunicationType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationType(ctx context.Context, v any) (*model.CommunicationType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.CommunicationType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCommunicationType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationType(ctx context.Context, sel ast.SelectionSet, v *model.CommunicationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCommunicationUnitSpec2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationUnitSpec(ctx context.Context, sel ast.SelectionSet, v []*model.CommunicationUnitSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommunicationUnitSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationUnitSpec(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCommunicationUnitSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationUnitSpec(ctx context.Context, sel ast.SelectionSet, v *model.CommunicationUnitSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommunicationUnitSpec(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionInfo(ctx context.Context, sel ast.SelectionSet, v []*model.ConnectionInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOConnectionInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOConnectionInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionInfo(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionTypeControlledSerial2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeControlledSerial(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionTypeControlledSerial) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionTypeControlledSerial(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionTypeDirectTcpIp2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeDirectTCPIP(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionTypeDirectTCPIP) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionTypeDirectTcpIp(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionTypeModemPool2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeModemPool(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionTypeModemPool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionTypeModemPool(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionTypeSerialDirect2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeSerialDirect(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionTypeSerialDirect) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionTypeSerialDirect(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionTypeSerialMoxa2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeSerialMoxa(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionTypeSerialMoxa) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionTypeSerialMoxa(ctx, sel, v)
}

func (ec *executionContext) unmarshalODataLinkProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDataLinkProtocol(ctx context.Context, v any) (*model.DataLinkProtocol, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.DataLinkProtocol)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODataLinkProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDataLinkProtocol(ctx context.Context, sel ast.SelectionSet, v *model.DataLinkProtocol) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalODataLinkTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDataLinkTemplate(ctx context.Context, sel ast.SelectionSet, v []*model.DataLinkTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODataLinkTemplate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDataLinkTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODataLinkTemplate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDataLinkTemplate(ctx context.Context, sel ast.SelectionSet, v *model.DataLinkTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataLinkTemplate(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceCommunicationUnit2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceCommunicationUnit(ctx context.Context, sel ast.SelectionSet, v []*model.DeviceCommunicationUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeviceCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceCommunicationUnit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODeviceCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceCommunicationUnit(ctx context.Context, sel ast.SelectionSet, v *model.DeviceCommunicationUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceCommunicationUnit(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceConnectionInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceConnectionInfo(ctx context.Context, sel ast.SelectionSet, v []*model.DeviceConnectionInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeviceConnectionInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceConnectionInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODeviceConnectionInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceConnectionInfo(ctx context.Context, sel ast.SelectionSet, v *model.DeviceConnectionInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceConnectionInfo(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceGroupOverviewSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceGroupOverviewSpec(ctx context.Context, sel ast.SelectionSet, v *model.DeviceGroupOverviewSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceGroupOverviewSpec(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceGroupSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceGroupSpec(ctx context.Context, sel ast.SelectionSet, v *model.DeviceGroupSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceGroupSpec(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceSpec2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceSpec(ctx context.Context, sel ast.SelectionSet, v []*model.DeviceSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeviceSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceSpec(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODeviceSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceSpec(ctx context.Context, sel ast.SelectionSet, v *model.DeviceSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceSpec(ctx, sel, v)
}

func (ec *executionContext) marshalODriverInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDriverInfo(ctx context.Context, sel ast.SelectionSet, v []*model.DriverInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODriverInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDriverInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODriverInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDriverInfo(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverInfo(ctx, sel, v)
}

func (ec *executionContext) marshalODriverTemplates2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDriverTemplates(ctx context.Context, sel ast.SelectionSet, v *model.DriverTemplates) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverTemplates(ctx, sel, v)
}

func (ec *executionContext) marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx context.Context, sel ast.SelectionSet, v *model.Empty) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Empty(ctx, sel, v)
}

func (ec *executionContext) unmarshalOErrorCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐErrorCode(ctx context.Context, v any) (*model.ErrorCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ErrorCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOErrorCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐErrorCode(ctx context.Context, sel ast.SelectionSet, v *model.ErrorCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v any) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalOGetBulkResponse2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetBulkResponse(ctx context.Context, sel ast.SelectionSet, v []*model.GetBulkResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGetBulkResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetBulkResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGetBulkResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetBulkResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetBulkResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetBulkResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOGetBulksResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetBulksResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetBulksResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetBulksResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOGetCommunicationUnitsResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetCommunicationUnitsResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetCommunicationUnitsResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetCommunicationUnitsResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOGetDeviceGroupResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetDeviceGroupResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetDeviceGroupResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetDeviceGroupResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOGetDeviceGroupsResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetDeviceGroupsResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetDeviceGroupsResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetDeviceGroupsResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOGetDevicesCommunicationUnitsResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetDevicesCommunicationUnitsResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetDevicesCommunicationUnitsResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetDevicesCommunicationUnitsResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOGetDevicesResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetDevicesResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetDevicesResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetDevicesResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOGetDriversResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetDriversResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetDriversResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetDriversResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOGetJobStatusResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetJobStatusResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetJobStatusResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetJobStatusResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOGetModemPoolResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetModemPoolResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetModemPoolResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetModemPoolResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOGetModemPoolsResponse2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐGetModemPoolsResponse(ctx context.Context, sel ast.SelectionSet, v *model.GetModemPoolsResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetModemPoolsResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2ᚕᚖint32(ctx context.Context, v any) ([]*int32, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*int32, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚖint32(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕᚖint32(ctx context.Context, sel ast.SelectionSet, v []*int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚖint32(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint32(ctx context.Context, v any) (*int32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint32(ctx context.Context, sel ast.SelectionSet, v *int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt32(*v)
	return res
}

func (ec *executionContext) unmarshalOInt642ᚖint64(ctx context.Context, v any) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt642ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt64(*v)
	return res
}

func (ec *executionContext) marshalOJobAction2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobAction(ctx context.Context, sel ast.SelectionSet, v []*model.JobAction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJobAction2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobAction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOJobAction2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobAction(ctx context.Context, sel ast.SelectionSet, v *model.JobAction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobAction(ctx, sel, v)
}

func (ec *executionContext) marshalOJobActionAttributes2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobActionAttributes(ctx context.Context, sel ast.SelectionSet, v []*model.JobActionAttributes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJobActionAttributes2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobActionAttributes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOJobActionAttributes2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobActionAttributes(ctx context.Context, sel ast.SelectionSet, v *model.JobActionAttributes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobActionAttributes(ctx, sel, v)
}

func (ec *executionContext) marshalOJobActionContraints2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobActionContraints(ctx context.Context, sel ast.SelectionSet, v *model.JobActionContraints) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobActionContraints(ctx, sel, v)
}

func (ec *executionContext) marshalOJobCustomDeviceList2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobCustomDeviceList(ctx context.Context, sel ast.SelectionSet, v *model.JobCustomDeviceList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobCustomDeviceList(ctx, sel, v)
}

func (ec *executionContext) marshalOJobDevice2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobDevice(ctx context.Context, sel ast.SelectionSet, v []*model.JobDevice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJobDevice2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobDevice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOJobDevice2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobDevice(ctx context.Context, sel ast.SelectionSet, v *model.JobDevice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobDevice(ctx, sel, v)
}

func (ec *executionContext) marshalOJobDeviceList2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobDeviceList(ctx context.Context, sel ast.SelectionSet, v *model.JobDeviceList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobDeviceList(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJobErrorCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobErrorCode(ctx context.Context, v any) (*model.JobErrorCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.JobErrorCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJobErrorCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobErrorCode(ctx context.Context, sel ast.SelectionSet, v *model.JobErrorCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOJobPriority2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobPriority(ctx context.Context, v any) (*model.JobPriority, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.JobPriority)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJobPriority2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobPriority(ctx context.Context, sel ast.SelectionSet, v *model.JobPriority) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOJobSettings2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobSettings(ctx context.Context, sel ast.SelectionSet, v *model.JobSettings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobSettings(ctx, sel, v)
}

func (ec *executionContext) marshalOJobStatus2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobStatus(ctx context.Context, sel ast.SelectionSet, v *model.JobStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJobStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobStatusCode(ctx context.Context, v any) (*model.JobStatusCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.JobStatusCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJobStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobStatusCode(ctx context.Context, sel ast.SelectionSet, v *model.JobStatusCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMeasuredValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMeasuredValue(ctx context.Context, sel ast.SelectionSet, v []*model.MeasuredValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMeasuredValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMeasuredValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMeasuredValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMeasuredValue(ctx context.Context, sel ast.SelectionSet, v *model.MeasuredValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MeasuredValue(ctx, sel, v)
}

func (ec *executionContext) marshalOModemInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemInfo(ctx context.Context, sel ast.SelectionSet, v []*model.ModemInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOModemInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOModemInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemInfo(ctx context.Context, sel ast.SelectionSet, v *model.ModemInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ModemInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOModemPoolSpec2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemPoolSpec(ctx context.Context, sel ast.SelectionSet, v []*model.ModemPoolSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOModemPoolSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemPoolSpec(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOModemPoolSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemPoolSpec(ctx context.Context, sel ast.SelectionSet, v *model.ModemPoolSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ModemPoolSpec(ctx, sel, v)
}

func (ec *executionContext) marshalOProfileBlok2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐProfileBlok(ctx context.Context, sel ast.SelectionSet, v []*model.ProfileBlok) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProfileBlok2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐProfileBlok(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProfileBlok2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐProfileBlok(ctx context.Context, sel ast.SelectionSet, v *model.ProfileBlok) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProfileBlok(ctx, sel, v)
}

func (ec *executionContext) marshalOProfileValues2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐProfileValues(ctx context.Context, sel ast.SelectionSet, v *model.ProfileValues) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProfileValues(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v any) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOStringList2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐStringList(ctx context.Context, sel ast.SelectionSet, v *model.StringList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StringList(ctx, sel, v)
}

func (ec *executionContext) marshalOSystemConfig2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐSystemConfig(ctx context.Context, sel ast.SelectionSet, v *model.SystemConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTimestamp2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamp2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v any) (*uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUUID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v *uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalUUID(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) marshalO_mapListOfConnectionInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapListOfConnectionInfo(ctx context.Context, sel ast.SelectionSet, v []*model.MapListOfConnectionInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_mapListOfConnectionInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapListOfConnectionInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalO_mapListOfConnectionInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapListOfConnectionInfo(ctx context.Context, sel ast.SelectionSet, v *model.MapListOfConnectionInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__mapListOfConnectionInfo(ctx, sel, v)
}

func (ec *executionContext) marshalO_mapAttributeValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAttributeValue(ctx context.Context, sel ast.SelectionSet, v []*model.MapAttributeValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_mapAttributeValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAttributeValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalO_mapAttributeValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAttributeValue(ctx context.Context, sel ast.SelectionSet, v *model.MapAttributeValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__mapAttributeValue(ctx, sel, v)
}

func (ec *executionContext) marshalO_mapDeviceGroupOverviewSpec2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapDeviceGroupOverviewSpec(ctx context.Context, sel ast.SelectionSet, v []*model.MapDeviceGroupOverviewSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_mapDeviceGroupOverviewSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapDeviceGroupOverviewSpec(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalO_mapDeviceGroupOverviewSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapDeviceGroupOverviewSpec(ctx context.Context, sel ast.SelectionSet, v *model.MapDeviceGroupOverviewSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__mapDeviceGroupOverviewSpec(ctx, sel, v)
}

func (ec *executionContext) marshalO_mapStringList2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapStringList(ctx context.Context, sel ast.SelectionSet, v []*model.MapStringList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_mapStringList2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapStringList(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalO_mapStringList2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapStringList(ctx context.Context, sel ast.SelectionSet, v *model.MapStringList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__mapStringList(ctx, sel, v)
}

func (ec *executionContext) marshalO_mapstring2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapstring(ctx context.Context, sel ast.SelectionSet, v []*model.Mapstring) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_mapstring2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapstring(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalO_mapstring2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapstring(ctx context.Context, sel ast.SelectionSet, v *model.Mapstring) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__mapstring(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
