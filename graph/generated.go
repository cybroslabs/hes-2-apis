// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/cybroslabs/hes-2-apis/graph/model"
	"github.com/google/uuid"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AccessLevelTemplate struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	ActionData struct {
		Billings func(childComplexity int) int
		Nodata   func(childComplexity int) int
		Profile  func(childComplexity int) int
	}

	ActionFwUpdate struct {
		Empty func(childComplexity int) int
	}

	ActionGetClock struct {
		Empty func(childComplexity int) int
	}

	ActionGetDisconnectorState struct {
		Empty func(childComplexity int) int
	}

	ActionGetEvents struct {
		From func(childComplexity int) int
		To   func(childComplexity int) int
	}

	ActionGetIrregularProfile struct {
		From func(childComplexity int) int
		To   func(childComplexity int) int
	}

	ActionGetLimiter struct {
		Empty func(childComplexity int) int
	}

	ActionGetPeriodicalProfile struct {
		From func(childComplexity int) int
		To   func(childComplexity int) int
	}

	ActionGetRegister struct {
		Empty func(childComplexity int) int
	}

	ActionGetRelayState struct {
		Empty func(childComplexity int) int
	}

	ActionGetTou struct {
		Empty func(childComplexity int) int
	}

	ActionResetBillingPeriod struct {
		Empty func(childComplexity int) int
	}

	ActionResult struct {
		ActionID func(childComplexity int) int
		Data     func(childComplexity int) int
		Status   func(childComplexity int) int
	}

	ActionSetDisconnectorState struct {
		Empty func(childComplexity int) int
	}

	ActionSetLimiter struct {
		Empty func(childComplexity int) int
	}

	ActionSetRelayState struct {
		Empty func(childComplexity int) int
	}

	ActionSetTou struct {
		Empty func(childComplexity int) int
	}

	ActionSyncClock struct {
		Empty func(childComplexity int) int
	}

	AddDevicesToGroupRequest struct {
		DeviceID func(childComplexity int) int
		GroupID  func(childComplexity int) int
	}

	Any struct {
		TypeURL func(childComplexity int) int
		Value   func(childComplexity int) int
	}

	ApplicationProtocolTemplate struct {
		Attributes func(childComplexity int) int
		ID         func(childComplexity int) int
		Protocol   func(childComplexity int) int
	}

	AttributeDefinition struct {
		DefaultValue func(childComplexity int) int
		Description  func(childComplexity int) int
		Mandatory    func(childComplexity int) int
		Name         func(childComplexity int) int
		Options      func(childComplexity int) int
		Type         func(childComplexity int) int
	}

	AttributeValue struct {
		BinaryValue func(childComplexity int) int
		BoolValue   func(childComplexity int) int
		DoubleValue func(childComplexity int) int
		IntValue    func(childComplexity int) int
		StrValue    func(childComplexity int) int
	}

	BillingValue struct {
		Timestamp func(childComplexity int) int
		Unit      func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	BillingValues struct {
		Values func(childComplexity int) int
	}

	Bulk struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
		Status   func(childComplexity int) int
	}

	BulkJob struct {
		JobID  func(childComplexity int) int
		Status func(childComplexity int) int
	}

	BulkSpec struct {
		Actions       func(childComplexity int) int
		CorrelationID func(childComplexity int) int
		CustomDevices func(childComplexity int) int
		Devices       func(childComplexity int) int
		DriverType    func(childComplexity int) int
		Settings      func(childComplexity int) int
		WebhookURL    func(childComplexity int) int
	}

	BulkStatus struct {
		Jobs   func(childComplexity int) int
		Status func(childComplexity int) int
	}

	CommunicationTemplate struct {
		Datalinks func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	CommunicationUnit struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	CommunicationUnitSpec struct {
		ConnectionInfo func(childComplexity int) int
		ExternalID     func(childComplexity int) int
		Name           func(childComplexity int) int
	}

	ConnectionInfo struct {
		CustomGroupingID func(childComplexity int) int
		LinkProtocol     func(childComplexity int) int
		ModemPool        func(childComplexity int) int
		SerialOverIP     func(childComplexity int) int
		Tcpip            func(childComplexity int) int
	}

	ConnectionTypeControlledSerial struct {
		Direct func(childComplexity int) int
		Moxa   func(childComplexity int) int
	}

	ConnectionTypeDirectTcpIp struct {
		Host    func(childComplexity int) int
		Port    func(childComplexity int) int
		Timeout func(childComplexity int) int
	}

	ConnectionTypeModemPool struct {
		Modem  func(childComplexity int) int
		Number func(childComplexity int) int
		PoolID func(childComplexity int) int
	}

	ConnectionTypeSerialDirect struct {
		Host func(childComplexity int) int
		Port func(childComplexity int) int
	}

	ConnectionTypeSerialMoxa struct {
		CommandPort func(childComplexity int) int
		DataPort    func(childComplexity int) int
		Host        func(childComplexity int) int
	}

	CreateBulkRequest struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	CreateCommunicationUnitRequest struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	CreateDeviceGroupRequest struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	CreateDeviceRequest struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	DataLinkTemplate struct {
		AppProtocolRefs func(childComplexity int) int
		Attributes      func(childComplexity int) int
		LinkProtocol    func(childComplexity int) int
	}

	Device struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	DeviceCommunicationUnit struct {
		AppProtocol         func(childComplexity int) int
		CommunicationUnitID func(childComplexity int) int
	}

	DeviceGroup struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	DeviceGroupSpec struct {
		DeviceID   func(childComplexity int) int
		ExternalID func(childComplexity int) int
		Name       func(childComplexity int) int
	}

	DeviceSpec struct {
		Attributes            func(childComplexity int) int
		CommunicationUnitLink func(childComplexity int) int
		ExternalID            func(childComplexity int) int
		ID                    func(childComplexity int) int
		Name                  func(childComplexity int) int
		Timezone              func(childComplexity int) int
	}

	Driver struct {
		Spec func(childComplexity int) int
	}

	DriverSpec struct {
		DisplayName       func(childComplexity int) int
		DriverType        func(childComplexity int) int
		ListeningPort     func(childComplexity int) int
		MaxCascadeDepth   func(childComplexity int) int
		MaxConcurrentJobs func(childComplexity int) int
		Templates         func(childComplexity int) int
		TypicalMemUsage   func(childComplexity int) int
		Version           func(childComplexity int) int
	}

	DriverTemplates struct {
		AccessTemplates        func(childComplexity int) int
		ActionAttributes       func(childComplexity int) int
		ActionConstraints      func(childComplexity int) int
		AppProtocols           func(childComplexity int) int
		CommunicationTemplates func(childComplexity int) int
	}

	Empty struct {
		Empty func(childComplexity int) int
	}

	JobAction struct {
		ActionID             func(childComplexity int) int
		Attributes           func(childComplexity int) int
		FwUpdate             func(childComplexity int) int
		GetClock             func(childComplexity int) int
		GetDisconnectorState func(childComplexity int) int
		GetEvents            func(childComplexity int) int
		GetIrregularProfile  func(childComplexity int) int
		GetLimiter           func(childComplexity int) int
		GetPeriodicalProfile func(childComplexity int) int
		GetRegister          func(childComplexity int) int
		GetRelayState        func(childComplexity int) int
		GetTou               func(childComplexity int) int
		ResetBillingPeriod   func(childComplexity int) int
		SetDisconnectorState func(childComplexity int) int
		SetLimiter           func(childComplexity int) int
		SetRelayState        func(childComplexity int) int
		SetTou               func(childComplexity int) int
		SyncClock            func(childComplexity int) int
	}

	JobActionAttributes struct {
		Attributes func(childComplexity int) int
		Type       func(childComplexity int) int
	}

	JobActionContraints struct {
		GetRegisterTypeAttributes func(childComplexity int) int
		GetRegisterTypeName       func(childComplexity int) int
	}

	JobDevice struct {
		AppProtocol      func(childComplexity int) int
		ConnectionInfo   func(childComplexity int) int
		DeviceAttributes func(childComplexity int) int
		DeviceID         func(childComplexity int) int
		ExternalID       func(childComplexity int) int
		JobID            func(childComplexity int) int
		Timezone         func(childComplexity int) int
	}

	JobDeviceId struct {
		DeviceID func(childComplexity int) int
		JobID    func(childComplexity int) int
	}

	JobSettings struct {
		Attempts    func(childComplexity int) int
		DeferStart  func(childComplexity int) int
		ExpiresAt   func(childComplexity int) int
		MaxDuration func(childComplexity int) int
		Priority    func(childComplexity int) int
		RetryDelay  func(childComplexity int) int
	}

	JobStatus struct {
		AttemptsDone func(childComplexity int) int
		Code         func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		FinishedAt   func(childComplexity int) int
		Results      func(childComplexity int) int
		StartedAt    func(childComplexity int) int
		Status       func(childComplexity int) int
	}

	ListOfBulk struct {
		Items func(childComplexity int) int
	}

	ListOfCommunicationUnit struct {
		Items func(childComplexity int) int
	}

	ListOfDevice struct {
		Items func(childComplexity int) int
	}

	ListOfDeviceGroup struct {
		Items func(childComplexity int) int
	}

	ListOfDriver struct {
		Items func(childComplexity int) int
	}

	ListOfJobDevice struct {
		List func(childComplexity int) int
	}

	ListOfJobDeviceId struct {
		List func(childComplexity int) int
	}

	ListOfModemPool struct {
		Pools func(childComplexity int) int
	}

	ListOfString struct {
		Items func(childComplexity int) int
	}

	ListSelector struct {
		Fields   func(childComplexity int) int
		FilterBy func(childComplexity int) int
		Offset   func(childComplexity int) int
		PageSize func(childComplexity int) int
		SortBy   func(childComplexity int) int
	}

	ListSelectorFilterBy struct {
		Boolean  func(childComplexity int) int
		Date     func(childComplexity int) int
		FieldID  func(childComplexity int) int
		Integer  func(childComplexity int) int
		Number   func(childComplexity int) int
		Operator func(childComplexity int) int
		Text     func(childComplexity int) int
	}

	ListSelectorSortBy struct {
		Desc    func(childComplexity int) int
		FieldID func(childComplexity int) int
	}

	MeasuredValue struct {
		BoolValue        func(childComplexity int) int
		DoubleValue      func(childComplexity int) int
		Exponent         func(childComplexity int) int
		IntValue         func(childComplexity int) int
		Status           func(childComplexity int) int
		StrValue         func(childComplexity int) int
		TimestampTzValue func(childComplexity int) int
		TimestampValue   func(childComplexity int) int
	}

	MetadataFields struct {
		Fields        func(childComplexity int) int
		Generation    func(childComplexity int) int
		ID            func(childComplexity int) int
		ManagedFields func(childComplexity int) int
	}

	ModemInfo struct {
		AtConfig       func(childComplexity int) int
		AtDial         func(childComplexity int) int
		AtDsr          func(childComplexity int) int
		AtEscape       func(childComplexity int) int
		AtHangup       func(childComplexity int) int
		AtInit         func(childComplexity int) int
		AtTest         func(childComplexity int) int
		ConnectTimeout func(childComplexity int) int
		ModemID        func(childComplexity int) int
		Name           func(childComplexity int) int
		Tcpip          func(childComplexity int) int
	}

	ModemPool struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
		Status   func(childComplexity int) int
	}

	ModemPoolSpec struct {
		Name   func(childComplexity int) int
		PoolID func(childComplexity int) int
	}

	ModemPoolStatus struct {
		Modems func(childComplexity int) int
	}

	ProfileBlok struct {
		StartTimestamp func(childComplexity int) int
		Values         func(childComplexity int) int
	}

	ProfileValues struct {
		Blocks func(childComplexity int) int
		Period func(childComplexity int) int
		Unit   func(childComplexity int) int
	}

	Query struct {
		AddDevicesToGroup            func(childComplexity int) int
		CancelBulk                   func(childComplexity int) int
		CreateBulk                   func(childComplexity int) int
		CreateCommunicationUnit      func(childComplexity int) int
		CreateDevice                 func(childComplexity int) int
		CreateDeviceGroup            func(childComplexity int) int
		CreateModem                  func(childComplexity int) int
		CreateModemPool              func(childComplexity int) int
		DeleteModem                  func(childComplexity int) int
		DeleteModemPool              func(childComplexity int) int
		GetBulk                      func(childComplexity int) int
		GetCommunicationUnit         func(childComplexity int) int
		GetConfig                    func(childComplexity int) int
		GetDevice                    func(childComplexity int) int
		GetDeviceGroup               func(childComplexity int) int
		GetDevicesCommunicationUnits func(childComplexity int) int
		GetDriver                    func(childComplexity int) int
		GetModemPool                 func(childComplexity int) int
		ListBulks                    func(childComplexity int) int
		ListCommunicationUnits       func(childComplexity int) int
		ListDeviceGroups             func(childComplexity int) int
		ListDevices                  func(childComplexity int) int
		ListDrivers                  func(childComplexity int) int
		ListModemPools               func(childComplexity int) int
		RemoveDevicesFromGroup       func(childComplexity int) int
		SetConfig                    func(childComplexity int) int
		SetDeviceCommunicationUnits  func(childComplexity int) int
		UpdateModem                  func(childComplexity int) int
		UpdateModemPool              func(childComplexity int) int
	}

	RemoveDevicesFromGroupRequest struct {
		DeviceID func(childComplexity int) int
		GroupID  func(childComplexity int) int
	}

	SetDeviceCommunicationUnitsRequest struct {
		CommunicationUnits func(childComplexity int) int
		DeviceID           func(childComplexity int) int
	}

	SetModemPoolRequest struct {
		Spec func(childComplexity int) int
	}

	SetModemRequest struct {
		Modem  func(childComplexity int) int
		PoolID func(childComplexity int) int
	}

	StringValue struct {
		Value func(childComplexity int) int
	}

	SystemConfig struct {
		MaxCascadeDeviceCount func(childComplexity int) int
		MaxReplicas           func(childComplexity int) int
		MaxSlotsPerDriver     func(childComplexity int) int
	}

	_mapAny struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	_mapAttributeValue struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	_mapListOfString struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	_mapstring struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}
}

type QueryResolver interface {
	CreateBulk(ctx context.Context) (*model.StringValue, error)
	ListBulks(ctx context.Context) (*model.ListOfBulk, error)
	GetBulk(ctx context.Context) (*model.Bulk, error)
	CancelBulk(ctx context.Context) (*model.Empty, error)
	GetConfig(ctx context.Context) (*model.SystemConfig, error)
	SetConfig(ctx context.Context) (*model.Empty, error)
	CreateCommunicationUnit(ctx context.Context) (*model.StringValue, error)
	ListCommunicationUnits(ctx context.Context) (*model.ListOfCommunicationUnit, error)
	GetCommunicationUnit(ctx context.Context) (*model.CommunicationUnit, error)
	CreateDevice(ctx context.Context) (*model.StringValue, error)
	ListDevices(ctx context.Context) (*model.ListOfDevice, error)
	GetDevice(ctx context.Context) (*model.Device, error)
	SetDeviceCommunicationUnits(ctx context.Context) (*model.Empty, error)
	GetDevicesCommunicationUnits(ctx context.Context) (*model.ListOfCommunicationUnit, error)
	CreateDeviceGroup(ctx context.Context) (*model.StringValue, error)
	ListDeviceGroups(ctx context.Context) (*model.ListOfDeviceGroup, error)
	GetDeviceGroup(ctx context.Context) (*model.DeviceGroup, error)
	AddDevicesToGroup(ctx context.Context) (*model.Empty, error)
	RemoveDevicesFromGroup(ctx context.Context) (*model.Empty, error)
	ListModemPools(ctx context.Context) (*model.ListOfModemPool, error)
	GetModemPool(ctx context.Context) (*model.ModemPool, error)
	CreateModemPool(ctx context.Context) (*model.StringValue, error)
	UpdateModemPool(ctx context.Context) (*model.Empty, error)
	DeleteModemPool(ctx context.Context) (*model.Empty, error)
	CreateModem(ctx context.Context) (*model.StringValue, error)
	UpdateModem(ctx context.Context) (*model.Empty, error)
	DeleteModem(ctx context.Context) (*model.Empty, error)
	ListDrivers(ctx context.Context) (*model.ListOfDriver, error)
	GetDriver(ctx context.Context) (*model.Driver, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "AccessLevelTemplate.id":
		if e.complexity.AccessLevelTemplate.ID == nil {
			break
		}

		return e.complexity.AccessLevelTemplate.ID(childComplexity), true

	case "AccessLevelTemplate.name":
		if e.complexity.AccessLevelTemplate.Name == nil {
			break
		}

		return e.complexity.AccessLevelTemplate.Name(childComplexity), true

	case "ActionData.billings":
		if e.complexity.ActionData.Billings == nil {
			break
		}

		return e.complexity.ActionData.Billings(childComplexity), true

	case "ActionData.nodata":
		if e.complexity.ActionData.Nodata == nil {
			break
		}

		return e.complexity.ActionData.Nodata(childComplexity), true

	case "ActionData.profile":
		if e.complexity.ActionData.Profile == nil {
			break
		}

		return e.complexity.ActionData.Profile(childComplexity), true

	case "ActionFwUpdate._empty":
		if e.complexity.ActionFwUpdate.Empty == nil {
			break
		}

		return e.complexity.ActionFwUpdate.Empty(childComplexity), true

	case "ActionGetClock._empty":
		if e.complexity.ActionGetClock.Empty == nil {
			break
		}

		return e.complexity.ActionGetClock.Empty(childComplexity), true

	case "ActionGetDisconnectorState._empty":
		if e.complexity.ActionGetDisconnectorState.Empty == nil {
			break
		}

		return e.complexity.ActionGetDisconnectorState.Empty(childComplexity), true

	case "ActionGetEvents.from":
		if e.complexity.ActionGetEvents.From == nil {
			break
		}

		return e.complexity.ActionGetEvents.From(childComplexity), true

	case "ActionGetEvents.to":
		if e.complexity.ActionGetEvents.To == nil {
			break
		}

		return e.complexity.ActionGetEvents.To(childComplexity), true

	case "ActionGetIrregularProfile.from":
		if e.complexity.ActionGetIrregularProfile.From == nil {
			break
		}

		return e.complexity.ActionGetIrregularProfile.From(childComplexity), true

	case "ActionGetIrregularProfile.to":
		if e.complexity.ActionGetIrregularProfile.To == nil {
			break
		}

		return e.complexity.ActionGetIrregularProfile.To(childComplexity), true

	case "ActionGetLimiter._empty":
		if e.complexity.ActionGetLimiter.Empty == nil {
			break
		}

		return e.complexity.ActionGetLimiter.Empty(childComplexity), true

	case "ActionGetPeriodicalProfile.from":
		if e.complexity.ActionGetPeriodicalProfile.From == nil {
			break
		}

		return e.complexity.ActionGetPeriodicalProfile.From(childComplexity), true

	case "ActionGetPeriodicalProfile.to":
		if e.complexity.ActionGetPeriodicalProfile.To == nil {
			break
		}

		return e.complexity.ActionGetPeriodicalProfile.To(childComplexity), true

	case "ActionGetRegister._empty":
		if e.complexity.ActionGetRegister.Empty == nil {
			break
		}

		return e.complexity.ActionGetRegister.Empty(childComplexity), true

	case "ActionGetRelayState._empty":
		if e.complexity.ActionGetRelayState.Empty == nil {
			break
		}

		return e.complexity.ActionGetRelayState.Empty(childComplexity), true

	case "ActionGetTou._empty":
		if e.complexity.ActionGetTou.Empty == nil {
			break
		}

		return e.complexity.ActionGetTou.Empty(childComplexity), true

	case "ActionResetBillingPeriod._empty":
		if e.complexity.ActionResetBillingPeriod.Empty == nil {
			break
		}

		return e.complexity.ActionResetBillingPeriod.Empty(childComplexity), true

	case "ActionResult.action_id":
		if e.complexity.ActionResult.ActionID == nil {
			break
		}

		return e.complexity.ActionResult.ActionID(childComplexity), true

	case "ActionResult.data":
		if e.complexity.ActionResult.Data == nil {
			break
		}

		return e.complexity.ActionResult.Data(childComplexity), true

	case "ActionResult.status":
		if e.complexity.ActionResult.Status == nil {
			break
		}

		return e.complexity.ActionResult.Status(childComplexity), true

	case "ActionSetDisconnectorState._empty":
		if e.complexity.ActionSetDisconnectorState.Empty == nil {
			break
		}

		return e.complexity.ActionSetDisconnectorState.Empty(childComplexity), true

	case "ActionSetLimiter._empty":
		if e.complexity.ActionSetLimiter.Empty == nil {
			break
		}

		return e.complexity.ActionSetLimiter.Empty(childComplexity), true

	case "ActionSetRelayState._empty":
		if e.complexity.ActionSetRelayState.Empty == nil {
			break
		}

		return e.complexity.ActionSetRelayState.Empty(childComplexity), true

	case "ActionSetTou._empty":
		if e.complexity.ActionSetTou.Empty == nil {
			break
		}

		return e.complexity.ActionSetTou.Empty(childComplexity), true

	case "ActionSyncClock._empty":
		if e.complexity.ActionSyncClock.Empty == nil {
			break
		}

		return e.complexity.ActionSyncClock.Empty(childComplexity), true

	case "AddDevicesToGroupRequest.device_id":
		if e.complexity.AddDevicesToGroupRequest.DeviceID == nil {
			break
		}

		return e.complexity.AddDevicesToGroupRequest.DeviceID(childComplexity), true

	case "AddDevicesToGroupRequest.group_id":
		if e.complexity.AddDevicesToGroupRequest.GroupID == nil {
			break
		}

		return e.complexity.AddDevicesToGroupRequest.GroupID(childComplexity), true

	case "Any.type_url":
		if e.complexity.Any.TypeURL == nil {
			break
		}

		return e.complexity.Any.TypeURL(childComplexity), true

	case "Any.value":
		if e.complexity.Any.Value == nil {
			break
		}

		return e.complexity.Any.Value(childComplexity), true

	case "ApplicationProtocolTemplate.attributes":
		if e.complexity.ApplicationProtocolTemplate.Attributes == nil {
			break
		}

		return e.complexity.ApplicationProtocolTemplate.Attributes(childComplexity), true

	case "ApplicationProtocolTemplate.id":
		if e.complexity.ApplicationProtocolTemplate.ID == nil {
			break
		}

		return e.complexity.ApplicationProtocolTemplate.ID(childComplexity), true

	case "ApplicationProtocolTemplate.protocol":
		if e.complexity.ApplicationProtocolTemplate.Protocol == nil {
			break
		}

		return e.complexity.ApplicationProtocolTemplate.Protocol(childComplexity), true

	case "AttributeDefinition.default_value":
		if e.complexity.AttributeDefinition.DefaultValue == nil {
			break
		}

		return e.complexity.AttributeDefinition.DefaultValue(childComplexity), true

	case "AttributeDefinition.description":
		if e.complexity.AttributeDefinition.Description == nil {
			break
		}

		return e.complexity.AttributeDefinition.Description(childComplexity), true

	case "AttributeDefinition.mandatory":
		if e.complexity.AttributeDefinition.Mandatory == nil {
			break
		}

		return e.complexity.AttributeDefinition.Mandatory(childComplexity), true

	case "AttributeDefinition.name":
		if e.complexity.AttributeDefinition.Name == nil {
			break
		}

		return e.complexity.AttributeDefinition.Name(childComplexity), true

	case "AttributeDefinition.options":
		if e.complexity.AttributeDefinition.Options == nil {
			break
		}

		return e.complexity.AttributeDefinition.Options(childComplexity), true

	case "AttributeDefinition.type":
		if e.complexity.AttributeDefinition.Type == nil {
			break
		}

		return e.complexity.AttributeDefinition.Type(childComplexity), true

	case "AttributeValue.binary_value":
		if e.complexity.AttributeValue.BinaryValue == nil {
			break
		}

		return e.complexity.AttributeValue.BinaryValue(childComplexity), true

	case "AttributeValue.bool_value":
		if e.complexity.AttributeValue.BoolValue == nil {
			break
		}

		return e.complexity.AttributeValue.BoolValue(childComplexity), true

	case "AttributeValue.double_value":
		if e.complexity.AttributeValue.DoubleValue == nil {
			break
		}

		return e.complexity.AttributeValue.DoubleValue(childComplexity), true

	case "AttributeValue.int_value":
		if e.complexity.AttributeValue.IntValue == nil {
			break
		}

		return e.complexity.AttributeValue.IntValue(childComplexity), true

	case "AttributeValue.str_value":
		if e.complexity.AttributeValue.StrValue == nil {
			break
		}

		return e.complexity.AttributeValue.StrValue(childComplexity), true

	case "BillingValue.timestamp":
		if e.complexity.BillingValue.Timestamp == nil {
			break
		}

		return e.complexity.BillingValue.Timestamp(childComplexity), true

	case "BillingValue.unit":
		if e.complexity.BillingValue.Unit == nil {
			break
		}

		return e.complexity.BillingValue.Unit(childComplexity), true

	case "BillingValue.value":
		if e.complexity.BillingValue.Value == nil {
			break
		}

		return e.complexity.BillingValue.Value(childComplexity), true

	case "BillingValues.values":
		if e.complexity.BillingValues.Values == nil {
			break
		}

		return e.complexity.BillingValues.Values(childComplexity), true

	case "Bulk.metadata":
		if e.complexity.Bulk.Metadata == nil {
			break
		}

		return e.complexity.Bulk.Metadata(childComplexity), true

	case "Bulk.spec":
		if e.complexity.Bulk.Spec == nil {
			break
		}

		return e.complexity.Bulk.Spec(childComplexity), true

	case "Bulk.status":
		if e.complexity.Bulk.Status == nil {
			break
		}

		return e.complexity.Bulk.Status(childComplexity), true

	case "BulkJob.job_id":
		if e.complexity.BulkJob.JobID == nil {
			break
		}

		return e.complexity.BulkJob.JobID(childComplexity), true

	case "BulkJob.status":
		if e.complexity.BulkJob.Status == nil {
			break
		}

		return e.complexity.BulkJob.Status(childComplexity), true

	case "BulkSpec.actions":
		if e.complexity.BulkSpec.Actions == nil {
			break
		}

		return e.complexity.BulkSpec.Actions(childComplexity), true

	case "BulkSpec.correlation_id":
		if e.complexity.BulkSpec.CorrelationID == nil {
			break
		}

		return e.complexity.BulkSpec.CorrelationID(childComplexity), true

	case "BulkSpec.custom_devices":
		if e.complexity.BulkSpec.CustomDevices == nil {
			break
		}

		return e.complexity.BulkSpec.CustomDevices(childComplexity), true

	case "BulkSpec.devices":
		if e.complexity.BulkSpec.Devices == nil {
			break
		}

		return e.complexity.BulkSpec.Devices(childComplexity), true

	case "BulkSpec.driver_type":
		if e.complexity.BulkSpec.DriverType == nil {
			break
		}

		return e.complexity.BulkSpec.DriverType(childComplexity), true

	case "BulkSpec.settings":
		if e.complexity.BulkSpec.Settings == nil {
			break
		}

		return e.complexity.BulkSpec.Settings(childComplexity), true

	case "BulkSpec.webhook_url":
		if e.complexity.BulkSpec.WebhookURL == nil {
			break
		}

		return e.complexity.BulkSpec.WebhookURL(childComplexity), true

	case "BulkStatus.jobs":
		if e.complexity.BulkStatus.Jobs == nil {
			break
		}

		return e.complexity.BulkStatus.Jobs(childComplexity), true

	case "BulkStatus.status":
		if e.complexity.BulkStatus.Status == nil {
			break
		}

		return e.complexity.BulkStatus.Status(childComplexity), true

	case "CommunicationTemplate.datalinks":
		if e.complexity.CommunicationTemplate.Datalinks == nil {
			break
		}

		return e.complexity.CommunicationTemplate.Datalinks(childComplexity), true

	case "CommunicationTemplate.type":
		if e.complexity.CommunicationTemplate.Type == nil {
			break
		}

		return e.complexity.CommunicationTemplate.Type(childComplexity), true

	case "CommunicationUnit.metadata":
		if e.complexity.CommunicationUnit.Metadata == nil {
			break
		}

		return e.complexity.CommunicationUnit.Metadata(childComplexity), true

	case "CommunicationUnit.spec":
		if e.complexity.CommunicationUnit.Spec == nil {
			break
		}

		return e.complexity.CommunicationUnit.Spec(childComplexity), true

	case "CommunicationUnitSpec.connection_info":
		if e.complexity.CommunicationUnitSpec.ConnectionInfo == nil {
			break
		}

		return e.complexity.CommunicationUnitSpec.ConnectionInfo(childComplexity), true

	case "CommunicationUnitSpec.external_id":
		if e.complexity.CommunicationUnitSpec.ExternalID == nil {
			break
		}

		return e.complexity.CommunicationUnitSpec.ExternalID(childComplexity), true

	case "CommunicationUnitSpec.name":
		if e.complexity.CommunicationUnitSpec.Name == nil {
			break
		}

		return e.complexity.CommunicationUnitSpec.Name(childComplexity), true

	case "ConnectionInfo.custom_grouping_id":
		if e.complexity.ConnectionInfo.CustomGroupingID == nil {
			break
		}

		return e.complexity.ConnectionInfo.CustomGroupingID(childComplexity), true

	case "ConnectionInfo.link_protocol":
		if e.complexity.ConnectionInfo.LinkProtocol == nil {
			break
		}

		return e.complexity.ConnectionInfo.LinkProtocol(childComplexity), true

	case "ConnectionInfo.modem_pool":
		if e.complexity.ConnectionInfo.ModemPool == nil {
			break
		}

		return e.complexity.ConnectionInfo.ModemPool(childComplexity), true

	case "ConnectionInfo.serial_over_ip":
		if e.complexity.ConnectionInfo.SerialOverIP == nil {
			break
		}

		return e.complexity.ConnectionInfo.SerialOverIP(childComplexity), true

	case "ConnectionInfo.tcpip":
		if e.complexity.ConnectionInfo.Tcpip == nil {
			break
		}

		return e.complexity.ConnectionInfo.Tcpip(childComplexity), true

	case "ConnectionTypeControlledSerial.direct":
		if e.complexity.ConnectionTypeControlledSerial.Direct == nil {
			break
		}

		return e.complexity.ConnectionTypeControlledSerial.Direct(childComplexity), true

	case "ConnectionTypeControlledSerial.moxa":
		if e.complexity.ConnectionTypeControlledSerial.Moxa == nil {
			break
		}

		return e.complexity.ConnectionTypeControlledSerial.Moxa(childComplexity), true

	case "ConnectionTypeDirectTcpIp.host":
		if e.complexity.ConnectionTypeDirectTcpIp.Host == nil {
			break
		}

		return e.complexity.ConnectionTypeDirectTcpIp.Host(childComplexity), true

	case "ConnectionTypeDirectTcpIp.port":
		if e.complexity.ConnectionTypeDirectTcpIp.Port == nil {
			break
		}

		return e.complexity.ConnectionTypeDirectTcpIp.Port(childComplexity), true

	case "ConnectionTypeDirectTcpIp.timeout":
		if e.complexity.ConnectionTypeDirectTcpIp.Timeout == nil {
			break
		}

		return e.complexity.ConnectionTypeDirectTcpIp.Timeout(childComplexity), true

	case "ConnectionTypeModemPool.modem":
		if e.complexity.ConnectionTypeModemPool.Modem == nil {
			break
		}

		return e.complexity.ConnectionTypeModemPool.Modem(childComplexity), true

	case "ConnectionTypeModemPool.number":
		if e.complexity.ConnectionTypeModemPool.Number == nil {
			break
		}

		return e.complexity.ConnectionTypeModemPool.Number(childComplexity), true

	case "ConnectionTypeModemPool.pool_id":
		if e.complexity.ConnectionTypeModemPool.PoolID == nil {
			break
		}

		return e.complexity.ConnectionTypeModemPool.PoolID(childComplexity), true

	case "ConnectionTypeSerialDirect.host":
		if e.complexity.ConnectionTypeSerialDirect.Host == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialDirect.Host(childComplexity), true

	case "ConnectionTypeSerialDirect.port":
		if e.complexity.ConnectionTypeSerialDirect.Port == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialDirect.Port(childComplexity), true

	case "ConnectionTypeSerialMoxa.commandPort":
		if e.complexity.ConnectionTypeSerialMoxa.CommandPort == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialMoxa.CommandPort(childComplexity), true

	case "ConnectionTypeSerialMoxa.dataPort":
		if e.complexity.ConnectionTypeSerialMoxa.DataPort == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialMoxa.DataPort(childComplexity), true

	case "ConnectionTypeSerialMoxa.host":
		if e.complexity.ConnectionTypeSerialMoxa.Host == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialMoxa.Host(childComplexity), true

	case "CreateBulkRequest.metadata":
		if e.complexity.CreateBulkRequest.Metadata == nil {
			break
		}

		return e.complexity.CreateBulkRequest.Metadata(childComplexity), true

	case "CreateBulkRequest.spec":
		if e.complexity.CreateBulkRequest.Spec == nil {
			break
		}

		return e.complexity.CreateBulkRequest.Spec(childComplexity), true

	case "CreateCommunicationUnitRequest.metadata":
		if e.complexity.CreateCommunicationUnitRequest.Metadata == nil {
			break
		}

		return e.complexity.CreateCommunicationUnitRequest.Metadata(childComplexity), true

	case "CreateCommunicationUnitRequest.spec":
		if e.complexity.CreateCommunicationUnitRequest.Spec == nil {
			break
		}

		return e.complexity.CreateCommunicationUnitRequest.Spec(childComplexity), true

	case "CreateDeviceGroupRequest.metadata":
		if e.complexity.CreateDeviceGroupRequest.Metadata == nil {
			break
		}

		return e.complexity.CreateDeviceGroupRequest.Metadata(childComplexity), true

	case "CreateDeviceGroupRequest.spec":
		if e.complexity.CreateDeviceGroupRequest.Spec == nil {
			break
		}

		return e.complexity.CreateDeviceGroupRequest.Spec(childComplexity), true

	case "CreateDeviceRequest.metadata":
		if e.complexity.CreateDeviceRequest.Metadata == nil {
			break
		}

		return e.complexity.CreateDeviceRequest.Metadata(childComplexity), true

	case "CreateDeviceRequest.spec":
		if e.complexity.CreateDeviceRequest.Spec == nil {
			break
		}

		return e.complexity.CreateDeviceRequest.Spec(childComplexity), true

	case "DataLinkTemplate.app_protocol_refs":
		if e.complexity.DataLinkTemplate.AppProtocolRefs == nil {
			break
		}

		return e.complexity.DataLinkTemplate.AppProtocolRefs(childComplexity), true

	case "DataLinkTemplate.attributes":
		if e.complexity.DataLinkTemplate.Attributes == nil {
			break
		}

		return e.complexity.DataLinkTemplate.Attributes(childComplexity), true

	case "DataLinkTemplate.link_protocol":
		if e.complexity.DataLinkTemplate.LinkProtocol == nil {
			break
		}

		return e.complexity.DataLinkTemplate.LinkProtocol(childComplexity), true

	case "Device.metadata":
		if e.complexity.Device.Metadata == nil {
			break
		}

		return e.complexity.Device.Metadata(childComplexity), true

	case "Device.spec":
		if e.complexity.Device.Spec == nil {
			break
		}

		return e.complexity.Device.Spec(childComplexity), true

	case "DeviceCommunicationUnit.app_protocol":
		if e.complexity.DeviceCommunicationUnit.AppProtocol == nil {
			break
		}

		return e.complexity.DeviceCommunicationUnit.AppProtocol(childComplexity), true

	case "DeviceCommunicationUnit.communication_unit_id":
		if e.complexity.DeviceCommunicationUnit.CommunicationUnitID == nil {
			break
		}

		return e.complexity.DeviceCommunicationUnit.CommunicationUnitID(childComplexity), true

	case "DeviceGroup.metadata":
		if e.complexity.DeviceGroup.Metadata == nil {
			break
		}

		return e.complexity.DeviceGroup.Metadata(childComplexity), true

	case "DeviceGroup.spec":
		if e.complexity.DeviceGroup.Spec == nil {
			break
		}

		return e.complexity.DeviceGroup.Spec(childComplexity), true

	case "DeviceGroupSpec.device_id":
		if e.complexity.DeviceGroupSpec.DeviceID == nil {
			break
		}

		return e.complexity.DeviceGroupSpec.DeviceID(childComplexity), true

	case "DeviceGroupSpec.external_id":
		if e.complexity.DeviceGroupSpec.ExternalID == nil {
			break
		}

		return e.complexity.DeviceGroupSpec.ExternalID(childComplexity), true

	case "DeviceGroupSpec.name":
		if e.complexity.DeviceGroupSpec.Name == nil {
			break
		}

		return e.complexity.DeviceGroupSpec.Name(childComplexity), true

	case "DeviceSpec.attributes":
		if e.complexity.DeviceSpec.Attributes == nil {
			break
		}

		return e.complexity.DeviceSpec.Attributes(childComplexity), true

	case "DeviceSpec.communication_unit_link":
		if e.complexity.DeviceSpec.CommunicationUnitLink == nil {
			break
		}

		return e.complexity.DeviceSpec.CommunicationUnitLink(childComplexity), true

	case "DeviceSpec.external_id":
		if e.complexity.DeviceSpec.ExternalID == nil {
			break
		}

		return e.complexity.DeviceSpec.ExternalID(childComplexity), true

	case "DeviceSpec.id":
		if e.complexity.DeviceSpec.ID == nil {
			break
		}

		return e.complexity.DeviceSpec.ID(childComplexity), true

	case "DeviceSpec.name":
		if e.complexity.DeviceSpec.Name == nil {
			break
		}

		return e.complexity.DeviceSpec.Name(childComplexity), true

	case "DeviceSpec.timezone":
		if e.complexity.DeviceSpec.Timezone == nil {
			break
		}

		return e.complexity.DeviceSpec.Timezone(childComplexity), true

	case "Driver.spec":
		if e.complexity.Driver.Spec == nil {
			break
		}

		return e.complexity.Driver.Spec(childComplexity), true

	case "DriverSpec.display_name":
		if e.complexity.DriverSpec.DisplayName == nil {
			break
		}

		return e.complexity.DriverSpec.DisplayName(childComplexity), true

	case "DriverSpec.driver_type":
		if e.complexity.DriverSpec.DriverType == nil {
			break
		}

		return e.complexity.DriverSpec.DriverType(childComplexity), true

	case "DriverSpec.listening_port":
		if e.complexity.DriverSpec.ListeningPort == nil {
			break
		}

		return e.complexity.DriverSpec.ListeningPort(childComplexity), true

	case "DriverSpec.max_cascade_depth":
		if e.complexity.DriverSpec.MaxCascadeDepth == nil {
			break
		}

		return e.complexity.DriverSpec.MaxCascadeDepth(childComplexity), true

	case "DriverSpec.max_concurrent_jobs":
		if e.complexity.DriverSpec.MaxConcurrentJobs == nil {
			break
		}

		return e.complexity.DriverSpec.MaxConcurrentJobs(childComplexity), true

	case "DriverSpec.templates":
		if e.complexity.DriverSpec.Templates == nil {
			break
		}

		return e.complexity.DriverSpec.Templates(childComplexity), true

	case "DriverSpec.typical_mem_usage":
		if e.complexity.DriverSpec.TypicalMemUsage == nil {
			break
		}

		return e.complexity.DriverSpec.TypicalMemUsage(childComplexity), true

	case "DriverSpec.version":
		if e.complexity.DriverSpec.Version == nil {
			break
		}

		return e.complexity.DriverSpec.Version(childComplexity), true

	case "DriverTemplates.access_templates":
		if e.complexity.DriverTemplates.AccessTemplates == nil {
			break
		}

		return e.complexity.DriverTemplates.AccessTemplates(childComplexity), true

	case "DriverTemplates.action_attributes":
		if e.complexity.DriverTemplates.ActionAttributes == nil {
			break
		}

		return e.complexity.DriverTemplates.ActionAttributes(childComplexity), true

	case "DriverTemplates.action_constraints":
		if e.complexity.DriverTemplates.ActionConstraints == nil {
			break
		}

		return e.complexity.DriverTemplates.ActionConstraints(childComplexity), true

	case "DriverTemplates.app_protocols":
		if e.complexity.DriverTemplates.AppProtocols == nil {
			break
		}

		return e.complexity.DriverTemplates.AppProtocols(childComplexity), true

	case "DriverTemplates.communication_templates":
		if e.complexity.DriverTemplates.CommunicationTemplates == nil {
			break
		}

		return e.complexity.DriverTemplates.CommunicationTemplates(childComplexity), true

	case "Empty._empty":
		if e.complexity.Empty.Empty == nil {
			break
		}

		return e.complexity.Empty.Empty(childComplexity), true

	case "JobAction.action_id":
		if e.complexity.JobAction.ActionID == nil {
			break
		}

		return e.complexity.JobAction.ActionID(childComplexity), true

	case "JobAction.attributes":
		if e.complexity.JobAction.Attributes == nil {
			break
		}

		return e.complexity.JobAction.Attributes(childComplexity), true

	case "JobAction.fw_update":
		if e.complexity.JobAction.FwUpdate == nil {
			break
		}

		return e.complexity.JobAction.FwUpdate(childComplexity), true

	case "JobAction.get_clock":
		if e.complexity.JobAction.GetClock == nil {
			break
		}

		return e.complexity.JobAction.GetClock(childComplexity), true

	case "JobAction.get_disconnector_state":
		if e.complexity.JobAction.GetDisconnectorState == nil {
			break
		}

		return e.complexity.JobAction.GetDisconnectorState(childComplexity), true

	case "JobAction.get_events":
		if e.complexity.JobAction.GetEvents == nil {
			break
		}

		return e.complexity.JobAction.GetEvents(childComplexity), true

	case "JobAction.get_irregular_profile":
		if e.complexity.JobAction.GetIrregularProfile == nil {
			break
		}

		return e.complexity.JobAction.GetIrregularProfile(childComplexity), true

	case "JobAction.get_limiter":
		if e.complexity.JobAction.GetLimiter == nil {
			break
		}

		return e.complexity.JobAction.GetLimiter(childComplexity), true

	case "JobAction.get_periodical_profile":
		if e.complexity.JobAction.GetPeriodicalProfile == nil {
			break
		}

		return e.complexity.JobAction.GetPeriodicalProfile(childComplexity), true

	case "JobAction.get_register":
		if e.complexity.JobAction.GetRegister == nil {
			break
		}

		return e.complexity.JobAction.GetRegister(childComplexity), true

	case "JobAction.get_relay_state":
		if e.complexity.JobAction.GetRelayState == nil {
			break
		}

		return e.complexity.JobAction.GetRelayState(childComplexity), true

	case "JobAction.get_tou":
		if e.complexity.JobAction.GetTou == nil {
			break
		}

		return e.complexity.JobAction.GetTou(childComplexity), true

	case "JobAction.reset_billing_period":
		if e.complexity.JobAction.ResetBillingPeriod == nil {
			break
		}

		return e.complexity.JobAction.ResetBillingPeriod(childComplexity), true

	case "JobAction.set_disconnector_state":
		if e.complexity.JobAction.SetDisconnectorState == nil {
			break
		}

		return e.complexity.JobAction.SetDisconnectorState(childComplexity), true

	case "JobAction.set_limiter":
		if e.complexity.JobAction.SetLimiter == nil {
			break
		}

		return e.complexity.JobAction.SetLimiter(childComplexity), true

	case "JobAction.set_relay_state":
		if e.complexity.JobAction.SetRelayState == nil {
			break
		}

		return e.complexity.JobAction.SetRelayState(childComplexity), true

	case "JobAction.set_tou":
		if e.complexity.JobAction.SetTou == nil {
			break
		}

		return e.complexity.JobAction.SetTou(childComplexity), true

	case "JobAction.sync_clock":
		if e.complexity.JobAction.SyncClock == nil {
			break
		}

		return e.complexity.JobAction.SyncClock(childComplexity), true

	case "JobActionAttributes.attributes":
		if e.complexity.JobActionAttributes.Attributes == nil {
			break
		}

		return e.complexity.JobActionAttributes.Attributes(childComplexity), true

	case "JobActionAttributes.type":
		if e.complexity.JobActionAttributes.Type == nil {
			break
		}

		return e.complexity.JobActionAttributes.Type(childComplexity), true

	case "JobActionContraints.get_register_type_attributes":
		if e.complexity.JobActionContraints.GetRegisterTypeAttributes == nil {
			break
		}

		return e.complexity.JobActionContraints.GetRegisterTypeAttributes(childComplexity), true

	case "JobActionContraints.get_register_type_name":
		if e.complexity.JobActionContraints.GetRegisterTypeName == nil {
			break
		}

		return e.complexity.JobActionContraints.GetRegisterTypeName(childComplexity), true

	case "JobDevice.app_protocol":
		if e.complexity.JobDevice.AppProtocol == nil {
			break
		}

		return e.complexity.JobDevice.AppProtocol(childComplexity), true

	case "JobDevice.connection_info":
		if e.complexity.JobDevice.ConnectionInfo == nil {
			break
		}

		return e.complexity.JobDevice.ConnectionInfo(childComplexity), true

	case "JobDevice.device_attributes":
		if e.complexity.JobDevice.DeviceAttributes == nil {
			break
		}

		return e.complexity.JobDevice.DeviceAttributes(childComplexity), true

	case "JobDevice.device_id":
		if e.complexity.JobDevice.DeviceID == nil {
			break
		}

		return e.complexity.JobDevice.DeviceID(childComplexity), true

	case "JobDevice.external_id":
		if e.complexity.JobDevice.ExternalID == nil {
			break
		}

		return e.complexity.JobDevice.ExternalID(childComplexity), true

	case "JobDevice.job_id":
		if e.complexity.JobDevice.JobID == nil {
			break
		}

		return e.complexity.JobDevice.JobID(childComplexity), true

	case "JobDevice.timezone":
		if e.complexity.JobDevice.Timezone == nil {
			break
		}

		return e.complexity.JobDevice.Timezone(childComplexity), true

	case "JobDeviceId.device_id":
		if e.complexity.JobDeviceId.DeviceID == nil {
			break
		}

		return e.complexity.JobDeviceId.DeviceID(childComplexity), true

	case "JobDeviceId.job_id":
		if e.complexity.JobDeviceId.JobID == nil {
			break
		}

		return e.complexity.JobDeviceId.JobID(childComplexity), true

	case "JobSettings.attempts":
		if e.complexity.JobSettings.Attempts == nil {
			break
		}

		return e.complexity.JobSettings.Attempts(childComplexity), true

	case "JobSettings.defer_start":
		if e.complexity.JobSettings.DeferStart == nil {
			break
		}

		return e.complexity.JobSettings.DeferStart(childComplexity), true

	case "JobSettings.expires_at":
		if e.complexity.JobSettings.ExpiresAt == nil {
			break
		}

		return e.complexity.JobSettings.ExpiresAt(childComplexity), true

	case "JobSettings.max_duration":
		if e.complexity.JobSettings.MaxDuration == nil {
			break
		}

		return e.complexity.JobSettings.MaxDuration(childComplexity), true

	case "JobSettings.priority":
		if e.complexity.JobSettings.Priority == nil {
			break
		}

		return e.complexity.JobSettings.Priority(childComplexity), true

	case "JobSettings.retry_delay":
		if e.complexity.JobSettings.RetryDelay == nil {
			break
		}

		return e.complexity.JobSettings.RetryDelay(childComplexity), true

	case "JobStatus.attempts_done":
		if e.complexity.JobStatus.AttemptsDone == nil {
			break
		}

		return e.complexity.JobStatus.AttemptsDone(childComplexity), true

	case "JobStatus.code":
		if e.complexity.JobStatus.Code == nil {
			break
		}

		return e.complexity.JobStatus.Code(childComplexity), true

	case "JobStatus.created_at":
		if e.complexity.JobStatus.CreatedAt == nil {
			break
		}

		return e.complexity.JobStatus.CreatedAt(childComplexity), true

	case "JobStatus.finished_at":
		if e.complexity.JobStatus.FinishedAt == nil {
			break
		}

		return e.complexity.JobStatus.FinishedAt(childComplexity), true

	case "JobStatus.results":
		if e.complexity.JobStatus.Results == nil {
			break
		}

		return e.complexity.JobStatus.Results(childComplexity), true

	case "JobStatus.started_at":
		if e.complexity.JobStatus.StartedAt == nil {
			break
		}

		return e.complexity.JobStatus.StartedAt(childComplexity), true

	case "JobStatus.status":
		if e.complexity.JobStatus.Status == nil {
			break
		}

		return e.complexity.JobStatus.Status(childComplexity), true

	case "ListOfBulk.items":
		if e.complexity.ListOfBulk.Items == nil {
			break
		}

		return e.complexity.ListOfBulk.Items(childComplexity), true

	case "ListOfCommunicationUnit.items":
		if e.complexity.ListOfCommunicationUnit.Items == nil {
			break
		}

		return e.complexity.ListOfCommunicationUnit.Items(childComplexity), true

	case "ListOfDevice.items":
		if e.complexity.ListOfDevice.Items == nil {
			break
		}

		return e.complexity.ListOfDevice.Items(childComplexity), true

	case "ListOfDeviceGroup.items":
		if e.complexity.ListOfDeviceGroup.Items == nil {
			break
		}

		return e.complexity.ListOfDeviceGroup.Items(childComplexity), true

	case "ListOfDriver.items":
		if e.complexity.ListOfDriver.Items == nil {
			break
		}

		return e.complexity.ListOfDriver.Items(childComplexity), true

	case "ListOfJobDevice.list":
		if e.complexity.ListOfJobDevice.List == nil {
			break
		}

		return e.complexity.ListOfJobDevice.List(childComplexity), true

	case "ListOfJobDeviceId.list":
		if e.complexity.ListOfJobDeviceId.List == nil {
			break
		}

		return e.complexity.ListOfJobDeviceId.List(childComplexity), true

	case "ListOfModemPool.pools":
		if e.complexity.ListOfModemPool.Pools == nil {
			break
		}

		return e.complexity.ListOfModemPool.Pools(childComplexity), true

	case "ListOfString.items":
		if e.complexity.ListOfString.Items == nil {
			break
		}

		return e.complexity.ListOfString.Items(childComplexity), true

	case "ListSelector.fields":
		if e.complexity.ListSelector.Fields == nil {
			break
		}

		return e.complexity.ListSelector.Fields(childComplexity), true

	case "ListSelector.filter_by":
		if e.complexity.ListSelector.FilterBy == nil {
			break
		}

		return e.complexity.ListSelector.FilterBy(childComplexity), true

	case "ListSelector.offset":
		if e.complexity.ListSelector.Offset == nil {
			break
		}

		return e.complexity.ListSelector.Offset(childComplexity), true

	case "ListSelector.page_size":
		if e.complexity.ListSelector.PageSize == nil {
			break
		}

		return e.complexity.ListSelector.PageSize(childComplexity), true

	case "ListSelector.sort_by":
		if e.complexity.ListSelector.SortBy == nil {
			break
		}

		return e.complexity.ListSelector.SortBy(childComplexity), true

	case "ListSelectorFilterBy.boolean":
		if e.complexity.ListSelectorFilterBy.Boolean == nil {
			break
		}

		return e.complexity.ListSelectorFilterBy.Boolean(childComplexity), true

	case "ListSelectorFilterBy.date":
		if e.complexity.ListSelectorFilterBy.Date == nil {
			break
		}

		return e.complexity.ListSelectorFilterBy.Date(childComplexity), true

	case "ListSelectorFilterBy.field_id":
		if e.complexity.ListSelectorFilterBy.FieldID == nil {
			break
		}

		return e.complexity.ListSelectorFilterBy.FieldID(childComplexity), true

	case "ListSelectorFilterBy.integer":
		if e.complexity.ListSelectorFilterBy.Integer == nil {
			break
		}

		return e.complexity.ListSelectorFilterBy.Integer(childComplexity), true

	case "ListSelectorFilterBy.number":
		if e.complexity.ListSelectorFilterBy.Number == nil {
			break
		}

		return e.complexity.ListSelectorFilterBy.Number(childComplexity), true

	case "ListSelectorFilterBy.operator":
		if e.complexity.ListSelectorFilterBy.Operator == nil {
			break
		}

		return e.complexity.ListSelectorFilterBy.Operator(childComplexity), true

	case "ListSelectorFilterBy.text":
		if e.complexity.ListSelectorFilterBy.Text == nil {
			break
		}

		return e.complexity.ListSelectorFilterBy.Text(childComplexity), true

	case "ListSelectorSortBy.desc":
		if e.complexity.ListSelectorSortBy.Desc == nil {
			break
		}

		return e.complexity.ListSelectorSortBy.Desc(childComplexity), true

	case "ListSelectorSortBy.field_id":
		if e.complexity.ListSelectorSortBy.FieldID == nil {
			break
		}

		return e.complexity.ListSelectorSortBy.FieldID(childComplexity), true

	case "MeasuredValue.bool_value":
		if e.complexity.MeasuredValue.BoolValue == nil {
			break
		}

		return e.complexity.MeasuredValue.BoolValue(childComplexity), true

	case "MeasuredValue.double_value":
		if e.complexity.MeasuredValue.DoubleValue == nil {
			break
		}

		return e.complexity.MeasuredValue.DoubleValue(childComplexity), true

	case "MeasuredValue.exponent":
		if e.complexity.MeasuredValue.Exponent == nil {
			break
		}

		return e.complexity.MeasuredValue.Exponent(childComplexity), true

	case "MeasuredValue.int_value":
		if e.complexity.MeasuredValue.IntValue == nil {
			break
		}

		return e.complexity.MeasuredValue.IntValue(childComplexity), true

	case "MeasuredValue.status":
		if e.complexity.MeasuredValue.Status == nil {
			break
		}

		return e.complexity.MeasuredValue.Status(childComplexity), true

	case "MeasuredValue.str_value":
		if e.complexity.MeasuredValue.StrValue == nil {
			break
		}

		return e.complexity.MeasuredValue.StrValue(childComplexity), true

	case "MeasuredValue.timestamp_tz_value":
		if e.complexity.MeasuredValue.TimestampTzValue == nil {
			break
		}

		return e.complexity.MeasuredValue.TimestampTzValue(childComplexity), true

	case "MeasuredValue.timestamp_value":
		if e.complexity.MeasuredValue.TimestampValue == nil {
			break
		}

		return e.complexity.MeasuredValue.TimestampValue(childComplexity), true

	case "MetadataFields.fields":
		if e.complexity.MetadataFields.Fields == nil {
			break
		}

		return e.complexity.MetadataFields.Fields(childComplexity), true

	case "MetadataFields.generation":
		if e.complexity.MetadataFields.Generation == nil {
			break
		}

		return e.complexity.MetadataFields.Generation(childComplexity), true

	case "MetadataFields.id":
		if e.complexity.MetadataFields.ID == nil {
			break
		}

		return e.complexity.MetadataFields.ID(childComplexity), true

	case "MetadataFields.managed_fields":
		if e.complexity.MetadataFields.ManagedFields == nil {
			break
		}

		return e.complexity.MetadataFields.ManagedFields(childComplexity), true

	case "ModemInfo.at_config":
		if e.complexity.ModemInfo.AtConfig == nil {
			break
		}

		return e.complexity.ModemInfo.AtConfig(childComplexity), true

	case "ModemInfo.at_dial":
		if e.complexity.ModemInfo.AtDial == nil {
			break
		}

		return e.complexity.ModemInfo.AtDial(childComplexity), true

	case "ModemInfo.at_dsr":
		if e.complexity.ModemInfo.AtDsr == nil {
			break
		}

		return e.complexity.ModemInfo.AtDsr(childComplexity), true

	case "ModemInfo.at_escape":
		if e.complexity.ModemInfo.AtEscape == nil {
			break
		}

		return e.complexity.ModemInfo.AtEscape(childComplexity), true

	case "ModemInfo.at_hangup":
		if e.complexity.ModemInfo.AtHangup == nil {
			break
		}

		return e.complexity.ModemInfo.AtHangup(childComplexity), true

	case "ModemInfo.at_init":
		if e.complexity.ModemInfo.AtInit == nil {
			break
		}

		return e.complexity.ModemInfo.AtInit(childComplexity), true

	case "ModemInfo.at_test":
		if e.complexity.ModemInfo.AtTest == nil {
			break
		}

		return e.complexity.ModemInfo.AtTest(childComplexity), true

	case "ModemInfo.connect_timeout":
		if e.complexity.ModemInfo.ConnectTimeout == nil {
			break
		}

		return e.complexity.ModemInfo.ConnectTimeout(childComplexity), true

	case "ModemInfo.modem_id":
		if e.complexity.ModemInfo.ModemID == nil {
			break
		}

		return e.complexity.ModemInfo.ModemID(childComplexity), true

	case "ModemInfo.name":
		if e.complexity.ModemInfo.Name == nil {
			break
		}

		return e.complexity.ModemInfo.Name(childComplexity), true

	case "ModemInfo.tcpip":
		if e.complexity.ModemInfo.Tcpip == nil {
			break
		}

		return e.complexity.ModemInfo.Tcpip(childComplexity), true

	case "ModemPool.metadata":
		if e.complexity.ModemPool.Metadata == nil {
			break
		}

		return e.complexity.ModemPool.Metadata(childComplexity), true

	case "ModemPool.spec":
		if e.complexity.ModemPool.Spec == nil {
			break
		}

		return e.complexity.ModemPool.Spec(childComplexity), true

	case "ModemPool.status":
		if e.complexity.ModemPool.Status == nil {
			break
		}

		return e.complexity.ModemPool.Status(childComplexity), true

	case "ModemPoolSpec.name":
		if e.complexity.ModemPoolSpec.Name == nil {
			break
		}

		return e.complexity.ModemPoolSpec.Name(childComplexity), true

	case "ModemPoolSpec.pool_id":
		if e.complexity.ModemPoolSpec.PoolID == nil {
			break
		}

		return e.complexity.ModemPoolSpec.PoolID(childComplexity), true

	case "ModemPoolStatus.modems":
		if e.complexity.ModemPoolStatus.Modems == nil {
			break
		}

		return e.complexity.ModemPoolStatus.Modems(childComplexity), true

	case "ProfileBlok.start_timestamp":
		if e.complexity.ProfileBlok.StartTimestamp == nil {
			break
		}

		return e.complexity.ProfileBlok.StartTimestamp(childComplexity), true

	case "ProfileBlok.values":
		if e.complexity.ProfileBlok.Values == nil {
			break
		}

		return e.complexity.ProfileBlok.Values(childComplexity), true

	case "ProfileValues.blocks":
		if e.complexity.ProfileValues.Blocks == nil {
			break
		}

		return e.complexity.ProfileValues.Blocks(childComplexity), true

	case "ProfileValues.period":
		if e.complexity.ProfileValues.Period == nil {
			break
		}

		return e.complexity.ProfileValues.Period(childComplexity), true

	case "ProfileValues.unit":
		if e.complexity.ProfileValues.Unit == nil {
			break
		}

		return e.complexity.ProfileValues.Unit(childComplexity), true

	case "Query.addDevicesToGroup":
		if e.complexity.Query.AddDevicesToGroup == nil {
			break
		}

		return e.complexity.Query.AddDevicesToGroup(childComplexity), true

	case "Query.cancelBulk":
		if e.complexity.Query.CancelBulk == nil {
			break
		}

		return e.complexity.Query.CancelBulk(childComplexity), true

	case "Query.createBulk":
		if e.complexity.Query.CreateBulk == nil {
			break
		}

		return e.complexity.Query.CreateBulk(childComplexity), true

	case "Query.createCommunicationUnit":
		if e.complexity.Query.CreateCommunicationUnit == nil {
			break
		}

		return e.complexity.Query.CreateCommunicationUnit(childComplexity), true

	case "Query.createDevice":
		if e.complexity.Query.CreateDevice == nil {
			break
		}

		return e.complexity.Query.CreateDevice(childComplexity), true

	case "Query.createDeviceGroup":
		if e.complexity.Query.CreateDeviceGroup == nil {
			break
		}

		return e.complexity.Query.CreateDeviceGroup(childComplexity), true

	case "Query.createModem":
		if e.complexity.Query.CreateModem == nil {
			break
		}

		return e.complexity.Query.CreateModem(childComplexity), true

	case "Query.createModemPool":
		if e.complexity.Query.CreateModemPool == nil {
			break
		}

		return e.complexity.Query.CreateModemPool(childComplexity), true

	case "Query.deleteModem":
		if e.complexity.Query.DeleteModem == nil {
			break
		}

		return e.complexity.Query.DeleteModem(childComplexity), true

	case "Query.deleteModemPool":
		if e.complexity.Query.DeleteModemPool == nil {
			break
		}

		return e.complexity.Query.DeleteModemPool(childComplexity), true

	case "Query.getBulk":
		if e.complexity.Query.GetBulk == nil {
			break
		}

		return e.complexity.Query.GetBulk(childComplexity), true

	case "Query.getCommunicationUnit":
		if e.complexity.Query.GetCommunicationUnit == nil {
			break
		}

		return e.complexity.Query.GetCommunicationUnit(childComplexity), true

	case "Query.getConfig":
		if e.complexity.Query.GetConfig == nil {
			break
		}

		return e.complexity.Query.GetConfig(childComplexity), true

	case "Query.getDevice":
		if e.complexity.Query.GetDevice == nil {
			break
		}

		return e.complexity.Query.GetDevice(childComplexity), true

	case "Query.getDeviceGroup":
		if e.complexity.Query.GetDeviceGroup == nil {
			break
		}

		return e.complexity.Query.GetDeviceGroup(childComplexity), true

	case "Query.getDevicesCommunicationUnits":
		if e.complexity.Query.GetDevicesCommunicationUnits == nil {
			break
		}

		return e.complexity.Query.GetDevicesCommunicationUnits(childComplexity), true

	case "Query.getDriver":
		if e.complexity.Query.GetDriver == nil {
			break
		}

		return e.complexity.Query.GetDriver(childComplexity), true

	case "Query.getModemPool":
		if e.complexity.Query.GetModemPool == nil {
			break
		}

		return e.complexity.Query.GetModemPool(childComplexity), true

	case "Query.listBulks":
		if e.complexity.Query.ListBulks == nil {
			break
		}

		return e.complexity.Query.ListBulks(childComplexity), true

	case "Query.listCommunicationUnits":
		if e.complexity.Query.ListCommunicationUnits == nil {
			break
		}

		return e.complexity.Query.ListCommunicationUnits(childComplexity), true

	case "Query.listDeviceGroups":
		if e.complexity.Query.ListDeviceGroups == nil {
			break
		}

		return e.complexity.Query.ListDeviceGroups(childComplexity), true

	case "Query.listDevices":
		if e.complexity.Query.ListDevices == nil {
			break
		}

		return e.complexity.Query.ListDevices(childComplexity), true

	case "Query.listDrivers":
		if e.complexity.Query.ListDrivers == nil {
			break
		}

		return e.complexity.Query.ListDrivers(childComplexity), true

	case "Query.listModemPools":
		if e.complexity.Query.ListModemPools == nil {
			break
		}

		return e.complexity.Query.ListModemPools(childComplexity), true

	case "Query.removeDevicesFromGroup":
		if e.complexity.Query.RemoveDevicesFromGroup == nil {
			break
		}

		return e.complexity.Query.RemoveDevicesFromGroup(childComplexity), true

	case "Query.setConfig":
		if e.complexity.Query.SetConfig == nil {
			break
		}

		return e.complexity.Query.SetConfig(childComplexity), true

	case "Query.setDeviceCommunicationUnits":
		if e.complexity.Query.SetDeviceCommunicationUnits == nil {
			break
		}

		return e.complexity.Query.SetDeviceCommunicationUnits(childComplexity), true

	case "Query.updateModem":
		if e.complexity.Query.UpdateModem == nil {
			break
		}

		return e.complexity.Query.UpdateModem(childComplexity), true

	case "Query.updateModemPool":
		if e.complexity.Query.UpdateModemPool == nil {
			break
		}

		return e.complexity.Query.UpdateModemPool(childComplexity), true

	case "RemoveDevicesFromGroupRequest.device_id":
		if e.complexity.RemoveDevicesFromGroupRequest.DeviceID == nil {
			break
		}

		return e.complexity.RemoveDevicesFromGroupRequest.DeviceID(childComplexity), true

	case "RemoveDevicesFromGroupRequest.group_id":
		if e.complexity.RemoveDevicesFromGroupRequest.GroupID == nil {
			break
		}

		return e.complexity.RemoveDevicesFromGroupRequest.GroupID(childComplexity), true

	case "SetDeviceCommunicationUnitsRequest.communication_units":
		if e.complexity.SetDeviceCommunicationUnitsRequest.CommunicationUnits == nil {
			break
		}

		return e.complexity.SetDeviceCommunicationUnitsRequest.CommunicationUnits(childComplexity), true

	case "SetDeviceCommunicationUnitsRequest.device_id":
		if e.complexity.SetDeviceCommunicationUnitsRequest.DeviceID == nil {
			break
		}

		return e.complexity.SetDeviceCommunicationUnitsRequest.DeviceID(childComplexity), true

	case "SetModemPoolRequest.spec":
		if e.complexity.SetModemPoolRequest.Spec == nil {
			break
		}

		return e.complexity.SetModemPoolRequest.Spec(childComplexity), true

	case "SetModemRequest.modem":
		if e.complexity.SetModemRequest.Modem == nil {
			break
		}

		return e.complexity.SetModemRequest.Modem(childComplexity), true

	case "SetModemRequest.pool_id":
		if e.complexity.SetModemRequest.PoolID == nil {
			break
		}

		return e.complexity.SetModemRequest.PoolID(childComplexity), true

	case "StringValue.value":
		if e.complexity.StringValue.Value == nil {
			break
		}

		return e.complexity.StringValue.Value(childComplexity), true

	case "SystemConfig.max_cascade_device_count":
		if e.complexity.SystemConfig.MaxCascadeDeviceCount == nil {
			break
		}

		return e.complexity.SystemConfig.MaxCascadeDeviceCount(childComplexity), true

	case "SystemConfig.max_replicas":
		if e.complexity.SystemConfig.MaxReplicas == nil {
			break
		}

		return e.complexity.SystemConfig.MaxReplicas(childComplexity), true

	case "SystemConfig.max_slots_per_driver":
		if e.complexity.SystemConfig.MaxSlotsPerDriver == nil {
			break
		}

		return e.complexity.SystemConfig.MaxSlotsPerDriver(childComplexity), true

	case "_mapAny.key":
		if e.complexity._mapAny.Key == nil {
			break
		}

		return e.complexity._mapAny.Key(childComplexity), true

	case "_mapAny.value":
		if e.complexity._mapAny.Value == nil {
			break
		}

		return e.complexity._mapAny.Value(childComplexity), true

	case "_mapAttributeValue.key":
		if e.complexity._mapAttributeValue.Key == nil {
			break
		}

		return e.complexity._mapAttributeValue.Key(childComplexity), true

	case "_mapAttributeValue.value":
		if e.complexity._mapAttributeValue.Value == nil {
			break
		}

		return e.complexity._mapAttributeValue.Value(childComplexity), true

	case "_mapListOfString.key":
		if e.complexity._mapListOfString.Key == nil {
			break
		}

		return e.complexity._mapListOfString.Key(childComplexity), true

	case "_mapListOfString.value":
		if e.complexity._mapListOfString.Value == nil {
			break
		}

		return e.complexity._mapListOfString.Value(childComplexity), true

	case "_mapstring.key":
		if e.complexity._mapstring.Key == nil {
			break
		}

		return e.complexity._mapstring.Key(childComplexity), true

	case "_mapstring.value":
		if e.complexity._mapstring.Value == nil {
			break
		}

		return e.complexity._mapstring.Value(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap()
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

//go:embed "api.graphqls"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "api.graphqls", Input: sourceData("api.graphqls"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query___type_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query___type_argsName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["name"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_enumValues_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_enumValues_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_fields_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_fields_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AccessLevelTemplate_id(ctx context.Context, field graphql.CollectedField, obj *model.AccessLevelTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccessLevelTemplate_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccessLevelTemplate_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccessLevelTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccessLevelTemplate_name(ctx context.Context, field graphql.CollectedField, obj *model.AccessLevelTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccessLevelTemplate_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccessLevelTemplate_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccessLevelTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_nodata(ctx context.Context, field graphql.CollectedField, obj *model.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_nodata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_nodata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_billings(ctx context.Context, field graphql.CollectedField, obj *model.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_billings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Billings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BillingValues)
	fc.Result = res
	return ec.marshalOBillingValues2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBillingValues(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_billings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "values":
				return ec.fieldContext_BillingValues_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BillingValues", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_profile(ctx context.Context, field graphql.CollectedField, obj *model.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_profile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Profile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProfileValues)
	fc.Result = res
	return ec.marshalOProfileValues2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐProfileValues(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_profile(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "period":
				return ec.fieldContext_ProfileValues_period(ctx, field)
			case "unit":
				return ec.fieldContext_ProfileValues_unit(ctx, field)
			case "blocks":
				return ec.fieldContext_ProfileValues_blocks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProfileValues", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionFwUpdate__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionFwUpdate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionFwUpdate__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionFwUpdate__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionFwUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetClock__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetClock) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetClock__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetClock__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetClock",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetDisconnectorState__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetDisconnectorState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetDisconnectorState__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetDisconnectorState__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetDisconnectorState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetEvents_from(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetEvents) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetEvents_from(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.From, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetEvents_from(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetEvents",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetEvents_to(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetEvents) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetEvents_to(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetEvents_to(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetEvents",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetIrregularProfile_from(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetIrregularProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetIrregularProfile_from(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.From, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetIrregularProfile_from(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetIrregularProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetIrregularProfile_to(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetIrregularProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetIrregularProfile_to(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetIrregularProfile_to(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetIrregularProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetLimiter__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetLimiter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetLimiter__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetLimiter__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetLimiter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetPeriodicalProfile_from(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetPeriodicalProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetPeriodicalProfile_from(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.From, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetPeriodicalProfile_from(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetPeriodicalProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetPeriodicalProfile_to(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetPeriodicalProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetPeriodicalProfile_to(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetPeriodicalProfile_to(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetPeriodicalProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetRegister__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetRegister) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetRegister__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetRegister__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetRegister",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetRelayState__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetRelayState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetRelayState__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetRelayState__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetRelayState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetTou__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetTou) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetTou__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetTou__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetTou",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionResetBillingPeriod__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionResetBillingPeriod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionResetBillingPeriod__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionResetBillingPeriod__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionResetBillingPeriod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionResult_action_id(ctx context.Context, field graphql.CollectedField, obj *model.ActionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionResult_action_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionResult_action_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionResult_status(ctx context.Context, field graphql.CollectedField, obj *model.ActionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionResult_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionResultCode)
	fc.Result = res
	return ec.marshalOActionResultCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResultCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionResult_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActionResultCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionResult_data(ctx context.Context, field graphql.CollectedField, obj *model.ActionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionResult_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionData)
	fc.Result = res
	return ec.marshalOActionData2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionResult_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "nodata":
				return ec.fieldContext_ActionData_nodata(ctx, field)
			case "billings":
				return ec.fieldContext_ActionData_billings(ctx, field)
			case "profile":
				return ec.fieldContext_ActionData_profile(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSetDisconnectorState__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionSetDisconnectorState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSetDisconnectorState__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSetDisconnectorState__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSetDisconnectorState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSetLimiter__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionSetLimiter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSetLimiter__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSetLimiter__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSetLimiter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSetRelayState__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionSetRelayState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSetRelayState__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSetRelayState__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSetRelayState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSetTou__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionSetTou) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSetTou__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSetTou__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSetTou",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSyncClock__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionSyncClock) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSyncClock__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSyncClock__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSyncClock",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddDevicesToGroupRequest_group_id(ctx context.Context, field graphql.CollectedField, obj *model.AddDevicesToGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddDevicesToGroupRequest_group_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddDevicesToGroupRequest_group_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddDevicesToGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddDevicesToGroupRequest_device_id(ctx context.Context, field graphql.CollectedField, obj *model.AddDevicesToGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddDevicesToGroupRequest_device_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddDevicesToGroupRequest_device_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddDevicesToGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Any_type_url(ctx context.Context, field graphql.CollectedField, obj *model.Any) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Any_type_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Any_type_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Any",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Any_value(ctx context.Context, field graphql.CollectedField, obj *model.Any) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Any_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Any_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Any",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationProtocolTemplate_id(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationProtocolTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationProtocolTemplate_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationProtocolTemplate_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationProtocolTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationProtocolTemplate_protocol(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationProtocolTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationProtocolTemplate_protocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Protocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ApplicationProtocol)
	fc.Result = res
	return ec.marshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationProtocolTemplate_protocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationProtocolTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApplicationProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationProtocolTemplate_attributes(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationProtocolTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationProtocolTemplate_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AttributeDefinition)
	fc.Result = res
	return ec.marshalOAttributeDefinition2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeDefinition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationProtocolTemplate_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationProtocolTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_AttributeDefinition_name(ctx, field)
			case "description":
				return ec.fieldContext_AttributeDefinition_description(ctx, field)
			case "type":
				return ec.fieldContext_AttributeDefinition_type(ctx, field)
			case "mandatory":
				return ec.fieldContext_AttributeDefinition_mandatory(ctx, field)
			case "default_value":
				return ec.fieldContext_AttributeDefinition_default_value(ctx, field)
			case "options":
				return ec.fieldContext_AttributeDefinition_options(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AttributeDefinition", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeDefinition_name(ctx context.Context, field graphql.CollectedField, obj *model.AttributeDefinition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeDefinition_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeDefinition_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeDefinition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeDefinition_description(ctx context.Context, field graphql.CollectedField, obj *model.AttributeDefinition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeDefinition_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeDefinition_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeDefinition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeDefinition_type(ctx context.Context, field graphql.CollectedField, obj *model.AttributeDefinition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeDefinition_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AttributeType)
	fc.Result = res
	return ec.marshalOAttributeType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeDefinition_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeDefinition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AttributeType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeDefinition_mandatory(ctx context.Context, field graphql.CollectedField, obj *model.AttributeDefinition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeDefinition_mandatory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mandatory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeDefinition_mandatory(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeDefinition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeDefinition_default_value(ctx context.Context, field graphql.CollectedField, obj *model.AttributeDefinition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeDefinition_default_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AttributeValue)
	fc.Result = res
	return ec.marshalOAttributeValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeDefinition_default_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeDefinition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "str_value":
				return ec.fieldContext_AttributeValue_str_value(ctx, field)
			case "int_value":
				return ec.fieldContext_AttributeValue_int_value(ctx, field)
			case "double_value":
				return ec.fieldContext_AttributeValue_double_value(ctx, field)
			case "binary_value":
				return ec.fieldContext_AttributeValue_binary_value(ctx, field)
			case "bool_value":
				return ec.fieldContext_AttributeValue_bool_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AttributeValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeDefinition_options(ctx context.Context, field graphql.CollectedField, obj *model.AttributeDefinition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeDefinition_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Mapstring)
	fc.Result = res
	return ec.marshalO_mapstring2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeDefinition_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeDefinition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapstring_key(ctx, field)
			case "value":
				return ec.fieldContext__mapstring_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapstring", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeValue_str_value(ctx context.Context, field graphql.CollectedField, obj *model.AttributeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeValue_str_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StrValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeValue_str_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeValue_int_value(ctx context.Context, field graphql.CollectedField, obj *model.AttributeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeValue_int_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeValue_int_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeValue_double_value(ctx context.Context, field graphql.CollectedField, obj *model.AttributeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeValue_double_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoubleValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeValue_double_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeValue_binary_value(ctx context.Context, field graphql.CollectedField, obj *model.AttributeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeValue_binary_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BinaryValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeValue_binary_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AttributeValue_bool_value(ctx context.Context, field graphql.CollectedField, obj *model.AttributeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AttributeValue_bool_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoolValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AttributeValue_bool_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AttributeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingValue_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.BillingValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingValue_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingValue_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingValue_unit(ctx context.Context, field graphql.CollectedField, obj *model.BillingValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingValue_unit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingValue_unit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingValue_value(ctx context.Context, field graphql.CollectedField, obj *model.BillingValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MeasuredValue)
	fc.Result = res
	return ec.marshalOMeasuredValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMeasuredValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingValue_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_MeasuredValue_status(ctx, field)
			case "exponent":
				return ec.fieldContext_MeasuredValue_exponent(ctx, field)
			case "double_value":
				return ec.fieldContext_MeasuredValue_double_value(ctx, field)
			case "int_value":
				return ec.fieldContext_MeasuredValue_int_value(ctx, field)
			case "str_value":
				return ec.fieldContext_MeasuredValue_str_value(ctx, field)
			case "timestamp_value":
				return ec.fieldContext_MeasuredValue_timestamp_value(ctx, field)
			case "timestamp_tz_value":
				return ec.fieldContext_MeasuredValue_timestamp_tz_value(ctx, field)
			case "bool_value":
				return ec.fieldContext_MeasuredValue_bool_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MeasuredValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingValues_values(ctx context.Context, field graphql.CollectedField, obj *model.BillingValues) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingValues_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.BillingValue)
	fc.Result = res
	return ec.marshalOBillingValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBillingValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingValues_values(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingValues",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_BillingValue_timestamp(ctx, field)
			case "unit":
				return ec.fieldContext_BillingValue_unit(ctx, field)
			case "value":
				return ec.fieldContext_BillingValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BillingValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Bulk_spec(ctx context.Context, field graphql.CollectedField, obj *model.Bulk) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Bulk_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BulkSpec)
	fc.Result = res
	return ec.marshalOBulkSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Bulk_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Bulk",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "correlation_id":
				return ec.fieldContext_BulkSpec_correlation_id(ctx, field)
			case "driver_type":
				return ec.fieldContext_BulkSpec_driver_type(ctx, field)
			case "devices":
				return ec.fieldContext_BulkSpec_devices(ctx, field)
			case "custom_devices":
				return ec.fieldContext_BulkSpec_custom_devices(ctx, field)
			case "settings":
				return ec.fieldContext_BulkSpec_settings(ctx, field)
			case "actions":
				return ec.fieldContext_BulkSpec_actions(ctx, field)
			case "webhook_url":
				return ec.fieldContext_BulkSpec_webhook_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BulkSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Bulk_status(ctx context.Context, field graphql.CollectedField, obj *model.Bulk) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Bulk_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BulkStatus)
	fc.Result = res
	return ec.marshalOBulkStatus2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Bulk_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Bulk",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_BulkStatus_status(ctx, field)
			case "jobs":
				return ec.fieldContext_BulkStatus_jobs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BulkStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Bulk_metadata(ctx context.Context, field graphql.CollectedField, obj *model.Bulk) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Bulk_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Bulk_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Bulk",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managed_fields":
				return ec.fieldContext_MetadataFields_managed_fields(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkJob_job_id(ctx context.Context, field graphql.CollectedField, obj *model.BulkJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkJob_job_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkJob_job_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkJob_status(ctx context.Context, field graphql.CollectedField, obj *model.BulkJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkJob_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobStatus)
	fc.Result = res
	return ec.marshalOJobStatus2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkJob_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_JobStatus_status(ctx, field)
			case "code":
				return ec.fieldContext_JobStatus_code(ctx, field)
			case "results":
				return ec.fieldContext_JobStatus_results(ctx, field)
			case "created_at":
				return ec.fieldContext_JobStatus_created_at(ctx, field)
			case "started_at":
				return ec.fieldContext_JobStatus_started_at(ctx, field)
			case "finished_at":
				return ec.fieldContext_JobStatus_finished_at(ctx, field)
			case "attempts_done":
				return ec.fieldContext_JobStatus_attempts_done(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_correlation_id(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_correlation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrelationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_correlation_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_driver_type(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_driver_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_driver_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_devices(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_devices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Devices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfJobDeviceID)
	fc.Result = res
	return ec.marshalOListOfJobDeviceId2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfJobDeviceID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_devices(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListOfJobDeviceId_list(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfJobDeviceId", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_custom_devices(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_custom_devices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomDevices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfJobDevice)
	fc.Result = res
	return ec.marshalOListOfJobDevice2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfJobDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_custom_devices(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListOfJobDevice_list(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfJobDevice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_settings(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_settings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobSettings)
	fc.Result = res
	return ec.marshalOJobSettings2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_settings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "max_duration":
				return ec.fieldContext_JobSettings_max_duration(ctx, field)
			case "priority":
				return ec.fieldContext_JobSettings_priority(ctx, field)
			case "attempts":
				return ec.fieldContext_JobSettings_attempts(ctx, field)
			case "retry_delay":
				return ec.fieldContext_JobSettings_retry_delay(ctx, field)
			case "defer_start":
				return ec.fieldContext_JobSettings_defer_start(ctx, field)
			case "expires_at":
				return ec.fieldContext_JobSettings_expires_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_actions(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_actions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Actions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JobAction)
	fc.Result = res
	return ec.marshalOJobAction2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobAction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_actions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "action_id":
				return ec.fieldContext_JobAction_action_id(ctx, field)
			case "attributes":
				return ec.fieldContext_JobAction_attributes(ctx, field)
			case "get_register":
				return ec.fieldContext_JobAction_get_register(ctx, field)
			case "get_periodical_profile":
				return ec.fieldContext_JobAction_get_periodical_profile(ctx, field)
			case "get_irregular_profile":
				return ec.fieldContext_JobAction_get_irregular_profile(ctx, field)
			case "get_events":
				return ec.fieldContext_JobAction_get_events(ctx, field)
			case "get_clock":
				return ec.fieldContext_JobAction_get_clock(ctx, field)
			case "sync_clock":
				return ec.fieldContext_JobAction_sync_clock(ctx, field)
			case "get_relay_state":
				return ec.fieldContext_JobAction_get_relay_state(ctx, field)
			case "set_relay_state":
				return ec.fieldContext_JobAction_set_relay_state(ctx, field)
			case "get_disconnector_state":
				return ec.fieldContext_JobAction_get_disconnector_state(ctx, field)
			case "set_disconnector_state":
				return ec.fieldContext_JobAction_set_disconnector_state(ctx, field)
			case "get_tou":
				return ec.fieldContext_JobAction_get_tou(ctx, field)
			case "set_tou":
				return ec.fieldContext_JobAction_set_tou(ctx, field)
			case "get_limiter":
				return ec.fieldContext_JobAction_get_limiter(ctx, field)
			case "set_limiter":
				return ec.fieldContext_JobAction_set_limiter(ctx, field)
			case "reset_billing_period":
				return ec.fieldContext_JobAction_reset_billing_period(ctx, field)
			case "fw_update":
				return ec.fieldContext_JobAction_fw_update(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobAction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_webhook_url(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_webhook_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebhookURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_webhook_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkStatus_status(ctx context.Context, field graphql.CollectedField, obj *model.BulkStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkStatus_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BulkStatusCode)
	fc.Result = res
	return ec.marshalOBulkStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkStatusCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkStatus_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BulkStatusCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkStatus_jobs(ctx context.Context, field graphql.CollectedField, obj *model.BulkStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkStatus_jobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Jobs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.BulkJob)
	fc.Result = res
	return ec.marshalOBulkJob2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkStatus_jobs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "job_id":
				return ec.fieldContext_BulkJob_job_id(ctx, field)
			case "status":
				return ec.fieldContext_BulkJob_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BulkJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationTemplate_type(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationTemplate_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommunicationType)
	fc.Result = res
	return ec.marshalOCommunicationType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationTemplate_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CommunicationType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationTemplate_datalinks(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationTemplate_datalinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Datalinks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DataLinkTemplate)
	fc.Result = res
	return ec.marshalODataLinkTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDataLinkTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationTemplate_datalinks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "link_protocol":
				return ec.fieldContext_DataLinkTemplate_link_protocol(ctx, field)
			case "app_protocol_refs":
				return ec.fieldContext_DataLinkTemplate_app_protocol_refs(ctx, field)
			case "attributes":
				return ec.fieldContext_DataLinkTemplate_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DataLinkTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationUnit_spec(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationUnit_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommunicationUnitSpec)
	fc.Result = res
	return ec.marshalOCommunicationUnitSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationUnitSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationUnit_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "external_id":
				return ec.fieldContext_CommunicationUnitSpec_external_id(ctx, field)
			case "name":
				return ec.fieldContext_CommunicationUnitSpec_name(ctx, field)
			case "connection_info":
				return ec.fieldContext_CommunicationUnitSpec_connection_info(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunicationUnitSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationUnit_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationUnit_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationUnit_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managed_fields":
				return ec.fieldContext_MetadataFields_managed_fields(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationUnitSpec_external_id(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationUnitSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationUnitSpec_external_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationUnitSpec_external_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationUnitSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationUnitSpec_name(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationUnitSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationUnitSpec_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationUnitSpec_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationUnitSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationUnitSpec_connection_info(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationUnitSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationUnitSpec_connection_info(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalOConnectionInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationUnitSpec_connection_info(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationUnitSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tcpip":
				return ec.fieldContext_ConnectionInfo_tcpip(ctx, field)
			case "modem_pool":
				return ec.fieldContext_ConnectionInfo_modem_pool(ctx, field)
			case "serial_over_ip":
				return ec.fieldContext_ConnectionInfo_serial_over_ip(ctx, field)
			case "link_protocol":
				return ec.fieldContext_ConnectionInfo_link_protocol(ctx, field)
			case "custom_grouping_id":
				return ec.fieldContext_ConnectionInfo_custom_grouping_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_tcpip(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_tcpip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tcpip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeDirectTCPIP)
	fc.Result = res
	return ec.marshalOConnectionTypeDirectTcpIp2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeDirectTCPIP(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_tcpip(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "host":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_port(ctx, field)
			case "timeout":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_timeout(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeDirectTcpIp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_modem_pool(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_modem_pool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModemPool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeModemPool)
	fc.Result = res
	return ec.marshalOConnectionTypeModemPool2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeModemPool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_modem_pool(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "number":
				return ec.fieldContext_ConnectionTypeModemPool_number(ctx, field)
			case "pool_id":
				return ec.fieldContext_ConnectionTypeModemPool_pool_id(ctx, field)
			case "modem":
				return ec.fieldContext_ConnectionTypeModemPool_modem(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeModemPool", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_serial_over_ip(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_serial_over_ip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SerialOverIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeControlledSerial)
	fc.Result = res
	return ec.marshalOConnectionTypeControlledSerial2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeControlledSerial(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_serial_over_ip(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "direct":
				return ec.fieldContext_ConnectionTypeControlledSerial_direct(ctx, field)
			case "moxa":
				return ec.fieldContext_ConnectionTypeControlledSerial_moxa(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeControlledSerial", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_link_protocol(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_link_protocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkProtocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataLinkProtocol)
	fc.Result = res
	return ec.marshalODataLinkProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDataLinkProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_link_protocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataLinkProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_custom_grouping_id(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_custom_grouping_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomGroupingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_custom_grouping_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeControlledSerial_direct(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeControlledSerial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeControlledSerial_direct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeSerialDirect)
	fc.Result = res
	return ec.marshalOConnectionTypeSerialDirect2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeSerialDirect(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeControlledSerial_direct(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeControlledSerial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "host":
				return ec.fieldContext_ConnectionTypeSerialDirect_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionTypeSerialDirect_port(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeSerialDirect", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeControlledSerial_moxa(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeControlledSerial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeControlledSerial_moxa(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Moxa, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeSerialMoxa)
	fc.Result = res
	return ec.marshalOConnectionTypeSerialMoxa2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeSerialMoxa(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeControlledSerial_moxa(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeControlledSerial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "host":
				return ec.fieldContext_ConnectionTypeSerialMoxa_host(ctx, field)
			case "dataPort":
				return ec.fieldContext_ConnectionTypeSerialMoxa_dataPort(ctx, field)
			case "commandPort":
				return ec.fieldContext_ConnectionTypeSerialMoxa_commandPort(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeSerialMoxa", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeDirectTcpIp_host(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeDirectTCPIP) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeDirectTcpIp_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeDirectTcpIp_host(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeDirectTcpIp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeDirectTcpIp_port(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeDirectTCPIP) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeDirectTcpIp_port(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeDirectTcpIp_port(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeDirectTcpIp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeDirectTcpIp_timeout(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeDirectTCPIP) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeDirectTcpIp_timeout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeDirectTcpIp_timeout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeDirectTcpIp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeModemPool_number(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeModemPool_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeModemPool_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeModemPool_pool_id(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeModemPool_pool_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeModemPool_pool_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeModemPool_modem(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeModemPool_modem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ModemInfo)
	fc.Result = res
	return ec.marshalOModemInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeModemPool_modem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "modem_id":
				return ec.fieldContext_ModemInfo_modem_id(ctx, field)
			case "name":
				return ec.fieldContext_ModemInfo_name(ctx, field)
			case "at_init":
				return ec.fieldContext_ModemInfo_at_init(ctx, field)
			case "at_test":
				return ec.fieldContext_ModemInfo_at_test(ctx, field)
			case "at_config":
				return ec.fieldContext_ModemInfo_at_config(ctx, field)
			case "at_dial":
				return ec.fieldContext_ModemInfo_at_dial(ctx, field)
			case "at_hangup":
				return ec.fieldContext_ModemInfo_at_hangup(ctx, field)
			case "at_escape":
				return ec.fieldContext_ModemInfo_at_escape(ctx, field)
			case "at_dsr":
				return ec.fieldContext_ModemInfo_at_dsr(ctx, field)
			case "connect_timeout":
				return ec.fieldContext_ModemInfo_connect_timeout(ctx, field)
			case "tcpip":
				return ec.fieldContext_ModemInfo_tcpip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialDirect_host(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialDirect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialDirect_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialDirect_host(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialDirect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialDirect_port(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialDirect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialDirect_port(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialDirect_port(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialDirect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialMoxa_host(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialMoxa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialMoxa_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialMoxa_host(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialMoxa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialMoxa_dataPort(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialMoxa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialMoxa_dataPort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataPort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialMoxa_dataPort(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialMoxa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialMoxa_commandPort(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialMoxa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialMoxa_commandPort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommandPort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialMoxa_commandPort(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialMoxa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBulkRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateBulkRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBulkRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BulkSpec)
	fc.Result = res
	return ec.marshalOBulkSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBulkRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBulkRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "correlation_id":
				return ec.fieldContext_BulkSpec_correlation_id(ctx, field)
			case "driver_type":
				return ec.fieldContext_BulkSpec_driver_type(ctx, field)
			case "devices":
				return ec.fieldContext_BulkSpec_devices(ctx, field)
			case "custom_devices":
				return ec.fieldContext_BulkSpec_custom_devices(ctx, field)
			case "settings":
				return ec.fieldContext_BulkSpec_settings(ctx, field)
			case "actions":
				return ec.fieldContext_BulkSpec_actions(ctx, field)
			case "webhook_url":
				return ec.fieldContext_BulkSpec_webhook_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BulkSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBulkRequest_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CreateBulkRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBulkRequest_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBulkRequest_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBulkRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managed_fields":
				return ec.fieldContext_MetadataFields_managed_fields(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCommunicationUnitRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateCommunicationUnitRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCommunicationUnitRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommunicationUnitSpec)
	fc.Result = res
	return ec.marshalOCommunicationUnitSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationUnitSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCommunicationUnitRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCommunicationUnitRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "external_id":
				return ec.fieldContext_CommunicationUnitSpec_external_id(ctx, field)
			case "name":
				return ec.fieldContext_CommunicationUnitSpec_name(ctx, field)
			case "connection_info":
				return ec.fieldContext_CommunicationUnitSpec_connection_info(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunicationUnitSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCommunicationUnitRequest_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CreateCommunicationUnitRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCommunicationUnitRequest_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCommunicationUnitRequest_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCommunicationUnitRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managed_fields":
				return ec.fieldContext_MetadataFields_managed_fields(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDeviceGroupRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateDeviceGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDeviceGroupRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceGroupSpec)
	fc.Result = res
	return ec.marshalODeviceGroupSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceGroupSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDeviceGroupRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDeviceGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "external_id":
				return ec.fieldContext_DeviceGroupSpec_external_id(ctx, field)
			case "name":
				return ec.fieldContext_DeviceGroupSpec_name(ctx, field)
			case "device_id":
				return ec.fieldContext_DeviceGroupSpec_device_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceGroupSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDeviceGroupRequest_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CreateDeviceGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDeviceGroupRequest_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDeviceGroupRequest_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDeviceGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managed_fields":
				return ec.fieldContext_MetadataFields_managed_fields(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDeviceRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateDeviceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDeviceRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceSpec)
	fc.Result = res
	return ec.marshalODeviceSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDeviceRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDeviceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeviceSpec_id(ctx, field)
			case "external_id":
				return ec.fieldContext_DeviceSpec_external_id(ctx, field)
			case "name":
				return ec.fieldContext_DeviceSpec_name(ctx, field)
			case "attributes":
				return ec.fieldContext_DeviceSpec_attributes(ctx, field)
			case "communication_unit_link":
				return ec.fieldContext_DeviceSpec_communication_unit_link(ctx, field)
			case "timezone":
				return ec.fieldContext_DeviceSpec_timezone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDeviceRequest_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CreateDeviceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDeviceRequest_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDeviceRequest_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDeviceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managed_fields":
				return ec.fieldContext_MetadataFields_managed_fields(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataLinkTemplate_link_protocol(ctx context.Context, field graphql.CollectedField, obj *model.DataLinkTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataLinkTemplate_link_protocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkProtocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataLinkProtocol)
	fc.Result = res
	return ec.marshalODataLinkProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDataLinkProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataLinkTemplate_link_protocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataLinkTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataLinkProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataLinkTemplate_app_protocol_refs(ctx context.Context, field graphql.CollectedField, obj *model.DataLinkTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataLinkTemplate_app_protocol_refs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppProtocolRefs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ApplicationProtocol)
	fc.Result = res
	return ec.marshalOApplicationProtocol2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataLinkTemplate_app_protocol_refs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataLinkTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApplicationProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataLinkTemplate_attributes(ctx context.Context, field graphql.CollectedField, obj *model.DataLinkTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataLinkTemplate_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AttributeDefinition)
	fc.Result = res
	return ec.marshalOAttributeDefinition2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeDefinition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataLinkTemplate_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataLinkTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_AttributeDefinition_name(ctx, field)
			case "description":
				return ec.fieldContext_AttributeDefinition_description(ctx, field)
			case "type":
				return ec.fieldContext_AttributeDefinition_type(ctx, field)
			case "mandatory":
				return ec.fieldContext_AttributeDefinition_mandatory(ctx, field)
			case "default_value":
				return ec.fieldContext_AttributeDefinition_default_value(ctx, field)
			case "options":
				return ec.fieldContext_AttributeDefinition_options(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AttributeDefinition", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_spec(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceSpec)
	fc.Result = res
	return ec.marshalODeviceSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeviceSpec_id(ctx, field)
			case "external_id":
				return ec.fieldContext_DeviceSpec_external_id(ctx, field)
			case "name":
				return ec.fieldContext_DeviceSpec_name(ctx, field)
			case "attributes":
				return ec.fieldContext_DeviceSpec_attributes(ctx, field)
			case "communication_unit_link":
				return ec.fieldContext_DeviceSpec_communication_unit_link(ctx, field)
			case "timezone":
				return ec.fieldContext_DeviceSpec_timezone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_metadata(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managed_fields":
				return ec.fieldContext_MetadataFields_managed_fields(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceCommunicationUnit_communication_unit_id(ctx context.Context, field graphql.CollectedField, obj *model.DeviceCommunicationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceCommunicationUnit_communication_unit_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationUnitID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceCommunicationUnit_communication_unit_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceCommunicationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceCommunicationUnit_app_protocol(ctx context.Context, field graphql.CollectedField, obj *model.DeviceCommunicationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceCommunicationUnit_app_protocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppProtocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ApplicationProtocol)
	fc.Result = res
	return ec.marshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceCommunicationUnit_app_protocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceCommunicationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApplicationProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceGroup_spec(ctx context.Context, field graphql.CollectedField, obj *model.DeviceGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceGroup_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceGroupSpec)
	fc.Result = res
	return ec.marshalODeviceGroupSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceGroupSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceGroup_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "external_id":
				return ec.fieldContext_DeviceGroupSpec_external_id(ctx, field)
			case "name":
				return ec.fieldContext_DeviceGroupSpec_name(ctx, field)
			case "device_id":
				return ec.fieldContext_DeviceGroupSpec_device_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceGroupSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceGroup_metadata(ctx context.Context, field graphql.CollectedField, obj *model.DeviceGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceGroup_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceGroup_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managed_fields":
				return ec.fieldContext_MetadataFields_managed_fields(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceGroupSpec_external_id(ctx context.Context, field graphql.CollectedField, obj *model.DeviceGroupSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceGroupSpec_external_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceGroupSpec_external_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceGroupSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceGroupSpec_name(ctx context.Context, field graphql.CollectedField, obj *model.DeviceGroupSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceGroupSpec_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceGroupSpec_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceGroupSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceGroupSpec_device_id(ctx context.Context, field graphql.CollectedField, obj *model.DeviceGroupSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceGroupSpec_device_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceGroupSpec_device_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceGroupSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceSpec_id(ctx context.Context, field graphql.CollectedField, obj *model.DeviceSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceSpec_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceSpec_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceSpec_external_id(ctx context.Context, field graphql.CollectedField, obj *model.DeviceSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceSpec_external_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceSpec_external_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceSpec_name(ctx context.Context, field graphql.CollectedField, obj *model.DeviceSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceSpec_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceSpec_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceSpec_attributes(ctx context.Context, field graphql.CollectedField, obj *model.DeviceSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceSpec_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapAttributeValue)
	fc.Result = res
	return ec.marshalO_mapAttributeValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAttributeValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceSpec_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapAttributeValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapAttributeValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapAttributeValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceSpec_communication_unit_link(ctx context.Context, field graphql.CollectedField, obj *model.DeviceSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceSpec_communication_unit_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationUnitLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceCommunicationUnit)
	fc.Result = res
	return ec.marshalODeviceCommunicationUnit2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceCommunicationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceSpec_communication_unit_link(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "communication_unit_id":
				return ec.fieldContext_DeviceCommunicationUnit_communication_unit_id(ctx, field)
			case "app_protocol":
				return ec.fieldContext_DeviceCommunicationUnit_app_protocol(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceCommunicationUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceSpec_timezone(ctx context.Context, field graphql.CollectedField, obj *model.DeviceSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceSpec_timezone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timezone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceSpec_timezone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_spec(ctx context.Context, field graphql.CollectedField, obj *model.Driver) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Driver_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverSpec)
	fc.Result = res
	return ec.marshalODriverSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDriverSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Driver_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "version":
				return ec.fieldContext_DriverSpec_version(ctx, field)
			case "listening_port":
				return ec.fieldContext_DriverSpec_listening_port(ctx, field)
			case "driver_type":
				return ec.fieldContext_DriverSpec_driver_type(ctx, field)
			case "max_concurrent_jobs":
				return ec.fieldContext_DriverSpec_max_concurrent_jobs(ctx, field)
			case "max_cascade_depth":
				return ec.fieldContext_DriverSpec_max_cascade_depth(ctx, field)
			case "typical_mem_usage":
				return ec.fieldContext_DriverSpec_typical_mem_usage(ctx, field)
			case "templates":
				return ec.fieldContext_DriverSpec_templates(ctx, field)
			case "display_name":
				return ec.fieldContext_DriverSpec_display_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DriverSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverSpec_version(ctx context.Context, field graphql.CollectedField, obj *model.DriverSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverSpec_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverSpec_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverSpec_listening_port(ctx context.Context, field graphql.CollectedField, obj *model.DriverSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverSpec_listening_port(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListeningPort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverSpec_listening_port(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverSpec_driver_type(ctx context.Context, field graphql.CollectedField, obj *model.DriverSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverSpec_driver_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverSpec_driver_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverSpec_max_concurrent_jobs(ctx context.Context, field graphql.CollectedField, obj *model.DriverSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverSpec_max_concurrent_jobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxConcurrentJobs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverSpec_max_concurrent_jobs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverSpec_max_cascade_depth(ctx context.Context, field graphql.CollectedField, obj *model.DriverSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverSpec_max_cascade_depth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxCascadeDepth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverSpec_max_cascade_depth(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverSpec_typical_mem_usage(ctx context.Context, field graphql.CollectedField, obj *model.DriverSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverSpec_typical_mem_usage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypicalMemUsage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverSpec_typical_mem_usage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverSpec_templates(ctx context.Context, field graphql.CollectedField, obj *model.DriverSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverSpec_templates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Templates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverTemplates)
	fc.Result = res
	return ec.marshalODriverTemplates2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDriverTemplates(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverSpec_templates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "communication_templates":
				return ec.fieldContext_DriverTemplates_communication_templates(ctx, field)
			case "app_protocols":
				return ec.fieldContext_DriverTemplates_app_protocols(ctx, field)
			case "action_attributes":
				return ec.fieldContext_DriverTemplates_action_attributes(ctx, field)
			case "access_templates":
				return ec.fieldContext_DriverTemplates_access_templates(ctx, field)
			case "action_constraints":
				return ec.fieldContext_DriverTemplates_action_constraints(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DriverTemplates", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverSpec_display_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverSpec_display_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverSpec_display_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverTemplates_communication_templates(ctx context.Context, field graphql.CollectedField, obj *model.DriverTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverTemplates_communication_templates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationTemplates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommunicationTemplate)
	fc.Result = res
	return ec.marshalOCommunicationTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverTemplates_communication_templates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_CommunicationTemplate_type(ctx, field)
			case "datalinks":
				return ec.fieldContext_CommunicationTemplate_datalinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunicationTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverTemplates_app_protocols(ctx context.Context, field graphql.CollectedField, obj *model.DriverTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverTemplates_app_protocols(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppProtocols, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ApplicationProtocolTemplate)
	fc.Result = res
	return ec.marshalOApplicationProtocolTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocolTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverTemplates_app_protocols(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ApplicationProtocolTemplate_id(ctx, field)
			case "protocol":
				return ec.fieldContext_ApplicationProtocolTemplate_protocol(ctx, field)
			case "attributes":
				return ec.fieldContext_ApplicationProtocolTemplate_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApplicationProtocolTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverTemplates_action_attributes(ctx context.Context, field graphql.CollectedField, obj *model.DriverTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverTemplates_action_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionAttributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JobActionAttributes)
	fc.Result = res
	return ec.marshalOJobActionAttributes2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobActionAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverTemplates_action_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_JobActionAttributes_type(ctx, field)
			case "attributes":
				return ec.fieldContext_JobActionAttributes_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobActionAttributes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverTemplates_access_templates(ctx context.Context, field graphql.CollectedField, obj *model.DriverTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverTemplates_access_templates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessTemplates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AccessLevelTemplate)
	fc.Result = res
	return ec.marshalOAccessLevelTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAccessLevelTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverTemplates_access_templates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccessLevelTemplate_id(ctx, field)
			case "name":
				return ec.fieldContext_AccessLevelTemplate_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccessLevelTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverTemplates_action_constraints(ctx context.Context, field graphql.CollectedField, obj *model.DriverTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverTemplates_action_constraints(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionConstraints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobActionContraints)
	fc.Result = res
	return ec.marshalOJobActionContraints2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobActionContraints(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverTemplates_action_constraints(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "get_register_type_name":
				return ec.fieldContext_JobActionContraints_get_register_type_name(ctx, field)
			case "get_register_type_attributes":
				return ec.fieldContext_JobActionContraints_get_register_type_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobActionContraints", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empty__empty(ctx context.Context, field graphql.CollectedField, obj *model.Empty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empty__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empty__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_action_id(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_action_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_action_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_attributes(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapAttributeValue)
	fc.Result = res
	return ec.marshalO_mapAttributeValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAttributeValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapAttributeValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapAttributeValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapAttributeValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_register(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_register(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetRegister, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetRegister)
	fc.Result = res
	return ec.marshalOActionGetRegister2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetRegister(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_register(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionGetRegister__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetRegister", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_periodical_profile(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_periodical_profile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetPeriodicalProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetPeriodicalProfile)
	fc.Result = res
	return ec.marshalOActionGetPeriodicalProfile2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetPeriodicalProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_periodical_profile(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "from":
				return ec.fieldContext_ActionGetPeriodicalProfile_from(ctx, field)
			case "to":
				return ec.fieldContext_ActionGetPeriodicalProfile_to(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetPeriodicalProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_irregular_profile(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_irregular_profile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetIrregularProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetIrregularProfile)
	fc.Result = res
	return ec.marshalOActionGetIrregularProfile2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetIrregularProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_irregular_profile(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "from":
				return ec.fieldContext_ActionGetIrregularProfile_from(ctx, field)
			case "to":
				return ec.fieldContext_ActionGetIrregularProfile_to(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetIrregularProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_events(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetEvents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetEvents)
	fc.Result = res
	return ec.marshalOActionGetEvents2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetEvents(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_events(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "from":
				return ec.fieldContext_ActionGetEvents_from(ctx, field)
			case "to":
				return ec.fieldContext_ActionGetEvents_to(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetEvents", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_clock(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_clock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetClock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetClock)
	fc.Result = res
	return ec.marshalOActionGetClock2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetClock(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_clock(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionGetClock__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetClock", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_sync_clock(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_sync_clock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SyncClock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSyncClock)
	fc.Result = res
	return ec.marshalOActionSyncClock2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSyncClock(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_sync_clock(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSyncClock__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSyncClock", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_relay_state(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_relay_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetRelayState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetRelayState)
	fc.Result = res
	return ec.marshalOActionGetRelayState2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetRelayState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_relay_state(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionGetRelayState__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetRelayState", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_set_relay_state(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_set_relay_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetRelayState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSetRelayState)
	fc.Result = res
	return ec.marshalOActionSetRelayState2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSetRelayState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_set_relay_state(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSetRelayState__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSetRelayState", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_disconnector_state(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_disconnector_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetDisconnectorState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetDisconnectorState)
	fc.Result = res
	return ec.marshalOActionGetDisconnectorState2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetDisconnectorState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_disconnector_state(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionGetDisconnectorState__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetDisconnectorState", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_set_disconnector_state(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_set_disconnector_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetDisconnectorState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSetDisconnectorState)
	fc.Result = res
	return ec.marshalOActionSetDisconnectorState2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSetDisconnectorState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_set_disconnector_state(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSetDisconnectorState__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSetDisconnectorState", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_tou(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_tou(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetTou, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetTou)
	fc.Result = res
	return ec.marshalOActionGetTou2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetTou(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_tou(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionGetTou__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetTou", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_set_tou(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_set_tou(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetTou, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSetTou)
	fc.Result = res
	return ec.marshalOActionSetTou2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSetTou(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_set_tou(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSetTou__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSetTou", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_get_limiter(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_get_limiter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetLimiter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetLimiter)
	fc.Result = res
	return ec.marshalOActionGetLimiter2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetLimiter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_get_limiter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionGetLimiter__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetLimiter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_set_limiter(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_set_limiter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetLimiter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSetLimiter)
	fc.Result = res
	return ec.marshalOActionSetLimiter2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSetLimiter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_set_limiter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSetLimiter__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSetLimiter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_reset_billing_period(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_reset_billing_period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResetBillingPeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionResetBillingPeriod)
	fc.Result = res
	return ec.marshalOActionResetBillingPeriod2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResetBillingPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_reset_billing_period(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionResetBillingPeriod__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionResetBillingPeriod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_fw_update(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_fw_update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FwUpdate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionFwUpdate)
	fc.Result = res
	return ec.marshalOActionFwUpdate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionFwUpdate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_fw_update(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionFwUpdate__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionFwUpdate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionAttributes_type(ctx context.Context, field graphql.CollectedField, obj *model.JobActionAttributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionAttributes_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionType)
	fc.Result = res
	return ec.marshalOActionType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionAttributes_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionAttributes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionAttributes_attributes(ctx context.Context, field graphql.CollectedField, obj *model.JobActionAttributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionAttributes_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AttributeDefinition)
	fc.Result = res
	return ec.marshalOAttributeDefinition2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeDefinition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionAttributes_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionAttributes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_AttributeDefinition_name(ctx, field)
			case "description":
				return ec.fieldContext_AttributeDefinition_description(ctx, field)
			case "type":
				return ec.fieldContext_AttributeDefinition_type(ctx, field)
			case "mandatory":
				return ec.fieldContext_AttributeDefinition_mandatory(ctx, field)
			case "default_value":
				return ec.fieldContext_AttributeDefinition_default_value(ctx, field)
			case "options":
				return ec.fieldContext_AttributeDefinition_options(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AttributeDefinition", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionContraints_get_register_type_name(ctx context.Context, field graphql.CollectedField, obj *model.JobActionContraints) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionContraints_get_register_type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetRegisterTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Mapstring)
	fc.Result = res
	return ec.marshalO_mapstring2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionContraints_get_register_type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionContraints",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapstring_key(ctx, field)
			case "value":
				return ec.fieldContext__mapstring_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapstring", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionContraints_get_register_type_attributes(ctx context.Context, field graphql.CollectedField, obj *model.JobActionContraints) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionContraints_get_register_type_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetRegisterTypeAttributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapListOfString)
	fc.Result = res
	return ec.marshalO_mapListOfString2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapListOfString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionContraints_get_register_type_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionContraints",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapListOfString_key(ctx, field)
			case "value":
				return ec.fieldContext__mapListOfString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapListOfString", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_job_id(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_job_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_job_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_device_id(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_device_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_device_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_external_id(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_external_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_external_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_device_attributes(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_device_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceAttributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapAttributeValue)
	fc.Result = res
	return ec.marshalO_mapAttributeValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAttributeValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_device_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapAttributeValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapAttributeValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapAttributeValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_connection_info(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_connection_info(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalOConnectionInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_connection_info(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tcpip":
				return ec.fieldContext_ConnectionInfo_tcpip(ctx, field)
			case "modem_pool":
				return ec.fieldContext_ConnectionInfo_modem_pool(ctx, field)
			case "serial_over_ip":
				return ec.fieldContext_ConnectionInfo_serial_over_ip(ctx, field)
			case "link_protocol":
				return ec.fieldContext_ConnectionInfo_link_protocol(ctx, field)
			case "custom_grouping_id":
				return ec.fieldContext_ConnectionInfo_custom_grouping_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_app_protocol(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_app_protocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppProtocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ApplicationProtocol)
	fc.Result = res
	return ec.marshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_app_protocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApplicationProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_timezone(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_timezone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timezone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_timezone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDeviceId_job_id(ctx context.Context, field graphql.CollectedField, obj *model.JobDeviceID) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDeviceId_job_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDeviceId_job_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDeviceId",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDeviceId_device_id(ctx context.Context, field graphql.CollectedField, obj *model.JobDeviceID) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDeviceId_device_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDeviceId_device_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDeviceId",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_max_duration(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_max_duration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_max_duration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_priority(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_priority(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobPriority)
	fc.Result = res
	return ec.marshalOJobPriority2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobPriority(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_priority(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JobPriority does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_attempts(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_attempts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attempts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int32)
	fc.Result = res
	return ec.marshalOInt2ᚕᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_attempts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_retry_delay(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_retry_delay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetryDelay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_retry_delay(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_defer_start(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_defer_start(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeferStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOBigInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_defer_start(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BigInt does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_expires_at(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_expires_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_expires_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_status(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobStatusCode)
	fc.Result = res
	return ec.marshalOJobStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobStatusCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JobStatusCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_code(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobErrorCode)
	fc.Result = res
	return ec.marshalOJobErrorCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobErrorCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JobErrorCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_results(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ActionResult)
	fc.Result = res
	return ec.marshalOActionResult2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_results(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "action_id":
				return ec.fieldContext_ActionResult_action_id(ctx, field)
			case "status":
				return ec.fieldContext_ActionResult_status(ctx, field)
			case "data":
				return ec.fieldContext_ActionResult_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_created_at(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_started_at(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_started_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_started_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_finished_at(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_finished_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinishedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_finished_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_attempts_done(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_attempts_done(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttemptsDone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_attempts_done(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfBulk_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfBulk) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfBulk_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Bulk)
	fc.Result = res
	return ec.marshalOBulk2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulk(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfBulk_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfBulk",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_Bulk_spec(ctx, field)
			case "status":
				return ec.fieldContext_Bulk_status(ctx, field)
			case "metadata":
				return ec.fieldContext_Bulk_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Bulk", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfCommunicationUnit_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfCommunicationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfCommunicationUnit_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommunicationUnit)
	fc.Result = res
	return ec.marshalOCommunicationUnit2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfCommunicationUnit_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfCommunicationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_CommunicationUnit_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_CommunicationUnit_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunicationUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDevice_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDevice_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Device)
	fc.Result = res
	return ec.marshalODevice2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDevice_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_Device_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_Device_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Device", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDeviceGroup_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDeviceGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDeviceGroup_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceGroup)
	fc.Result = res
	return ec.marshalODeviceGroup2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDeviceGroup_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDeviceGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_DeviceGroup_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_DeviceGroup_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDriver_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDriver) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDriver_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Driver)
	fc.Result = res
	return ec.marshalODriver2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDriver(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDriver_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDriver",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_Driver_spec(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Driver", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfJobDevice_list(ctx context.Context, field graphql.CollectedField, obj *model.ListOfJobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfJobDevice_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JobDevice)
	fc.Result = res
	return ec.marshalOJobDevice2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfJobDevice_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfJobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "job_id":
				return ec.fieldContext_JobDevice_job_id(ctx, field)
			case "device_id":
				return ec.fieldContext_JobDevice_device_id(ctx, field)
			case "external_id":
				return ec.fieldContext_JobDevice_external_id(ctx, field)
			case "device_attributes":
				return ec.fieldContext_JobDevice_device_attributes(ctx, field)
			case "connection_info":
				return ec.fieldContext_JobDevice_connection_info(ctx, field)
			case "app_protocol":
				return ec.fieldContext_JobDevice_app_protocol(ctx, field)
			case "timezone":
				return ec.fieldContext_JobDevice_timezone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobDevice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfJobDeviceId_list(ctx context.Context, field graphql.CollectedField, obj *model.ListOfJobDeviceID) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfJobDeviceId_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JobDeviceID)
	fc.Result = res
	return ec.marshalOJobDeviceId2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobDeviceID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfJobDeviceId_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfJobDeviceId",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "job_id":
				return ec.fieldContext_JobDeviceId_job_id(ctx, field)
			case "device_id":
				return ec.fieldContext_JobDeviceId_device_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobDeviceId", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfModemPool_pools(ctx context.Context, field graphql.CollectedField, obj *model.ListOfModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfModemPool_pools(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pools, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ModemPoolSpec)
	fc.Result = res
	return ec.marshalOModemPoolSpec2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemPoolSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfModemPool_pools(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pool_id":
				return ec.fieldContext_ModemPoolSpec_pool_id(ctx, field)
			case "name":
				return ec.fieldContext_ModemPoolSpec_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemPoolSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfString_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfString_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfString_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelector_page_size(ctx context.Context, field graphql.CollectedField, obj *model.ListSelector) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelector_page_size(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelector_page_size(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelector",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelector_offset(ctx context.Context, field graphql.CollectedField, obj *model.ListSelector) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelector_offset(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Offset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelector_offset(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelector",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelector_sort_by(ctx context.Context, field graphql.CollectedField, obj *model.ListSelector) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelector_sort_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ListSelectorSortBy)
	fc.Result = res
	return ec.marshalOListSelectorSortBy2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListSelectorSortBy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelector_sort_by(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelector",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field_id":
				return ec.fieldContext_ListSelectorSortBy_field_id(ctx, field)
			case "desc":
				return ec.fieldContext_ListSelectorSortBy_desc(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListSelectorSortBy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelector_filter_by(ctx context.Context, field graphql.CollectedField, obj *model.ListSelector) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelector_filter_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ListSelectorFilterBy)
	fc.Result = res
	return ec.marshalOListSelectorFilterBy2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListSelectorFilterBy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelector_filter_by(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelector",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "field_id":
				return ec.fieldContext_ListSelectorFilterBy_field_id(ctx, field)
			case "operator":
				return ec.fieldContext_ListSelectorFilterBy_operator(ctx, field)
			case "text":
				return ec.fieldContext_ListSelectorFilterBy_text(ctx, field)
			case "integer":
				return ec.fieldContext_ListSelectorFilterBy_integer(ctx, field)
			case "number":
				return ec.fieldContext_ListSelectorFilterBy_number(ctx, field)
			case "boolean":
				return ec.fieldContext_ListSelectorFilterBy_boolean(ctx, field)
			case "date":
				return ec.fieldContext_ListSelectorFilterBy_date(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListSelectorFilterBy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelector_fields(ctx context.Context, field graphql.CollectedField, obj *model.ListSelector) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelector_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelector_fields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelector",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorFilterBy_field_id(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorFilterBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorFilterBy_field_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorFilterBy_field_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorFilterBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorFilterBy_operator(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorFilterBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorFilterBy_operator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FilterOperator)
	fc.Result = res
	return ec.marshalOFilterOperator2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐFilterOperator(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorFilterBy_operator(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorFilterBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FilterOperator does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorFilterBy_text(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorFilterBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorFilterBy_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorFilterBy_text(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorFilterBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorFilterBy_integer(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorFilterBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorFilterBy_integer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Integer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int64)
	fc.Result = res
	return ec.marshalOInt642ᚕᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorFilterBy_integer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorFilterBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorFilterBy_number(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorFilterBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorFilterBy_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚕᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorFilterBy_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorFilterBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorFilterBy_boolean(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorFilterBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorFilterBy_boolean(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Boolean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚕᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorFilterBy_boolean(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorFilterBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorFilterBy_date(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorFilterBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorFilterBy_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorFilterBy_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorFilterBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorSortBy_field_id(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorSortBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorSortBy_field_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorSortBy_field_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorSortBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorSortBy_desc(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorSortBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorSortBy_desc(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorSortBy_desc(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorSortBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_status(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_exponent(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_exponent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Exponent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_exponent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_double_value(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_double_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoubleValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_double_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_int_value(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_int_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_int_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_str_value(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_str_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StrValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_str_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_timestamp_value(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_timestamp_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_timestamp_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_timestamp_tz_value(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_timestamp_tz_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampTzValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_timestamp_tz_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_bool_value(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_bool_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoolValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_bool_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetadataFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MetadataFields) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetadataFields_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetadataFields_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetadataFields",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetadataFields_generation(ctx context.Context, field graphql.CollectedField, obj *model.MetadataFields) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetadataFields_generation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Generation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetadataFields_generation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetadataFields",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetadataFields_fields(ctx context.Context, field graphql.CollectedField, obj *model.MetadataFields) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetadataFields_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapAny)
	fc.Result = res
	return ec.marshalO_mapAny2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAny(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetadataFields_fields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetadataFields",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapAny_key(ctx, field)
			case "value":
				return ec.fieldContext__mapAny_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapAny", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetadataFields_managed_fields(ctx context.Context, field graphql.CollectedField, obj *model.MetadataFields) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetadataFields_managed_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManagedFields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapAny)
	fc.Result = res
	return ec.marshalO_mapAny2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAny(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetadataFields_managed_fields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetadataFields",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapAny_key(ctx, field)
			case "value":
				return ec.fieldContext__mapAny_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapAny", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_modem_id(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_modem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_modem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_at_init(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_at_init(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtInit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_at_init(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_at_test(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_at_test(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtTest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_at_test(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_at_config(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_at_config(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtConfig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_at_config(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_at_dial(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_at_dial(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtDial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_at_dial(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_at_hangup(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_at_hangup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtHangup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_at_hangup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_at_escape(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_at_escape(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtEscape, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_at_escape(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_at_dsr(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_at_dsr(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtDsr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_at_dsr(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_connect_timeout(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_connect_timeout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectTimeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_connect_timeout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_tcpip(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_tcpip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tcpip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeDirectTCPIP)
	fc.Result = res
	return ec.marshalOConnectionTypeDirectTcpIp2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeDirectTCPIP(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_tcpip(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "host":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_port(ctx, field)
			case "timeout":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_timeout(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeDirectTcpIp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemPool_spec(ctx context.Context, field graphql.CollectedField, obj *model.ModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemPool_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ModemPoolSpec)
	fc.Result = res
	return ec.marshalOModemPoolSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemPoolSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemPool_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pool_id":
				return ec.fieldContext_ModemPoolSpec_pool_id(ctx, field)
			case "name":
				return ec.fieldContext_ModemPoolSpec_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemPoolSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemPool_status(ctx context.Context, field graphql.CollectedField, obj *model.ModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemPool_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ModemPoolStatus)
	fc.Result = res
	return ec.marshalOModemPoolStatus2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemPoolStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemPool_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "modems":
				return ec.fieldContext_ModemPoolStatus_modems(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemPoolStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemPool_metadata(ctx context.Context, field graphql.CollectedField, obj *model.ModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemPool_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemPool_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managed_fields":
				return ec.fieldContext_MetadataFields_managed_fields(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemPoolSpec_pool_id(ctx context.Context, field graphql.CollectedField, obj *model.ModemPoolSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemPoolSpec_pool_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemPoolSpec_pool_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemPoolSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemPoolSpec_name(ctx context.Context, field graphql.CollectedField, obj *model.ModemPoolSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemPoolSpec_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemPoolSpec_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemPoolSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemPoolStatus_modems(ctx context.Context, field graphql.CollectedField, obj *model.ModemPoolStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemPoolStatus_modems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ModemInfo)
	fc.Result = res
	return ec.marshalOModemInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemPoolStatus_modems(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemPoolStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "modem_id":
				return ec.fieldContext_ModemInfo_modem_id(ctx, field)
			case "name":
				return ec.fieldContext_ModemInfo_name(ctx, field)
			case "at_init":
				return ec.fieldContext_ModemInfo_at_init(ctx, field)
			case "at_test":
				return ec.fieldContext_ModemInfo_at_test(ctx, field)
			case "at_config":
				return ec.fieldContext_ModemInfo_at_config(ctx, field)
			case "at_dial":
				return ec.fieldContext_ModemInfo_at_dial(ctx, field)
			case "at_hangup":
				return ec.fieldContext_ModemInfo_at_hangup(ctx, field)
			case "at_escape":
				return ec.fieldContext_ModemInfo_at_escape(ctx, field)
			case "at_dsr":
				return ec.fieldContext_ModemInfo_at_dsr(ctx, field)
			case "connect_timeout":
				return ec.fieldContext_ModemInfo_connect_timeout(ctx, field)
			case "tcpip":
				return ec.fieldContext_ModemInfo_tcpip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileBlok_start_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.ProfileBlok) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileBlok_start_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileBlok_start_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileBlok",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileBlok_values(ctx context.Context, field graphql.CollectedField, obj *model.ProfileBlok) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileBlok_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MeasuredValue)
	fc.Result = res
	return ec.marshalOMeasuredValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMeasuredValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileBlok_values(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileBlok",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_MeasuredValue_status(ctx, field)
			case "exponent":
				return ec.fieldContext_MeasuredValue_exponent(ctx, field)
			case "double_value":
				return ec.fieldContext_MeasuredValue_double_value(ctx, field)
			case "int_value":
				return ec.fieldContext_MeasuredValue_int_value(ctx, field)
			case "str_value":
				return ec.fieldContext_MeasuredValue_str_value(ctx, field)
			case "timestamp_value":
				return ec.fieldContext_MeasuredValue_timestamp_value(ctx, field)
			case "timestamp_tz_value":
				return ec.fieldContext_MeasuredValue_timestamp_tz_value(ctx, field)
			case "bool_value":
				return ec.fieldContext_MeasuredValue_bool_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MeasuredValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileValues_period(ctx context.Context, field graphql.CollectedField, obj *model.ProfileValues) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileValues_period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileValues_period(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileValues",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileValues_unit(ctx context.Context, field graphql.CollectedField, obj *model.ProfileValues) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileValues_unit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileValues_unit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileValues",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileValues_blocks(ctx context.Context, field graphql.CollectedField, obj *model.ProfileValues) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileValues_blocks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blocks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProfileBlok)
	fc.Result = res
	return ec.marshalOProfileBlok2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐProfileBlok(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileValues_blocks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileValues",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "start_timestamp":
				return ec.fieldContext_ProfileBlok_start_timestamp(ctx, field)
			case "values":
				return ec.fieldContext_ProfileBlok_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProfileBlok", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createBulk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createBulk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateBulk(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createBulk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listBulks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listBulks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListBulks(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfBulk)
	fc.Result = res
	return ec.marshalOListOfBulk2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfBulk(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listBulks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfBulk_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfBulk", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getBulk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getBulk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBulk(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Bulk)
	fc.Result = res
	return ec.marshalOBulk2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulk(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getBulk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_Bulk_spec(ctx, field)
			case "status":
				return ec.fieldContext_Bulk_status(ctx, field)
			case "metadata":
				return ec.fieldContext_Bulk_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Bulk", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_cancelBulk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cancelBulk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CancelBulk(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cancelBulk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetConfig(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SystemConfig)
	fc.Result = res
	return ec.marshalOSystemConfig2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐSystemConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getConfig(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "max_replicas":
				return ec.fieldContext_SystemConfig_max_replicas(ctx, field)
			case "max_cascade_device_count":
				return ec.fieldContext_SystemConfig_max_cascade_device_count(ctx, field)
			case "max_slots_per_driver":
				return ec.fieldContext_SystemConfig_max_slots_per_driver(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_setConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_setConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SetConfig(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_setConfig(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createCommunicationUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createCommunicationUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateCommunicationUnit(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createCommunicationUnit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listCommunicationUnits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listCommunicationUnits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListCommunicationUnits(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfCommunicationUnit)
	fc.Result = res
	return ec.marshalOListOfCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfCommunicationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listCommunicationUnits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfCommunicationUnit_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfCommunicationUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getCommunicationUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getCommunicationUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCommunicationUnit(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommunicationUnit)
	fc.Result = res
	return ec.marshalOCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getCommunicationUnit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_CommunicationUnit_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_CommunicationUnit_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunicationUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createDevice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateDevice(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createDevice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listDevices(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listDevices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListDevices(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfDevice)
	fc.Result = res
	return ec.marshalOListOfDevice2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listDevices(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfDevice_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfDevice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDevice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDevice(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Device)
	fc.Result = res
	return ec.marshalODevice2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDevice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_Device_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_Device_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Device", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_setDeviceCommunicationUnits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_setDeviceCommunicationUnits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SetDeviceCommunicationUnits(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_setDeviceCommunicationUnits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDevicesCommunicationUnits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDevicesCommunicationUnits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDevicesCommunicationUnits(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfCommunicationUnit)
	fc.Result = res
	return ec.marshalOListOfCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfCommunicationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDevicesCommunicationUnits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfCommunicationUnit_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfCommunicationUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createDeviceGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createDeviceGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateDeviceGroup(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createDeviceGroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listDeviceGroups(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listDeviceGroups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListDeviceGroups(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfDeviceGroup)
	fc.Result = res
	return ec.marshalOListOfDeviceGroup2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfDeviceGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listDeviceGroups(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfDeviceGroup_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfDeviceGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDeviceGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDeviceGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceGroup(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceGroup)
	fc.Result = res
	return ec.marshalODeviceGroup2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDeviceGroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_DeviceGroup_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_DeviceGroup_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_addDevicesToGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_addDevicesToGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AddDevicesToGroup(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_addDevicesToGroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_removeDevicesFromGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_removeDevicesFromGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RemoveDevicesFromGroup(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_removeDevicesFromGroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listModemPools(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listModemPools(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListModemPools(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfModemPool)
	fc.Result = res
	return ec.marshalOListOfModemPool2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfModemPool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listModemPools(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pools":
				return ec.fieldContext_ListOfModemPool_pools(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfModemPool", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getModemPool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getModemPool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetModemPool(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ModemPool)
	fc.Result = res
	return ec.marshalOModemPool2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemPool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getModemPool(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_ModemPool_spec(ctx, field)
			case "status":
				return ec.fieldContext_ModemPool_status(ctx, field)
			case "metadata":
				return ec.fieldContext_ModemPool_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemPool", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createModemPool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createModemPool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateModemPool(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createModemPool(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateModemPool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateModemPool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateModemPool(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateModemPool(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteModemPool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteModemPool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteModemPool(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteModemPool(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createModem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createModem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateModem(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createModem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateModem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateModem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateModem(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateModem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteModem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteModem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteModem(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteModem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listDrivers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listDrivers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListDrivers(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfDriver)
	fc.Result = res
	return ec.marshalOListOfDriver2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfDriver(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listDrivers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfDriver_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfDriver", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDriver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDriver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDriver(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Driver)
	fc.Result = res
	return ec.marshalODriver2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDriver(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDriver(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_Driver_spec(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Driver", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RemoveDevicesFromGroupRequest_group_id(ctx context.Context, field graphql.CollectedField, obj *model.RemoveDevicesFromGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RemoveDevicesFromGroupRequest_group_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RemoveDevicesFromGroupRequest_group_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RemoveDevicesFromGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RemoveDevicesFromGroupRequest_device_id(ctx context.Context, field graphql.CollectedField, obj *model.RemoveDevicesFromGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RemoveDevicesFromGroupRequest_device_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RemoveDevicesFromGroupRequest_device_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RemoveDevicesFromGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetDeviceCommunicationUnitsRequest_device_id(ctx context.Context, field graphql.CollectedField, obj *model.SetDeviceCommunicationUnitsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetDeviceCommunicationUnitsRequest_device_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetDeviceCommunicationUnitsRequest_device_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetDeviceCommunicationUnitsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetDeviceCommunicationUnitsRequest_communication_units(ctx context.Context, field graphql.CollectedField, obj *model.SetDeviceCommunicationUnitsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetDeviceCommunicationUnitsRequest_communication_units(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationUnits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceCommunicationUnit)
	fc.Result = res
	return ec.marshalODeviceCommunicationUnit2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceCommunicationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetDeviceCommunicationUnitsRequest_communication_units(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetDeviceCommunicationUnitsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "communication_unit_id":
				return ec.fieldContext_DeviceCommunicationUnit_communication_unit_id(ctx, field)
			case "app_protocol":
				return ec.fieldContext_DeviceCommunicationUnit_app_protocol(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceCommunicationUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetModemPoolRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.SetModemPoolRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetModemPoolRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ModemPoolSpec)
	fc.Result = res
	return ec.marshalOModemPoolSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemPoolSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetModemPoolRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetModemPoolRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pool_id":
				return ec.fieldContext_ModemPoolSpec_pool_id(ctx, field)
			case "name":
				return ec.fieldContext_ModemPoolSpec_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemPoolSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetModemRequest_pool_id(ctx context.Context, field graphql.CollectedField, obj *model.SetModemRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetModemRequest_pool_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetModemRequest_pool_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetModemRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetModemRequest_modem(ctx context.Context, field graphql.CollectedField, obj *model.SetModemRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetModemRequest_modem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ModemInfo)
	fc.Result = res
	return ec.marshalOModemInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetModemRequest_modem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetModemRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "modem_id":
				return ec.fieldContext_ModemInfo_modem_id(ctx, field)
			case "name":
				return ec.fieldContext_ModemInfo_name(ctx, field)
			case "at_init":
				return ec.fieldContext_ModemInfo_at_init(ctx, field)
			case "at_test":
				return ec.fieldContext_ModemInfo_at_test(ctx, field)
			case "at_config":
				return ec.fieldContext_ModemInfo_at_config(ctx, field)
			case "at_dial":
				return ec.fieldContext_ModemInfo_at_dial(ctx, field)
			case "at_hangup":
				return ec.fieldContext_ModemInfo_at_hangup(ctx, field)
			case "at_escape":
				return ec.fieldContext_ModemInfo_at_escape(ctx, field)
			case "at_dsr":
				return ec.fieldContext_ModemInfo_at_dsr(ctx, field)
			case "connect_timeout":
				return ec.fieldContext_ModemInfo_connect_timeout(ctx, field)
			case "tcpip":
				return ec.fieldContext_ModemInfo_tcpip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StringValue_value(ctx context.Context, field graphql.CollectedField, obj *model.StringValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StringValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StringValue_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StringValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemConfig_max_replicas(ctx context.Context, field graphql.CollectedField, obj *model.SystemConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemConfig_max_replicas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxReplicas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemConfig_max_replicas(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemConfig_max_cascade_device_count(ctx context.Context, field graphql.CollectedField, obj *model.SystemConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemConfig_max_cascade_device_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxCascadeDeviceCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemConfig_max_cascade_device_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemConfig_max_slots_per_driver(ctx context.Context, field graphql.CollectedField, obj *model.SystemConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemConfig_max_slots_per_driver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxSlotsPerDriver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemConfig_max_slots_per_driver(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapAny_key(ctx context.Context, field graphql.CollectedField, obj *model.MapAny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapAny_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapAny_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapAny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapAny_value(ctx context.Context, field graphql.CollectedField, obj *model.MapAny) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapAny_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Any)
	fc.Result = res
	return ec.marshalOAny2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAny(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapAny_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapAny",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type_url":
				return ec.fieldContext_Any_type_url(ctx, field)
			case "value":
				return ec.fieldContext_Any_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Any", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapAttributeValue_key(ctx context.Context, field graphql.CollectedField, obj *model.MapAttributeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapAttributeValue_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapAttributeValue_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapAttributeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapAttributeValue_value(ctx context.Context, field graphql.CollectedField, obj *model.MapAttributeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapAttributeValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AttributeValue)
	fc.Result = res
	return ec.marshalOAttributeValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapAttributeValue_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapAttributeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "str_value":
				return ec.fieldContext_AttributeValue_str_value(ctx, field)
			case "int_value":
				return ec.fieldContext_AttributeValue_int_value(ctx, field)
			case "double_value":
				return ec.fieldContext_AttributeValue_double_value(ctx, field)
			case "binary_value":
				return ec.fieldContext_AttributeValue_binary_value(ctx, field)
			case "bool_value":
				return ec.fieldContext_AttributeValue_bool_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AttributeValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapListOfString_key(ctx context.Context, field graphql.CollectedField, obj *model.MapListOfString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapListOfString_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapListOfString_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapListOfString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapListOfString_value(ctx context.Context, field graphql.CollectedField, obj *model.MapListOfString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapListOfString_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfString)
	fc.Result = res
	return ec.marshalOListOfString2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapListOfString_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapListOfString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfString_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfString", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapstring_key(ctx context.Context, field graphql.CollectedField, obj *model.Mapstring) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapstring_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapstring_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapstring",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapstring_value(ctx context.Context, field graphql.CollectedField, obj *model.Mapstring) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapstring_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapstring_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapstring",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accessLevelTemplateImplementors = []string{"AccessLevelTemplate"}

func (ec *executionContext) _AccessLevelTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.AccessLevelTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accessLevelTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccessLevelTemplate")
		case "id":
			out.Values[i] = ec._AccessLevelTemplate_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._AccessLevelTemplate_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionDataImplementors = []string{"ActionData"}

func (ec *executionContext) _ActionData(ctx context.Context, sel ast.SelectionSet, obj *model.ActionData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionData")
		case "nodata":
			out.Values[i] = ec._ActionData_nodata(ctx, field, obj)
		case "billings":
			out.Values[i] = ec._ActionData_billings(ctx, field, obj)
		case "profile":
			out.Values[i] = ec._ActionData_profile(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionFwUpdateImplementors = []string{"ActionFwUpdate"}

func (ec *executionContext) _ActionFwUpdate(ctx context.Context, sel ast.SelectionSet, obj *model.ActionFwUpdate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionFwUpdateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionFwUpdate")
		case "_empty":
			out.Values[i] = ec._ActionFwUpdate__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetClockImplementors = []string{"ActionGetClock"}

func (ec *executionContext) _ActionGetClock(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetClock) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetClockImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetClock")
		case "_empty":
			out.Values[i] = ec._ActionGetClock__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetDisconnectorStateImplementors = []string{"ActionGetDisconnectorState"}

func (ec *executionContext) _ActionGetDisconnectorState(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetDisconnectorState) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetDisconnectorStateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetDisconnectorState")
		case "_empty":
			out.Values[i] = ec._ActionGetDisconnectorState__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetEventsImplementors = []string{"ActionGetEvents"}

func (ec *executionContext) _ActionGetEvents(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetEvents) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetEventsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetEvents")
		case "from":
			out.Values[i] = ec._ActionGetEvents_from(ctx, field, obj)
		case "to":
			out.Values[i] = ec._ActionGetEvents_to(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetIrregularProfileImplementors = []string{"ActionGetIrregularProfile"}

func (ec *executionContext) _ActionGetIrregularProfile(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetIrregularProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetIrregularProfileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetIrregularProfile")
		case "from":
			out.Values[i] = ec._ActionGetIrregularProfile_from(ctx, field, obj)
		case "to":
			out.Values[i] = ec._ActionGetIrregularProfile_to(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetLimiterImplementors = []string{"ActionGetLimiter"}

func (ec *executionContext) _ActionGetLimiter(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetLimiter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetLimiterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetLimiter")
		case "_empty":
			out.Values[i] = ec._ActionGetLimiter__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetPeriodicalProfileImplementors = []string{"ActionGetPeriodicalProfile"}

func (ec *executionContext) _ActionGetPeriodicalProfile(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetPeriodicalProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetPeriodicalProfileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetPeriodicalProfile")
		case "from":
			out.Values[i] = ec._ActionGetPeriodicalProfile_from(ctx, field, obj)
		case "to":
			out.Values[i] = ec._ActionGetPeriodicalProfile_to(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetRegisterImplementors = []string{"ActionGetRegister"}

func (ec *executionContext) _ActionGetRegister(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetRegister) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetRegisterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetRegister")
		case "_empty":
			out.Values[i] = ec._ActionGetRegister__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetRelayStateImplementors = []string{"ActionGetRelayState"}

func (ec *executionContext) _ActionGetRelayState(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetRelayState) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetRelayStateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetRelayState")
		case "_empty":
			out.Values[i] = ec._ActionGetRelayState__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetTouImplementors = []string{"ActionGetTou"}

func (ec *executionContext) _ActionGetTou(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetTou) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetTouImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetTou")
		case "_empty":
			out.Values[i] = ec._ActionGetTou__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionResetBillingPeriodImplementors = []string{"ActionResetBillingPeriod"}

func (ec *executionContext) _ActionResetBillingPeriod(ctx context.Context, sel ast.SelectionSet, obj *model.ActionResetBillingPeriod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionResetBillingPeriodImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionResetBillingPeriod")
		case "_empty":
			out.Values[i] = ec._ActionResetBillingPeriod__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionResultImplementors = []string{"ActionResult"}

func (ec *executionContext) _ActionResult(ctx context.Context, sel ast.SelectionSet, obj *model.ActionResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionResult")
		case "action_id":
			out.Values[i] = ec._ActionResult_action_id(ctx, field, obj)
		case "status":
			out.Values[i] = ec._ActionResult_status(ctx, field, obj)
		case "data":
			out.Values[i] = ec._ActionResult_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSetDisconnectorStateImplementors = []string{"ActionSetDisconnectorState"}

func (ec *executionContext) _ActionSetDisconnectorState(ctx context.Context, sel ast.SelectionSet, obj *model.ActionSetDisconnectorState) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSetDisconnectorStateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSetDisconnectorState")
		case "_empty":
			out.Values[i] = ec._ActionSetDisconnectorState__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSetLimiterImplementors = []string{"ActionSetLimiter"}

func (ec *executionContext) _ActionSetLimiter(ctx context.Context, sel ast.SelectionSet, obj *model.ActionSetLimiter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSetLimiterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSetLimiter")
		case "_empty":
			out.Values[i] = ec._ActionSetLimiter__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSetRelayStateImplementors = []string{"ActionSetRelayState"}

func (ec *executionContext) _ActionSetRelayState(ctx context.Context, sel ast.SelectionSet, obj *model.ActionSetRelayState) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSetRelayStateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSetRelayState")
		case "_empty":
			out.Values[i] = ec._ActionSetRelayState__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSetTouImplementors = []string{"ActionSetTou"}

func (ec *executionContext) _ActionSetTou(ctx context.Context, sel ast.SelectionSet, obj *model.ActionSetTou) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSetTouImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSetTou")
		case "_empty":
			out.Values[i] = ec._ActionSetTou__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSyncClockImplementors = []string{"ActionSyncClock"}

func (ec *executionContext) _ActionSyncClock(ctx context.Context, sel ast.SelectionSet, obj *model.ActionSyncClock) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSyncClockImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSyncClock")
		case "_empty":
			out.Values[i] = ec._ActionSyncClock__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var addDevicesToGroupRequestImplementors = []string{"AddDevicesToGroupRequest"}

func (ec *executionContext) _AddDevicesToGroupRequest(ctx context.Context, sel ast.SelectionSet, obj *model.AddDevicesToGroupRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addDevicesToGroupRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddDevicesToGroupRequest")
		case "group_id":
			out.Values[i] = ec._AddDevicesToGroupRequest_group_id(ctx, field, obj)
		case "device_id":
			out.Values[i] = ec._AddDevicesToGroupRequest_device_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var anyImplementors = []string{"Any"}

func (ec *executionContext) _Any(ctx context.Context, sel ast.SelectionSet, obj *model.Any) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, anyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Any")
		case "type_url":
			out.Values[i] = ec._Any_type_url(ctx, field, obj)
		case "value":
			out.Values[i] = ec._Any_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var applicationProtocolTemplateImplementors = []string{"ApplicationProtocolTemplate"}

func (ec *executionContext) _ApplicationProtocolTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.ApplicationProtocolTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationProtocolTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplicationProtocolTemplate")
		case "id":
			out.Values[i] = ec._ApplicationProtocolTemplate_id(ctx, field, obj)
		case "protocol":
			out.Values[i] = ec._ApplicationProtocolTemplate_protocol(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._ApplicationProtocolTemplate_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var attributeDefinitionImplementors = []string{"AttributeDefinition"}

func (ec *executionContext) _AttributeDefinition(ctx context.Context, sel ast.SelectionSet, obj *model.AttributeDefinition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attributeDefinitionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AttributeDefinition")
		case "name":
			out.Values[i] = ec._AttributeDefinition_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._AttributeDefinition_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec._AttributeDefinition_type(ctx, field, obj)
		case "mandatory":
			out.Values[i] = ec._AttributeDefinition_mandatory(ctx, field, obj)
		case "default_value":
			out.Values[i] = ec._AttributeDefinition_default_value(ctx, field, obj)
		case "options":
			out.Values[i] = ec._AttributeDefinition_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var attributeValueImplementors = []string{"AttributeValue"}

func (ec *executionContext) _AttributeValue(ctx context.Context, sel ast.SelectionSet, obj *model.AttributeValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attributeValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AttributeValue")
		case "str_value":
			out.Values[i] = ec._AttributeValue_str_value(ctx, field, obj)
		case "int_value":
			out.Values[i] = ec._AttributeValue_int_value(ctx, field, obj)
		case "double_value":
			out.Values[i] = ec._AttributeValue_double_value(ctx, field, obj)
		case "binary_value":
			out.Values[i] = ec._AttributeValue_binary_value(ctx, field, obj)
		case "bool_value":
			out.Values[i] = ec._AttributeValue_bool_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var billingValueImplementors = []string{"BillingValue"}

func (ec *executionContext) _BillingValue(ctx context.Context, sel ast.SelectionSet, obj *model.BillingValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, billingValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BillingValue")
		case "timestamp":
			out.Values[i] = ec._BillingValue_timestamp(ctx, field, obj)
		case "unit":
			out.Values[i] = ec._BillingValue_unit(ctx, field, obj)
		case "value":
			out.Values[i] = ec._BillingValue_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var billingValuesImplementors = []string{"BillingValues"}

func (ec *executionContext) _BillingValues(ctx context.Context, sel ast.SelectionSet, obj *model.BillingValues) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, billingValuesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BillingValues")
		case "values":
			out.Values[i] = ec._BillingValues_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bulkImplementors = []string{"Bulk"}

func (ec *executionContext) _Bulk(ctx context.Context, sel ast.SelectionSet, obj *model.Bulk) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bulkImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Bulk")
		case "spec":
			out.Values[i] = ec._Bulk_spec(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Bulk_status(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._Bulk_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bulkJobImplementors = []string{"BulkJob"}

func (ec *executionContext) _BulkJob(ctx context.Context, sel ast.SelectionSet, obj *model.BulkJob) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bulkJobImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BulkJob")
		case "job_id":
			out.Values[i] = ec._BulkJob_job_id(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BulkJob_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bulkSpecImplementors = []string{"BulkSpec"}

func (ec *executionContext) _BulkSpec(ctx context.Context, sel ast.SelectionSet, obj *model.BulkSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bulkSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BulkSpec")
		case "correlation_id":
			out.Values[i] = ec._BulkSpec_correlation_id(ctx, field, obj)
		case "driver_type":
			out.Values[i] = ec._BulkSpec_driver_type(ctx, field, obj)
		case "devices":
			out.Values[i] = ec._BulkSpec_devices(ctx, field, obj)
		case "custom_devices":
			out.Values[i] = ec._BulkSpec_custom_devices(ctx, field, obj)
		case "settings":
			out.Values[i] = ec._BulkSpec_settings(ctx, field, obj)
		case "actions":
			out.Values[i] = ec._BulkSpec_actions(ctx, field, obj)
		case "webhook_url":
			out.Values[i] = ec._BulkSpec_webhook_url(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bulkStatusImplementors = []string{"BulkStatus"}

func (ec *executionContext) _BulkStatus(ctx context.Context, sel ast.SelectionSet, obj *model.BulkStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bulkStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BulkStatus")
		case "status":
			out.Values[i] = ec._BulkStatus_status(ctx, field, obj)
		case "jobs":
			out.Values[i] = ec._BulkStatus_jobs(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var communicationTemplateImplementors = []string{"CommunicationTemplate"}

func (ec *executionContext) _CommunicationTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.CommunicationTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, communicationTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommunicationTemplate")
		case "type":
			out.Values[i] = ec._CommunicationTemplate_type(ctx, field, obj)
		case "datalinks":
			out.Values[i] = ec._CommunicationTemplate_datalinks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var communicationUnitImplementors = []string{"CommunicationUnit"}

func (ec *executionContext) _CommunicationUnit(ctx context.Context, sel ast.SelectionSet, obj *model.CommunicationUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, communicationUnitImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommunicationUnit")
		case "spec":
			out.Values[i] = ec._CommunicationUnit_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CommunicationUnit_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var communicationUnitSpecImplementors = []string{"CommunicationUnitSpec"}

func (ec *executionContext) _CommunicationUnitSpec(ctx context.Context, sel ast.SelectionSet, obj *model.CommunicationUnitSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, communicationUnitSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommunicationUnitSpec")
		case "external_id":
			out.Values[i] = ec._CommunicationUnitSpec_external_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._CommunicationUnitSpec_name(ctx, field, obj)
		case "connection_info":
			out.Values[i] = ec._CommunicationUnitSpec_connection_info(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionInfoImplementors = []string{"ConnectionInfo"}

func (ec *executionContext) _ConnectionInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionInfo")
		case "tcpip":
			out.Values[i] = ec._ConnectionInfo_tcpip(ctx, field, obj)
		case "modem_pool":
			out.Values[i] = ec._ConnectionInfo_modem_pool(ctx, field, obj)
		case "serial_over_ip":
			out.Values[i] = ec._ConnectionInfo_serial_over_ip(ctx, field, obj)
		case "link_protocol":
			out.Values[i] = ec._ConnectionInfo_link_protocol(ctx, field, obj)
		case "custom_grouping_id":
			out.Values[i] = ec._ConnectionInfo_custom_grouping_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionTypeControlledSerialImplementors = []string{"ConnectionTypeControlledSerial"}

func (ec *executionContext) _ConnectionTypeControlledSerial(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionTypeControlledSerial) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionTypeControlledSerialImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionTypeControlledSerial")
		case "direct":
			out.Values[i] = ec._ConnectionTypeControlledSerial_direct(ctx, field, obj)
		case "moxa":
			out.Values[i] = ec._ConnectionTypeControlledSerial_moxa(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionTypeDirectTcpIpImplementors = []string{"ConnectionTypeDirectTcpIp"}

func (ec *executionContext) _ConnectionTypeDirectTcpIp(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionTypeDirectTCPIP) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionTypeDirectTcpIpImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionTypeDirectTcpIp")
		case "host":
			out.Values[i] = ec._ConnectionTypeDirectTcpIp_host(ctx, field, obj)
		case "port":
			out.Values[i] = ec._ConnectionTypeDirectTcpIp_port(ctx, field, obj)
		case "timeout":
			out.Values[i] = ec._ConnectionTypeDirectTcpIp_timeout(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionTypeModemPoolImplementors = []string{"ConnectionTypeModemPool"}

func (ec *executionContext) _ConnectionTypeModemPool(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionTypeModemPool) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionTypeModemPoolImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionTypeModemPool")
		case "number":
			out.Values[i] = ec._ConnectionTypeModemPool_number(ctx, field, obj)
		case "pool_id":
			out.Values[i] = ec._ConnectionTypeModemPool_pool_id(ctx, field, obj)
		case "modem":
			out.Values[i] = ec._ConnectionTypeModemPool_modem(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionTypeSerialDirectImplementors = []string{"ConnectionTypeSerialDirect"}

func (ec *executionContext) _ConnectionTypeSerialDirect(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionTypeSerialDirect) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionTypeSerialDirectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionTypeSerialDirect")
		case "host":
			out.Values[i] = ec._ConnectionTypeSerialDirect_host(ctx, field, obj)
		case "port":
			out.Values[i] = ec._ConnectionTypeSerialDirect_port(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionTypeSerialMoxaImplementors = []string{"ConnectionTypeSerialMoxa"}

func (ec *executionContext) _ConnectionTypeSerialMoxa(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionTypeSerialMoxa) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionTypeSerialMoxaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionTypeSerialMoxa")
		case "host":
			out.Values[i] = ec._ConnectionTypeSerialMoxa_host(ctx, field, obj)
		case "dataPort":
			out.Values[i] = ec._ConnectionTypeSerialMoxa_dataPort(ctx, field, obj)
		case "commandPort":
			out.Values[i] = ec._ConnectionTypeSerialMoxa_commandPort(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createBulkRequestImplementors = []string{"CreateBulkRequest"}

func (ec *executionContext) _CreateBulkRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateBulkRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createBulkRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateBulkRequest")
		case "spec":
			out.Values[i] = ec._CreateBulkRequest_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CreateBulkRequest_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createCommunicationUnitRequestImplementors = []string{"CreateCommunicationUnitRequest"}

func (ec *executionContext) _CreateCommunicationUnitRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateCommunicationUnitRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCommunicationUnitRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateCommunicationUnitRequest")
		case "spec":
			out.Values[i] = ec._CreateCommunicationUnitRequest_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CreateCommunicationUnitRequest_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createDeviceGroupRequestImplementors = []string{"CreateDeviceGroupRequest"}

func (ec *executionContext) _CreateDeviceGroupRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateDeviceGroupRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createDeviceGroupRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateDeviceGroupRequest")
		case "spec":
			out.Values[i] = ec._CreateDeviceGroupRequest_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CreateDeviceGroupRequest_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createDeviceRequestImplementors = []string{"CreateDeviceRequest"}

func (ec *executionContext) _CreateDeviceRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateDeviceRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createDeviceRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateDeviceRequest")
		case "spec":
			out.Values[i] = ec._CreateDeviceRequest_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CreateDeviceRequest_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dataLinkTemplateImplementors = []string{"DataLinkTemplate"}

func (ec *executionContext) _DataLinkTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.DataLinkTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataLinkTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataLinkTemplate")
		case "link_protocol":
			out.Values[i] = ec._DataLinkTemplate_link_protocol(ctx, field, obj)
		case "app_protocol_refs":
			out.Values[i] = ec._DataLinkTemplate_app_protocol_refs(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._DataLinkTemplate_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceImplementors = []string{"Device"}

func (ec *executionContext) _Device(ctx context.Context, sel ast.SelectionSet, obj *model.Device) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Device")
		case "spec":
			out.Values[i] = ec._Device_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._Device_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceCommunicationUnitImplementors = []string{"DeviceCommunicationUnit"}

func (ec *executionContext) _DeviceCommunicationUnit(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceCommunicationUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceCommunicationUnitImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceCommunicationUnit")
		case "communication_unit_id":
			out.Values[i] = ec._DeviceCommunicationUnit_communication_unit_id(ctx, field, obj)
		case "app_protocol":
			out.Values[i] = ec._DeviceCommunicationUnit_app_protocol(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceGroupImplementors = []string{"DeviceGroup"}

func (ec *executionContext) _DeviceGroup(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceGroupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceGroup")
		case "spec":
			out.Values[i] = ec._DeviceGroup_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._DeviceGroup_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceGroupSpecImplementors = []string{"DeviceGroupSpec"}

func (ec *executionContext) _DeviceGroupSpec(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceGroupSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceGroupSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceGroupSpec")
		case "external_id":
			out.Values[i] = ec._DeviceGroupSpec_external_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._DeviceGroupSpec_name(ctx, field, obj)
		case "device_id":
			out.Values[i] = ec._DeviceGroupSpec_device_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceSpecImplementors = []string{"DeviceSpec"}

func (ec *executionContext) _DeviceSpec(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceSpec")
		case "id":
			out.Values[i] = ec._DeviceSpec_id(ctx, field, obj)
		case "external_id":
			out.Values[i] = ec._DeviceSpec_external_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._DeviceSpec_name(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._DeviceSpec_attributes(ctx, field, obj)
		case "communication_unit_link":
			out.Values[i] = ec._DeviceSpec_communication_unit_link(ctx, field, obj)
		case "timezone":
			out.Values[i] = ec._DeviceSpec_timezone(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var driverImplementors = []string{"Driver"}

func (ec *executionContext) _Driver(ctx context.Context, sel ast.SelectionSet, obj *model.Driver) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Driver")
		case "spec":
			out.Values[i] = ec._Driver_spec(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var driverSpecImplementors = []string{"DriverSpec"}

func (ec *executionContext) _DriverSpec(ctx context.Context, sel ast.SelectionSet, obj *model.DriverSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverSpec")
		case "version":
			out.Values[i] = ec._DriverSpec_version(ctx, field, obj)
		case "listening_port":
			out.Values[i] = ec._DriverSpec_listening_port(ctx, field, obj)
		case "driver_type":
			out.Values[i] = ec._DriverSpec_driver_type(ctx, field, obj)
		case "max_concurrent_jobs":
			out.Values[i] = ec._DriverSpec_max_concurrent_jobs(ctx, field, obj)
		case "max_cascade_depth":
			out.Values[i] = ec._DriverSpec_max_cascade_depth(ctx, field, obj)
		case "typical_mem_usage":
			out.Values[i] = ec._DriverSpec_typical_mem_usage(ctx, field, obj)
		case "templates":
			out.Values[i] = ec._DriverSpec_templates(ctx, field, obj)
		case "display_name":
			out.Values[i] = ec._DriverSpec_display_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var driverTemplatesImplementors = []string{"DriverTemplates"}

func (ec *executionContext) _DriverTemplates(ctx context.Context, sel ast.SelectionSet, obj *model.DriverTemplates) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverTemplatesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverTemplates")
		case "communication_templates":
			out.Values[i] = ec._DriverTemplates_communication_templates(ctx, field, obj)
		case "app_protocols":
			out.Values[i] = ec._DriverTemplates_app_protocols(ctx, field, obj)
		case "action_attributes":
			out.Values[i] = ec._DriverTemplates_action_attributes(ctx, field, obj)
		case "access_templates":
			out.Values[i] = ec._DriverTemplates_access_templates(ctx, field, obj)
		case "action_constraints":
			out.Values[i] = ec._DriverTemplates_action_constraints(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var emptyImplementors = []string{"Empty"}

func (ec *executionContext) _Empty(ctx context.Context, sel ast.SelectionSet, obj *model.Empty) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emptyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Empty")
		case "_empty":
			out.Values[i] = ec._Empty__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobActionImplementors = []string{"JobAction"}

func (ec *executionContext) _JobAction(ctx context.Context, sel ast.SelectionSet, obj *model.JobAction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobActionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobAction")
		case "action_id":
			out.Values[i] = ec._JobAction_action_id(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._JobAction_attributes(ctx, field, obj)
		case "get_register":
			out.Values[i] = ec._JobAction_get_register(ctx, field, obj)
		case "get_periodical_profile":
			out.Values[i] = ec._JobAction_get_periodical_profile(ctx, field, obj)
		case "get_irregular_profile":
			out.Values[i] = ec._JobAction_get_irregular_profile(ctx, field, obj)
		case "get_events":
			out.Values[i] = ec._JobAction_get_events(ctx, field, obj)
		case "get_clock":
			out.Values[i] = ec._JobAction_get_clock(ctx, field, obj)
		case "sync_clock":
			out.Values[i] = ec._JobAction_sync_clock(ctx, field, obj)
		case "get_relay_state":
			out.Values[i] = ec._JobAction_get_relay_state(ctx, field, obj)
		case "set_relay_state":
			out.Values[i] = ec._JobAction_set_relay_state(ctx, field, obj)
		case "get_disconnector_state":
			out.Values[i] = ec._JobAction_get_disconnector_state(ctx, field, obj)
		case "set_disconnector_state":
			out.Values[i] = ec._JobAction_set_disconnector_state(ctx, field, obj)
		case "get_tou":
			out.Values[i] = ec._JobAction_get_tou(ctx, field, obj)
		case "set_tou":
			out.Values[i] = ec._JobAction_set_tou(ctx, field, obj)
		case "get_limiter":
			out.Values[i] = ec._JobAction_get_limiter(ctx, field, obj)
		case "set_limiter":
			out.Values[i] = ec._JobAction_set_limiter(ctx, field, obj)
		case "reset_billing_period":
			out.Values[i] = ec._JobAction_reset_billing_period(ctx, field, obj)
		case "fw_update":
			out.Values[i] = ec._JobAction_fw_update(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobActionAttributesImplementors = []string{"JobActionAttributes"}

func (ec *executionContext) _JobActionAttributes(ctx context.Context, sel ast.SelectionSet, obj *model.JobActionAttributes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobActionAttributesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobActionAttributes")
		case "type":
			out.Values[i] = ec._JobActionAttributes_type(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._JobActionAttributes_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobActionContraintsImplementors = []string{"JobActionContraints"}

func (ec *executionContext) _JobActionContraints(ctx context.Context, sel ast.SelectionSet, obj *model.JobActionContraints) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobActionContraintsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobActionContraints")
		case "get_register_type_name":
			out.Values[i] = ec._JobActionContraints_get_register_type_name(ctx, field, obj)
		case "get_register_type_attributes":
			out.Values[i] = ec._JobActionContraints_get_register_type_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobDeviceImplementors = []string{"JobDevice"}

func (ec *executionContext) _JobDevice(ctx context.Context, sel ast.SelectionSet, obj *model.JobDevice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobDeviceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobDevice")
		case "job_id":
			out.Values[i] = ec._JobDevice_job_id(ctx, field, obj)
		case "device_id":
			out.Values[i] = ec._JobDevice_device_id(ctx, field, obj)
		case "external_id":
			out.Values[i] = ec._JobDevice_external_id(ctx, field, obj)
		case "device_attributes":
			out.Values[i] = ec._JobDevice_device_attributes(ctx, field, obj)
		case "connection_info":
			out.Values[i] = ec._JobDevice_connection_info(ctx, field, obj)
		case "app_protocol":
			out.Values[i] = ec._JobDevice_app_protocol(ctx, field, obj)
		case "timezone":
			out.Values[i] = ec._JobDevice_timezone(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobDeviceIdImplementors = []string{"JobDeviceId"}

func (ec *executionContext) _JobDeviceId(ctx context.Context, sel ast.SelectionSet, obj *model.JobDeviceID) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobDeviceIdImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobDeviceId")
		case "job_id":
			out.Values[i] = ec._JobDeviceId_job_id(ctx, field, obj)
		case "device_id":
			out.Values[i] = ec._JobDeviceId_device_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobSettingsImplementors = []string{"JobSettings"}

func (ec *executionContext) _JobSettings(ctx context.Context, sel ast.SelectionSet, obj *model.JobSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobSettings")
		case "max_duration":
			out.Values[i] = ec._JobSettings_max_duration(ctx, field, obj)
		case "priority":
			out.Values[i] = ec._JobSettings_priority(ctx, field, obj)
		case "attempts":
			out.Values[i] = ec._JobSettings_attempts(ctx, field, obj)
		case "retry_delay":
			out.Values[i] = ec._JobSettings_retry_delay(ctx, field, obj)
		case "defer_start":
			out.Values[i] = ec._JobSettings_defer_start(ctx, field, obj)
		case "expires_at":
			out.Values[i] = ec._JobSettings_expires_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobStatusImplementors = []string{"JobStatus"}

func (ec *executionContext) _JobStatus(ctx context.Context, sel ast.SelectionSet, obj *model.JobStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobStatus")
		case "status":
			out.Values[i] = ec._JobStatus_status(ctx, field, obj)
		case "code":
			out.Values[i] = ec._JobStatus_code(ctx, field, obj)
		case "results":
			out.Values[i] = ec._JobStatus_results(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._JobStatus_created_at(ctx, field, obj)
		case "started_at":
			out.Values[i] = ec._JobStatus_started_at(ctx, field, obj)
		case "finished_at":
			out.Values[i] = ec._JobStatus_finished_at(ctx, field, obj)
		case "attempts_done":
			out.Values[i] = ec._JobStatus_attempts_done(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfBulkImplementors = []string{"ListOfBulk"}

func (ec *executionContext) _ListOfBulk(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfBulk) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfBulkImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfBulk")
		case "items":
			out.Values[i] = ec._ListOfBulk_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfCommunicationUnitImplementors = []string{"ListOfCommunicationUnit"}

func (ec *executionContext) _ListOfCommunicationUnit(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfCommunicationUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfCommunicationUnitImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfCommunicationUnit")
		case "items":
			out.Values[i] = ec._ListOfCommunicationUnit_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfDeviceImplementors = []string{"ListOfDevice"}

func (ec *executionContext) _ListOfDevice(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfDevice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfDeviceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfDevice")
		case "items":
			out.Values[i] = ec._ListOfDevice_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfDeviceGroupImplementors = []string{"ListOfDeviceGroup"}

func (ec *executionContext) _ListOfDeviceGroup(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfDeviceGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfDeviceGroupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfDeviceGroup")
		case "items":
			out.Values[i] = ec._ListOfDeviceGroup_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfDriverImplementors = []string{"ListOfDriver"}

func (ec *executionContext) _ListOfDriver(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfDriver) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfDriverImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfDriver")
		case "items":
			out.Values[i] = ec._ListOfDriver_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfJobDeviceImplementors = []string{"ListOfJobDevice"}

func (ec *executionContext) _ListOfJobDevice(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfJobDevice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfJobDeviceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfJobDevice")
		case "list":
			out.Values[i] = ec._ListOfJobDevice_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfJobDeviceIdImplementors = []string{"ListOfJobDeviceId"}

func (ec *executionContext) _ListOfJobDeviceId(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfJobDeviceID) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfJobDeviceIdImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfJobDeviceId")
		case "list":
			out.Values[i] = ec._ListOfJobDeviceId_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfModemPoolImplementors = []string{"ListOfModemPool"}

func (ec *executionContext) _ListOfModemPool(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfModemPool) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfModemPoolImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfModemPool")
		case "pools":
			out.Values[i] = ec._ListOfModemPool_pools(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfStringImplementors = []string{"ListOfString"}

func (ec *executionContext) _ListOfString(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfString) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfStringImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfString")
		case "items":
			out.Values[i] = ec._ListOfString_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listSelectorImplementors = []string{"ListSelector"}

func (ec *executionContext) _ListSelector(ctx context.Context, sel ast.SelectionSet, obj *model.ListSelector) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listSelectorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListSelector")
		case "page_size":
			out.Values[i] = ec._ListSelector_page_size(ctx, field, obj)
		case "offset":
			out.Values[i] = ec._ListSelector_offset(ctx, field, obj)
		case "sort_by":
			out.Values[i] = ec._ListSelector_sort_by(ctx, field, obj)
		case "filter_by":
			out.Values[i] = ec._ListSelector_filter_by(ctx, field, obj)
		case "fields":
			out.Values[i] = ec._ListSelector_fields(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listSelectorFilterByImplementors = []string{"ListSelectorFilterBy"}

func (ec *executionContext) _ListSelectorFilterBy(ctx context.Context, sel ast.SelectionSet, obj *model.ListSelectorFilterBy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listSelectorFilterByImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListSelectorFilterBy")
		case "field_id":
			out.Values[i] = ec._ListSelectorFilterBy_field_id(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._ListSelectorFilterBy_operator(ctx, field, obj)
		case "text":
			out.Values[i] = ec._ListSelectorFilterBy_text(ctx, field, obj)
		case "integer":
			out.Values[i] = ec._ListSelectorFilterBy_integer(ctx, field, obj)
		case "number":
			out.Values[i] = ec._ListSelectorFilterBy_number(ctx, field, obj)
		case "boolean":
			out.Values[i] = ec._ListSelectorFilterBy_boolean(ctx, field, obj)
		case "date":
			out.Values[i] = ec._ListSelectorFilterBy_date(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listSelectorSortByImplementors = []string{"ListSelectorSortBy"}

func (ec *executionContext) _ListSelectorSortBy(ctx context.Context, sel ast.SelectionSet, obj *model.ListSelectorSortBy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listSelectorSortByImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListSelectorSortBy")
		case "field_id":
			out.Values[i] = ec._ListSelectorSortBy_field_id(ctx, field, obj)
		case "desc":
			out.Values[i] = ec._ListSelectorSortBy_desc(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var measuredValueImplementors = []string{"MeasuredValue"}

func (ec *executionContext) _MeasuredValue(ctx context.Context, sel ast.SelectionSet, obj *model.MeasuredValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, measuredValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MeasuredValue")
		case "status":
			out.Values[i] = ec._MeasuredValue_status(ctx, field, obj)
		case "exponent":
			out.Values[i] = ec._MeasuredValue_exponent(ctx, field, obj)
		case "double_value":
			out.Values[i] = ec._MeasuredValue_double_value(ctx, field, obj)
		case "int_value":
			out.Values[i] = ec._MeasuredValue_int_value(ctx, field, obj)
		case "str_value":
			out.Values[i] = ec._MeasuredValue_str_value(ctx, field, obj)
		case "timestamp_value":
			out.Values[i] = ec._MeasuredValue_timestamp_value(ctx, field, obj)
		case "timestamp_tz_value":
			out.Values[i] = ec._MeasuredValue_timestamp_tz_value(ctx, field, obj)
		case "bool_value":
			out.Values[i] = ec._MeasuredValue_bool_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metadataFieldsImplementors = []string{"MetadataFields"}

func (ec *executionContext) _MetadataFields(ctx context.Context, sel ast.SelectionSet, obj *model.MetadataFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metadataFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetadataFields")
		case "id":
			out.Values[i] = ec._MetadataFields_id(ctx, field, obj)
		case "generation":
			out.Values[i] = ec._MetadataFields_generation(ctx, field, obj)
		case "fields":
			out.Values[i] = ec._MetadataFields_fields(ctx, field, obj)
		case "managed_fields":
			out.Values[i] = ec._MetadataFields_managed_fields(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var modemInfoImplementors = []string{"ModemInfo"}

func (ec *executionContext) _ModemInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ModemInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, modemInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModemInfo")
		case "modem_id":
			out.Values[i] = ec._ModemInfo_modem_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ModemInfo_name(ctx, field, obj)
		case "at_init":
			out.Values[i] = ec._ModemInfo_at_init(ctx, field, obj)
		case "at_test":
			out.Values[i] = ec._ModemInfo_at_test(ctx, field, obj)
		case "at_config":
			out.Values[i] = ec._ModemInfo_at_config(ctx, field, obj)
		case "at_dial":
			out.Values[i] = ec._ModemInfo_at_dial(ctx, field, obj)
		case "at_hangup":
			out.Values[i] = ec._ModemInfo_at_hangup(ctx, field, obj)
		case "at_escape":
			out.Values[i] = ec._ModemInfo_at_escape(ctx, field, obj)
		case "at_dsr":
			out.Values[i] = ec._ModemInfo_at_dsr(ctx, field, obj)
		case "connect_timeout":
			out.Values[i] = ec._ModemInfo_connect_timeout(ctx, field, obj)
		case "tcpip":
			out.Values[i] = ec._ModemInfo_tcpip(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var modemPoolImplementors = []string{"ModemPool"}

func (ec *executionContext) _ModemPool(ctx context.Context, sel ast.SelectionSet, obj *model.ModemPool) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, modemPoolImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModemPool")
		case "spec":
			out.Values[i] = ec._ModemPool_spec(ctx, field, obj)
		case "status":
			out.Values[i] = ec._ModemPool_status(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._ModemPool_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var modemPoolSpecImplementors = []string{"ModemPoolSpec"}

func (ec *executionContext) _ModemPoolSpec(ctx context.Context, sel ast.SelectionSet, obj *model.ModemPoolSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, modemPoolSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModemPoolSpec")
		case "pool_id":
			out.Values[i] = ec._ModemPoolSpec_pool_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ModemPoolSpec_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var modemPoolStatusImplementors = []string{"ModemPoolStatus"}

func (ec *executionContext) _ModemPoolStatus(ctx context.Context, sel ast.SelectionSet, obj *model.ModemPoolStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, modemPoolStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModemPoolStatus")
		case "modems":
			out.Values[i] = ec._ModemPoolStatus_modems(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var profileBlokImplementors = []string{"ProfileBlok"}

func (ec *executionContext) _ProfileBlok(ctx context.Context, sel ast.SelectionSet, obj *model.ProfileBlok) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, profileBlokImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProfileBlok")
		case "start_timestamp":
			out.Values[i] = ec._ProfileBlok_start_timestamp(ctx, field, obj)
		case "values":
			out.Values[i] = ec._ProfileBlok_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var profileValuesImplementors = []string{"ProfileValues"}

func (ec *executionContext) _ProfileValues(ctx context.Context, sel ast.SelectionSet, obj *model.ProfileValues) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, profileValuesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProfileValues")
		case "period":
			out.Values[i] = ec._ProfileValues_period(ctx, field, obj)
		case "unit":
			out.Values[i] = ec._ProfileValues_unit(ctx, field, obj)
		case "blocks":
			out.Values[i] = ec._ProfileValues_blocks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "createBulk":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createBulk(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listBulks":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listBulks(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getBulk":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBulk(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cancelBulk":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cancelBulk(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getConfig":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getConfig(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "setConfig":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_setConfig(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createCommunicationUnit":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createCommunicationUnit(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listCommunicationUnits":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listCommunicationUnits(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getCommunicationUnit":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCommunicationUnit(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createDevice":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createDevice(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listDevices":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listDevices(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDevice":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDevice(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "setDeviceCommunicationUnits":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_setDeviceCommunicationUnits(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDevicesCommunicationUnits":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDevicesCommunicationUnits(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createDeviceGroup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createDeviceGroup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listDeviceGroups":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listDeviceGroups(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDeviceGroup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceGroup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "addDevicesToGroup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_addDevicesToGroup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "removeDevicesFromGroup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_removeDevicesFromGroup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listModemPools":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listModemPools(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getModemPool":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getModemPool(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createModemPool":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createModemPool(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateModemPool":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateModemPool(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deleteModemPool":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteModemPool(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createModem":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createModem(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateModem":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateModem(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deleteModem":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteModem(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listDrivers":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listDrivers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDriver":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDriver(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var removeDevicesFromGroupRequestImplementors = []string{"RemoveDevicesFromGroupRequest"}

func (ec *executionContext) _RemoveDevicesFromGroupRequest(ctx context.Context, sel ast.SelectionSet, obj *model.RemoveDevicesFromGroupRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, removeDevicesFromGroupRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoveDevicesFromGroupRequest")
		case "group_id":
			out.Values[i] = ec._RemoveDevicesFromGroupRequest_group_id(ctx, field, obj)
		case "device_id":
			out.Values[i] = ec._RemoveDevicesFromGroupRequest_device_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var setDeviceCommunicationUnitsRequestImplementors = []string{"SetDeviceCommunicationUnitsRequest"}

func (ec *executionContext) _SetDeviceCommunicationUnitsRequest(ctx context.Context, sel ast.SelectionSet, obj *model.SetDeviceCommunicationUnitsRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, setDeviceCommunicationUnitsRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SetDeviceCommunicationUnitsRequest")
		case "device_id":
			out.Values[i] = ec._SetDeviceCommunicationUnitsRequest_device_id(ctx, field, obj)
		case "communication_units":
			out.Values[i] = ec._SetDeviceCommunicationUnitsRequest_communication_units(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var setModemPoolRequestImplementors = []string{"SetModemPoolRequest"}

func (ec *executionContext) _SetModemPoolRequest(ctx context.Context, sel ast.SelectionSet, obj *model.SetModemPoolRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, setModemPoolRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SetModemPoolRequest")
		case "spec":
			out.Values[i] = ec._SetModemPoolRequest_spec(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var setModemRequestImplementors = []string{"SetModemRequest"}

func (ec *executionContext) _SetModemRequest(ctx context.Context, sel ast.SelectionSet, obj *model.SetModemRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, setModemRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SetModemRequest")
		case "pool_id":
			out.Values[i] = ec._SetModemRequest_pool_id(ctx, field, obj)
		case "modem":
			out.Values[i] = ec._SetModemRequest_modem(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var stringValueImplementors = []string{"StringValue"}

func (ec *executionContext) _StringValue(ctx context.Context, sel ast.SelectionSet, obj *model.StringValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stringValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StringValue")
		case "value":
			out.Values[i] = ec._StringValue_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemConfigImplementors = []string{"SystemConfig"}

func (ec *executionContext) _SystemConfig(ctx context.Context, sel ast.SelectionSet, obj *model.SystemConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemConfigImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemConfig")
		case "max_replicas":
			out.Values[i] = ec._SystemConfig_max_replicas(ctx, field, obj)
		case "max_cascade_device_count":
			out.Values[i] = ec._SystemConfig_max_cascade_device_count(ctx, field, obj)
		case "max_slots_per_driver":
			out.Values[i] = ec._SystemConfig_max_slots_per_driver(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var _mapAnyImplementors = []string{"_mapAny"}

func (ec *executionContext) __mapAny(ctx context.Context, sel ast.SelectionSet, obj *model.MapAny) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _mapAnyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_mapAny")
		case "key":
			out.Values[i] = ec.__mapAny_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec.__mapAny_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var _mapAttributeValueImplementors = []string{"_mapAttributeValue"}

func (ec *executionContext) __mapAttributeValue(ctx context.Context, sel ast.SelectionSet, obj *model.MapAttributeValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _mapAttributeValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_mapAttributeValue")
		case "key":
			out.Values[i] = ec.__mapAttributeValue_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec.__mapAttributeValue_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var _mapListOfStringImplementors = []string{"_mapListOfString"}

func (ec *executionContext) __mapListOfString(ctx context.Context, sel ast.SelectionSet, obj *model.MapListOfString) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _mapListOfStringImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_mapListOfString")
		case "key":
			out.Values[i] = ec.__mapListOfString_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec.__mapListOfString_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var _mapstringImplementors = []string{"_mapstring"}

func (ec *executionContext) __mapstring(ctx context.Context, sel ast.SelectionSet, obj *model.Mapstring) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _mapstringImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_mapstring")
		case "key":
			out.Values[i] = ec.__mapstring_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec.__mapstring_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAccessLevelTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAccessLevelTemplate(ctx context.Context, sel ast.SelectionSet, v []*model.AccessLevelTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAccessLevelTemplate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAccessLevelTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAccessLevelTemplate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAccessLevelTemplate(ctx context.Context, sel ast.SelectionSet, v *model.AccessLevelTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccessLevelTemplate(ctx, sel, v)
}

func (ec *executionContext) marshalOActionData2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionData(ctx context.Context, sel ast.SelectionSet, v *model.ActionData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionData(ctx, sel, v)
}

func (ec *executionContext) marshalOActionFwUpdate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionFwUpdate(ctx context.Context, sel ast.SelectionSet, v *model.ActionFwUpdate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionFwUpdate(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetClock2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetClock(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetClock) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetClock(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetDisconnectorState2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetDisconnectorState(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetDisconnectorState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetDisconnectorState(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetEvents2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetEvents(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetEvents) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetEvents(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetIrregularProfile2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetIrregularProfile(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetIrregularProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetIrregularProfile(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetLimiter2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetLimiter(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetLimiter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetLimiter(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetPeriodicalProfile2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetPeriodicalProfile(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetPeriodicalProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetPeriodicalProfile(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetRegister2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetRegister(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetRegister) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetRegister(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetRelayState2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetRelayState(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetRelayState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetRelayState(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetTou2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionGetTou(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetTou) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetTou(ctx, sel, v)
}

func (ec *executionContext) marshalOActionResetBillingPeriod2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResetBillingPeriod(ctx context.Context, sel ast.SelectionSet, v *model.ActionResetBillingPeriod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionResetBillingPeriod(ctx, sel, v)
}

func (ec *executionContext) marshalOActionResult2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResult(ctx context.Context, sel ast.SelectionSet, v []*model.ActionResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOActionResult2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOActionResult2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResult(ctx context.Context, sel ast.SelectionSet, v *model.ActionResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOActionResultCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResultCode(ctx context.Context, v any) (*model.ActionResultCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ActionResultCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOActionResultCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionResultCode(ctx context.Context, sel ast.SelectionSet, v *model.ActionResultCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOActionSetDisconnectorState2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSetDisconnectorState(ctx context.Context, sel ast.SelectionSet, v *model.ActionSetDisconnectorState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionSetDisconnectorState(ctx, sel, v)
}

func (ec *executionContext) marshalOActionSetLimiter2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSetLimiter(ctx context.Context, sel ast.SelectionSet, v *model.ActionSetLimiter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionSetLimiter(ctx, sel, v)
}

func (ec *executionContext) marshalOActionSetRelayState2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSetRelayState(ctx context.Context, sel ast.SelectionSet, v *model.ActionSetRelayState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionSetRelayState(ctx, sel, v)
}

func (ec *executionContext) marshalOActionSetTou2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSetTou(ctx context.Context, sel ast.SelectionSet, v *model.ActionSetTou) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionSetTou(ctx, sel, v)
}

func (ec *executionContext) marshalOActionSyncClock2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionSyncClock(ctx context.Context, sel ast.SelectionSet, v *model.ActionSyncClock) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionSyncClock(ctx, sel, v)
}

func (ec *executionContext) unmarshalOActionType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionType(ctx context.Context, v any) (*model.ActionType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ActionType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOActionType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐActionType(ctx context.Context, sel ast.SelectionSet, v *model.ActionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOAny2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAny(ctx context.Context, sel ast.SelectionSet, v *model.Any) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Any(ctx, sel, v)
}

func (ec *executionContext) unmarshalOApplicationProtocol2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx context.Context, v any) ([]*model.ApplicationProtocol, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ApplicationProtocol, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOApplicationProtocol2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx context.Context, sel ast.SelectionSet, v []*model.ApplicationProtocol) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx context.Context, v any) (*model.ApplicationProtocol, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ApplicationProtocol)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocol(ctx context.Context, sel ast.SelectionSet, v *model.ApplicationProtocol) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOApplicationProtocolTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocolTemplate(ctx context.Context, sel ast.SelectionSet, v []*model.ApplicationProtocolTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOApplicationProtocolTemplate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocolTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOApplicationProtocolTemplate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐApplicationProtocolTemplate(ctx context.Context, sel ast.SelectionSet, v *model.ApplicationProtocolTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApplicationProtocolTemplate(ctx, sel, v)
}

func (ec *executionContext) marshalOAttributeDefinition2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeDefinition(ctx context.Context, sel ast.SelectionSet, v []*model.AttributeDefinition) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAttributeDefinition2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeDefinition(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAttributeDefinition2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeDefinition(ctx context.Context, sel ast.SelectionSet, v *model.AttributeDefinition) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AttributeDefinition(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAttributeType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeType(ctx context.Context, v any) (*model.AttributeType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.AttributeType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAttributeType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeType(ctx context.Context, sel ast.SelectionSet, v *model.AttributeType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOAttributeValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐAttributeValue(ctx context.Context, sel ast.SelectionSet, v *model.AttributeValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AttributeValue(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBigInt2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigInt2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOBillingValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBillingValue(ctx context.Context, sel ast.SelectionSet, v []*model.BillingValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBillingValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBillingValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBillingValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBillingValue(ctx context.Context, sel ast.SelectionSet, v *model.BillingValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BillingValue(ctx, sel, v)
}

func (ec *executionContext) marshalOBillingValues2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBillingValues(ctx context.Context, sel ast.SelectionSet, v *model.BillingValues) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BillingValues(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚕᚖbool(ctx context.Context, v any) ([]*bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOBoolean2ᚖbool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕᚖbool(ctx context.Context, sel ast.SelectionSet, v []*bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOBoolean2ᚖbool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOBulk2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulk(ctx context.Context, sel ast.SelectionSet, v []*model.Bulk) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBulk2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulk(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBulk2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulk(ctx context.Context, sel ast.SelectionSet, v *model.Bulk) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Bulk(ctx, sel, v)
}

func (ec *executionContext) marshalOBulkJob2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkJob(ctx context.Context, sel ast.SelectionSet, v []*model.BulkJob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBulkJob2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkJob(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBulkJob2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkJob(ctx context.Context, sel ast.SelectionSet, v *model.BulkJob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BulkJob(ctx, sel, v)
}

func (ec *executionContext) marshalOBulkSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkSpec(ctx context.Context, sel ast.SelectionSet, v *model.BulkSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BulkSpec(ctx, sel, v)
}

func (ec *executionContext) marshalOBulkStatus2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkStatus(ctx context.Context, sel ast.SelectionSet, v *model.BulkStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BulkStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBulkStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkStatusCode(ctx context.Context, v any) (*model.BulkStatusCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.BulkStatusCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBulkStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐBulkStatusCode(ctx context.Context, sel ast.SelectionSet, v *model.BulkStatusCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCommunicationTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationTemplate(ctx context.Context, sel ast.SelectionSet, v []*model.CommunicationTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommunicationTemplate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCommunicationTemplate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationTemplate(ctx context.Context, sel ast.SelectionSet, v *model.CommunicationTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommunicationTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCommunicationType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationType(ctx context.Context, v any) (*model.CommunicationType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.CommunicationType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCommunicationType2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationType(ctx context.Context, sel ast.SelectionSet, v *model.CommunicationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCommunicationUnit2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationUnit(ctx context.Context, sel ast.SelectionSet, v []*model.CommunicationUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationUnit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationUnit(ctx context.Context, sel ast.SelectionSet, v *model.CommunicationUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommunicationUnit(ctx, sel, v)
}

func (ec *executionContext) marshalOCommunicationUnitSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐCommunicationUnitSpec(ctx context.Context, sel ast.SelectionSet, v *model.CommunicationUnitSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommunicationUnitSpec(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionInfo(ctx context.Context, sel ast.SelectionSet, v []*model.ConnectionInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOConnectionInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOConnectionInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionInfo(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionTypeControlledSerial2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeControlledSerial(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionTypeControlledSerial) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionTypeControlledSerial(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionTypeDirectTcpIp2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeDirectTCPIP(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionTypeDirectTCPIP) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionTypeDirectTcpIp(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionTypeModemPool2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeModemPool(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionTypeModemPool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionTypeModemPool(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionTypeSerialDirect2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeSerialDirect(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionTypeSerialDirect) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionTypeSerialDirect(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionTypeSerialMoxa2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐConnectionTypeSerialMoxa(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionTypeSerialMoxa) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionTypeSerialMoxa(ctx, sel, v)
}

func (ec *executionContext) unmarshalODataLinkProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDataLinkProtocol(ctx context.Context, v any) (*model.DataLinkProtocol, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.DataLinkProtocol)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODataLinkProtocol2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDataLinkProtocol(ctx context.Context, sel ast.SelectionSet, v *model.DataLinkProtocol) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalODataLinkTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDataLinkTemplate(ctx context.Context, sel ast.SelectionSet, v []*model.DataLinkTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODataLinkTemplate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDataLinkTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODataLinkTemplate2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDataLinkTemplate(ctx context.Context, sel ast.SelectionSet, v *model.DataLinkTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataLinkTemplate(ctx, sel, v)
}

func (ec *executionContext) marshalODevice2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDevice(ctx context.Context, sel ast.SelectionSet, v []*model.Device) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODevice2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDevice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODevice2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDevice(ctx context.Context, sel ast.SelectionSet, v *model.Device) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Device(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceCommunicationUnit2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceCommunicationUnit(ctx context.Context, sel ast.SelectionSet, v []*model.DeviceCommunicationUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeviceCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceCommunicationUnit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODeviceCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceCommunicationUnit(ctx context.Context, sel ast.SelectionSet, v *model.DeviceCommunicationUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceCommunicationUnit(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceGroup2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceGroup(ctx context.Context, sel ast.SelectionSet, v []*model.DeviceGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeviceGroup2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODeviceGroup2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceGroup(ctx context.Context, sel ast.SelectionSet, v *model.DeviceGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceGroup(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceGroupSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceGroupSpec(ctx context.Context, sel ast.SelectionSet, v *model.DeviceGroupSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceGroupSpec(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDeviceSpec(ctx context.Context, sel ast.SelectionSet, v *model.DeviceSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceSpec(ctx, sel, v)
}

func (ec *executionContext) marshalODriver2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDriver(ctx context.Context, sel ast.SelectionSet, v []*model.Driver) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODriver2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDriver(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODriver2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDriver(ctx context.Context, sel ast.SelectionSet, v *model.Driver) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Driver(ctx, sel, v)
}

func (ec *executionContext) marshalODriverSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDriverSpec(ctx context.Context, sel ast.SelectionSet, v *model.DriverSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverSpec(ctx, sel, v)
}

func (ec *executionContext) marshalODriverTemplates2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐDriverTemplates(ctx context.Context, sel ast.SelectionSet, v *model.DriverTemplates) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverTemplates(ctx, sel, v)
}

func (ec *executionContext) marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐEmpty(ctx context.Context, sel ast.SelectionSet, v *model.Empty) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Empty(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFilterOperator2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐFilterOperator(ctx context.Context, v any) (*model.FilterOperator, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.FilterOperator)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFilterOperator2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐFilterOperator(ctx context.Context, sel ast.SelectionSet, v *model.FilterOperator) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOFloat2ᚕᚖfloat64(ctx context.Context, v any) ([]*float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFloat2ᚖfloat64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕᚖfloat64(ctx context.Context, sel ast.SelectionSet, v []*float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOFloat2ᚖfloat64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v any) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOInt2ᚕᚖint32(ctx context.Context, v any) ([]*int32, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*int32, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚖint32(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕᚖint32(ctx context.Context, sel ast.SelectionSet, v []*int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚖint32(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint32(ctx context.Context, v any) (*int32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint32(ctx context.Context, sel ast.SelectionSet, v *int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt32(*v)
	return res
}

func (ec *executionContext) unmarshalOInt642ᚕᚖint64(ctx context.Context, v any) ([]*int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt642ᚖint64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt642ᚕᚖint64(ctx context.Context, sel ast.SelectionSet, v []*int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt642ᚖint64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt642ᚖint64(ctx context.Context, v any) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt642ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt64(*v)
	return res
}

func (ec *executionContext) marshalOJobAction2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobAction(ctx context.Context, sel ast.SelectionSet, v []*model.JobAction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJobAction2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobAction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOJobAction2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobAction(ctx context.Context, sel ast.SelectionSet, v *model.JobAction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobAction(ctx, sel, v)
}

func (ec *executionContext) marshalOJobActionAttributes2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobActionAttributes(ctx context.Context, sel ast.SelectionSet, v []*model.JobActionAttributes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJobActionAttributes2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobActionAttributes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOJobActionAttributes2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobActionAttributes(ctx context.Context, sel ast.SelectionSet, v *model.JobActionAttributes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobActionAttributes(ctx, sel, v)
}

func (ec *executionContext) marshalOJobActionContraints2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobActionContraints(ctx context.Context, sel ast.SelectionSet, v *model.JobActionContraints) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobActionContraints(ctx, sel, v)
}

func (ec *executionContext) marshalOJobDevice2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobDevice(ctx context.Context, sel ast.SelectionSet, v []*model.JobDevice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJobDevice2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobDevice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOJobDevice2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobDevice(ctx context.Context, sel ast.SelectionSet, v *model.JobDevice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobDevice(ctx, sel, v)
}

func (ec *executionContext) marshalOJobDeviceId2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobDeviceID(ctx context.Context, sel ast.SelectionSet, v []*model.JobDeviceID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJobDeviceId2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobDeviceID(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOJobDeviceId2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobDeviceID(ctx context.Context, sel ast.SelectionSet, v *model.JobDeviceID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobDeviceId(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJobErrorCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobErrorCode(ctx context.Context, v any) (*model.JobErrorCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.JobErrorCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJobErrorCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobErrorCode(ctx context.Context, sel ast.SelectionSet, v *model.JobErrorCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOJobPriority2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobPriority(ctx context.Context, v any) (*model.JobPriority, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.JobPriority)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJobPriority2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobPriority(ctx context.Context, sel ast.SelectionSet, v *model.JobPriority) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOJobSettings2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobSettings(ctx context.Context, sel ast.SelectionSet, v *model.JobSettings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobSettings(ctx, sel, v)
}

func (ec *executionContext) marshalOJobStatus2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobStatus(ctx context.Context, sel ast.SelectionSet, v *model.JobStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJobStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobStatusCode(ctx context.Context, v any) (*model.JobStatusCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.JobStatusCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJobStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐJobStatusCode(ctx context.Context, sel ast.SelectionSet, v *model.JobStatusCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOListOfBulk2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfBulk(ctx context.Context, sel ast.SelectionSet, v *model.ListOfBulk) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfBulk(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfCommunicationUnit(ctx context.Context, sel ast.SelectionSet, v *model.ListOfCommunicationUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfCommunicationUnit(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfDevice2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfDevice(ctx context.Context, sel ast.SelectionSet, v *model.ListOfDevice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfDevice(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfDeviceGroup2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfDeviceGroup(ctx context.Context, sel ast.SelectionSet, v *model.ListOfDeviceGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfDeviceGroup(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfDriver2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfDriver(ctx context.Context, sel ast.SelectionSet, v *model.ListOfDriver) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfDriver(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfJobDevice2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfJobDevice(ctx context.Context, sel ast.SelectionSet, v *model.ListOfJobDevice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfJobDevice(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfJobDeviceId2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfJobDeviceID(ctx context.Context, sel ast.SelectionSet, v *model.ListOfJobDeviceID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfJobDeviceId(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfModemPool2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfModemPool(ctx context.Context, sel ast.SelectionSet, v *model.ListOfModemPool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfModemPool(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfString2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListOfString(ctx context.Context, sel ast.SelectionSet, v *model.ListOfString) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfString(ctx, sel, v)
}

func (ec *executionContext) marshalOListSelectorFilterBy2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListSelectorFilterBy(ctx context.Context, sel ast.SelectionSet, v []*model.ListSelectorFilterBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOListSelectorFilterBy2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListSelectorFilterBy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOListSelectorFilterBy2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListSelectorFilterBy(ctx context.Context, sel ast.SelectionSet, v *model.ListSelectorFilterBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListSelectorFilterBy(ctx, sel, v)
}

func (ec *executionContext) marshalOListSelectorSortBy2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListSelectorSortBy(ctx context.Context, sel ast.SelectionSet, v []*model.ListSelectorSortBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOListSelectorSortBy2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListSelectorSortBy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOListSelectorSortBy2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐListSelectorSortBy(ctx context.Context, sel ast.SelectionSet, v *model.ListSelectorSortBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListSelectorSortBy(ctx, sel, v)
}

func (ec *executionContext) marshalOMeasuredValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMeasuredValue(ctx context.Context, sel ast.SelectionSet, v []*model.MeasuredValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMeasuredValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMeasuredValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMeasuredValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMeasuredValue(ctx context.Context, sel ast.SelectionSet, v *model.MeasuredValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MeasuredValue(ctx, sel, v)
}

func (ec *executionContext) marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMetadataFields(ctx context.Context, sel ast.SelectionSet, v *model.MetadataFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MetadataFields(ctx, sel, v)
}

func (ec *executionContext) marshalOModemInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemInfo(ctx context.Context, sel ast.SelectionSet, v []*model.ModemInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOModemInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOModemInfo2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemInfo(ctx context.Context, sel ast.SelectionSet, v *model.ModemInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ModemInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOModemPool2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemPool(ctx context.Context, sel ast.SelectionSet, v *model.ModemPool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ModemPool(ctx, sel, v)
}

func (ec *executionContext) marshalOModemPoolSpec2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemPoolSpec(ctx context.Context, sel ast.SelectionSet, v []*model.ModemPoolSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOModemPoolSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemPoolSpec(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOModemPoolSpec2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemPoolSpec(ctx context.Context, sel ast.SelectionSet, v *model.ModemPoolSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ModemPoolSpec(ctx, sel, v)
}

func (ec *executionContext) marshalOModemPoolStatus2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐModemPoolStatus(ctx context.Context, sel ast.SelectionSet, v *model.ModemPoolStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ModemPoolStatus(ctx, sel, v)
}

func (ec *executionContext) marshalOProfileBlok2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐProfileBlok(ctx context.Context, sel ast.SelectionSet, v []*model.ProfileBlok) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProfileBlok2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐProfileBlok(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProfileBlok2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐProfileBlok(ctx context.Context, sel ast.SelectionSet, v *model.ProfileBlok) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProfileBlok(ctx, sel, v)
}

func (ec *executionContext) marshalOProfileValues2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐProfileValues(ctx context.Context, sel ast.SelectionSet, v *model.ProfileValues) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProfileValues(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v any) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐStringValue(ctx context.Context, sel ast.SelectionSet, v *model.StringValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StringValue(ctx, sel, v)
}

func (ec *executionContext) marshalOSystemConfig2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐSystemConfig(ctx context.Context, sel ast.SelectionSet, v *model.SystemConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTimestamp2ᚕᚖstring(ctx context.Context, v any) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTimestamp2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamp2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOTimestamp2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamp2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamp2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v any) (*uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUUID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v *uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalUUID(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) marshalO_mapAny2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAny(ctx context.Context, sel ast.SelectionSet, v []*model.MapAny) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_mapAny2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAny(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalO_mapAny2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAny(ctx context.Context, sel ast.SelectionSet, v *model.MapAny) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__mapAny(ctx, sel, v)
}

func (ec *executionContext) marshalO_mapAttributeValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAttributeValue(ctx context.Context, sel ast.SelectionSet, v []*model.MapAttributeValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_mapAttributeValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAttributeValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalO_mapAttributeValue2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapAttributeValue(ctx context.Context, sel ast.SelectionSet, v *model.MapAttributeValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__mapAttributeValue(ctx, sel, v)
}

func (ec *executionContext) marshalO_mapListOfString2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapListOfString(ctx context.Context, sel ast.SelectionSet, v []*model.MapListOfString) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_mapListOfString2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapListOfString(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalO_mapListOfString2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapListOfString(ctx context.Context, sel ast.SelectionSet, v *model.MapListOfString) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__mapListOfString(ctx, sel, v)
}

func (ec *executionContext) marshalO_mapstring2ᚕᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapstring(ctx context.Context, sel ast.SelectionSet, v []*model.Mapstring) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_mapstring2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapstring(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalO_mapstring2ᚖgithubᚗcomᚋcybroslabsᚋhesᚑ2ᚑapisᚋgraphᚋmodelᚐMapstring(ctx context.Context, sel ast.SelectionSet, v *model.Mapstring) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__mapstring(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
