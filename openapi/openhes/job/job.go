// Package job provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package job

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cybroslabs/hes-2-apis/openapi/openhes/attribute"
	externalRef0 "github.com/cybroslabs/hes-2-apis/openapi/openhes/driver/driverdata"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ActionTypeSchema.
const (
	FWUPDATE             ActionTypeSchema = "FW_UPDATE"
	GETCLOCK             ActionTypeSchema = "GET_CLOCK"
	GETDISCONNECTORSTATE ActionTypeSchema = "GET_DISCONNECTOR_STATE"
	GETEVENTS            ActionTypeSchema = "GET_EVENTS"
	GETIRREGULARPROFILE  ActionTypeSchema = "GET_IRREGULAR_PROFILE"
	GETLIMITER           ActionTypeSchema = "GET_LIMITER"
	GETPERIODICALPROFILE ActionTypeSchema = "GET_PERIODICAL_PROFILE"
	GETREGISTER          ActionTypeSchema = "GET_REGISTER"
	GETRELAYSTATE        ActionTypeSchema = "GET_RELAY_STATE"
	GETTOU               ActionTypeSchema = "GET_TOU"
	RESETBILLINGPERIOD   ActionTypeSchema = "RESET_BILLING_PERIOD"
	SETDISCONNECTORSTATE ActionTypeSchema = "SET_DISCONNECTOR_STATE"
	SETLIMITER           ActionTypeSchema = "SET_LIMITER"
	SETRELAYSTATE        ActionTypeSchema = "SET_RELAY_STATE"
	SETTOU               ActionTypeSchema = "SET_TOU"
	SYNCCLOCK            ActionTypeSchema = "SYNC_CLOCK"
)

// Defines values for BulkStatusEnumSchema.
const (
	BulkStatusEnumSchemaCANCELLED BulkStatusEnumSchema = 3
	BulkStatusEnumSchemaCOMPLETED BulkStatusEnumSchema = 2
	BulkStatusEnumSchemaEXPIRED   BulkStatusEnumSchema = 4
	BulkStatusEnumSchemaQUEUED    BulkStatusEnumSchema = 0
	BulkStatusEnumSchemaRUNNING   BulkStatusEnumSchema = 1
)

// Defines values for JobActionResultSchemaCode.
const (
	JobActionResultSchemaCodeERROR        JobActionResultSchemaCode = "ERROR"
	JobActionResultSchemaCodeNOTPROCESSED JobActionResultSchemaCode = "NOT_PROCESSED"
	JobActionResultSchemaCodeOK           JobActionResultSchemaCode = "OK"
	JobActionResultSchemaCodeUNSUPPORTED  JobActionResultSchemaCode = "UNSUPPORTED"
)

// Defines values for JobStatusEnumSchema.
const (
	JobStatusEnumSchemaCANCELLED JobStatusEnumSchema = 3
	JobStatusEnumSchemaCOMPLETED JobStatusEnumSchema = 2
	JobStatusEnumSchemaEXPIRED   JobStatusEnumSchema = 4
	JobStatusEnumSchemaQUEUED    JobStatusEnumSchema = 0
	JobStatusEnumSchemaRUNNING   JobStatusEnumSchema = 1
)

// Defines values for JobStatusSchemaCode.
const (
	JobStatusSchemaCodeERROR JobStatusSchemaCode = "ERROR"
	JobStatusSchemaCodeFATAL JobStatusSchemaCode = "FATAL"
	JobStatusSchemaCodeOK    JobStatusSchemaCode = "OK"
)

// ActionID The ID of the action.
type ActionID = openapi_types.UUID

// ActionTypeSchema The type of action.
//   - `GET_REGISTER` - The action is to get billing value, for example instantaneous values.
//   - `GET_PERIODICAL_PROFILE` - The action is to get periodical profile, for example load-profile.
//   - `GET_IRREGULAR_PROFILE` - The action is to get non-periodical profile, for example daily profile or monthly billing registers.
//   - `GET_EVENTS` - The action is to get event log.
//   - `GET_CLOCK` - The action is to get the clock.
//   - `SYNC_CLOCK` - The action is to synchronize the clock. The action synchronizes the clock in the device, it can forcefully set it if force attribute is set.
//   - `GET_RELAY_STATE` - The action is to get the relay state.
//   - `SET_RELAY_STATE` - The action is to set the relay state.
//   - `GET_DISCONNECTOR_STATE` - The action is to get the disconnector state.
//   - `SET_DISCONNECTOR_STATE` - The action is to set the disconnector state.
//   - `GET_TOU` - The action is to get the time-of-use table.
//   - `SET_TOU` - The action is to set the time-of-use table.
//   - `GET_LIMITER` - The action is to get the limiter settings.
//   - `SET_LIMITER` - The action is to set the limiter settings.
//   - `RESET_BILLING_PERIOD` - The action is to reset billing period.
//   - `FW_UPDATE` - The action is to start firmware update.
type ActionTypeSchema string

// AttributesSchema Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
type AttributesSchema = attribute.Attributes

// BulkID The ID of the bulk job. The ID must be unique across the OpenHES components.
type BulkID = openapi_types.UUID

// BulkSpecSchema Schema that holds the jobs for single device type.
type BulkSpecSchema struct {
	// Actions List of actions to be queued. The empty array is not valid, at least one action must be present. The actions are processed in the order they are defined in the list.
	Actions JobActionListSchema `json:"actions"`

	// CorrelationID The correlation ID of the bulk. The correlation ID is used to group the bulks.
	CorrelationID *openapi_types.UUID `json:"correlationID"`

	// DeviceDriverType The device type related to the job. The type must be one of the supported device types.
	DeviceDriverType *string `json:"deviceDriverType,omitempty"`

	// Devices List of devices to be queued.
	Devices JobDeviceListSchema `json:"devices"`

	// Id The ID of the bulk job. The ID must be unique across the OpenHES components.
	Id BulkID `json:"id"`

	// Settings Schema that holds the settings of the job.
	Settings *JobSettingsSchema `json:"settings,omitempty"`
}

// BulkStatusEnumSchema The status of the bulk.
type BulkStatusEnumSchema int

// BulkStatusSchema Schema that holds the status of the bulk of jobs.
type BulkStatusSchema struct {
	// FinishedAt The time when the bulk has been marked as completed.
	FinishedAt *time.Time `json:"finishedAt"`

	// StartedAt The time when the bulk has been queued for processing.
	StartedAt *time.Time `json:"startedAt"`

	// Status The status of the bulk.
	Status BulkStatusEnumSchema `json:"status"`
}

// JobActionCommonSchema Common fields shared for all actions.
type JobActionCommonSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id ActionID `json:"id"`
}

// JobActionFwUpdateSchema defines model for JobActionFwUpdateSchema.
type JobActionFwUpdateSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id   ActionID `json:"id"`
	Type string   `json:"type"`
}

// JobActionGetClockSchema defines model for JobActionGetClockSchema.
type JobActionGetClockSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id   ActionID `json:"id"`
	Type string   `json:"type"`
}

// JobActionGetDisconnectorStateSchema defines model for JobActionGetDisconnectorStateSchema.
type JobActionGetDisconnectorStateSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id   ActionID `json:"id"`
	Type string   `json:"type"`
}

// JobActionGetEventsSchema defines model for JobActionGetEventsSchema.
type JobActionGetEventsSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id   ActionID `json:"id"`
	Type string   `json:"type"`
}

// JobActionGetIrregularProfileSchema defines model for JobActionGetIrregularProfileSchema.
type JobActionGetIrregularProfileSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id   ActionID `json:"id"`
	Type string   `json:"type"`
}

// JobActionGetLimiterSchema defines model for JobActionGetLimiterSchema.
type JobActionGetLimiterSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id   ActionID `json:"id"`
	Type string   `json:"type"`
}

// JobActionGetPeriodicalProfileSchema defines model for JobActionGetPeriodicalProfileSchema.
type JobActionGetPeriodicalProfileSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id ActionID `json:"id"`

	// ParamTfrom The start time of the profile data.
	ParamTfrom *time.Time `json:"param_tfrom,omitempty"`

	// ParamTto The end time of the profile data.
	ParamTto *time.Time `json:"param_tto,omitempty"`
	Type     string     `json:"type"`
}

// JobActionGetRegisterSchema defines model for JobActionGetRegisterSchema.
type JobActionGetRegisterSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id   ActionID `json:"id"`
	Type string   `json:"type"`
}

// JobActionGetRelayStateSchema defines model for JobActionGetRelayStateSchema.
type JobActionGetRelayStateSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id   ActionID `json:"id"`
	Type string   `json:"type"`
}

// JobActionGetTouSchema defines model for JobActionGetTouSchema.
type JobActionGetTouSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id   ActionID `json:"id"`
	Type string   `json:"type"`
}

// JobActionListSchema List of actions to be queued. The empty array is not valid, at least one action must be present. The actions are processed in the order they are defined in the list.
type JobActionListSchema = []JobActionSchema

// JobActionResetBillingPeriodSchema defines model for JobActionResetBillingPeriodSchema.
type JobActionResetBillingPeriodSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id   ActionID `json:"id"`
	Type string   `json:"type"`
}

// JobActionResultSchema defines model for JobActionResultSchema.
type JobActionResultSchema struct {
	// Code The result of the action. If the action was successful, the value is true and vice versa.
	//   * `OK` - The action has been successfully processed.
	//   * `UNSUPPORTED` - The action is not supported by the driver.
	//   * `ERROR` - Some error(s) have occurred during the processing of the action.
	//   * `NOT_PROCESSED` - The action has not been processed.
	Code JobActionResultSchemaCode `json:"code"`

	// Data The result data of the action.
	Data JobActionResultSchema_Data `json:"data"`

	// Id The ID of the action.
	Id ActionID `json:"id"`
}

// JobActionResultSchemaCode The result of the action. If the action was successful, the value is true and vice versa.
//   - `OK` - The action has been successfully processed.
//   - `UNSUPPORTED` - The action is not supported by the driver.
//   - `ERROR` - Some error(s) have occurred during the processing of the action.
//   - `NOT_PROCESSED` - The action has not been processed.
type JobActionResultSchemaCode string

// JobActionResultSchema_Data The result data of the action.
type JobActionResultSchema_Data struct {
	union json.RawMessage
}

// JobActionSchema Schema that holds the action definition.
type JobActionSchema struct {
	union json.RawMessage
}

// JobActionSetDisconnectorStateSchema defines model for JobActionSetDisconnectorStateSchema.
type JobActionSetDisconnectorStateSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id   ActionID `json:"id"`
	Type string   `json:"type"`
}

// JobActionSetLimiterSchema defines model for JobActionSetLimiterSchema.
type JobActionSetLimiterSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id   ActionID `json:"id"`
	Type string   `json:"type"`
}

// JobActionSetRelayStateSchema defines model for JobActionSetRelayStateSchema.
type JobActionSetRelayStateSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id   ActionID `json:"id"`
	Type string   `json:"type"`
}

// JobActionSetTouSchema defines model for JobActionSetTouSchema.
type JobActionSetTouSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id   ActionID `json:"id"`
	Type string   `json:"type"`
}

// JobActionSyncClockSchema defines model for JobActionSyncClockSchema.
type JobActionSyncClockSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id   ActionID `json:"id"`
	Type string   `json:"type"`
}

// JobDeviceListSchema List of devices to be queued.
type JobDeviceListSchema = []JobDeviceSchema

// JobDeviceSchema defines model for JobDeviceSchema.
type JobDeviceSchema struct {
	// Attributes Schema that holds a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes AttributesSchema `json:"attributes"`

	// Endpoint The endpoint of the device. Depending on the device driver supported technology, the endpoint can be an IP address, a hostname, a phone number or similar id.
	Endpoint string `json:"endpoint"`

	// ExternalID The public ID of the device.
	ExternalID *string `json:"externalID,omitempty"`

	// Id The ID of the job. The ID must be unique across the OpenHES components.
	Id JobID `json:"id"`
}

// JobID The ID of the job. The ID must be unique across the OpenHES components.
type JobID = openapi_types.UUID

// JobSettingsSchema Schema that holds the settings of the job.
type JobSettingsSchema struct {
	// Attempts Number of attempts to process the job.
	Attempts *int32 `json:"attempts,omitempty"`

	// DeferStart Delay in seconds before starting the first attempt of the job.
	DeferStart *int64 `json:"deferStart,omitempty"`

	// ExpiresAt Time when the job expires.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// MaxDuration Maximum duration in seconds to process the job.
	MaxDuration *int64 `json:"maxDuration,omitempty"`

	// Priority Priority of the job.
	Priority *int32 `json:"priority,omitempty"`

	// RetryDelay Delay in seconds before retrying the job.
	RetryDelay *int64 `json:"retryDelay,omitempty"`

	// WebhookURL The URL of the webhook to send the notification when any job in the bulk is done.
	WebhookURL *string `json:"webhookURL"`
}

// JobStatusEnumSchema The status of the job.
type JobStatusEnumSchema int

// JobStatusSchema Schema that holds the status of the job.
type JobStatusSchema struct {
	// Code The result of the job.
	//   * `OK` - The job has been successfully processed.
	//   * `ERROR` - Some error(s) have occurred during the processing of the job.
	//   * `FATAL` - The job could not be processed due to a fatal error.
	Code JobStatusSchemaCode `json:"code"`

	// FinishedAt The time when the driver finished processing the job.
	FinishedAt *time.Time `json:"finishedAt"`

	// Results The results of the actions. If an action has not been processed, the result is not present.
	Results *[]JobActionResultSchema `json:"results"`

	// StartedAt The time when the driver started processing the job.
	StartedAt *time.Time `json:"startedAt"`

	// Status The status of the job.
	Status JobStatusEnumSchema `json:"status"`
}

// JobStatusSchemaCode The result of the job.
//   - `OK` - The job has been successfully processed.
//   - `ERROR` - Some error(s) have occurred during the processing of the job.
//   - `FATAL` - The job could not be processed due to a fatal error.
type JobStatusSchemaCode string

// AsExternalRef0DeviceRegistersDataSchema returns the union data inside the JobActionResultSchema_Data as a externalRef0.DeviceRegistersDataSchema
func (t JobActionResultSchema_Data) AsExternalRef0DeviceRegistersDataSchema() (externalRef0.DeviceRegistersDataSchema, error) {
	var body externalRef0.DeviceRegistersDataSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalRef0DeviceRegistersDataSchema overwrites any union data inside the JobActionResultSchema_Data as the provided externalRef0.DeviceRegistersDataSchema
func (t *JobActionResultSchema_Data) FromExternalRef0DeviceRegistersDataSchema(v externalRef0.DeviceRegistersDataSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalRef0DeviceRegistersDataSchema performs a merge with any union data inside the JobActionResultSchema_Data, using the provided externalRef0.DeviceRegistersDataSchema
func (t *JobActionResultSchema_Data) MergeExternalRef0DeviceRegistersDataSchema(v externalRef0.DeviceRegistersDataSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsExternalRef0DeviceProfileDataSchema returns the union data inside the JobActionResultSchema_Data as a externalRef0.DeviceProfileDataSchema
func (t JobActionResultSchema_Data) AsExternalRef0DeviceProfileDataSchema() (externalRef0.DeviceProfileDataSchema, error) {
	var body externalRef0.DeviceProfileDataSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExternalRef0DeviceProfileDataSchema overwrites any union data inside the JobActionResultSchema_Data as the provided externalRef0.DeviceProfileDataSchema
func (t *JobActionResultSchema_Data) FromExternalRef0DeviceProfileDataSchema(v externalRef0.DeviceProfileDataSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExternalRef0DeviceProfileDataSchema performs a merge with any union data inside the JobActionResultSchema_Data, using the provided externalRef0.DeviceProfileDataSchema
func (t *JobActionResultSchema_Data) MergeExternalRef0DeviceProfileDataSchema(v externalRef0.DeviceProfileDataSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobActionResultSchema_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobActionResultSchema_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsJobActionGetRegisterSchema returns the union data inside the JobActionSchema as a JobActionGetRegisterSchema
func (t JobActionSchema) AsJobActionGetRegisterSchema() (JobActionGetRegisterSchema, error) {
	var body JobActionGetRegisterSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobActionGetRegisterSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetRegisterSchema
func (t *JobActionSchema) FromJobActionGetRegisterSchema(v JobActionGetRegisterSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobActionGetRegisterSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetRegisterSchema
func (t *JobActionSchema) MergeJobActionGetRegisterSchema(v JobActionGetRegisterSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobActionGetPeriodicalProfileSchema returns the union data inside the JobActionSchema as a JobActionGetPeriodicalProfileSchema
func (t JobActionSchema) AsJobActionGetPeriodicalProfileSchema() (JobActionGetPeriodicalProfileSchema, error) {
	var body JobActionGetPeriodicalProfileSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobActionGetPeriodicalProfileSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetPeriodicalProfileSchema
func (t *JobActionSchema) FromJobActionGetPeriodicalProfileSchema(v JobActionGetPeriodicalProfileSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobActionGetPeriodicalProfileSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetPeriodicalProfileSchema
func (t *JobActionSchema) MergeJobActionGetPeriodicalProfileSchema(v JobActionGetPeriodicalProfileSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobActionGetIrregularProfileSchema returns the union data inside the JobActionSchema as a JobActionGetIrregularProfileSchema
func (t JobActionSchema) AsJobActionGetIrregularProfileSchema() (JobActionGetIrregularProfileSchema, error) {
	var body JobActionGetIrregularProfileSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobActionGetIrregularProfileSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetIrregularProfileSchema
func (t *JobActionSchema) FromJobActionGetIrregularProfileSchema(v JobActionGetIrregularProfileSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobActionGetIrregularProfileSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetIrregularProfileSchema
func (t *JobActionSchema) MergeJobActionGetIrregularProfileSchema(v JobActionGetIrregularProfileSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobActionGetEventsSchema returns the union data inside the JobActionSchema as a JobActionGetEventsSchema
func (t JobActionSchema) AsJobActionGetEventsSchema() (JobActionGetEventsSchema, error) {
	var body JobActionGetEventsSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobActionGetEventsSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetEventsSchema
func (t *JobActionSchema) FromJobActionGetEventsSchema(v JobActionGetEventsSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobActionGetEventsSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetEventsSchema
func (t *JobActionSchema) MergeJobActionGetEventsSchema(v JobActionGetEventsSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobActionGetClockSchema returns the union data inside the JobActionSchema as a JobActionGetClockSchema
func (t JobActionSchema) AsJobActionGetClockSchema() (JobActionGetClockSchema, error) {
	var body JobActionGetClockSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobActionGetClockSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetClockSchema
func (t *JobActionSchema) FromJobActionGetClockSchema(v JobActionGetClockSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobActionGetClockSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetClockSchema
func (t *JobActionSchema) MergeJobActionGetClockSchema(v JobActionGetClockSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobActionSyncClockSchema returns the union data inside the JobActionSchema as a JobActionSyncClockSchema
func (t JobActionSchema) AsJobActionSyncClockSchema() (JobActionSyncClockSchema, error) {
	var body JobActionSyncClockSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobActionSyncClockSchema overwrites any union data inside the JobActionSchema as the provided JobActionSyncClockSchema
func (t *JobActionSchema) FromJobActionSyncClockSchema(v JobActionSyncClockSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobActionSyncClockSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionSyncClockSchema
func (t *JobActionSchema) MergeJobActionSyncClockSchema(v JobActionSyncClockSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobActionGetRelayStateSchema returns the union data inside the JobActionSchema as a JobActionGetRelayStateSchema
func (t JobActionSchema) AsJobActionGetRelayStateSchema() (JobActionGetRelayStateSchema, error) {
	var body JobActionGetRelayStateSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobActionGetRelayStateSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetRelayStateSchema
func (t *JobActionSchema) FromJobActionGetRelayStateSchema(v JobActionGetRelayStateSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobActionGetRelayStateSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetRelayStateSchema
func (t *JobActionSchema) MergeJobActionGetRelayStateSchema(v JobActionGetRelayStateSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobActionSetRelayStateSchema returns the union data inside the JobActionSchema as a JobActionSetRelayStateSchema
func (t JobActionSchema) AsJobActionSetRelayStateSchema() (JobActionSetRelayStateSchema, error) {
	var body JobActionSetRelayStateSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobActionSetRelayStateSchema overwrites any union data inside the JobActionSchema as the provided JobActionSetRelayStateSchema
func (t *JobActionSchema) FromJobActionSetRelayStateSchema(v JobActionSetRelayStateSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobActionSetRelayStateSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionSetRelayStateSchema
func (t *JobActionSchema) MergeJobActionSetRelayStateSchema(v JobActionSetRelayStateSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobActionGetDisconnectorStateSchema returns the union data inside the JobActionSchema as a JobActionGetDisconnectorStateSchema
func (t JobActionSchema) AsJobActionGetDisconnectorStateSchema() (JobActionGetDisconnectorStateSchema, error) {
	var body JobActionGetDisconnectorStateSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobActionGetDisconnectorStateSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetDisconnectorStateSchema
func (t *JobActionSchema) FromJobActionGetDisconnectorStateSchema(v JobActionGetDisconnectorStateSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobActionGetDisconnectorStateSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetDisconnectorStateSchema
func (t *JobActionSchema) MergeJobActionGetDisconnectorStateSchema(v JobActionGetDisconnectorStateSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobActionSetDisconnectorStateSchema returns the union data inside the JobActionSchema as a JobActionSetDisconnectorStateSchema
func (t JobActionSchema) AsJobActionSetDisconnectorStateSchema() (JobActionSetDisconnectorStateSchema, error) {
	var body JobActionSetDisconnectorStateSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobActionSetDisconnectorStateSchema overwrites any union data inside the JobActionSchema as the provided JobActionSetDisconnectorStateSchema
func (t *JobActionSchema) FromJobActionSetDisconnectorStateSchema(v JobActionSetDisconnectorStateSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobActionSetDisconnectorStateSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionSetDisconnectorStateSchema
func (t *JobActionSchema) MergeJobActionSetDisconnectorStateSchema(v JobActionSetDisconnectorStateSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobActionGetTouSchema returns the union data inside the JobActionSchema as a JobActionGetTouSchema
func (t JobActionSchema) AsJobActionGetTouSchema() (JobActionGetTouSchema, error) {
	var body JobActionGetTouSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobActionGetTouSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetTouSchema
func (t *JobActionSchema) FromJobActionGetTouSchema(v JobActionGetTouSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobActionGetTouSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetTouSchema
func (t *JobActionSchema) MergeJobActionGetTouSchema(v JobActionGetTouSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobActionSetTouSchema returns the union data inside the JobActionSchema as a JobActionSetTouSchema
func (t JobActionSchema) AsJobActionSetTouSchema() (JobActionSetTouSchema, error) {
	var body JobActionSetTouSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobActionSetTouSchema overwrites any union data inside the JobActionSchema as the provided JobActionSetTouSchema
func (t *JobActionSchema) FromJobActionSetTouSchema(v JobActionSetTouSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobActionSetTouSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionSetTouSchema
func (t *JobActionSchema) MergeJobActionSetTouSchema(v JobActionSetTouSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobActionGetLimiterSchema returns the union data inside the JobActionSchema as a JobActionGetLimiterSchema
func (t JobActionSchema) AsJobActionGetLimiterSchema() (JobActionGetLimiterSchema, error) {
	var body JobActionGetLimiterSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobActionGetLimiterSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetLimiterSchema
func (t *JobActionSchema) FromJobActionGetLimiterSchema(v JobActionGetLimiterSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobActionGetLimiterSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetLimiterSchema
func (t *JobActionSchema) MergeJobActionGetLimiterSchema(v JobActionGetLimiterSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobActionSetLimiterSchema returns the union data inside the JobActionSchema as a JobActionSetLimiterSchema
func (t JobActionSchema) AsJobActionSetLimiterSchema() (JobActionSetLimiterSchema, error) {
	var body JobActionSetLimiterSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobActionSetLimiterSchema overwrites any union data inside the JobActionSchema as the provided JobActionSetLimiterSchema
func (t *JobActionSchema) FromJobActionSetLimiterSchema(v JobActionSetLimiterSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobActionSetLimiterSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionSetLimiterSchema
func (t *JobActionSchema) MergeJobActionSetLimiterSchema(v JobActionSetLimiterSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobActionResetBillingPeriodSchema returns the union data inside the JobActionSchema as a JobActionResetBillingPeriodSchema
func (t JobActionSchema) AsJobActionResetBillingPeriodSchema() (JobActionResetBillingPeriodSchema, error) {
	var body JobActionResetBillingPeriodSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobActionResetBillingPeriodSchema overwrites any union data inside the JobActionSchema as the provided JobActionResetBillingPeriodSchema
func (t *JobActionSchema) FromJobActionResetBillingPeriodSchema(v JobActionResetBillingPeriodSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobActionResetBillingPeriodSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionResetBillingPeriodSchema
func (t *JobActionSchema) MergeJobActionResetBillingPeriodSchema(v JobActionResetBillingPeriodSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJobActionFwUpdateSchema returns the union data inside the JobActionSchema as a JobActionFwUpdateSchema
func (t JobActionSchema) AsJobActionFwUpdateSchema() (JobActionFwUpdateSchema, error) {
	var body JobActionFwUpdateSchema
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJobActionFwUpdateSchema overwrites any union data inside the JobActionSchema as the provided JobActionFwUpdateSchema
func (t *JobActionSchema) FromJobActionFwUpdateSchema(v JobActionFwUpdateSchema) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJobActionFwUpdateSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionFwUpdateSchema
func (t *JobActionSchema) MergeJobActionFwUpdateSchema(v JobActionFwUpdateSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobActionSchema) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *JobActionSchema) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"H6tAAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../driver/driverdata/driverdata.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
