// Package job provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package job

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/cybroslabs/hes-2-apis/openapi/openhes/device"
	externalRef1 "github.com/cybroslabs/hes-2-apis/openapi/openhes/driver"
	externalRef2 "github.com/cybroslabs/hes-2-apis/openapi/openhes/driver/driverdata"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for BulkStatusEnumSchema.
const (
	BulkStatusEnumSchemaCANCELLED BulkStatusEnumSchema = 3
	BulkStatusEnumSchemaCOMPLETED BulkStatusEnumSchema = 2
	BulkStatusEnumSchemaEXPIRED   BulkStatusEnumSchema = 4
	BulkStatusEnumSchemaQUEUED    BulkStatusEnumSchema = 0
	BulkStatusEnumSchemaRUNNING   BulkStatusEnumSchema = 1
)

// Defines values for JobActionResultSchemaCode.
const (
	JobActionResultSchemaCodeERROR        JobActionResultSchemaCode = "ERROR"
	JobActionResultSchemaCodeNOTPROCESSED JobActionResultSchemaCode = "NOT_PROCESSED"
	JobActionResultSchemaCodeOK           JobActionResultSchemaCode = "OK"
	JobActionResultSchemaCodeUNSUPPORTED  JobActionResultSchemaCode = "UNSUPPORTED"
)

// Defines values for JobDeviceListDiscriminator.
const (
	JOBDEVICESFULL JobDeviceListDiscriminator = "JOBDEVICESFULL"
	JOBDEVICESID   JobDeviceListDiscriminator = "JOBDEVICESID"
)

// Defines values for JobErrorCodeSchema.
const (
	JobErrorCodeSchemaERROR JobErrorCodeSchema = "ERROR"
	JobErrorCodeSchemaFATAL JobErrorCodeSchema = "FATAL"
	JobErrorCodeSchemaNONE  JobErrorCodeSchema = "NONE"
)

// Defines values for JobStatusCodeEnumSchema.
const (
	JobStatusCodeEnumSchemaCANCELLED JobStatusCodeEnumSchema = 3
	JobStatusCodeEnumSchemaCOMPLETED JobStatusCodeEnumSchema = 2
	JobStatusCodeEnumSchemaEXPIRED   JobStatusCodeEnumSchema = 4
	JobStatusCodeEnumSchemaQUEUED    JobStatusCodeEnumSchema = 0
	JobStatusCodeEnumSchemaRUNNING   JobStatusCodeEnumSchema = 1
)

// ActionID The ID of the action.
type ActionID = openapi_types.UUID

// BulkID The ID of the job bulk. The ID must be unique across all OpenHES components.
type BulkID = openapi_types.UUID

// BulkSpecSchema Schema that describes jobs for a specific driver type.
type BulkSpecSchema struct {
	// Actions A list of actions to be processed. An empty array is not valid, at least one action must be present. The actions are processed in the same order as they are defined in the list.
	Actions JobActionListSchema `json:"actions"`

	// CorrelationID The correlation ID of the bulk. The correlation ID is used to group bulks.
	CorrelationID *string                `json:"correlationID"`
	Devices       BulkSpecSchema_Devices `json:"devices"`

	// DriverType The driver type related to the job. The type must be one of the supported driver types.
	DriverType string `json:"driverType"`

	// Id The ID of the job bulk. The ID must be unique across all OpenHES components.
	Id BulkID `json:"id"`

	// Settings Schema that describes job settings.
	Settings *JobSettingsSchema `json:"settings,omitempty"`

	// WebhookURL The URL of the webhook to send a notification when any job in the bulk is done.
	WebhookURL *string `json:"webhookURL"`
}

// BulkSpecSchema_Devices defines model for BulkSpecSchema.Devices.
type BulkSpecSchema_Devices struct {
	Union json.RawMessage
}

// BulkStatusEnumSchema The status of a bulk.
type BulkStatusEnumSchema int

// BulkStatusSchema Schema that describes the bulk status.
type BulkStatusSchema struct {
	// FinishedAt The time when the bulk has been marked as completed.
	FinishedAt *time.Time `json:"finishedAt"`

	// StartedAt The time when the bulk has been queued for processing.
	StartedAt *time.Time `json:"startedAt"`

	// Status The status of a bulk.
	Status BulkStatusEnumSchema `json:"status"`
}

// JobActionCommonSchema Common fields shared for all actions.
type JobActionCommonSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id ActionID `json:"id"`
}

// JobActionFwUpdateSchema defines model for JobActionFwUpdateSchema.
type JobActionFwUpdateSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id           ActionID `json:"id"`
	TypeFwUpdate int      `json:"type_fw_update"`
}

// JobActionGetClockSchema defines model for JobActionGetClockSchema.
type JobActionGetClockSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id           ActionID `json:"id"`
	TypeGetClock int      `json:"type_get_clock"`
}

// JobActionGetDisconnectorStateSchema defines model for JobActionGetDisconnectorStateSchema.
type JobActionGetDisconnectorStateSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id                       ActionID `json:"id"`
	TypeGetDisconnectorState int      `json:"type_get_disconnector_state"`
}

// JobActionGetEventsSchema defines model for JobActionGetEventsSchema.
type JobActionGetEventsSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id            ActionID `json:"id"`
	TypeGetEvents int      `json:"type_get_events"`
}

// JobActionGetIrregularProfileSchema defines model for JobActionGetIrregularProfileSchema.
type JobActionGetIrregularProfileSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id                      ActionID `json:"id"`
	TypeGetIrregularProfile int      `json:"type_get_irregular_profile"`
}

// JobActionGetLimiterSchema defines model for JobActionGetLimiterSchema.
type JobActionGetLimiterSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id             ActionID `json:"id"`
	TypeGetLimiter int      `json:"type_get_limiter"`
}

// JobActionGetPeriodicalProfileSchema defines model for JobActionGetPeriodicalProfileSchema.
type JobActionGetPeriodicalProfileSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id ActionID `json:"id"`

	// ParamTfrom The start time of the profile data.
	ParamTfrom *time.Time `json:"param_tfrom,omitempty"`

	// ParamTto The end time of the profile data.
	ParamTto                 *time.Time `json:"param_tto,omitempty"`
	TypeGetPeriodicalProfile int        `json:"type_get_periodical_profile"`
}

// JobActionGetRegisterSchema defines model for JobActionGetRegisterSchema.
type JobActionGetRegisterSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id              ActionID `json:"id"`
	TypeGetRegister int      `json:"type_get_register"`
}

// JobActionGetRelayStateSchema defines model for JobActionGetRelayStateSchema.
type JobActionGetRelayStateSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id                ActionID `json:"id"`
	TypeGetRelayState int      `json:"type_get_relay_state"`
}

// JobActionGetTouSchema defines model for JobActionGetTouSchema.
type JobActionGetTouSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id         ActionID `json:"id"`
	TypeGetTou int      `json:"type_get_tou"`
}

// JobActionListSchema A list of actions to be processed. An empty array is not valid, at least one action must be present. The actions are processed in the same order as they are defined in the list.
type JobActionListSchema = []JobActionSchema

// JobActionResetBillingPeriodSchema defines model for JobActionResetBillingPeriodSchema.
type JobActionResetBillingPeriodSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id                     ActionID `json:"id"`
	TypeResetBillingPeriod int      `json:"type_reset_billing_period"`
}

// JobActionResultSchema defines model for JobActionResultSchema.
type JobActionResultSchema struct {
	// Code The result of the action. If the action is successful, the value is true and vice versa.
	//   * `OK` - The action has been successfully processed.
	//   * `UNSUPPORTED` - The action is not supported by the driver.
	//   * `ERROR` - Some errors have occurred during the processing of the action.
	//   * `NOT_PROCESSED` - The action has not been processed.
	Code JobActionResultSchemaCode `json:"code"`

	// Data The result data of the action.
	Data JobActionResultSchema_Data `json:"data"`

	// Id The ID of the action.
	Id ActionID `json:"id"`
}

// JobActionResultSchemaCode The result of the action. If the action is successful, the value is true and vice versa.
//   - `OK` - The action has been successfully processed.
//   - `UNSUPPORTED` - The action is not supported by the driver.
//   - `ERROR` - Some errors have occurred during the processing of the action.
//   - `NOT_PROCESSED` - The action has not been processed.
type JobActionResultSchemaCode string

// JobActionResultSchema_Data The result data of the action.
type JobActionResultSchema_Data struct {
	Union json.RawMessage
}

// JobActionSchema Schema that describes actions.
type JobActionSchema struct {
	Union json.RawMessage
}

// JobActionSetDisconnectorStateSchema defines model for JobActionSetDisconnectorStateSchema.
type JobActionSetDisconnectorStateSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id                       ActionID `json:"id"`
	TypeSetDisconnectorState int      `json:"type_set_disconnector_state"`
}

// JobActionSetLimiterSchema defines model for JobActionSetLimiterSchema.
type JobActionSetLimiterSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id             ActionID `json:"id"`
	TypeSetLimiter int      `json:"type_set_limiter"`
}

// JobActionSetRelayStateSchema defines model for JobActionSetRelayStateSchema.
type JobActionSetRelayStateSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id                ActionID `json:"id"`
	TypeSetRelayState int      `json:"type_set_relay_state"`
}

// JobActionSetTouSchema defines model for JobActionSetTouSchema.
type JobActionSetTouSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id         ActionID `json:"id"`
	TypeSetTou int      `json:"type_set_tou"`
}

// JobActionSyncClockSchema defines model for JobActionSyncClockSchema.
type JobActionSyncClockSchema struct {
	// Attributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	Attributes externalRef0.AttributesSchema `json:"attributes"`

	// Id The ID of the action.
	Id            ActionID `json:"id"`
	TypeSyncClock int      `json:"type_sync_clock"`
}

// JobCustomDeviceListSchema List of custom-devices to be queued.
type JobCustomDeviceListSchema = []JobCustomDeviceSchema

// JobCustomDeviceListTypedSchema defines model for JobCustomDeviceListTypedSchema.
type JobCustomDeviceListTypedSchema struct {
	// Items List of custom-devices to be queued.
	Items *JobCustomDeviceListSchema `json:"items,omitempty"`

	// ListType The type of the list of devices.
	ListType JobDeviceListDiscriminator `json:"listType"`
}

// JobCustomDeviceSchema defines model for JobCustomDeviceSchema.
type JobCustomDeviceSchema struct {
	// ApplicationProtocol The type of the application layer.
	//   * `IEC_62056_21` - The IEC 62056-21 (IEC-61107, VDEW) protocol.
	//   * `DLMS_SN` - The DLMS short-name protocol.
	//   * `DLMS_LN` - The DLMS logical-name protocol.
	//   * `SCTM` - The SCTM protocol.
	//   * `LIS200` - The LIS200 protocol.
	//   * `ANSI_C12` - The ANSI C12 protocol.
	//   * `MQTT` - The MQTT protocol.
	//   * `MODBUS` - The Modbus protocol.
	ApplicationProtocol *externalRef1.ApplicationProtocolSchema `json:"applicationProtocol,omitempty"`

	// ConnectionInfo The connection information of the device.
	ConnectionInfo []externalRef0.ConnectionInfoSchema `json:"connectionInfo"`

	// DeviceAttributes Schema that describes a set of attributes and their values. The key is the property name and the value is the property value. The value can be of type string, integer, number, boolean, binary, or null.
	DeviceAttributes externalRef0.AttributesSchema `json:"deviceAttributes"`

	// ExternalID The public ID of the device.
	ExternalID *string `json:"externalID"`

	// Id The ID of the job. The ID must be unique across all OpenHES components.
	Id JobID `json:"id"`

	// Timezone The timezone of the device.
	Timezone *string `json:"timezone"`
}

// JobDeviceListDiscriminator The type of the list of devices.
type JobDeviceListDiscriminator string

// JobDeviceListSchema List of device identifiers to be queued, look for devices in device registry.
type JobDeviceListSchema = []JobDeviceSchema

// JobDeviceListTypedSchema defines model for JobDeviceListTypedSchema.
type JobDeviceListTypedSchema struct {
	// Items List of device identifiers to be queued, look for devices in device registry.
	Items *JobDeviceListSchema `json:"items,omitempty"`

	// ListType The type of the list of devices.
	ListType JobDeviceListDiscriminator `json:"listType"`
}

// JobDeviceSchema defines model for JobDeviceSchema.
type JobDeviceSchema struct {
	// DeviceId The ID of the device.
	DeviceId openapi_types.UUID `json:"deviceId"`

	// Id The ID of the job. The ID must be unique across all OpenHES components.
	Id JobID `json:"id"`
}

// JobErrorCodeSchema The result of the job.
//   - `NONE` - No error, the job has been successfully processed.
//   - `ERROR` - Some error(s) have occurred during the processing of the job.
//   - `FATAL` - The job could not be processed due to a fatal error.
type JobErrorCodeSchema string

// JobID The ID of the job. The ID must be unique across all OpenHES components.
type JobID = openapi_types.UUID

// JobSettingsSchema Schema that describes job settings.
type JobSettingsSchema struct {
	// Attempts The number of attempts to process the job per communication unit. The default is [1].
	Attempts *[]int32 `json:"attempts,omitempty"`

	// DeferStart The delay in seconds before starting the first attempt of the job.
	DeferStart *int64 `json:"deferStart,omitempty"`

	// ExpiresAt The time when the job expires.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// MaxDuration The maximum duration in seconds to process the job.
	MaxDuration *int64 `json:"maxDuration,omitempty"`

	// Priority The priority of the job. The lower the value, the lower the priority.
	Priority *int32 `json:"priority,omitempty"`

	// RetryDelay The delay in seconds before retrying the job.
	RetryDelay *int64 `json:"retryDelay,omitempty"`
}

// JobStatusCodeEnumSchema The status of the job.
type JobStatusCodeEnumSchema int

// JobStatusSchema Schema that describes the status of a job.
type JobStatusSchema struct {
	// Code The result of the job.
	//   * `NONE` - No error, the job has been successfully processed.
	//   * `ERROR` - Some error(s) have occurred during the processing of the job.
	//   * `FATAL` - The job could not be processed due to a fatal error.
	Code JobErrorCodeSchema `json:"code"`

	// FinishedAt The time when the driver finished processing the job.
	FinishedAt *time.Time `json:"finishedAt"`

	// Results The results of the actions. If an action has not been processed, the result is not present.
	Results *[]JobActionResultSchema `json:"results"`

	// StartedAt The time when the driver started processing the job.
	StartedAt *time.Time `json:"startedAt"`

	// Status The status of the job.
	Status JobStatusCodeEnumSchema `json:"status"`
}

// AsJobDeviceListTypedSchema returns the union data inside the BulkSpecSchema_Devices as a JobDeviceListTypedSchema
func (t BulkSpecSchema_Devices) AsJobDeviceListTypedSchema() (JobDeviceListTypedSchema, error) {
	var body JobDeviceListTypedSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobDeviceListTypedSchema overwrites any union data inside the BulkSpecSchema_Devices as the provided JobDeviceListTypedSchema
func (t *BulkSpecSchema_Devices) FromJobDeviceListTypedSchema(v JobDeviceListTypedSchema) error {
	v.ListType = "JOBDEVICESID"
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobDeviceListTypedSchema performs a merge with any union data inside the BulkSpecSchema_Devices, using the provided JobDeviceListTypedSchema
func (t *BulkSpecSchema_Devices) MergeJobDeviceListTypedSchema(v JobDeviceListTypedSchema) error {
	v.ListType = "JOBDEVICESID"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsJobCustomDeviceListTypedSchema returns the union data inside the BulkSpecSchema_Devices as a JobCustomDeviceListTypedSchema
func (t BulkSpecSchema_Devices) AsJobCustomDeviceListTypedSchema() (JobCustomDeviceListTypedSchema, error) {
	var body JobCustomDeviceListTypedSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobCustomDeviceListTypedSchema overwrites any union data inside the BulkSpecSchema_Devices as the provided JobCustomDeviceListTypedSchema
func (t *BulkSpecSchema_Devices) FromJobCustomDeviceListTypedSchema(v JobCustomDeviceListTypedSchema) error {
	v.ListType = "JOBDEVICESFULL"
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobCustomDeviceListTypedSchema performs a merge with any union data inside the BulkSpecSchema_Devices, using the provided JobCustomDeviceListTypedSchema
func (t *BulkSpecSchema_Devices) MergeJobCustomDeviceListTypedSchema(v JobCustomDeviceListTypedSchema) error {
	v.ListType = "JOBDEVICESFULL"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

func (t BulkSpecSchema_Devices) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"listType"`
	}
	err := json.Unmarshal(t.Union, &discriminator)
	return discriminator.Discriminator, err
}

func (t BulkSpecSchema_Devices) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "JOBDEVICESFULL":
		return t.AsJobCustomDeviceListTypedSchema()
	case "JOBDEVICESID":
		return t.AsJobDeviceListTypedSchema()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t BulkSpecSchema_Devices) MarshalJSON() ([]byte, error) {
	b, err := t.Union.MarshalJSON()
	return b, err
}

func (t *BulkSpecSchema_Devices) UnmarshalJSON(b []byte) error {
	err := t.Union.UnmarshalJSON(b)
	return err
}

// AsExternalRef2DeviceRegistersDataSchema returns the union data inside the JobActionResultSchema_Data as a externalRef2.DeviceRegistersDataSchema
func (t JobActionResultSchema_Data) AsExternalRef2DeviceRegistersDataSchema() (externalRef2.DeviceRegistersDataSchema, error) {
	var body externalRef2.DeviceRegistersDataSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromExternalRef2DeviceRegistersDataSchema overwrites any union data inside the JobActionResultSchema_Data as the provided externalRef2.DeviceRegistersDataSchema
func (t *JobActionResultSchema_Data) FromExternalRef2DeviceRegistersDataSchema(v externalRef2.DeviceRegistersDataSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeExternalRef2DeviceRegistersDataSchema performs a merge with any union data inside the JobActionResultSchema_Data, using the provided externalRef2.DeviceRegistersDataSchema
func (t *JobActionResultSchema_Data) MergeExternalRef2DeviceRegistersDataSchema(v externalRef2.DeviceRegistersDataSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsExternalRef2DeviceProfileDataSchema returns the union data inside the JobActionResultSchema_Data as a externalRef2.DeviceProfileDataSchema
func (t JobActionResultSchema_Data) AsExternalRef2DeviceProfileDataSchema() (externalRef2.DeviceProfileDataSchema, error) {
	var body externalRef2.DeviceProfileDataSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromExternalRef2DeviceProfileDataSchema overwrites any union data inside the JobActionResultSchema_Data as the provided externalRef2.DeviceProfileDataSchema
func (t *JobActionResultSchema_Data) FromExternalRef2DeviceProfileDataSchema(v externalRef2.DeviceProfileDataSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeExternalRef2DeviceProfileDataSchema performs a merge with any union data inside the JobActionResultSchema_Data, using the provided externalRef2.DeviceProfileDataSchema
func (t *JobActionResultSchema_Data) MergeExternalRef2DeviceProfileDataSchema(v externalRef2.DeviceProfileDataSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

func (t JobActionResultSchema_Data) MarshalJSON() ([]byte, error) {
	b, err := t.Union.MarshalJSON()
	return b, err
}

func (t *JobActionResultSchema_Data) UnmarshalJSON(b []byte) error {
	err := t.Union.UnmarshalJSON(b)
	return err
}

// AsJobActionGetRegisterSchema returns the union data inside the JobActionSchema as a JobActionGetRegisterSchema
func (t JobActionSchema) AsJobActionGetRegisterSchema() (JobActionGetRegisterSchema, error) {
	var body JobActionGetRegisterSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobActionGetRegisterSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetRegisterSchema
func (t *JobActionSchema) FromJobActionGetRegisterSchema(v JobActionGetRegisterSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobActionGetRegisterSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetRegisterSchema
func (t *JobActionSchema) MergeJobActionGetRegisterSchema(v JobActionGetRegisterSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsJobActionGetPeriodicalProfileSchema returns the union data inside the JobActionSchema as a JobActionGetPeriodicalProfileSchema
func (t JobActionSchema) AsJobActionGetPeriodicalProfileSchema() (JobActionGetPeriodicalProfileSchema, error) {
	var body JobActionGetPeriodicalProfileSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobActionGetPeriodicalProfileSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetPeriodicalProfileSchema
func (t *JobActionSchema) FromJobActionGetPeriodicalProfileSchema(v JobActionGetPeriodicalProfileSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobActionGetPeriodicalProfileSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetPeriodicalProfileSchema
func (t *JobActionSchema) MergeJobActionGetPeriodicalProfileSchema(v JobActionGetPeriodicalProfileSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsJobActionGetIrregularProfileSchema returns the union data inside the JobActionSchema as a JobActionGetIrregularProfileSchema
func (t JobActionSchema) AsJobActionGetIrregularProfileSchema() (JobActionGetIrregularProfileSchema, error) {
	var body JobActionGetIrregularProfileSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobActionGetIrregularProfileSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetIrregularProfileSchema
func (t *JobActionSchema) FromJobActionGetIrregularProfileSchema(v JobActionGetIrregularProfileSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobActionGetIrregularProfileSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetIrregularProfileSchema
func (t *JobActionSchema) MergeJobActionGetIrregularProfileSchema(v JobActionGetIrregularProfileSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsJobActionGetEventsSchema returns the union data inside the JobActionSchema as a JobActionGetEventsSchema
func (t JobActionSchema) AsJobActionGetEventsSchema() (JobActionGetEventsSchema, error) {
	var body JobActionGetEventsSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobActionGetEventsSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetEventsSchema
func (t *JobActionSchema) FromJobActionGetEventsSchema(v JobActionGetEventsSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobActionGetEventsSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetEventsSchema
func (t *JobActionSchema) MergeJobActionGetEventsSchema(v JobActionGetEventsSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsJobActionGetClockSchema returns the union data inside the JobActionSchema as a JobActionGetClockSchema
func (t JobActionSchema) AsJobActionGetClockSchema() (JobActionGetClockSchema, error) {
	var body JobActionGetClockSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobActionGetClockSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetClockSchema
func (t *JobActionSchema) FromJobActionGetClockSchema(v JobActionGetClockSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobActionGetClockSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetClockSchema
func (t *JobActionSchema) MergeJobActionGetClockSchema(v JobActionGetClockSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsJobActionSyncClockSchema returns the union data inside the JobActionSchema as a JobActionSyncClockSchema
func (t JobActionSchema) AsJobActionSyncClockSchema() (JobActionSyncClockSchema, error) {
	var body JobActionSyncClockSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobActionSyncClockSchema overwrites any union data inside the JobActionSchema as the provided JobActionSyncClockSchema
func (t *JobActionSchema) FromJobActionSyncClockSchema(v JobActionSyncClockSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobActionSyncClockSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionSyncClockSchema
func (t *JobActionSchema) MergeJobActionSyncClockSchema(v JobActionSyncClockSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsJobActionGetRelayStateSchema returns the union data inside the JobActionSchema as a JobActionGetRelayStateSchema
func (t JobActionSchema) AsJobActionGetRelayStateSchema() (JobActionGetRelayStateSchema, error) {
	var body JobActionGetRelayStateSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobActionGetRelayStateSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetRelayStateSchema
func (t *JobActionSchema) FromJobActionGetRelayStateSchema(v JobActionGetRelayStateSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobActionGetRelayStateSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetRelayStateSchema
func (t *JobActionSchema) MergeJobActionGetRelayStateSchema(v JobActionGetRelayStateSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsJobActionSetRelayStateSchema returns the union data inside the JobActionSchema as a JobActionSetRelayStateSchema
func (t JobActionSchema) AsJobActionSetRelayStateSchema() (JobActionSetRelayStateSchema, error) {
	var body JobActionSetRelayStateSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobActionSetRelayStateSchema overwrites any union data inside the JobActionSchema as the provided JobActionSetRelayStateSchema
func (t *JobActionSchema) FromJobActionSetRelayStateSchema(v JobActionSetRelayStateSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobActionSetRelayStateSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionSetRelayStateSchema
func (t *JobActionSchema) MergeJobActionSetRelayStateSchema(v JobActionSetRelayStateSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsJobActionGetDisconnectorStateSchema returns the union data inside the JobActionSchema as a JobActionGetDisconnectorStateSchema
func (t JobActionSchema) AsJobActionGetDisconnectorStateSchema() (JobActionGetDisconnectorStateSchema, error) {
	var body JobActionGetDisconnectorStateSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobActionGetDisconnectorStateSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetDisconnectorStateSchema
func (t *JobActionSchema) FromJobActionGetDisconnectorStateSchema(v JobActionGetDisconnectorStateSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobActionGetDisconnectorStateSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetDisconnectorStateSchema
func (t *JobActionSchema) MergeJobActionGetDisconnectorStateSchema(v JobActionGetDisconnectorStateSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsJobActionSetDisconnectorStateSchema returns the union data inside the JobActionSchema as a JobActionSetDisconnectorStateSchema
func (t JobActionSchema) AsJobActionSetDisconnectorStateSchema() (JobActionSetDisconnectorStateSchema, error) {
	var body JobActionSetDisconnectorStateSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobActionSetDisconnectorStateSchema overwrites any union data inside the JobActionSchema as the provided JobActionSetDisconnectorStateSchema
func (t *JobActionSchema) FromJobActionSetDisconnectorStateSchema(v JobActionSetDisconnectorStateSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobActionSetDisconnectorStateSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionSetDisconnectorStateSchema
func (t *JobActionSchema) MergeJobActionSetDisconnectorStateSchema(v JobActionSetDisconnectorStateSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsJobActionGetTouSchema returns the union data inside the JobActionSchema as a JobActionGetTouSchema
func (t JobActionSchema) AsJobActionGetTouSchema() (JobActionGetTouSchema, error) {
	var body JobActionGetTouSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobActionGetTouSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetTouSchema
func (t *JobActionSchema) FromJobActionGetTouSchema(v JobActionGetTouSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobActionGetTouSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetTouSchema
func (t *JobActionSchema) MergeJobActionGetTouSchema(v JobActionGetTouSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsJobActionSetTouSchema returns the union data inside the JobActionSchema as a JobActionSetTouSchema
func (t JobActionSchema) AsJobActionSetTouSchema() (JobActionSetTouSchema, error) {
	var body JobActionSetTouSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobActionSetTouSchema overwrites any union data inside the JobActionSchema as the provided JobActionSetTouSchema
func (t *JobActionSchema) FromJobActionSetTouSchema(v JobActionSetTouSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobActionSetTouSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionSetTouSchema
func (t *JobActionSchema) MergeJobActionSetTouSchema(v JobActionSetTouSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsJobActionGetLimiterSchema returns the union data inside the JobActionSchema as a JobActionGetLimiterSchema
func (t JobActionSchema) AsJobActionGetLimiterSchema() (JobActionGetLimiterSchema, error) {
	var body JobActionGetLimiterSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobActionGetLimiterSchema overwrites any union data inside the JobActionSchema as the provided JobActionGetLimiterSchema
func (t *JobActionSchema) FromJobActionGetLimiterSchema(v JobActionGetLimiterSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobActionGetLimiterSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionGetLimiterSchema
func (t *JobActionSchema) MergeJobActionGetLimiterSchema(v JobActionGetLimiterSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsJobActionSetLimiterSchema returns the union data inside the JobActionSchema as a JobActionSetLimiterSchema
func (t JobActionSchema) AsJobActionSetLimiterSchema() (JobActionSetLimiterSchema, error) {
	var body JobActionSetLimiterSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobActionSetLimiterSchema overwrites any union data inside the JobActionSchema as the provided JobActionSetLimiterSchema
func (t *JobActionSchema) FromJobActionSetLimiterSchema(v JobActionSetLimiterSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobActionSetLimiterSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionSetLimiterSchema
func (t *JobActionSchema) MergeJobActionSetLimiterSchema(v JobActionSetLimiterSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsJobActionResetBillingPeriodSchema returns the union data inside the JobActionSchema as a JobActionResetBillingPeriodSchema
func (t JobActionSchema) AsJobActionResetBillingPeriodSchema() (JobActionResetBillingPeriodSchema, error) {
	var body JobActionResetBillingPeriodSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobActionResetBillingPeriodSchema overwrites any union data inside the JobActionSchema as the provided JobActionResetBillingPeriodSchema
func (t *JobActionSchema) FromJobActionResetBillingPeriodSchema(v JobActionResetBillingPeriodSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobActionResetBillingPeriodSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionResetBillingPeriodSchema
func (t *JobActionSchema) MergeJobActionResetBillingPeriodSchema(v JobActionResetBillingPeriodSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

// AsJobActionFwUpdateSchema returns the union data inside the JobActionSchema as a JobActionFwUpdateSchema
func (t JobActionSchema) AsJobActionFwUpdateSchema() (JobActionFwUpdateSchema, error) {
	var body JobActionFwUpdateSchema
	err := json.Unmarshal(t.Union, &body)
	return body, err
}

// FromJobActionFwUpdateSchema overwrites any union data inside the JobActionSchema as the provided JobActionFwUpdateSchema
func (t *JobActionSchema) FromJobActionFwUpdateSchema(v JobActionFwUpdateSchema) error {
	b, err := json.Marshal(v)
	t.Union = b
	return err
}

// MergeJobActionFwUpdateSchema performs a merge with any union data inside the JobActionSchema, using the provided JobActionFwUpdateSchema
func (t *JobActionSchema) MergeJobActionFwUpdateSchema(v JobActionFwUpdateSchema) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.Union, b)
	t.Union = merged
	return err
}

func (t JobActionSchema) MarshalJSON() ([]byte, error) {
	b, err := t.Union.MarshalJSON()
	return b, err
}

func (t *JobActionSchema) UnmarshalJSON(b []byte) error {
	err := t.Union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9w8a3PbuHZ/BcN2pklLya9NttFMZ+pI2r3aq9i6lr230zTjhUhIwoYEuABoW5vxf+8c",
	"ACRBkZREm8rt9JNpEjg4LxycF/TNC3iccEaYkt7gmyeDNYmxfrwMFOVsMoLnkMhA0AReeAPvdk3QZIT4",
	"Eqk1QViP6/8P83xvyUWMlTfw0pSGnu+pTUK8gSeVoGzlPfvexzT6uh/k73yBFmn0tY/s+ziVCi0IShn9",
	"I4UlBZcS4ShC1wlhfxnPUUFGC0zmCQnmmuIqRuY9UmuskPmyIBIwk2jJBcJIJiSgSxqgUNAHIhCsYNZO",
	"BE+IUJRoPhr+6Md/FmTpDbx/OimwPbEcP/mFLwzHp1Qqi9Sz7wVcCBLhXaJwhjg8LPi39Z1KlEoSIsXR",
	"SvA00SMt11gaRXgREW+gREpquBaSBxoYukIKiMSUYcUFvIhxksCwwTfvl+uPo/Gvk+F4/tPddLqD5GEq",
	"FY9HGioQfrtJSGip9x0wQHsjkPrpz7kgNlc4BjIiOwI+cUaul97g816hNAHfO3EXac9fgJdabzRCtXJ1",
	"9AppARqh2Q1iZKs/ZruDM5JJX6ZJwgXMcKBYIceUTQlbqbU3OKsRMQ33qardxM++J4lSlK0OUe65HVpI",
	"55Es1px/vbuZ1tN/dzPNyLFDgXxJWIgwYlzB5jNa/bgmDGG20YaDslz/QddDzsi2SRB0v64/+54gf6RU",
	"kNAbfPa0Ecm03883dUmKX3IgfPE7CVRuZhRWqRyzNG4yNkCu1KOAYmw2r+d7hKWxN/h86p/55/6F/0Ox",
	"AmWKrIjwfO+pB6N6DkAJCN86PPgjJSkJtd1KBA+IlJStQIGozJalYE4lsFchvFREIMwQVorEiUJLTCMJ",
	"+LhAg1QIwlS0QQtC2SqDTMLKQB4nEVFbH9ZYogUhDAWYBSSKaj6TpwTY3wfGWiofsGA4JprCv92N78Yj",
	"z/du7q6uJlc/e743vP40m45v9dvh5dVwPJ3q5/F/zSY345H3pSSRdqY/VyrDsX7F0C8po3JNwktVL2BF",
	"Y2JUVVWYEGPxlYQIu9wqK22IFekBiEPMtFQYNv9LMKnXldfholJ5iE2p7JPtTWhB1e2z/Pgc8jjmrEm0",
	"5itaUhKFEsk1FpZW8CXspq49xJUSdJEqspcQnhCGE3oPf9dE3hubkf25zOEUdnC/wc1dsVqr5OC2kzM/",
	"Pd4lILmCNziKDjsEa1gLJ2CZR7Dy/fLxPtWrGI/gicZgwc70qZM/b9mwbaq2AFWJ+uIfvGONTPXBAXsC",
	"YbSkIn7EgiADvl/i0c9EDSMefD0qj1ZE3Qewymt5VADqiEcrovQbDbTCmRGVAWeMBIoL2Kvk6FwKnRXv",
	"YfeTLlhWA7Vj/rkr6POiqmbjB2DN0TlIHrLQ7rVcs5A65JSBWOHMRAiySiMsZoIvaXR8LaPZgveJWbEL",
	"dlWBdsg5zFAOH1n4FT5OaUwVEUdnX2TW6YJpGaiOt6MFi7JwpcKqGRGUhzTA0ZF1LsECx/dqKXjcGAUI",
	"ZRw0G/tY8aIQK7zDD6v4XXYpxesXgjCqi2Vy2SU5D7vcRjVQu9xHqIDfuI9uyIrK77GRhF2oC77lsDrl",
	"Vga1hkcR3nwfn0DAUt05Ay64js2OBt1w/N/y9OicUjztgkMApmPOgDHp8WUvlQQpiB7L/HFSoBXbdYki",
	"KpVOk5hwDeAuiJN+QJcMkThRG4SFwBtEJWJcoQcc0dBHWKGIYIDAcsyyBFoiiCRMmdRaBh5ChRx4ll2S",
	"GCynCImAmF2tyUaPC8mSsmIUYGpsKVUkPjwFXMSGtbk6TVaJYTdEEvWRRhFlK3OWHVW5gE3qfmHWsyb6",
	"tZpWC7MjtdOwTa7DwLdmv7/NxDRy9K5MeMDDhjyt0PO2yiFo4v4LOijTAHRomUa+/vKAo5TAByVSgjAL",
	"0QMNCHogQsIBjNC/ot+u//ob6jnaWKRpCmjRxtF9O+/uan43m13f3I5HWwDsZijyw4uNiVh0GjObP765",
	"ub6BmXMeE0SE4EKiNX4giAc67xeiMAUPIHMdbJ6oUhPS0K6ub+9nN9fD8XxewQcIAoQ0US4dRfbTu/6r",
	"53sOSZ7vaQQ93yuBdtTFqVhghXfKDQbU1bIOqxBU0j2aj/YPgHYfTTEg8yfkCCt8YD3hBctYT9Zd5EsH",
	"2Sa9Dyxbd6ab2mVXs9yb16I00+ShHVCc2ev5t4HRELC2AVHKBrSZ6GarDp4337DgRRPrPL3DV33N5B3p",
	"pzYIvBpGyXVrs/ILZlVi+DbrvXBmoydxMIStNLM2OoeI4DiuijxKFlEeNYsoD8wizr9Pjkd2l+OR3ed4",
	"5EE5nvl3C1FltyGqPE6IKveFqPPjh6iymxBVdhuiysNC1O0j9Egs2rCgm1KRA6krRm1YsBac0T9JtWa0",
	"3fzS5AxObSwf6PE922BhQ3pTim4XQLsLtwijdzXrVELBl+BS7urKO5EGLfqPRqWGq20p5yAbnPIaxlQI",
	"w0kS2Z6ameCKBzxqXe52A5P7yypAt7VNn20Qa7Alb+pty8YgykxCGp5tuGbUpYWC7C7OD0sIlbRnYqDX",
	"KI+Ze3nE/gDypIhgOGrq/0vSRUQDp/XPZcve9oz98eAvfGG6vcAk/skZaW4q+dNpQWuBRX2cWdKOGkY3",
	"KHrThqlHepPkCGd5RWuEyjmIUiuiv93gWJd4KKGyz/6ZNRENCVN0SYko20AfRZx/1Y0qmYmkLJtkkvJi",
	"085QtjaRHRvH/yNmcbdBNByehPsall1d39t5fPCOa25BnIRN9IyF4GLIQ7Kr1bCcsfydL4pM3dX4N9RD",
	"V9wk/fy8HfvAxGNN4vCNfNsmdehg89Pl7eU0yxcCEgFPo9CmC52cfJgS2C0YLbHCkVm1vHuBLidrqAE3",
	"bdqD2tOP2ZlebZY9vDm9CH8M/U84Tkwh1vZySm/w+Uz7e0sC4bdQ3uAUBiZUEHkJeJ2fnv/YOzvvXZzd",
	"nl8M3n0YvPvw354P3ucoFdhgcPH+9NT3EkG5oGqjQQiixGYE8YQ3eH/6XNNBZ9cHYpY4jVSOyjarWRov",
	"iNA1HjsL5GsFnqtkQgQwN05Z1gecMmqLN3YFRCX6fPal79rFnP+UqYtzQ5hxpT982O1X7/UECpY6NJ7W",
	"URjquIsyJEnAWQh7a8mFLf9nm2NJhVR5E66jfK4WUabe/+BS8e/vfwDZ5ISc1hHiyHt/gygw207oH9wX",
	"UFIXhx1Gc6pLWvzBOGDr7+XMqQp/Nwt+PC9x4OxdHQsK5d0nrGxkZf9H/JGIophjrGXxMpu3jeyW1u2T",
	"lbuxHFTft1IsDSRTrL0M/PBhD1bP9aeP6eCF4+fwbncHoVe2u+vu/4673S3Mvc3u2bjtXvfS2Vlpdc++",
	"HqfTPRdI+0Z39zKCFU59OXSPG7Ptjjz7Ldvk7fWVbJLrMBTewot7040jJHd5SbJcG5S6sgvasqt+6dvk",
	"mrRnEIzImgte0A9Qqkw/N9KVn0St2v8th+2cjhl8WPN/k+Vo6P+3Rcg6D7hldA1+SRhS4I0uALr+CtvY",
	"bN42Ud+qNjp/ZTwX982C84hgppNsZXY9H5Z1w9pKGV/IYq+7BdSaUGEOHmmOo69EN7tYv1rffENgQ7Lh",
	"TsuBO0S/NRDMgAAzfZ1sacJjQ7iPLLm+dc98ZEnz0YIyLDY+4gIBiUZhyrIBu7bivUxTM1L6TjzvDOnR",
	"OOHGj0owhKTeiqp1uugHPD4JNgvBZYQX8mRNZO+8hxOa51VOrORP8iW0Fr0g8VPK6JaNX0TZ124SZCOs",
	"8NSB1qD4pQVr9P7bS7sVGtgAEfNtkEySl7Yn7IA7W3NGppSRI8CeE0Fx9Ik/4aMBH1FBAlUUN7+00K46",
	"8lscyglMRRFlBL2JeUjit05+tO7WkrVG9VlDDayItLbTGHtuiSacR/e0ITGikUMwBE1GB0a9ukqhJ762",
	"1GGA+Bn1Ba7tD4y9CtBCeqGehyYzU2UCUK740EQhQayTIJGk4EiiZL2RujlZS/2RqjVPlb7qylkvJDFY",
	"9oCzJbVB0xvSX/WRTAgJwRonGOKPt7ZH0Yxc5QGWcYcBfLQxh4zxCCaznuI9i6KrE2XtWnPZ4GBMZgiH",
	"oYB4jZtQCMbqo6hG02p0SzQAhi87dLZQskqU9f7du4t3+8J7W08Euu+NuF5fnHSB+YZnlsJu1NExdi2U",
	"sSRip8iSascPI4CasVZ7BvqF7RqUKNwwHNPAUWNHr4I1Zisi0QPFOj9jdXSHnbKjZv8ouYdY4X/Y4kfb",
	"Rq4CxvwJd6TLGlSuyTnr/JIUX6vbrvPRQq1vh7OTyWyPtv0/tVsqSF4rYQDxAht1YMl3bwHOKT+jCG+K",
	"duTJeHj//vz03fv787OsHjAZD5F+1zs/Q28m42Hv/dnZ6Y8++nU0/vtbiG702hmI0fTT/H5+lc2Gf5Fc",
	"c6F6Wry1w6fl4RFfwVlZP2E+vP2UjYbnyoDpZH5+epoNMf9VBl1ezSf3w7PzbBj8j4Zn55WBn/52e5sN",
	"gufqgOvRx7t5PoSHi1S6g5ziiMtdz/csp7KnKTwBRZ7vGaw938vw9HwPVoc/er3amsqLIqC9ygKGpwdx",
	"0X5VAY3QKpIrjI9yhXFUBU0YHFgQzZqfFaFqbUSfDXETJpRRRbEimWvlFiIWG62fcPLJR6qCtelpUdY3",
	"RuPsv7+MpsN/Ky3RR/PslLW2CE7k/0BxGikKLmFWAObOTRTwDjMOAMiMcnhGbybz6xOg9+Li9MNbtBQ4",
	"1gnRicoiff17QEsu0AMWlKeytBMzxKSPZBqswZfUCHOBjNAdjIOIEqZOJBHAoZfhP7yejz/d//3mcjYb",
	"32SE6JfoUeAkIaIWdY1THd4do7d7YwFmco2jqISbHVWHHXpcE0EQ44irNRHmNkKh1gXPQZR+9uNNOTIu",
	"Kr2PB2CiB9WyybmscTmbTSfDy4/TcQa8QCtH3KY1LaxFRGDJf9H4LdNIrxZRqQgDBpe3R/FTWQ02CIjV",
	"SW5HFQoj43ufzJ8yru2Nz86LEx/L3X0HZ84pW0U61FKUpbCZFgAIzFb1im3ZMZFF7XD/tWANtc1FXZMp",
	"fFW6aj+/ftWLOFmsdt5DywVaiCVr7slkYPOmr2gd24X3z4QRQQONbKkE81xN1r+SIR3wQqvS0XjRuKk6",
	"5YVzzalNRm3PjjScOTI7HN0orlLWxBD6W911fafcu2UQsnCiGjKkjDaYGvjS/KMAuzv3LL8s+JyeL93Y",
	"geya18tknd1dbxQ2GE6pcJw0V830Z9cDbWOAD2N5I6utBf9Oduq5W5HJl8kss1SZ7I5spGoU7LVGqpHD",
	"7V0KU5zTQQlVeSsDxBjkyRBfp9XZt4ZfAbFfM+0ztcBDjUhR3d3X4NEAV3edVOHmil4F6wAqSl7VCu3+",
	"RZwxIU8XkbNldxVxazYGvKK2gx3cPmzSxiTGNNJLLvl/FjXLfsB1ccL8JOlQv0dTvJBIEQxfUgGz1kol",
	"cnBy8vj42C9PPqEsJE89wvprFUembTYgTGqGWbAf59PeWf+0Ag1UVvJUBKTPxerETpQn2Xjd5K0iUvxS",
	"3uVsokPWyPzsrW1q9HzvgQhpxHLat1PtxvAG3kX/tH8BqojVWnoDlkbR8/8GAAD//66kAF5rWAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../device/device.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "../driver/driver.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(path.Dir(pathToFile), "../driver/driverdata/driverdata.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
