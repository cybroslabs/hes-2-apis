// Package driverdata provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package driverdata

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// DeviceProfileBlockSchema Schema that holds the single continuous block of profile data.
type DeviceProfileBlockSchema struct {
	// Start The start time of the block.
	Start *time.Time `json:"start,omitempty"`

	// Values Schema that holds the list of profile values.
	Values *DeviceProfileBlockValuesSchema `json:"values,omitempty"`
}

// DeviceProfileBlockValuesSchema Schema that holds the list of profile values.
type DeviceProfileBlockValuesSchema = []GenericValueStatusSchema

// DeviceProfileBlocksSchema Schema that holds the list of profile blocks.
type DeviceProfileBlocksSchema = []DeviceProfileBlockSchema

// DeviceProfileDataSchema Schema that holds the profile data.
type DeviceProfileDataSchema struct {
	// Blocks Schema that holds the list of profile blocks.
	Blocks DeviceProfileBlocksSchema `json:"blocks"`

	// Period The period of the profile data in seconds.
	Period int32 `json:"period"`

	// Unit The unit of the profile data.
	Unit string `json:"unit"`
}

// DeviceRegisterDataSchema Schema that holds the register data.
type DeviceRegisterDataSchema struct {
	// Timestamp The timestamp of the data.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// Unit The unit of the data.
	Unit *string `json:"unit,omitempty"`

	// Value Schema that holds the single value with its status and exponent.
	Value *GenericValueStatusSchema `json:"value,omitempty"`
}

// DeviceRegistersDataSchema Schema that holds the list of registers.
type DeviceRegistersDataSchema = []DeviceRegisterDataSchema

// GenericValueStatusSchema Schema that holds the single value with its status and exponent.
type GenericValueStatusSchema struct {
	// Exponent The exponent of the value.
	Exponent *int32 `json:"exponent,omitempty"`

	// Status The status of the value.
	Status *int64 `json:"status,omitempty"`

	// Value The value.
	Value *GenericValueStatusSchema_Value `json:"value,omitempty"`
}

// GenericValueStatusSchemaValue0 defines model for .
type GenericValueStatusSchemaValue0 = string

// GenericValueStatusSchemaValue1 defines model for .
type GenericValueStatusSchemaValue1 = int64

// GenericValueStatusSchemaValue2 defines model for .
type GenericValueStatusSchemaValue2 = float64

// GenericValueStatusSchemaValue3 defines model for .
type GenericValueStatusSchemaValue3 = bool

// GenericValueStatusSchema_Value The value.
type GenericValueStatusSchema_Value struct {
	union json.RawMessage
}

// AsGenericValueStatusSchemaValue0 returns the union data inside the GenericValueStatusSchema_Value as a GenericValueStatusSchemaValue0
func (t GenericValueStatusSchema_Value) AsGenericValueStatusSchemaValue0() (GenericValueStatusSchemaValue0, error) {
	var body GenericValueStatusSchemaValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGenericValueStatusSchemaValue0 overwrites any union data inside the GenericValueStatusSchema_Value as the provided GenericValueStatusSchemaValue0
func (t *GenericValueStatusSchema_Value) FromGenericValueStatusSchemaValue0(v GenericValueStatusSchemaValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGenericValueStatusSchemaValue0 performs a merge with any union data inside the GenericValueStatusSchema_Value, using the provided GenericValueStatusSchemaValue0
func (t *GenericValueStatusSchema_Value) MergeGenericValueStatusSchemaValue0(v GenericValueStatusSchemaValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGenericValueStatusSchemaValue1 returns the union data inside the GenericValueStatusSchema_Value as a GenericValueStatusSchemaValue1
func (t GenericValueStatusSchema_Value) AsGenericValueStatusSchemaValue1() (GenericValueStatusSchemaValue1, error) {
	var body GenericValueStatusSchemaValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGenericValueStatusSchemaValue1 overwrites any union data inside the GenericValueStatusSchema_Value as the provided GenericValueStatusSchemaValue1
func (t *GenericValueStatusSchema_Value) FromGenericValueStatusSchemaValue1(v GenericValueStatusSchemaValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGenericValueStatusSchemaValue1 performs a merge with any union data inside the GenericValueStatusSchema_Value, using the provided GenericValueStatusSchemaValue1
func (t *GenericValueStatusSchema_Value) MergeGenericValueStatusSchemaValue1(v GenericValueStatusSchemaValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGenericValueStatusSchemaValue2 returns the union data inside the GenericValueStatusSchema_Value as a GenericValueStatusSchemaValue2
func (t GenericValueStatusSchema_Value) AsGenericValueStatusSchemaValue2() (GenericValueStatusSchemaValue2, error) {
	var body GenericValueStatusSchemaValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGenericValueStatusSchemaValue2 overwrites any union data inside the GenericValueStatusSchema_Value as the provided GenericValueStatusSchemaValue2
func (t *GenericValueStatusSchema_Value) FromGenericValueStatusSchemaValue2(v GenericValueStatusSchemaValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGenericValueStatusSchemaValue2 performs a merge with any union data inside the GenericValueStatusSchema_Value, using the provided GenericValueStatusSchemaValue2
func (t *GenericValueStatusSchema_Value) MergeGenericValueStatusSchemaValue2(v GenericValueStatusSchemaValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGenericValueStatusSchemaValue3 returns the union data inside the GenericValueStatusSchema_Value as a GenericValueStatusSchemaValue3
func (t GenericValueStatusSchema_Value) AsGenericValueStatusSchemaValue3() (GenericValueStatusSchemaValue3, error) {
	var body GenericValueStatusSchemaValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGenericValueStatusSchemaValue3 overwrites any union data inside the GenericValueStatusSchema_Value as the provided GenericValueStatusSchemaValue3
func (t *GenericValueStatusSchema_Value) FromGenericValueStatusSchemaValue3(v GenericValueStatusSchemaValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGenericValueStatusSchemaValue3 performs a merge with any union data inside the GenericValueStatusSchema_Value, using the provided GenericValueStatusSchemaValue3
func (t *GenericValueStatusSchema_Value) MergeGenericValueStatusSchemaValue3(v GenericValueStatusSchemaValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GenericValueStatusSchema_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GenericValueStatusSchema_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RVQW/bOgz+KwLfO6Z23+uwg09b12EbUKDFMuzS9SDLdMxNljyJTloE+e+DLDtNG2eJ",
	"t5shih8/fvxorUHZurEGDXvI1uBVhbXsPq9wSQpvnS1J46W26se8C4ZYgV45apisgQziueBKsqisLrzg",
	"CoUns9AolDVMprWtF3kAEbYUTQQVhWSZfDMwg8bZBh0TRhYsHe/X+RJQQ0gw1RiAQp0ONaKU1tWSIYNC",
	"Mp6FSzADfmwQMvDsyCxgM4Ol1G2s86/DEjL4J30SIe0VSPfb/9rl9SJsNltkm39HxQH5SM6JwmnyvKtS",
	"5Bs7JMb6KPUPaNCR6mrPWXK7Jb3lLJ2Tj+OU/5JtN44pbA/67BjbK8lyGtdjvovcpxPe0bdBR7YY926M",
	"Db7dJSPICI/KmsK/cDIZvvj/ycVkGBfoQqXW0IEdCZGxKhH6xT5sZuDwZ0sOC8juBgl6+G0/9wfd/hkX",
	"5Bnd9Gm4PvPgOMICe5Z1M97mNjz0+oRz2o/gNAUPKtf/Sf58GzdHRfXTVR32cVB3+iqOTHRkFQ+2Ne15",
	"6CQUK+JKEPvwe+fWC2kKgQ+R3pgzhtj49IboMMGuxsl7FSkcfH0Cvd/jvn41irs1yz7sDpA1eFNCdrfe",
	"c9v6hCI7dwrb5nrH9qat8/5Of5Jbq1Ea2NyPODEckSltIByecKk6sbGWpLuSpX2jHnNnvZa5T5StYQZG",
	"1gHjXXcurmXuBaMMkdaFrIq58Vmarlar5HlySqbAhzM0ScW1DnI9V+nK0RKdCJYUb28/idoWqL0orRM3",
	"DZqP7+cwA00Kje807plczq/P/kvO9wjYBo23rVOYWLdI+0SfDveDHsQaT628ROcj0fOkzw8lZEOQwUUS",
	"KTSSKw+ZabXe/AoAAP//9oK5GHgJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
