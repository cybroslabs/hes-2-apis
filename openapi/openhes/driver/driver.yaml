openapi: "3.0.3"
info:
  version: 0.1.0
  title: Common API models for OpenHES
  description: Common API models for OpenHES
  license:
    name: BSL-1.0
    url: https://opensource.org/licenses/BSL-1.0
  contact:
    name: Cybros Labs team
    email: info@cybroslabs.com
    url: https://www.cybroslabs.com/index-en.html

components:
  schemas:
    GenericObject: {}

    DriverSpecSchema:
      type: object
      description: >
        Schema containing communication driver spec.
      example:
        driverType: "CYBROSLABS_MAGEMETER_DLMS"
        version: "v1.2.3"
      required:
        - driverType
        - version
      properties:
        driverType:
          type: string
          description: >
            The driver type identifier.
        version:
          type: string
          description: >
            The version of the driver.

    DriverSchema:
      type: object
      description: >
        Schema that describes communication driver details.
      example:
        spec:
          driverType: "CYBROSLABS_MAGEMETER_DLMS"
          version: "v1.2.3"
      properties:
        spec:
          $ref: "#/components/schemas/DriverSpecSchema"

    ActionTypeSchema:
      type: string
      enum:
        - GET_REGISTER
        - GET_PERIODICAL_PROFILE
        - GET_IRREGULAR_PROFILE
        - GET_EVENTS
        - GET_CLOCK
        - SYNC_CLOCK
        - GET_RELAY_STATE
        - SET_RELAY_STATE
        - GET_DISCONNECTOR_STATE
        - SET_DISCONNECTOR_STATE
        - GET_TOU
        - SET_TOU
        - GET_LIMITER
        - SET_LIMITER
        - RESET_BILLING_PERIOD
        - FW_UPDATE
      description: >
        The type of action.
          * `GET_REGISTER` - The action is to get a billing value, for example, instantaneous values.
          * `GET_PERIODICAL_PROFILE` - The action is to get a periodical profile, for example, load-profile.
          * `GET_IRREGULAR_PROFILE` - The action is to get a non-periodical profile, for, daily profile or monthly billing registers.
          * `GET_EVENTS` - The action is to get an event log.
          * `GET_CLOCK` - The action is to get the clock.
          * `SYNC_CLOCK` - The action is to synchronize the clock. The action synchronizes the clock in the device. If the force attribute is set, it forcefully sets the clock.
          * `GET_RELAY_STATE` - The action is to get the relay state.
          * `SET_RELAY_STATE` - The action is to set the relay state.
          * `GET_DISCONNECTOR_STATE` - The action is to get the disconnector state.
          * `SET_DISCONNECTOR_STATE` - The action is to set the disconnector state.
          * `GET_TOU` - The action is to get the time-of-use table.
          * `SET_TOU` - The action is to set the time-of-use table.
          * `GET_LIMITER` - The action is to get the limiter settings.
          * `SET_LIMITER` - The action is to set the limiter settings.
          * `RESET_BILLING_PERIOD` - The action is to reset the billing period.
          * `FW_UPDATE` - The action is to start a firmware update.

    DriverActionAttributeSchema:
      type: object
      description: >
        Schema that describes driver action attributes.
      example:
        type: GET_REGISTER
        attributes:
          - name: "A+"
            description: "Register A+"
            type: STRING
            mandatory: true
            defaultValue: "0-0:1.8.0.255"
          - name: "A-"
            description: "Register A-"
            type: STRING
            mandatory: false
            defaultValue: "0-0:2.8.0.255"
      properties:
        type:
          $ref: "#/components/schemas/ActionTypeSchema"
        attributes:
          $ref: "#/components/schemas/DriverAttributesSchema"

    DriverCommunicationTemplateSchema:
      type: object
      description: >
        Schema that describes the communication template.
      properties:
        type:
          type: string
          description: >
            The type of the communication template.
        datalinkTemplates:
          $ref: "#/components/schemas/DriverDatalinkTemplateSchemas"
        appProtocolTemplates:
          $ref: "#/components/schemas/DriverAppProtocolsSchema"

    DriverDatalinkTemplateSchemas:
      type: array
      description: >
        The list of datalink templates valid for the communication template.
      items:
        $ref: "#/components/schemas/DriverDatalinkTemplateSchema"

    ApplicationProtocolSchema:
      type: string
      enum:
        - IEC_62056_21
        - DLMS_SN
        - DLMS_LN
        - SCTM
        - LIS200
        - ANSI_C12
        - MQTT
        - MODBUS
      description: >
        The type of the application layer.
          * `IEC_62056_21` - The IEC 62056-21 (IEC-61107, VDEW) protocol.
          * `DLMS_SN` - The DLMS short-name protocol.
          * `DLMS_LN` - The DLMS logical-name protocol.
          * `SCTM` - The SCTM protocol.
          * `LIS200` - The LIS200 protocol.
          * `ANSI_C12` - The ANSI C12 protocol.
          * `MQTT` - The MQTT protocol.
          * `MODBUS` - The Modbus protocol.

    DataLinkProtocolSchema:
      type: string
      enum:
        - IEC_62056_21
        - HDLC
        - COSEM_WRAPPER
        - MODBUS
        - MBUS
        - NOT_APPLICABLE
      description: >
        The type of the data-link layer.
          * `IEC_62056_21` - The VDEW (IEC 62056-21, IEC-61107) protocol. In combination with DLMS protocol the driver initiates the communication by IEC and switches to the mode E to the HDLC+DLMS protocol. Supports addressing = multiple devices on the same line.
          * `HDLC` - The HDLC (ISO/IEC-3309) framing. It can be used for various application protocols, such as DLMS or MODBUS. Supports client/server addressing = multiple devices on the same line.
          * `COSEM_WRAPPER` - The COSEM wrapper. It can be used for DLMS application protocol. Supports client/server addressing = multiple devices on the same line.
          * `MODBUS` - The Modbus protocol. It shall be used for Modbus application protocol where no other data link layer, such as HDLC, is used.
          * `MBUS` - The M-Bus protocol. It shall be used for M-Bus application protocol.
          * `NOT_APPLICABLE` - The data link protocol is not applicable. It's useful for listening communication type.

    DriverDatalinkTemplateSchema:
      type: object
      description: >
        Schema that describes the datalink template.
      properties:
        linkProtocol:
          $ref: "#/components/schemas/DataLinkProtocolSchema"
        attributes:
          $ref: "#/components/schemas/DriverAttributesSchema"
        appProtocolRefs:
          $ref: "#/components/schemas/DriverAppProtocolRefsSchema"
      required:
        - linkProtocol
        - attributes
        - appProtocolRefs

    DriverAppProtocolRefsSchema:
      type: array
      description: >
        The list of application protocol references valid for the datalink template.
      items:
        $ref: "#/components/schemas/ApplicationProtocolSchema"

    DriverAppProtocolsSchema:
      type: array
      description: >
        The list of application protocols valid for the datalink template.
      items:
        $ref: "#/components/schemas/DriverAppProtocolSchema"

    DriverAppProtocolSchema:
      type: object
      description: >
        Schema that describes the application protocol.
      properties:
        protocol:
          $ref: "#/components/schemas/ApplicationProtocolSchema"
        attributes:
          $ref: "#/components/schemas/DriverAttributesSchema"

    DriverAttributesSchema:
      type: array
      description: >
        Schema that describes a list of attributes supported by a driver.
      example:
        - name: "register"
          description: "Some register."
          type: STRING
          mandatory: true
          defaultValue: "0-0:1.8.0.255"
      items:
        $ref: "#/components/schemas/AttributeDefinitionSchema"

    AttributeDefinitionSchema:
      type: object
      description: >
        Schema that describes a driver attribute.
      example:
        name: "register"
        description: "The register to get."
        type: STRING
        mandatory: true
        defaultValue: "0-0:1.8.0.255"
      properties:
        name:
          type: string
          description: >
            The name of the attribute.
        description:
          type: string
          description: >
            The description of the attribute.
        type:
          type: string
          enum:
            - STRING
            - INTEGER
            - NUMBER
            - BOOLEAN
            - BINARY
            - TIMESTAMP
            - TIMESTAMPTZ
          description: >
            The type of the attribute.
              * `STRING` - The attribute is a string.
              * `INTEGER` - The attribute is an integer.
              * `NUMBER` - The attribute is a decimal number.
              * `BOOLEAN` - The attribute is a boolean.
              * `BINARY` - The attribute is a binary.
              * `TIMESTAMP` - The attribute is a timestamp; it shal not timezone-aware and it's always encoded as a UNIX timestamp number (~UTC).
              * `TIMESTAMPTZ` - The attribute is a timestamp; it is timezone-aware and it's always encoded as an ISO 8601 string.
        mandatory:
          type: boolean
          description: >
            Indicates whether the attribute is mandatory or not.
        defaultValue:
          $ref: "#/components/schemas/GenericObject"
