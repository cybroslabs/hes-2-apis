// Package driver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package driver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/cybroslabs/hes-2-apis/openapi/k8s/containers"
	externalRef1 "github.com/cybroslabs/hes-2-apis/openapi/openhes/driver/driverdata"
	externalRef2 "github.com/cybroslabs/hes-2-apis/openapi/openhes/job"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for AttributeDefinitionSchemaType.
const (
	BINARY  AttributeDefinitionSchemaType = "BINARY"
	BOOLEAN AttributeDefinitionSchemaType = "BOOLEAN"
	INTEGER AttributeDefinitionSchemaType = "INTEGER"
	NUMBER  AttributeDefinitionSchemaType = "NUMBER"
	STRING  AttributeDefinitionSchemaType = "STRING"
)

// AttributeDefinitionSchema Schema that describes a driver attribute.
type AttributeDefinitionSchema struct {
	DefaultValue *GenericObject `json:"defaultValue,omitempty"`

	// Description The description of the attribute.
	Description *string `json:"description,omitempty"`

	// Mandatory Indicates whether the attribute is mandatory or not.
	Mandatory *bool `json:"mandatory,omitempty"`

	// Name The name of the attribute.
	Name *string `json:"name,omitempty"`

	// Type The type of the attribute.
	//   * `STRING` - The attribute is a string.
	//   * `INTEGER` - The attribute is an integer.
	//   * `NUMBER` - The attribute is a decimal number.
	//   * `BOOLEAN` - The attribute is a boolean.
	//   * `BINARY` - The attribute is a binary.
	Type *AttributeDefinitionSchemaType `json:"type,omitempty"`
}

// AttributeDefinitionSchemaType The type of the attribute.
//   - `STRING` - The attribute is a string.
//   - `INTEGER` - The attribute is an integer.
//   - `NUMBER` - The attribute is a decimal number.
//   - `BOOLEAN` - The attribute is a boolean.
//   - `BINARY` - The attribute is a binary.
type AttributeDefinitionSchemaType string

// DriverActionAttributeSchema Schema that describes driver action attributes.
type DriverActionAttributeSchema struct {
	// Attributes Schema that describes a list of attributes supported by a driver.
	Attributes *DriverAttributesSchema `json:"attributes,omitempty"`

	// Type The type of action.
	//   * `GET_REGISTER` - The action is to get a billing value, for example, instantaneous values.
	//   * `GET_PERIODICAL_PROFILE` - The action is to get a periodical profile, for example, load-profile.
	//   * `GET_IRREGULAR_PROFILE` - The action is to get a non-periodical profile, for, daily profile or monthly billing registers.
	//   * `GET_EVENTS` - The action is to get an event log.
	//   * `GET_CLOCK` - The action is to get the clock.
	//   * `SYNC_CLOCK` - The action is to synchronize the clock. The action synchronizes the clock in the device. If the force attribute is set, it forcefully sets the clock.
	//   * `GET_RELAY_STATE` - The action is to get the relay state.
	//   * `SET_RELAY_STATE` - The action is to set the relay state.
	//   * `GET_DISCONNECTOR_STATE` - The action is to get the disconnector state.
	//   * `SET_DISCONNECTOR_STATE` - The action is to set the disconnector state.
	//   * `GET_TOU` - The action is to get the time-of-use table.
	//   * `SET_TOU` - The action is to set the time-of-use table.
	//   * `GET_LIMITER` - The action is to get the limiter settings.
	//   * `SET_LIMITER` - The action is to set the limiter settings.
	//   * `RESET_BILLING_PERIOD` - The action is to reset the billing period.
	//   * `FW_UPDATE` - The action is to start a firmware update.
	Type *externalRef2.ActionTypeSchema `json:"type,omitempty"`
}

// DriverAttributesSchema Schema that describes a list of attributes supported by a driver.
type DriverAttributesSchema = []AttributeDefinitionSchema

// DriverDetailsSchema Schema that describes communication driver details.
type DriverDetailsSchema = DriverSchema

// DriverSchema Schema that describes communication driver details.
type DriverSchema struct {
	// Spec Schema that registers new or updates already registered communication drivers.
	Spec *DriverSpecSchema `json:"spec,omitempty"`
}

// DriverSpecSchema Schema that registers new or updates already registered communication drivers.
type DriverSpecSchema struct {
	DriverType string `json:"driverType"`
	Image      string `json:"image"`

	// Resources Resource values for a container.
	Resources externalRef0.ContainerResourcesSetSchema `json:"resources"`
}

// GenericObject defines model for GenericObject.
type GenericObject = interface{}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../k8s/containers/containers.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "../../openhes/driver/driverdata/driverdata.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "../job/job.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
