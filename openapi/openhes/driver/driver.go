// Package driver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package driver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/cybroslabs/hes-2-apis/openapi/openhes/driver/driverdata"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionTypeSchema.
const (
	FWUPDATE             ActionTypeSchema = "FW_UPDATE"
	GETCLOCK             ActionTypeSchema = "GET_CLOCK"
	GETDISCONNECTORSTATE ActionTypeSchema = "GET_DISCONNECTOR_STATE"
	GETEVENTS            ActionTypeSchema = "GET_EVENTS"
	GETIRREGULARPROFILE  ActionTypeSchema = "GET_IRREGULAR_PROFILE"
	GETLIMITER           ActionTypeSchema = "GET_LIMITER"
	GETPERIODICALPROFILE ActionTypeSchema = "GET_PERIODICAL_PROFILE"
	GETREGISTER          ActionTypeSchema = "GET_REGISTER"
	GETRELAYSTATE        ActionTypeSchema = "GET_RELAY_STATE"
	GETTOU               ActionTypeSchema = "GET_TOU"
	RESETBILLINGPERIOD   ActionTypeSchema = "RESET_BILLING_PERIOD"
	SETDISCONNECTORSTATE ActionTypeSchema = "SET_DISCONNECTOR_STATE"
	SETLIMITER           ActionTypeSchema = "SET_LIMITER"
	SETRELAYSTATE        ActionTypeSchema = "SET_RELAY_STATE"
	SETTOU               ActionTypeSchema = "SET_TOU"
	SYNCCLOCK            ActionTypeSchema = "SYNC_CLOCK"
)

// Defines values for ApplicationProtocolSchema.
const (
	ApplicationProtocolSchemaANSIC12    ApplicationProtocolSchema = "ANSI_C12"
	ApplicationProtocolSchemaDLMSLN     ApplicationProtocolSchema = "DLMS_LN"
	ApplicationProtocolSchemaDLMSSN     ApplicationProtocolSchema = "DLMS_SN"
	ApplicationProtocolSchemaIEC6205621 ApplicationProtocolSchema = "IEC_62056_21"
	ApplicationProtocolSchemaLIS200     ApplicationProtocolSchema = "LIS200"
	ApplicationProtocolSchemaMODBUS     ApplicationProtocolSchema = "MODBUS"
	ApplicationProtocolSchemaMQTT       ApplicationProtocolSchema = "MQTT"
	ApplicationProtocolSchemaSCTM       ApplicationProtocolSchema = "SCTM"
)

// Defines values for AttributeDefinitionSchemaType.
const (
	BINARY      AttributeDefinitionSchemaType = "BINARY"
	BOOLEAN     AttributeDefinitionSchemaType = "BOOLEAN"
	INTEGER     AttributeDefinitionSchemaType = "INTEGER"
	NUMBER      AttributeDefinitionSchemaType = "NUMBER"
	STRING      AttributeDefinitionSchemaType = "STRING"
	TIMESTAMP   AttributeDefinitionSchemaType = "TIMESTAMP"
	TIMESTAMPTZ AttributeDefinitionSchemaType = "TIMESTAMPTZ"
)

// Defines values for DataLinkProtocolSchema.
const (
	DataLinkProtocolSchemaCOSEMWRAPPER  DataLinkProtocolSchema = "COSEM_WRAPPER"
	DataLinkProtocolSchemaHDLC          DataLinkProtocolSchema = "HDLC"
	DataLinkProtocolSchemaIEC6205621    DataLinkProtocolSchema = "IEC_62056_21"
	DataLinkProtocolSchemaMBUS          DataLinkProtocolSchema = "MBUS"
	DataLinkProtocolSchemaMODBUS        DataLinkProtocolSchema = "MODBUS"
	DataLinkProtocolSchemaNOTAPPLICABLE DataLinkProtocolSchema = "NOT_APPLICABLE"
)

// ActionTypeSchema The type of action.
//   - `GET_REGISTER` - The action is to get a billing value, for example, instantaneous values.
//   - `GET_PERIODICAL_PROFILE` - The action is to get a periodical profile, for example, load-profile.
//   - `GET_IRREGULAR_PROFILE` - The action is to get a non-periodical profile, for, daily profile or monthly billing registers.
//   - `GET_EVENTS` - The action is to get an event log.
//   - `GET_CLOCK` - The action is to get the clock.
//   - `SYNC_CLOCK` - The action is to synchronize the clock. The action synchronizes the clock in the device. If the force attribute is set, it forcefully sets the clock.
//   - `GET_RELAY_STATE` - The action is to get the relay state.
//   - `SET_RELAY_STATE` - The action is to set the relay state.
//   - `GET_DISCONNECTOR_STATE` - The action is to get the disconnector state.
//   - `SET_DISCONNECTOR_STATE` - The action is to set the disconnector state.
//   - `GET_TOU` - The action is to get the time-of-use table.
//   - `SET_TOU` - The action is to set the time-of-use table.
//   - `GET_LIMITER` - The action is to get the limiter settings.
//   - `SET_LIMITER` - The action is to set the limiter settings.
//   - `RESET_BILLING_PERIOD` - The action is to reset the billing period.
//   - `FW_UPDATE` - The action is to start a firmware update.
type ActionTypeSchema string

// ApplicationProtocolSchema The type of the application layer.
//   - `IEC_62056_21` - The IEC 62056-21 (IEC-61107, VDEW) protocol.
//   - `DLMS_SN` - The DLMS short-name protocol.
//   - `DLMS_LN` - The DLMS logical-name protocol.
//   - `SCTM` - The SCTM protocol.
//   - `LIS200` - The LIS200 protocol.
//   - `ANSI_C12` - The ANSI C12 protocol.
//   - `MQTT` - The MQTT protocol.
//   - `MODBUS` - The Modbus protocol.
type ApplicationProtocolSchema string

// AttributeDefinitionSchema Schema that describes a driver attribute.
type AttributeDefinitionSchema struct {
	DefaultValue *GenericObject `json:"defaultValue,omitempty"`

	// Description The description of the attribute.
	Description *string `json:"description,omitempty"`

	// Mandatory Indicates whether the attribute is mandatory or not.
	Mandatory *bool `json:"mandatory,omitempty"`

	// Name The name of the attribute.
	Name *string `json:"name,omitempty"`

	// Type The type of the attribute.
	//   * `STRING` - The attribute is a string.
	//   * `INTEGER` - The attribute is an integer.
	//   * `NUMBER` - The attribute is a decimal number.
	//   * `BOOLEAN` - The attribute is a boolean.
	//   * `BINARY` - The attribute is a binary.
	//   * `TIMESTAMP` - The attribute is a timestamp; it shal not timezone-aware and it's always encoded as a UNIX timestamp number (~UTC).
	//   * `TIMESTAMPTZ` - The attribute is a timestamp; it is timezone-aware and it's always encoded as an ISO 8601 string.
	Type *AttributeDefinitionSchemaType `json:"type,omitempty"`
}

// AttributeDefinitionSchemaType The type of the attribute.
//   - `STRING` - The attribute is a string.
//   - `INTEGER` - The attribute is an integer.
//   - `NUMBER` - The attribute is a decimal number.
//   - `BOOLEAN` - The attribute is a boolean.
//   - `BINARY` - The attribute is a binary.
//   - `TIMESTAMP` - The attribute is a timestamp; it shal not timezone-aware and it's always encoded as a UNIX timestamp number (~UTC).
//   - `TIMESTAMPTZ` - The attribute is a timestamp; it is timezone-aware and it's always encoded as an ISO 8601 string.
type AttributeDefinitionSchemaType string

// DataLinkProtocolSchema The type of the data-link layer.
//   - `IEC_62056_21` - The VDEW (IEC 62056-21, IEC-61107) protocol. In combination with DLMS protocol the driver initiates the communication by IEC and switches to the mode E to the HDLC+DLMS protocol. Supports addressing = multiple devices on the same line.
//   - `HDLC` - The HDLC (ISO/IEC-3309) framing. It can be used for various application protocols, such as DLMS or MODBUS. Supports client/server addressing = multiple devices on the same line.
//   - `COSEM_WRAPPER` - The COSEM wrapper. It can be used for DLMS application protocol. Supports client/server addressing = multiple devices on the same line.
//   - `MODBUS` - The Modbus protocol. It shall be used for Modbus application protocol where no other data link layer, such as HDLC, is used.
//   - `MBUS` - The M-Bus protocol. It shall be used for M-Bus application protocol.
//   - `NOT_APPLICABLE` - The data link protocol is not applicable. It's useful for listening communication type.
type DataLinkProtocolSchema string

// DriverActionAttributeSchema Schema that describes driver action attributes.
type DriverActionAttributeSchema struct {
	// Attributes Schema that describes a list of attributes supported by a driver.
	Attributes *DriverAttributesSchema `json:"attributes,omitempty"`

	// Type The type of action.
	//   * `GET_REGISTER` - The action is to get a billing value, for example, instantaneous values.
	//   * `GET_PERIODICAL_PROFILE` - The action is to get a periodical profile, for example, load-profile.
	//   * `GET_IRREGULAR_PROFILE` - The action is to get a non-periodical profile, for, daily profile or monthly billing registers.
	//   * `GET_EVENTS` - The action is to get an event log.
	//   * `GET_CLOCK` - The action is to get the clock.
	//   * `SYNC_CLOCK` - The action is to synchronize the clock. The action synchronizes the clock in the device. If the force attribute is set, it forcefully sets the clock.
	//   * `GET_RELAY_STATE` - The action is to get the relay state.
	//   * `SET_RELAY_STATE` - The action is to set the relay state.
	//   * `GET_DISCONNECTOR_STATE` - The action is to get the disconnector state.
	//   * `SET_DISCONNECTOR_STATE` - The action is to set the disconnector state.
	//   * `GET_TOU` - The action is to get the time-of-use table.
	//   * `SET_TOU` - The action is to set the time-of-use table.
	//   * `GET_LIMITER` - The action is to get the limiter settings.
	//   * `SET_LIMITER` - The action is to set the limiter settings.
	//   * `RESET_BILLING_PERIOD` - The action is to reset the billing period.
	//   * `FW_UPDATE` - The action is to start a firmware update.
	Type *ActionTypeSchema `json:"type,omitempty"`
}

// DriverAppProtocolRefsSchema The list of application protocol references valid for the datalink template.
type DriverAppProtocolRefsSchema = []ApplicationProtocolSchema

// DriverAppProtocolSchema Schema that describes the application protocol.
type DriverAppProtocolSchema struct {
	// Attributes Schema that describes a list of attributes supported by a driver.
	Attributes *DriverAttributesSchema `json:"attributes,omitempty"`

	// Protocol The type of the application layer.
	//   * `IEC_62056_21` - The IEC 62056-21 (IEC-61107, VDEW) protocol.
	//   * `DLMS_SN` - The DLMS short-name protocol.
	//   * `DLMS_LN` - The DLMS logical-name protocol.
	//   * `SCTM` - The SCTM protocol.
	//   * `LIS200` - The LIS200 protocol.
	//   * `ANSI_C12` - The ANSI C12 protocol.
	//   * `MQTT` - The MQTT protocol.
	//   * `MODBUS` - The Modbus protocol.
	Protocol *ApplicationProtocolSchema `json:"protocol,omitempty"`
}

// DriverAppProtocolsSchema The list of application protocols valid for the datalink template.
type DriverAppProtocolsSchema = []DriverAppProtocolSchema

// DriverAttributesSchema Schema that describes a list of attributes supported by a driver.
type DriverAttributesSchema = []AttributeDefinitionSchema

// DriverCommunicationTemplateSchema Schema that describes the communication template.
type DriverCommunicationTemplateSchema struct {
	// AppProtocolTemplates The list of application protocols valid for the datalink template.
	AppProtocolTemplates *DriverAppProtocolsSchema `json:"appProtocolTemplates,omitempty"`

	// DatalinkTemplates The list of datalink templates valid for the communication template.
	DatalinkTemplates *DriverDatalinkTemplateSchemas `json:"datalinkTemplates,omitempty"`

	// Type The type of the communication template.
	Type *string `json:"type,omitempty"`
}

// DriverDatalinkTemplateSchema Schema that describes the datalink template.
type DriverDatalinkTemplateSchema struct {
	// AppProtocolRefs The list of application protocol references valid for the datalink template.
	AppProtocolRefs *DriverAppProtocolRefsSchema `json:"appProtocolRefs,omitempty"`

	// Attributes Schema that describes a list of attributes supported by a driver.
	Attributes *DriverAttributesSchema `json:"attributes,omitempty"`

	// LinkProtocol The type of the data-link layer.
	//   * `IEC_62056_21` - The VDEW (IEC 62056-21, IEC-61107) protocol. In combination with DLMS protocol the driver initiates the communication by IEC and switches to the mode E to the HDLC+DLMS protocol. Supports addressing = multiple devices on the same line.
	//   * `HDLC` - The HDLC (ISO/IEC-3309) framing. It can be used for various application protocols, such as DLMS or MODBUS. Supports client/server addressing = multiple devices on the same line.
	//   * `COSEM_WRAPPER` - The COSEM wrapper. It can be used for DLMS application protocol. Supports client/server addressing = multiple devices on the same line.
	//   * `MODBUS` - The Modbus protocol. It shall be used for Modbus application protocol where no other data link layer, such as HDLC, is used.
	//   * `MBUS` - The M-Bus protocol. It shall be used for M-Bus application protocol.
	//   * `NOT_APPLICABLE` - The data link protocol is not applicable. It's useful for listening communication type.
	LinkProtocol *DataLinkProtocolSchema `json:"linkProtocol,omitempty"`
}

// DriverDatalinkTemplateSchemas The list of datalink templates valid for the communication template.
type DriverDatalinkTemplateSchemas = []DriverDatalinkTemplateSchema

// DriverSchema Schema that describes communication driver details.
type DriverSchema struct {
	// Spec Schema containing communication driver spec.
	Spec *DriverSpecSchema `json:"spec,omitempty"`
}

// DriverSpecSchema Schema containing communication driver spec.
type DriverSpecSchema struct {
	// DriverType The driver type identifier.
	DriverType string `json:"driverType"`

	// Version The version of the driver.
	Version string `json:"version"`
}

// GenericObject defines model for GenericObject.
type GenericObject = interface{}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../openhes/driver/driverdata/driverdata.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
