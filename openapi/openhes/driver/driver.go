// Package driver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package driver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/cybroslabs/hes-2-apis/openapi/openhes/driver/driverdata"
	externalRef1 "github.com/cybroslabs/hes-2-apis/openapi/openhes/job"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for AttributeDefinitionSchemaType.
const (
	BINARY  AttributeDefinitionSchemaType = "BINARY"
	BOOLEAN AttributeDefinitionSchemaType = "BOOLEAN"
	INTEGER AttributeDefinitionSchemaType = "INTEGER"
	NUMBER  AttributeDefinitionSchemaType = "NUMBER"
	STRING  AttributeDefinitionSchemaType = "STRING"
)

// AttributeDefinitionSchema Schema that describes a driver attribute.
type AttributeDefinitionSchema struct {
	DefaultValue *GenericObject `json:"defaultValue,omitempty"`

	// Description The description of the attribute.
	Description *string `json:"description,omitempty"`

	// Mandatory Indicates whether the attribute is mandatory or not.
	Mandatory *bool `json:"mandatory,omitempty"`

	// Name The name of the attribute.
	Name *string `json:"name,omitempty"`

	// Type The type of the attribute.
	//   * `STRING` - The attribute is a string.
	//   * `INTEGER` - The attribute is an integer.
	//   * `NUMBER` - The attribute is a decimal number.
	//   * `BOOLEAN` - The attribute is a boolean.
	//   * `BINARY` - The attribute is a binary.
	Type *AttributeDefinitionSchemaType `json:"type,omitempty"`
}

// AttributeDefinitionSchemaType The type of the attribute.
//   - `STRING` - The attribute is a string.
//   - `INTEGER` - The attribute is an integer.
//   - `NUMBER` - The attribute is a decimal number.
//   - `BOOLEAN` - The attribute is a boolean.
//   - `BINARY` - The attribute is a binary.
type AttributeDefinitionSchemaType string

// DriverActionAttributeSchema Schema that describes driver action attributes.
type DriverActionAttributeSchema struct {
	// Attributes Schema that describes a list of attributes supported by a driver.
	Attributes *DriverAttributesSchema `json:"attributes,omitempty"`

	// Type The type of action.
	//   * `GET_REGISTER` - The action is to get a billing value, for example, instantaneous values.
	//   * `GET_PERIODICAL_PROFILE` - The action is to get a periodical profile, for example, load-profile.
	//   * `GET_IRREGULAR_PROFILE` - The action is to get a non-periodical profile, for, daily profile or monthly billing registers.
	//   * `GET_EVENTS` - The action is to get an event log.
	//   * `GET_CLOCK` - The action is to get the clock.
	//   * `SYNC_CLOCK` - The action is to synchronize the clock. The action synchronizes the clock in the device. If the force attribute is set, it forcefully sets the clock.
	//   * `GET_RELAY_STATE` - The action is to get the relay state.
	//   * `SET_RELAY_STATE` - The action is to set the relay state.
	//   * `GET_DISCONNECTOR_STATE` - The action is to get the disconnector state.
	//   * `SET_DISCONNECTOR_STATE` - The action is to set the disconnector state.
	//   * `GET_TOU` - The action is to get the time-of-use table.
	//   * `SET_TOU` - The action is to set the time-of-use table.
	//   * `GET_LIMITER` - The action is to get the limiter settings.
	//   * `SET_LIMITER` - The action is to set the limiter settings.
	//   * `RESET_BILLING_PERIOD` - The action is to reset the billing period.
	//   * `FW_UPDATE` - The action is to start a firmware update.
	Type *externalRef1.ActionTypeSchema `json:"type,omitempty"`
}

// DriverAppProtocolSchema Schema that describes the application protocol.
type DriverAppProtocolSchema struct {
	// Profile Schema that describes a list of attributes supported by a driver.
	Profile *DriverAttributesSchema `json:"profile,omitempty"`

	// Protocol The application protocol.
	Protocol *string `json:"protocol,omitempty"`
}

// DriverAppProtocolsSchema The list of application protocols valid for the datalink template.
type DriverAppProtocolsSchema = []DriverAppProtocolSchema

// DriverAttributesSchema Schema that describes a list of attributes supported by a driver.
type DriverAttributesSchema = []AttributeDefinitionSchema

// DriverCommunicationTemplateSchema Schema that describes the communication template.
type DriverCommunicationTemplateSchema struct {
	// DatalinkTemplates The list of datalink templates valid for the communication template.
	DatalinkTemplates *DriverDatalinkTemplateSchemas `json:"datalinkTemplates,omitempty"`

	// Type The type of the communication template.
	Type *string `json:"type,omitempty"`
}

// DriverDatalinkTemplateSchema Schema that describes the datalink template.
type DriverDatalinkTemplateSchema struct {
	// AppProtocols The list of application protocols valid for the datalink template.
	AppProtocols *DriverAppProtocolsSchema `json:"appProtocols,omitempty"`

	// LinkProtocol The link protocol.
	LinkProtocol *string `json:"linkProtocol,omitempty"`
}

// DriverDatalinkTemplateSchemas The list of datalink templates valid for the communication template.
type DriverDatalinkTemplateSchemas = []DriverDatalinkTemplateSchema

// DriverSchema Schema that describes communication driver details.
type DriverSchema struct {
	// Spec Schema containing communication driver spec.
	Spec *DriverSpecSchema `json:"spec,omitempty"`
}

// DriverSpecSchema Schema containing communication driver spec.
type DriverSpecSchema struct {
	// DriverType The driver type identifier.
	DriverType string `json:"driverType"`

	// Version The version of the driver.
	Version string `json:"version"`
}

// GenericObject defines model for GenericObject.
type GenericObject = interface{}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../openhes/driver/driverdata/driverdata.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "../job/job.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
