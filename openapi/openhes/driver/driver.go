// Package driver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package driver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/cybroslabs/hes-2-apis/openapi/openhes/driver/driverdata"
	externalRef1 "github.com/cybroslabs/hes-2-apis/openapi/openhes/job"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for AttributeDefinitionSchemaType.
const (
	BINARY  AttributeDefinitionSchemaType = "BINARY"
	BOOLEAN AttributeDefinitionSchemaType = "BOOLEAN"
	INTEGER AttributeDefinitionSchemaType = "INTEGER"
	NUMBER  AttributeDefinitionSchemaType = "NUMBER"
	STRING  AttributeDefinitionSchemaType = "STRING"
)

// AttributeDefinitionSchema Schema that describes a driver attribute.
type AttributeDefinitionSchema struct {
	DefaultValue *GenericObject `json:"defaultValue,omitempty"`

	// Description The description of the attribute.
	Description *string `json:"description,omitempty"`

	// Mandatory Indicates whether the attribute is mandatory or not.
	Mandatory *bool `json:"mandatory,omitempty"`

	// Name The name of the attribute.
	Name *string `json:"name,omitempty"`

	// Type The type of the attribute.
	//   * `STRING` - The attribute is a string.
	//   * `INTEGER` - The attribute is an integer.
	//   * `NUMBER` - The attribute is a decimal number.
	//   * `BOOLEAN` - The attribute is a boolean.
	//   * `BINARY` - The attribute is a binary.
	Type *AttributeDefinitionSchemaType `json:"type,omitempty"`
}

// AttributeDefinitionSchemaType The type of the attribute.
//   - `STRING` - The attribute is a string.
//   - `INTEGER` - The attribute is an integer.
//   - `NUMBER` - The attribute is a decimal number.
//   - `BOOLEAN` - The attribute is a boolean.
//   - `BINARY` - The attribute is a binary.
type AttributeDefinitionSchemaType string

// DriverActionAttributeSchema Schema that describes driver action attributes.
type DriverActionAttributeSchema struct {
	// Attributes Schema that describes a list of attributes supported by a driver.
	Attributes *DriverAttributesSchema `json:"attributes,omitempty"`

	// Type The type of action.
	//   * `GET_REGISTER` - The action is to get a billing value, for example, instantaneous values.
	//   * `GET_PERIODICAL_PROFILE` - The action is to get a periodical profile, for example, load-profile.
	//   * `GET_IRREGULAR_PROFILE` - The action is to get a non-periodical profile, for, daily profile or monthly billing registers.
	//   * `GET_EVENTS` - The action is to get an event log.
	//   * `GET_CLOCK` - The action is to get the clock.
	//   * `SYNC_CLOCK` - The action is to synchronize the clock. The action synchronizes the clock in the device. If the force attribute is set, it forcefully sets the clock.
	//   * `GET_RELAY_STATE` - The action is to get the relay state.
	//   * `SET_RELAY_STATE` - The action is to set the relay state.
	//   * `GET_DISCONNECTOR_STATE` - The action is to get the disconnector state.
	//   * `SET_DISCONNECTOR_STATE` - The action is to set the disconnector state.
	//   * `GET_TOU` - The action is to get the time-of-use table.
	//   * `SET_TOU` - The action is to set the time-of-use table.
	//   * `GET_LIMITER` - The action is to get the limiter settings.
	//   * `SET_LIMITER` - The action is to set the limiter settings.
	//   * `RESET_BILLING_PERIOD` - The action is to reset the billing period.
	//   * `FW_UPDATE` - The action is to start a firmware update.
	Type *externalRef1.ActionTypeSchema `json:"type,omitempty"`
}

// DriverAppProtocolRefsSchema The list of application protocol references valid for the datalink template.
type DriverAppProtocolRefsSchema = []string

// DriverAppProtocolSchema Schema that describes the application protocol.
type DriverAppProtocolSchema struct {
	// Attributes Schema that describes a list of attributes supported by a driver.
	Attributes *DriverAttributesSchema `json:"attributes,omitempty"`

	// Protocol The application protocol.
	Protocol *string `json:"protocol,omitempty"`
}

// DriverAppProtocolsSchema The list of application protocols valid for the datalink template.
type DriverAppProtocolsSchema = []DriverAppProtocolSchema

// DriverAttributesSchema Schema that describes a list of attributes supported by a driver.
type DriverAttributesSchema = []AttributeDefinitionSchema

// DriverCommunicationTemplateSchema Schema that describes the communication template.
type DriverCommunicationTemplateSchema struct {
	// AppProtocolTemplates The list of application protocols valid for the datalink template.
	AppProtocolTemplates *DriverAppProtocolsSchema `json:"appProtocolTemplates,omitempty"`

	// DatalinkTemplates The list of datalink templates valid for the communication template.
	DatalinkTemplates *DriverDatalinkTemplateSchemas `json:"datalinkTemplates,omitempty"`

	// Type The type of the communication template.
	Type *string `json:"type,omitempty"`
}

// DriverDatalinkTemplateSchema Schema that describes the datalink template.
type DriverDatalinkTemplateSchema struct {
	// AppProtocolRefs The list of application protocol references valid for the datalink template.
	AppProtocolRefs *DriverAppProtocolRefsSchema `json:"appProtocolRefs,omitempty"`

	// LinkProtocol The link protocol.
	LinkProtocol *string `json:"linkProtocol,omitempty"`
}

// DriverDatalinkTemplateSchemas The list of datalink templates valid for the communication template.
type DriverDatalinkTemplateSchemas = []DriverDatalinkTemplateSchema

// DriverSchema Schema that describes communication driver details.
type DriverSchema struct {
	// Spec Schema containing communication driver spec.
	Spec *DriverSpecSchema `json:"spec,omitempty"`
}

// DriverSpecSchema Schema containing communication driver spec.
type DriverSpecSchema struct {
	// DriverType The driver type identifier.
	DriverType string `json:"driverType"`

	// Version The version of the driver.
	Version string `json:"version"`
}

// GenericObject defines model for GenericObject.
type GenericObject = interface{}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xYW2/buBL+KwTPeTpHltMWBRZ+WsdRvcI6diA7XQTdwqWlsc2WIrUkldQb5L8vKFGy",
	"bF0iB/tQ1OFcvuHcOKNnHIo4ERy4Vnj0jFW4h5hkP8daS7pJNdzAlnKqqeDLjGqIEahQ0sQc4hHOz5He",
	"E41yygYUIiiS9BEkIoUm90+OHQw/SZwwyNVsScr0Z8JSwCN8NbgavXN/ca/c9x8/YucMZbUHJGFHlQaJ",
	"tEA70C52cEx4RLSQBzzSMgUHcxIbZQUrdrA+JOZkuQr8+RS/ODiRIgGpKai6Fc/4vxK2eIT/Mzz6Zmgd",
	"M5wCB0nDxeY7hNqoOrHxucHkygkSW6T3cO4Qa57SkvKd0Vm50rlGn0c0JBoUetqD3htPVBUiqlApjYRE",
	"XOgTkI0QDAg3KLmfmkw2lL625gdNWgylSQtC/0Pf8lh8QwO0OrefoFx7werPV97UC5p5OaJcww5kwT2/",
	"v71uY0YRhDQmDPE03hxFrheLmTeet8hYj5XM/nwcPLTxUk7kwaY5T2M8+lJknYPtPbCDcxuxgy2y+ZWp",
	"xV9rHi5djEWZczdZXY1D4+yyTC8rzqI0Mx3Ha6haiR5JePTlwooNimod/7+jUDPieYk2Ir3vgTQ4RdoS",
	"pipQgzrU0eVTb7UOvKm/XHlBvUtUHdHdI2x4Sn4bmUqxdEmLBDhJ6Nr8vwe1/i422b883KtDUkS6KzWS",
	"5E4KLULBAtiqttQwGcyo0qZKSZIw01lMOiRWFknYggQegkKPhNEIbUXecCKiCaP8B9IQJ4wU3YFqiFUz",
	"Trf+zuaCiZTk0Hi7y5Jet9iRo//74S709/dIox96xfnNQb40tD1cUYtPeyjPvdZ7tiivVGpAKk0SITVE",
	"aHMop4+zhnZpC1uK+Dh1vG3c+NrTee0DV6v7JiKOU24jurLxurwmwqqas7ifVcUxtAXc5UlRqZAi2S5U",
	"dnMmtrRja+95pOvGvauv2YpLHN9Sa60+N838YndXXoAXBxu4u86+lBn0xobUFpjOrlTzwnlL6orWBX2p",
	"JV6t1XVZPE+NtPNVBJpQVp+qVAJhpjhjW+Xwk4frYLGcja+X69vx1Lv1Vl6wvpndLrGDH0GqHP3xnfve",
	"/ZAF4TRPCp2vO2KZQPj6EFHhanNBKLgmlFO+a76+Mam+9L39zrXNraKqcffKzcgqn0bANd3S4kmoDRsl",
	"XJMmSyz6R/VtqReHhL9SKiEy43/FxCPE1wann26Wo+cXB/ceBTv7XT7jF/tLdcgtt5h8C6DKrtXZJsOY",
	"CeujeSWdrBJtCB1EudKEa8JBpCrnUFX1d17gL278yXi2vgsWn/yZ1wGUgKTC7LTM9JwtZedoTJBoYElV",
	"FD8IvOn9bBz0AOGCD1qAHBQRyg7FmdmZY8H1nh1KHxRP+8klvc/efLVsx+QIHoFrxMSuKjaZLSa/t0pl",
	"zY6J8Ee5Jj/MJx0y6sDDvRSc/g0V2SpfhUMdWRDleRrDIw3BRX6e1Vshw7OdVoF2ENU5aZsydjBHqm5p",
	"nlez8cN6uRqvvM4rSmDkgJQmle8BPcRVu7hBv/GXk8V87k1Wi6CHERFVoeAcQi1k3ZaeytSryoxlq8V9",
	"pymaxjAQ20GqAGmyYSeWtAmr14QN8sy/9bsKXWfPcEzN6qxAa8p3qgreJa9ekQ88o+Han838+dQ2hUZF",
	"EgpVRcXltVoo+vTH+v7upjUEmkhT41sq4yciAaVJVE4HxUeYk9Xewc1dyhJqjcWe5xVv/8hqEjv4WKCW",
	"UEliQ66dNGeqZW0k2AyyLPmvSmzt+fGvJr9jB5debPrI9OJgyrfCPCTZm569QBhiQhkeZaRfw8NGCsXI",
	"RrmhiHG5+EyyczQjG4U0EENJpZHaa52o0XD49PTkngoPKY/g5wC4u9cxq31FxWatERyN73wUiwiYyl6E",
	"RQL8N88EgNEQuMrefGvE9XI2eOde1bDNy6lEKkNwhdwNraAaFvxm+qGaQQ/Q4zRy5VpR+z7jEf7gXrkf",
	"zORO9F7hEU8Ze/knAAD//1f9DXtcFwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../openhes/driver/driverdata/driverdata.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "../job/job.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
