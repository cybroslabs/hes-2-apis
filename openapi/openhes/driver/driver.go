// Package driver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package driver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/cybroslabs/hes-2-apis/openapi/openhes/driver/driverdata"
	externalRef1 "github.com/cybroslabs/hes-2-apis/openapi/openhes/job"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for AttributeDefinitionSchemaType.
const (
	BINARY      AttributeDefinitionSchemaType = "BINARY"
	BOOLEAN     AttributeDefinitionSchemaType = "BOOLEAN"
	INTEGER     AttributeDefinitionSchemaType = "INTEGER"
	NUMBER      AttributeDefinitionSchemaType = "NUMBER"
	STRING      AttributeDefinitionSchemaType = "STRING"
	TIMESTAMP   AttributeDefinitionSchemaType = "TIMESTAMP"
	TIMESTAMPTZ AttributeDefinitionSchemaType = "TIMESTAMPTZ"
)

// AttributeDefinitionSchema Schema that describes a driver attribute.
type AttributeDefinitionSchema struct {
	DefaultValue *GenericObject `json:"defaultValue,omitempty"`

	// Description The description of the attribute.
	Description *string `json:"description,omitempty"`

	// Mandatory Indicates whether the attribute is mandatory or not.
	Mandatory *bool `json:"mandatory,omitempty"`

	// Name The name of the attribute.
	Name *string `json:"name,omitempty"`

	// Type The type of the attribute.
	//   * `STRING` - The attribute is a string.
	//   * `INTEGER` - The attribute is an integer.
	//   * `NUMBER` - The attribute is a decimal number.
	//   * `BOOLEAN` - The attribute is a boolean.
	//   * `BINARY` - The attribute is a binary.
	//   * `TIMESTAMP` - The attribute is a timestamp; it shal not timezone-aware and it's always encoded as a UNIX timestamp number (~UTC).
	//   * `TIMESTAMPTZ` - The attribute is a timestamp; it is timezone-aware and it's always encoded as an ISO 8601 string.
	Type *AttributeDefinitionSchemaType `json:"type,omitempty"`
}

// AttributeDefinitionSchemaType The type of the attribute.
//   - `STRING` - The attribute is a string.
//   - `INTEGER` - The attribute is an integer.
//   - `NUMBER` - The attribute is a decimal number.
//   - `BOOLEAN` - The attribute is a boolean.
//   - `BINARY` - The attribute is a binary.
//   - `TIMESTAMP` - The attribute is a timestamp; it shal not timezone-aware and it's always encoded as a UNIX timestamp number (~UTC).
//   - `TIMESTAMPTZ` - The attribute is a timestamp; it is timezone-aware and it's always encoded as an ISO 8601 string.
type AttributeDefinitionSchemaType string

// DriverActionAttributeSchema Schema that describes driver action attributes.
type DriverActionAttributeSchema struct {
	// Attributes Schema that describes a list of attributes supported by a driver.
	Attributes *DriverAttributesSchema `json:"attributes,omitempty"`

	// Type The type of action.
	//   * `GET_REGISTER` - The action is to get a billing value, for example, instantaneous values.
	//   * `GET_PERIODICAL_PROFILE` - The action is to get a periodical profile, for example, load-profile.
	//   * `GET_IRREGULAR_PROFILE` - The action is to get a non-periodical profile, for, daily profile or monthly billing registers.
	//   * `GET_EVENTS` - The action is to get an event log.
	//   * `GET_CLOCK` - The action is to get the clock.
	//   * `SYNC_CLOCK` - The action is to synchronize the clock. The action synchronizes the clock in the device. If the force attribute is set, it forcefully sets the clock.
	//   * `GET_RELAY_STATE` - The action is to get the relay state.
	//   * `SET_RELAY_STATE` - The action is to set the relay state.
	//   * `GET_DISCONNECTOR_STATE` - The action is to get the disconnector state.
	//   * `SET_DISCONNECTOR_STATE` - The action is to set the disconnector state.
	//   * `GET_TOU` - The action is to get the time-of-use table.
	//   * `SET_TOU` - The action is to set the time-of-use table.
	//   * `GET_LIMITER` - The action is to get the limiter settings.
	//   * `SET_LIMITER` - The action is to set the limiter settings.
	//   * `RESET_BILLING_PERIOD` - The action is to reset the billing period.
	//   * `FW_UPDATE` - The action is to start a firmware update.
	Type *externalRef1.ActionTypeSchema `json:"type,omitempty"`
}

// DriverAppProtocolRefsSchema The list of application protocol references valid for the datalink template.
type DriverAppProtocolRefsSchema = []string

// DriverAppProtocolSchema Schema that describes the application protocol.
type DriverAppProtocolSchema struct {
	// Attributes Schema that describes a list of attributes supported by a driver.
	Attributes *DriverAttributesSchema `json:"attributes,omitempty"`

	// Protocol The application protocol.
	Protocol *string `json:"protocol,omitempty"`
}

// DriverAppProtocolsSchema The list of application protocols valid for the datalink template.
type DriverAppProtocolsSchema = []DriverAppProtocolSchema

// DriverAttributesSchema Schema that describes a list of attributes supported by a driver.
type DriverAttributesSchema = []AttributeDefinitionSchema

// DriverCommunicationTemplateSchema Schema that describes the communication template.
type DriverCommunicationTemplateSchema struct {
	// AppProtocolTemplates The list of application protocols valid for the datalink template.
	AppProtocolTemplates *DriverAppProtocolsSchema `json:"appProtocolTemplates,omitempty"`

	// DatalinkTemplates The list of datalink templates valid for the communication template.
	DatalinkTemplates *DriverDatalinkTemplateSchemas `json:"datalinkTemplates,omitempty"`

	// Type The type of the communication template.
	Type *string `json:"type,omitempty"`
}

// DriverDatalinkTemplateSchema Schema that describes the datalink template.
type DriverDatalinkTemplateSchema struct {
	// AppProtocolRefs The list of application protocol references valid for the datalink template.
	AppProtocolRefs *DriverAppProtocolRefsSchema `json:"appProtocolRefs,omitempty"`

	// LinkProtocol The link protocol.
	LinkProtocol *string `json:"linkProtocol,omitempty"`
}

// DriverDatalinkTemplateSchemas The list of datalink templates valid for the communication template.
type DriverDatalinkTemplateSchemas = []DriverDatalinkTemplateSchema

// DriverSchema Schema that describes communication driver details.
type DriverSchema struct {
	// Spec Schema containing communication driver spec.
	Spec *DriverSpecSchema `json:"spec,omitempty"`
}

// DriverSpecSchema Schema containing communication driver spec.
type DriverSpecSchema struct {
	// DriverType The driver type identifier.
	DriverType string `json:"driverType"`

	// Version The version of the driver.
	Version string `json:"version"`
}

// GenericObject defines model for GenericObject.
type GenericObject = interface{}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/+QgqZp0GAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../openhes/driver/driverdata/driverdata.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "../job/job.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
