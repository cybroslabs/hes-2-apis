// Package driver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package driver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/cybroslabs/hes-2-apis/openapi/openhes/driver/driverdata"
	externalRef1 "github.com/cybroslabs/hes-2-apis/openapi/openhes/job"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for AttributeDefinitionSchemaType.
const (
	BINARY      AttributeDefinitionSchemaType = "BINARY"
	BOOLEAN     AttributeDefinitionSchemaType = "BOOLEAN"
	INTEGER     AttributeDefinitionSchemaType = "INTEGER"
	NUMBER      AttributeDefinitionSchemaType = "NUMBER"
	STRING      AttributeDefinitionSchemaType = "STRING"
	TIMESTAMP   AttributeDefinitionSchemaType = "TIMESTAMP"
	TIMESTAMPTZ AttributeDefinitionSchemaType = "TIMESTAMPTZ"
)

// AttributeDefinitionSchema Schema that describes a driver attribute.
type AttributeDefinitionSchema struct {
	DefaultValue *GenericObject `json:"defaultValue,omitempty"`

	// Description The description of the attribute.
	Description *string `json:"description,omitempty"`

	// Mandatory Indicates whether the attribute is mandatory or not.
	Mandatory *bool `json:"mandatory,omitempty"`

	// Name The name of the attribute.
	Name *string `json:"name,omitempty"`

	// Type The type of the attribute.
	//   * `STRING` - The attribute is a string.
	//   * `INTEGER` - The attribute is an integer.
	//   * `NUMBER` - The attribute is a decimal number.
	//   * `BOOLEAN` - The attribute is a boolean.
	//   * `BINARY` - The attribute is a binary.
	//   * `TIMESTAMP` - The attribute is a timestamp; it shal not timezone-aware and it's always encoded as a UNIX timestamp number (~UTC).
	//   * `TIMESTAMPTZ` - The attribute is a timestamp; it is timezone-aware and it's always encoded as an ISO 8601 string.
	Type *AttributeDefinitionSchemaType `json:"type,omitempty"`
}

// AttributeDefinitionSchemaType The type of the attribute.
//   - `STRING` - The attribute is a string.
//   - `INTEGER` - The attribute is an integer.
//   - `NUMBER` - The attribute is a decimal number.
//   - `BOOLEAN` - The attribute is a boolean.
//   - `BINARY` - The attribute is a binary.
//   - `TIMESTAMP` - The attribute is a timestamp; it shal not timezone-aware and it's always encoded as a UNIX timestamp number (~UTC).
//   - `TIMESTAMPTZ` - The attribute is a timestamp; it is timezone-aware and it's always encoded as an ISO 8601 string.
type AttributeDefinitionSchemaType string

// DriverActionAttributeSchema Schema that describes driver action attributes.
type DriverActionAttributeSchema struct {
	// Attributes Schema that describes a list of attributes supported by a driver.
	Attributes *DriverAttributesSchema `json:"attributes,omitempty"`

	// Type The type of action.
	//   * `GET_REGISTER` - The action is to get a billing value, for example, instantaneous values.
	//   * `GET_PERIODICAL_PROFILE` - The action is to get a periodical profile, for example, load-profile.
	//   * `GET_IRREGULAR_PROFILE` - The action is to get a non-periodical profile, for, daily profile or monthly billing registers.
	//   * `GET_EVENTS` - The action is to get an event log.
	//   * `GET_CLOCK` - The action is to get the clock.
	//   * `SYNC_CLOCK` - The action is to synchronize the clock. The action synchronizes the clock in the device. If the force attribute is set, it forcefully sets the clock.
	//   * `GET_RELAY_STATE` - The action is to get the relay state.
	//   * `SET_RELAY_STATE` - The action is to set the relay state.
	//   * `GET_DISCONNECTOR_STATE` - The action is to get the disconnector state.
	//   * `SET_DISCONNECTOR_STATE` - The action is to set the disconnector state.
	//   * `GET_TOU` - The action is to get the time-of-use table.
	//   * `SET_TOU` - The action is to set the time-of-use table.
	//   * `GET_LIMITER` - The action is to get the limiter settings.
	//   * `SET_LIMITER` - The action is to set the limiter settings.
	//   * `RESET_BILLING_PERIOD` - The action is to reset the billing period.
	//   * `FW_UPDATE` - The action is to start a firmware update.
	Type *externalRef1.ActionTypeSchema `json:"type,omitempty"`
}

// DriverAppProtocolRefsSchema The list of application protocol references valid for the datalink template.
type DriverAppProtocolRefsSchema = []string

// DriverAppProtocolSchema Schema that describes the application protocol.
type DriverAppProtocolSchema struct {
	// Attributes Schema that describes a list of attributes supported by a driver.
	Attributes *DriverAttributesSchema `json:"attributes,omitempty"`

	// Protocol The application protocol.
	Protocol *string `json:"protocol,omitempty"`
}

// DriverAppProtocolsSchema The list of application protocols valid for the datalink template.
type DriverAppProtocolsSchema = []DriverAppProtocolSchema

// DriverAttributesSchema Schema that describes a list of attributes supported by a driver.
type DriverAttributesSchema = []AttributeDefinitionSchema

// DriverCommunicationTemplateSchema Schema that describes the communication template.
type DriverCommunicationTemplateSchema struct {
	// AppProtocolTemplates The list of application protocols valid for the datalink template.
	AppProtocolTemplates *DriverAppProtocolsSchema `json:"appProtocolTemplates,omitempty"`

	// DatalinkTemplates The list of datalink templates valid for the communication template.
	DatalinkTemplates *DriverDatalinkTemplateSchemas `json:"datalinkTemplates,omitempty"`

	// Type The type of the communication template.
	Type *string `json:"type,omitempty"`
}

// DriverDatalinkTemplateSchema Schema that describes the datalink template.
type DriverDatalinkTemplateSchema struct {
	// AppProtocolRefs The list of application protocol references valid for the datalink template.
	AppProtocolRefs *DriverAppProtocolRefsSchema `json:"appProtocolRefs,omitempty"`

	// Attributes Schema that describes a list of attributes supported by a driver.
	Attributes *DriverAttributesSchema `json:"attributes,omitempty"`

	// LinkProtocol The link protocol.
	LinkProtocol *string `json:"linkProtocol,omitempty"`
}

// DriverDatalinkTemplateSchemas The list of datalink templates valid for the communication template.
type DriverDatalinkTemplateSchemas = []DriverDatalinkTemplateSchema

// DriverSchema Schema that describes communication driver details.
type DriverSchema struct {
	// Spec Schema containing communication driver spec.
	Spec *DriverSpecSchema `json:"spec,omitempty"`
}

// DriverSpecSchema Schema containing communication driver spec.
type DriverSpecSchema struct {
	// DriverType The driver type identifier.
	DriverType string `json:"driverType"`

	// Version The version of the driver.
	Version string `json:"version"`
}

// GenericObject defines model for GenericObject.
type GenericObject = interface{}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/oneKTziCWMv/w8AAP//8XRVcMoYAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../openhes/driver/driverdata/driverdata.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "../job/job.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
