// Package driver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package driver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/cybroslabs/hes-2-apis/openapi/k8s/containers"
	externalRef1 "github.com/cybroslabs/hes-2-apis/openapi/openhes/driver/driverdata"
	externalRef2 "github.com/cybroslabs/hes-2-apis/openapi/openhes/job"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for AttributeDefinitionSchemaType.
const (
	BINARY  AttributeDefinitionSchemaType = "BINARY"
	BOOLEAN AttributeDefinitionSchemaType = "BOOLEAN"
	INTEGER AttributeDefinitionSchemaType = "INTEGER"
	NUMBER  AttributeDefinitionSchemaType = "NUMBER"
	STRING  AttributeDefinitionSchemaType = "STRING"
)

// AttributeDefinitionSchema Schema that describes a driver attribute.
type AttributeDefinitionSchema struct {
	DefaultValue *GenericObject `json:"defaultValue,omitempty"`

	// Description The description of the attribute.
	Description *string `json:"description,omitempty"`

	// Mandatory Indicates whether the attribute is mandatory or not.
	Mandatory *bool `json:"mandatory,omitempty"`

	// Name The name of the attribute.
	Name *string `json:"name,omitempty"`

	// Type The type of the attribute.
	//   * `STRING` - The attribute is a string.
	//   * `INTEGER` - The attribute is an integer.
	//   * `NUMBER` - The attribute is a decimal number.
	//   * `BOOLEAN` - The attribute is a boolean.
	//   * `BINARY` - The attribute is a binary.
	Type *AttributeDefinitionSchemaType `json:"type,omitempty"`
}

// AttributeDefinitionSchemaType The type of the attribute.
//   - `STRING` - The attribute is a string.
//   - `INTEGER` - The attribute is an integer.
//   - `NUMBER` - The attribute is a decimal number.
//   - `BOOLEAN` - The attribute is a boolean.
//   - `BINARY` - The attribute is a binary.
type AttributeDefinitionSchemaType string

// DriverActionAttributeSchema Schema that describes driver action attributes.
type DriverActionAttributeSchema struct {
	// Attributes Schema that describes a list of attributes supported by a driver.
	Attributes *DriverAttributesSchema `json:"attributes,omitempty"`

	// Type The type of action.
	//   * `GET_REGISTER` - The action is to get a billing value, for example, instantaneous values.
	//   * `GET_PERIODICAL_PROFILE` - The action is to get a periodical profile, for example, load-profile.
	//   * `GET_IRREGULAR_PROFILE` - The action is to get a non-periodical profile, for, daily profile or monthly billing registers.
	//   * `GET_EVENTS` - The action is to get an event log.
	//   * `GET_CLOCK` - The action is to get the clock.
	//   * `SYNC_CLOCK` - The action is to synchronize the clock. The action synchronizes the clock in the device. If the force attribute is set, it forcefully sets the clock.
	//   * `GET_RELAY_STATE` - The action is to get the relay state.
	//   * `SET_RELAY_STATE` - The action is to set the relay state.
	//   * `GET_DISCONNECTOR_STATE` - The action is to get the disconnector state.
	//   * `SET_DISCONNECTOR_STATE` - The action is to set the disconnector state.
	//   * `GET_TOU` - The action is to get the time-of-use table.
	//   * `SET_TOU` - The action is to set the time-of-use table.
	//   * `GET_LIMITER` - The action is to get the limiter settings.
	//   * `SET_LIMITER` - The action is to set the limiter settings.
	//   * `RESET_BILLING_PERIOD` - The action is to reset the billing period.
	//   * `FW_UPDATE` - The action is to start a firmware update.
	Type *externalRef2.ActionTypeSchema `json:"type,omitempty"`
}

// DriverAttributesSchema Schema that describes a list of attributes supported by a driver.
type DriverAttributesSchema = []AttributeDefinitionSchema

// DriverDetailsSchema defines model for DriverDetailsSchema.
type DriverDetailsSchema struct {
	// Spec Schema that registers new or updates already registered communication drivers.
	Spec *DriverSpecSchema `json:"spec,omitempty"`

	// Status Schema that describes the status of a driver.
	Status *DriverStatusSchema `json:"status,omitempty"`
}

// DriverSchema Schema that describes communication driver details.
type DriverSchema struct {
	// Spec Schema that registers new or updates already registered communication drivers.
	Spec *DriverSpecSchema `json:"spec,omitempty"`
}

// DriverSpecSchema Schema that registers new or updates already registered communication drivers.
type DriverSpecSchema struct {
	Image string `json:"image"`

	// ImagePullSecrets Schema that describes the image pull secrets for the driver.
	ImagePullSecrets *ImagePullSecretsSchema `json:"imagePullSecrets,omitempty"`

	// Resources Resource values for a container.
	Resources externalRef0.ContainerResourcesSetSchema `json:"resources"`
}

// DriverStatusSchema Schema that describes the status of a driver.
type DriverStatusSchema struct {
	DriverType string `json:"driverType"`
}

// GenericObject defines model for GenericObject.
type GenericObject = interface{}

// ImagePullSecretsSchema Schema that describes the image pull secrets for the driver.
type ImagePullSecretsSchema = []string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"xRPGHv8fAAD//4ZA/O1bHgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../k8s/containers/containers.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../openhes/driver/driverdata/driverdata.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(path.Dir(pathToFile), "../job/job.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
