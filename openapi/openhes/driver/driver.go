// Package driver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package driver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/cybroslabs/hes-2-apis/openapi/k8s/containers"
	externalRef1 "github.com/cybroslabs/hes-2-apis/openapi/openhes/driver/driverdata"
	externalRef2 "github.com/cybroslabs/hes-2-apis/openapi/openhes/job"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for AttributeDefinitionSchemaType.
const (
	BINARY  AttributeDefinitionSchemaType = "BINARY"
	BOOLEAN AttributeDefinitionSchemaType = "BOOLEAN"
	INTEGER AttributeDefinitionSchemaType = "INTEGER"
	NUMBER  AttributeDefinitionSchemaType = "NUMBER"
	STRING  AttributeDefinitionSchemaType = "STRING"
)

// AttributeDefinitionSchema Schema that holds the specification of the driver attribute.
type AttributeDefinitionSchema struct {
	DefaultValue *GenericObject `json:"defaultValue,omitempty"`

	// Description The description of the attribute.
	Description *string `json:"description,omitempty"`

	// Mandatory Indicates whether the attribute is mandatory or not.
	Mandatory *bool `json:"mandatory,omitempty"`

	// Name The name of the attribute.
	Name *string `json:"name,omitempty"`

	// Type The type of the attribute.
	//   * `STRING` - The attribute is a string.
	//   * `INTEGER` - The attribute is an integer.
	//   * `NUMBER` - The attribute is a decimal number.
	//   * `BOOLEAN` - The attribute is a boolean.
	//   * `BINARY` - The attribute is a binary.
	Type *AttributeDefinitionSchemaType `json:"type,omitempty"`
}

// AttributeDefinitionSchemaType The type of the attribute.
//   - `STRING` - The attribute is a string.
//   - `INTEGER` - The attribute is an integer.
//   - `NUMBER` - The attribute is a decimal number.
//   - `BOOLEAN` - The attribute is a boolean.
//   - `BINARY` - The attribute is a binary.
type AttributeDefinitionSchemaType string

// DriverActionAttributeSchema Schema that holds the specification of the driver action attribute.
type DriverActionAttributeSchema struct {
	// Attributes The list of attributes supported by the driver.
	Attributes *DriverAttributesSchema `json:"attributes,omitempty"`

	// Type The type of action.
	//   * `GET_REGISTER` - The action is to get billing value, for example instantaneous values.
	//   * `GET_PERIODICAL_PROFILE` - The action is to get periodical profile, for example load-profile.
	//   * `GET_IRREGULAR_PROFILE` - The action is to get non-periodical profile, for example daily profile or monthly billing registers.
	//   * `GET_EVENTS` - The action is to get event log.
	//   * `GET_CLOCK` - The action is to get the clock.
	//   * `SYNC_CLOCK` - The action is to synchronize the clock. The action synchronizes the clock in the device, it can forcefully set it if force attribute is set.
	//   * `GET_RELAY_STATE` - The action is to get the relay state.
	//   * `SET_RELAY_STATE` - The action is to set the relay state.
	//   * `GET_DISCONNECTOR_STATE` - The action is to get the disconnector state.
	//   * `SET_DISCONNECTOR_STATE` - The action is to set the disconnector state.
	//   * `GET_TOU` - The action is to get the time-of-use table.
	//   * `SET_TOU` - The action is to set the time-of-use table.
	//   * `GET_LIMITER` - The action is to get the limiter settings.
	//   * `SET_LIMITER` - The action is to set the limiter settings.
	//   * `RESET_BILLING_PERIOD` - The action is to reset billing period.
	//   * `FW_UPDATE` - The action is to start firmware update.
	Type *externalRef2.ActionTypeSchema `json:"type,omitempty"`
}

// DriverAttributesSchema The list of attributes supported by the driver.
type DriverAttributesSchema = []AttributeDefinitionSchema

// DriverDetailsSchema Schema that holds the communication driver details.
type DriverDetailsSchema = DriverSchema

// DriverSchema Schema that holds the communication driver details.
type DriverSchema struct {
	// Spec Schema that registers new or updates already registered communication drivers.
	Spec *DriverSpecSchema `json:"spec,omitempty"`
}

// DriverSpecSchema Schema that registers new or updates already registered communication drivers.
type DriverSpecSchema struct {
	DriverType string `json:"driverType"`
	Image      string `json:"image"`

	// Resources Resource values for a container.
	Resources externalRef0.ContainerResourcesSetSchema `json:"resources"`
}

// GenericObject defines model for GenericObject.
type GenericObject = interface{}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../k8s/containers/containers.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "../../openhes/driver/driverdata/driverdata.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "../job/job.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
