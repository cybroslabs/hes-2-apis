// Package driver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package driver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/cybroslabs/hes-2-apis/openapi/k8s/containers"
	externalRef1 "github.com/cybroslabs/hes-2-apis/openapi/openhes/driver/driverdata"
	externalRef2 "github.com/cybroslabs/hes-2-apis/openapi/openhes/job"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for AttributeDefinitionSchemaType.
const (
	BINARY  AttributeDefinitionSchemaType = "BINARY"
	BOOLEAN AttributeDefinitionSchemaType = "BOOLEAN"
	INTEGER AttributeDefinitionSchemaType = "INTEGER"
	NUMBER  AttributeDefinitionSchemaType = "NUMBER"
	STRING  AttributeDefinitionSchemaType = "STRING"
)

// AttributeDefinitionSchema Schema that describes a driver attribute.
type AttributeDefinitionSchema struct {
	DefaultValue *GenericObject `json:"defaultValue,omitempty"`

	// Description The description of the attribute.
	Description *string `json:"description,omitempty"`

	// Mandatory Indicates whether the attribute is mandatory or not.
	Mandatory *bool `json:"mandatory,omitempty"`

	// Name The name of the attribute.
	Name *string `json:"name,omitempty"`

	// Type The type of the attribute.
	//   * `STRING` - The attribute is a string.
	//   * `INTEGER` - The attribute is an integer.
	//   * `NUMBER` - The attribute is a decimal number.
	//   * `BOOLEAN` - The attribute is a boolean.
	//   * `BINARY` - The attribute is a binary.
	Type *AttributeDefinitionSchemaType `json:"type,omitempty"`
}

// AttributeDefinitionSchemaType The type of the attribute.
//   - `STRING` - The attribute is a string.
//   - `INTEGER` - The attribute is an integer.
//   - `NUMBER` - The attribute is a decimal number.
//   - `BOOLEAN` - The attribute is a boolean.
//   - `BINARY` - The attribute is a binary.
type AttributeDefinitionSchemaType string

// DriverActionAttributeSchema Schema that describes driver action attributes.
type DriverActionAttributeSchema struct {
	// Attributes Schema that describes a list of attributes supported by a driver.
	Attributes *DriverAttributesSchema `json:"attributes,omitempty"`

	// Type The type of action.
	//   * `GET_REGISTER` - The action is to get a billing value, for example, instantaneous values.
	//   * `GET_PERIODICAL_PROFILE` - The action is to get a periodical profile, for example, load-profile.
	//   * `GET_IRREGULAR_PROFILE` - The action is to get a non-periodical profile, for, daily profile or monthly billing registers.
	//   * `GET_EVENTS` - The action is to get an event log.
	//   * `GET_CLOCK` - The action is to get the clock.
	//   * `SYNC_CLOCK` - The action is to synchronize the clock. The action synchronizes the clock in the device. If the force attribute is set, it forcefully sets the clock.
	//   * `GET_RELAY_STATE` - The action is to get the relay state.
	//   * `SET_RELAY_STATE` - The action is to set the relay state.
	//   * `GET_DISCONNECTOR_STATE` - The action is to get the disconnector state.
	//   * `SET_DISCONNECTOR_STATE` - The action is to set the disconnector state.
	//   * `GET_TOU` - The action is to get the time-of-use table.
	//   * `SET_TOU` - The action is to set the time-of-use table.
	//   * `GET_LIMITER` - The action is to get the limiter settings.
	//   * `SET_LIMITER` - The action is to set the limiter settings.
	//   * `RESET_BILLING_PERIOD` - The action is to reset the billing period.
	//   * `FW_UPDATE` - The action is to start a firmware update.
	Type *externalRef2.ActionTypeSchema `json:"type,omitempty"`
}

// DriverAttributesSchema Schema that describes a list of attributes supported by a driver.
type DriverAttributesSchema = []AttributeDefinitionSchema

// DriverDetailsSchema Schema that describes communication driver details.
type DriverDetailsSchema = DriverSchema

// DriverSchema Schema that describes communication driver details.
type DriverSchema struct {
	// Spec Schema that registers new or updates already registered communication drivers.
	Spec *DriverSpecSchema `json:"spec,omitempty"`
}

// DriverSpecSchema Schema that registers new or updates already registered communication drivers.
type DriverSpecSchema struct {
	DriverType string `json:"driverType"`
	Image      string `json:"image"`

	// Resources Resource values for a container.
	Resources externalRef0.ContainerResourcesSetSchema `json:"resources"`
}

// GenericObject defines model for GenericObject.
type GenericObject = interface{}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../../k8s/containers/containers.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "../../openhes/driver/driverdata/driverdata.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "../job/job.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
