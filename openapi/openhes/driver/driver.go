// Package driver provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package driver

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/cybroslabs/hes-2-apis/openapi/k8s/containers"
	externalRef1 "github.com/cybroslabs/hes-2-apis/openapi/openhes/driver/driverdata"
	externalRef2 "github.com/cybroslabs/hes-2-apis/openapi/openhes/job"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for AttributeDefinitionSchemaType.
const (
	BINARY  AttributeDefinitionSchemaType = "BINARY"
	BOOLEAN AttributeDefinitionSchemaType = "BOOLEAN"
	INTEGER AttributeDefinitionSchemaType = "INTEGER"
	NUMBER  AttributeDefinitionSchemaType = "NUMBER"
	STRING  AttributeDefinitionSchemaType = "STRING"
)

// AttributeDefinitionSchema Schema that describes a driver attribute.
type AttributeDefinitionSchema struct {
	DefaultValue *GenericObject `json:"defaultValue,omitempty"`

	// Description The description of the attribute.
	Description *string `json:"description,omitempty"`

	// Mandatory Indicates whether the attribute is mandatory or not.
	Mandatory *bool `json:"mandatory,omitempty"`

	// Name The name of the attribute.
	Name *string `json:"name,omitempty"`

	// Type The type of the attribute.
	//   * `STRING` - The attribute is a string.
	//   * `INTEGER` - The attribute is an integer.
	//   * `NUMBER` - The attribute is a decimal number.
	//   * `BOOLEAN` - The attribute is a boolean.
	//   * `BINARY` - The attribute is a binary.
	Type *AttributeDefinitionSchemaType `json:"type,omitempty"`
}

// AttributeDefinitionSchemaType The type of the attribute.
//   - `STRING` - The attribute is a string.
//   - `INTEGER` - The attribute is an integer.
//   - `NUMBER` - The attribute is a decimal number.
//   - `BOOLEAN` - The attribute is a boolean.
//   - `BINARY` - The attribute is a binary.
type AttributeDefinitionSchemaType string

// DriverActionAttributeSchema Schema that describes driver action attributes.
type DriverActionAttributeSchema struct {
	// Attributes Schema that describes a list of attributes supported by a driver.
	Attributes *DriverAttributesSchema `json:"attributes,omitempty"`

	// Type The type of action.
	//   * `GET_REGISTER` - The action is to get a billing value, for example, instantaneous values.
	//   * `GET_PERIODICAL_PROFILE` - The action is to get a periodical profile, for example, load-profile.
	//   * `GET_IRREGULAR_PROFILE` - The action is to get a non-periodical profile, for, daily profile or monthly billing registers.
	//   * `GET_EVENTS` - The action is to get an event log.
	//   * `GET_CLOCK` - The action is to get the clock.
	//   * `SYNC_CLOCK` - The action is to synchronize the clock. The action synchronizes the clock in the device. If the force attribute is set, it forcefully sets the clock.
	//   * `GET_RELAY_STATE` - The action is to get the relay state.
	//   * `SET_RELAY_STATE` - The action is to set the relay state.
	//   * `GET_DISCONNECTOR_STATE` - The action is to get the disconnector state.
	//   * `SET_DISCONNECTOR_STATE` - The action is to set the disconnector state.
	//   * `GET_TOU` - The action is to get the time-of-use table.
	//   * `SET_TOU` - The action is to set the time-of-use table.
	//   * `GET_LIMITER` - The action is to get the limiter settings.
	//   * `SET_LIMITER` - The action is to set the limiter settings.
	//   * `RESET_BILLING_PERIOD` - The action is to reset the billing period.
	//   * `FW_UPDATE` - The action is to start a firmware update.
	Type *externalRef2.ActionTypeSchema `json:"type,omitempty"`
}

// DriverAttributesSchema Schema that describes a list of attributes supported by a driver.
type DriverAttributesSchema = []AttributeDefinitionSchema

// DriverDetailsSchema defines model for DriverDetailsSchema.
type DriverDetailsSchema struct {
	// Spec Schema that registers new or updates already registered communication drivers.
	Spec *DriverSpecSchema `json:"spec,omitempty"`

	// Status Schema that describes the status of a driver.
	Status *DriverStatusSchema `json:"status,omitempty"`
}

// DriverImagePullSecretsSchema Schema that describes the image pull secrets for a driver. If dockerconfigjson is not provided, the secret must already exist in the cluster.
type DriverImagePullSecretsSchema struct {
	// Dockerconfigjson The base64 encoded docker config json for the image pull secret.
	Dockerconfigjson *string `json:"dockerconfigjson,omitempty"`

	// Name The name of the image pull secret.
	Name string `json:"name"`
}

// DriverSchema Schema that describes communication driver details.
type DriverSchema struct {
	// Spec Schema that registers new or updates already registered communication drivers.
	Spec *DriverSpecSchema `json:"spec,omitempty"`
}

// DriverSpecSchema Schema that registers new or updates already registered communication drivers.
type DriverSpecSchema struct {
	Image string `json:"image"`

	// ImagePullSecrets Schema that describes the image pull secrets for a driver. If dockerconfigjson is not provided, the secret must already exist in the cluster.
	ImagePullSecrets *DriverImagePullSecretsSchema `json:"imagePullSecrets,omitempty"`

	// Resources Resource values for a container.
	Resources externalRef0.ContainerResourcesSetSchema `json:"resources"`
}

// DriverStatusSchema Schema that describes the status of a driver.
type DriverStatusSchema struct {
	DriverType string `json:"driverType"`
}

// GenericObject defines model for GenericObject.
type GenericObject = interface{}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Hv8bAAD//8ZxKShXIAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../k8s/containers/containers.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../openhes/driver/driverdata/driverdata.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(path.Dir(pathToFile), "../job/job.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
