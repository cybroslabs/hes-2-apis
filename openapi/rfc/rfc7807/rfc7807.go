// Package rfc7807 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package rfc7807

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// ProblemDetailsSchema Schema that describes errors in HTTP responses. See https://datatracker.ietf.org/doc/html/rfc7807 for more information.
type ProblemDetailsSchema struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance string `json:"instance"`

	// Status The HTTP status code generated by the origin server for this occurrence of the problem.
	Status int `json:"status"`

	// Title A human-readable summary of the problem type.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type.
	Type string `json:"type"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5yVS0/kRhCA/0qpz37MClYb+RSyURSklYKAHKLNHtrt8rgTu6tTVR5Aq/nvUbtnBgYG",
	"BXKzul5fPf3dOJoiBQwqpvluxA042eXziqkdcfoZ1fpRbhZBeu9QHPuonoJpTH4HHaxClrQogMzEAj7A",
	"r7e3V8AokYKgVHCDCINqlKauO6tW2bq/kSuP2lfE67ojVw86jTX37tMPq0/QE8NEjOBDTzzZFLj6M5jC",
	"4L2d4ohimq8JK3GaxtwOCIz/zCiKXQpNMzuEOysQSKGnOXSVKYwPojY4NI2pbfT15kMdqZO6JzKFEbU6",
	"i2nOV+eFUa9j0rveOzs4MoXRh5hk+6R2UJWjqY5MrdSBtMzK2+IZpw9xVohMG99hBz6VbGNH/y7A1SPg",
	"ZbbOft/CtgtXZoMjvosAPihysCMI8gY5txXIuZkZ38H48ZjxhNO3sWbDMhuW2XD7rTCRKSKrR8kDmjN4",
	"PqoXMMyTDSWj7Ww7IuB9HG1YBgokovO9d6AEOnjZZxkcAvWgA6Y2pYWoHifPNOYPmhmypkJrx1SM1Mez",
	"VQHtrHkxHIkKfFxVj2mKsg9rs31awpfAv19fAmOPmWPx5TsM6nuPskAduN/Ie6JLL4j2bXvOkyZ22ees",
	"AI46hDUGZJtWrX1YwhL7tQ/77qbtfUc9z1dnB6DU7zVyItrNzn92VOZpsvzwLAIkh8dl+G3WpOQYO6+n",
	"apAf/k9HXg/6+mjTrCX15Ws428Kki+YZO9N8zdJ9UQ7tKvaD/2Skvh1cUfsXOjXb7TJxPaXcHAW1TtMn",
	"Tnnpk+hH99AyyWhbSYimMMFOycfn5R2+2FZA0SbJzOOTxO7u7qpj49qHDu9LDFW66amwxwW9/uVzuVz5",
	"i6tLmKjDMSUyeodBlvrvQv9086X8UK1eRKSIId/k5eexM5R6r799crxPhtogS0ZZVTuD5NNGbxpzVuWY",
	"0eogpgnzOG7/DQAA///b5DMYMgcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
