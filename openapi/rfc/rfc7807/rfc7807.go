// Package rfc7807 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package rfc7807

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// ProblemDetailsSchema Schema that carries the details of an error in an HTTP response. See https://datatracker.ietf.org/doc/html/rfc7807 for more information.
type ProblemDetailsSchema struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance string `json:"instance"`

	// Status The HTTP status code generated by the origin server for this occurrence of the problem.
	Status int `json:"status"`

	// Title A human-readable summary of the problem type.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type.
	Type string `json:"type"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5yVzW7kNgzHX4XQ2R+zSBZb+NR0i6IBFmiQpIdiuwdZpsdqZVGl6EmCxbx7IcueZJIJ",
	"mvRmSPz4kfxT/q4MjYE8eomq+a6iGXDU8+cVU+tw/BlFWxdv5ot03mE0bINY8qpR+Rxk0AJGM1uMIANC",
	"l92AetAekJkYrE/fv97eXgFjDOQjVnCDCINIiE1dd1q0sDZ/I1cWpa+It3VHph5kdDX35tMPm0/QE8NI",
	"jGB9TzzqRFL96VWh8F6PwWFUzdfEmQhUo24HBMZ/JoyCXcpMExuEOx3Bk0BPk+8qVSjro2hvUDWq1sHW",
	"uw91oC7WPZEqVBQtU1TN+ea8UGLFJbvrNdghkCqUPIR0txa1QFWGxjowtbH2JGU23hfPOK0Pk0Bg2tkO",
	"O7ARrN9pZ98FuHkEvMzeOe5b2JZ0ZXY44rvwYL0ge+0gIu+Ql7mSMRMzvoPx4zHjiaBvY82OZXYss+P+",
	"W6ECU0AWizErNlfwXLsXMEyj9iWj7nTrEPA+OO1nQUEMaGxvDQiBDDauVXqDSdRJ4yFvSPWoPNWoP2hi",
	"yJYCrXapGWmOZ5sC2kmWTaEoET5uqscyo7D1W7V/2sKXwL9fXwJjj5ljjmU79GL7dfEO3G/kPTGlF0Tr",
	"2J7zJMXO65wNwFCHsEWPrNOqtQ9zWmK7tX6dbtred/TzfHN2AErz3iInokU7/znROI2j5odnGSAFPG7D",
	"b5MkI8PYWTnVg3zwfybyetLXpU2TlNSXr+HsC5VeNMvYqeZrvl2bchhXsQr/iaS+HUJR+xcaUfv9rLie",
	"Um2GvGgj6RPHvPTp6kfz0DJFp9uYEFWhvB5TjM/zOXzRbQRBnW4mdk8Ku7u7q46da+s7vC/RV+lNT409",
	"buj1L5/L+ZW/uLqEkTp0qRBnDfo4939J/dPNl/JDtXmRkQL6/CbPP4/FMdar/f7J430y1Q45ZpRNtTik",
	"mDpY1aizKucMWoaoGj85t/83AAD//0908yNDBwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
